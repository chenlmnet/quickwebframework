// new
// Create namespace (PULSE)
Ext.namespace('PULSE');
// Create namespace (Pulse)
Ext.namespace('Pulse');
// Create namespace (DBG)
Ext.namespace('DBG');
/**
 * 
 */

var DBG = {
	
	type: 'DBG',
	
	Pulse: {
		THROW: false,
		Execute: false,
		Throw: false,
		
		// Pulse.loadPanelCallBack
		loadPanelCallBack: {
			In: false,
			Out: false,
			IgnoreError: false
		},
		
		// Pulse.loadPanelCallBackDisablePanel
		loadPanelCallBackDisablePanel: {
			In: false,
			Out: false,
			IgnoreError: false
		},
		
		initTextFieldMonitor: false,
		initTextAreaMonitor: false,
		initCheckBoxMonitor: false,
		initDropDownBoxMonitor: false,
		
		insertHasChangesIcon: false,
		
		getWestToolbar: { refresh: false, cfg: false },
		getWestMinimizeTool: { 
			handlerTool: false,  handlerBtnInitialConfig: false, handlerPassedConfig: false,
			handlerPassedConfigExpand: false, handlerPassedConfigExpandDeferred: true 
		},
		getFlagCls: true,
		
		// error-related
		debug: false,
		getRootCause: false,
		dbgError: false,
		isError: false,
		
		// tests from PULSE.test.js;
		__errorArgsTests: false,
		__errorBasicTests: false,
		__errorDeepTests: false,
		__errorHandleTests: false,
		__errorHandleTestsTwo: false
	},
	
	/**
	 * 
	 */
	apply: function(superObj, obj, boolCloneSuperObj) {
		if (false === boolCloneSuperObj) {
			if (typeof(obj) == 'object' && typeof(obj.push) == 'function') {
				return this._applyArray(superObj, obj);
			}
			return this._apply(superObj, obj);
		} else {
			var o = this.apply({},superObj,false);
			if (typeof(obj) == 'object' && typeof(obj.push) == 'function') {
				return this._applyArray(o, obj);
			}
			return this._apply(o, obj);
		}
	},
	
	/**
	 * 
	 */
	_apply: function (superObj, obj) {
		for (var i in obj) {
			if (typeof(obj[i]) == 'boolean') {
				superObj[i] = obj[i];
				continue;
			}
			if (typeof(obj[i]) == 'object' && typeof(superObj[i]) == 'object') {
				superObj[i] = this._apply(superObj[i],obj[i]);
				continue;
			} else if (typeof(obj[i]) == 'object') {
				superObj[i] = obj[i];
				continue;
			}
		}
		return superObj;
	},
	
	/**
	 * 
	 */
	applyArray: function(superObj, arr, boolCloneSuperObj) {
		if (false === boolCloneSuperObj) {
			return this._applyArray(superObj, obj);
		} else {
			var o = this.apply({},superObj,false);
			return this._applyArray(o, obj);
		}
	},
	
	/**
	 * 
	 */
	_applyArray: function(superObj, arr) {
		for (var i = 0; i < arr.length; i++) {
			if (typeof(arr[i]) == 'string' && arr[i] !== '') {
				
				switch(arr[i].split('.').length) {
					
					case 1:
						superObj[arr[i].split('.')[0]] = true;
						break;
						
					case 2:
						superObj[arr[i].split('.')[0]][arr[i].split('.')[1]] = true;
						break;
						
					case 3:
						superObj[arr[i].split('.')[0]][arr[i].split('.')[1]][arr[i].split('.')[2]] = true;
						break;
						
					case 4:
						superObj[arr[i].split('.')[0]][arr[i].split('.')[1]][arr[i].split('.')[2]][arr[i].split('.')[3]] = true;
						break;
						
					case 5:
						superObj[arr[i].split('.')[0]][arr[i].split('.')[1]][arr[i].split('.')[2]][arr[i].split('.')[3]][arr[i].split('.')[4]] = true;
						break;
						
					default:
						FATAL(arr[i] + ' EXCEEDS MAX-DEPTH: 5',this,'_applyArray');
						break;
					
				}
				
			}
		}
		return superObj;
	},

	/**
	 * 
	 */
	get: function(pObj, obj) {
		var o = DBG[pObj.type];
		if (typeof(o) == 'undefined') {
			return this.buildDBG({},obj);
		}
		return this.buildDBG(o, obj);
	},
	
	/**
	 * 
	 */
	buildDBG: function (pDBG, obj) {
		if (typeof(obj) == 'boolean') {
			return obj;
		}
		if (typeof(obj) == 'object') {
			if (typeof(obj.push) == 'function') {
				return this.applyArray(pObj, obj, false);
			} else {
				return this.apply(pObj, obj, false);
			}
		}
		return false;
	},
	
	/**
	 * 
	 */
	getPropertyArray: function(obj, boolFlat, prop) {
		
		
		
		try {
			if (typeof(prop) != 'string') {
				prop = '';
			} else {
				prop += '.';
			}
			arr = [];
			for (var i in obj) {
				if (typeof(obj[i]) == 'object' && typeof(obj[i].push) != 'function' 
					&& false === boolFlat) {
	//				if (false === boolFlat) {
						arr = arr.concat(this.getPropertyArray(obj[i], boolFlat, ''+i));
	//				} else {
	//					arr.push(prop + i);
	//				}
				} else {
					arr.push(prop + i);
				}
			}
			return arr;
		} catch (e) {
			FATAL(e,this,'getPropertyArray');
		}
	}
};
var Pulse = {
	
	props: {
		id: null
	},
	
	LOC: {},
	
	type: 'Pulse',
			
	DBG: DBG.Pulse,
	
	fieldCls: 'editorInputField',
	disabledFieldCls: 'editorInputFieldDisabled',
	
	/**
	 * calls:
	 * 
	 * 		Ext.getCmp(config.id)[config.editor][config.fn](config.params);
	 * 
	 * on given config.
	 * 
	 * @param {String} config.id 
	 * 		the id of the Ext.Component that nests editor
	 * 
	 * @param {String} config.editor 
	 * 		the name of the field the editor is nested
	 * 		within the Ext.Component 
	 * 
	 * @param {String} config.fn
	 * 		the name of the function to call within the editor
	 * 
	 * @param {Object} config.params
	 * 		parameters that will be passed to the called function
	 */
	Execute: function(config) {
		
		// DBG
		THROW({args:arguments,
			p:[
				{n:'id',o:''+config.id},
				{n:'editor',o:''+config.editor},
				{n:'fn',o:''+config.fn},
				{n:'params',o:''+config.params},
				{n:'Ext.getCmp(config.id)',o:typeof(Ext.getCmp(config.id))},
				{n:'Ext.getCmp(config.id)[config.editor]',o:typeof(Ext.getCmp(config.id)[config.editor])},
				{n:'Ext.getCmp(config.id)[config.editor].type',o:Ext.getCmp(config.id)[config.editor].type},
				{n:'Ext.getCmp(config.id)[config.editor].id',o:Ext.getCmp(config.id)[config.editor].id},
				{n:'Ext.getCmp(config.id)[config.editor][config.fn]',o:typeof(Ext.getCmp(config.id)[config.editor][config.fn])}
			]
		},this,'Execute');
		
		try {
			Ext.getCmp(config.id)[config.editor][config.fn](config.params);
		} catch (e) {
			THROW({e:'FATAL',o:e,
				p:[
					{n:'id',o:''+config.id},
					{n:'editor',o:''+config.editor},
					{n:'fn',o:''+config.fn},
					{n:'params',o:''+config.params},
					{n:'Ext.getCmp(config.id)',o:typeof(Ext.getCmp(config.id))},
					{n:'Ext.getCmp(config.id)[config.editor]',o:typeof(Ext.getCmp(config.id)[config.editor])},
					{n:'Ext.getCmp(config.id)[config.editor].type',o:Ext.getCmp(config.id)[config.editor].type},
					{n:'Ext.getCmp(config.id)[config.editor].id',o:Ext.getCmp(config.id)[config.editor].id},
					{n:'Ext.getCmp(config.id)[config.editor][config.fn]',o:typeof(Ext.getCmp(config.id)[config.editor][config.fn])}
				]
			},this,'Execute');
		}
	},
	
	/**
	 * @param {Object} eO : {Pulse.Error}
	 * @param {Boolean} bHandle : {Pulse.Error}
	 */
	Throw: function(eO, bHandle) {
//		alert('Throw.called( "' + eO + '", "' + bHandle + '" )');
		try {
		
			// HANDLE		
			if (true === bHandle) {
				alert('bHandle: ' + bHandle + '\neO.getHandle(true): ' + this.getErrorHandle(eO,true));
				if (typeof(this.getErrorHandle(eO,true)) == 'function') {
					this.getErrorHandle(eO, true)(eO);
				} else {
					try {
						
						e = (typeof(this.getRootCause(eO).error) == 'object') ? 
							this.getRootCause(eO).error.e : this.getRootCause(eO).e;
							
						Pulse.Error.Handler[e](eO);
						
					} catch(e) { 
						/* ignore e */
						Pulse.Error.Handler['undefined'](eO);
					}
				}
			} else if (typeof(this.getErrorHandle(eO)) == 'function') {
				this.getErrorHandle(eO, bHandle)(eO);
			}
			
			
			
			PulseErrorWindow.Throw(this.dbgError(eO));
			
			// DBG
			if (true === this.DBG.Throw) {
				PulseErrorWindow.Throw(['DBG', 
					'Throw Pulse.getRootCause(eO): ' + this.getRootCause(eO),
					'Throw Pulse.getRootCause(eO).error: ' + this.getRootCause(eO).error,
					'Throw Pulse.getRootCause(eO).e: ' + this.getRootCause(eO).e
				]);
			}
		
		} catch (e) {
			try {
				PulseErrorWindow.Throw(['FATAL.Throw'].concat(this.dbgError(eO)));
				PulseErrorWindow.Throw(['FATAL.Throw'].concat(this.dbgError(e)));
			} catch (ee) {
				PulseErrorWindow.Throw(['FATAL.Throw',''+e]);
			}
		}
	},
	
	/**
	 * convenience function for evaluation of "Ext.Ajax.request.success"
	 */
	ajaxSuccess: function(response, object, fnName, bHandle) {
		try {
			decodedResponse = Ext.decode(response.responseText);
			if (true === decodedResponse.status) {
				return true;
			} else if (typeof(decodedResponse.error) != 'undefined') {
				// error
				Pulse.Throw(new Pulse.Error(decodedResponse.error, object, fnName), bHandle);
				return false;
			}
		} catch (decodingError) {/* ignore */}
		// error
		return Pulse.ajaxFailure(response, object, fnName, bHandle);		
	},
	
	/**
	 * convenience function for evaluation of "Ext.Ajax.request.failure"
	 */
	ajaxFailure: function(response, object, fnName, bHandle) {
		if (typeof(response.responseText) == 'undefined') {
			Pulse.Throw(new Pulse.Error({e: 'REQUEST.FAILED', o: response}, object, fnName), bHandle);
        } else {
        	Pulse.Throw(new Pulse.Error({e: 'REQUEST.ERROR', o: response.responseText}, object, fnName), bHandle);
        }
        return false;
	},
	
	/**
	 * 
	 */
	loadPanelCallBack: function(loadedPanel, success, response, options) {
		
		// DBG
		THROW({
			args:arguments,
			propsObj:loadedPanel,
			props:['id','type','xtype'],
			o: new Pulse.Error({
				propsObj:options,
				props:['url','method','scripts','callback','timeout'],
				o: new Pulse.Error({
					propsObj:response,
					props:['status','responseText']
				},'response','loadPanelCallBack')
			},'options','loadPanelCallBack')
		},Pulse,'loadPanelCallBack.In');

		if (true === success) {
			try {
				
				// see if server-side json-error-msg has been passed
				decodedResponse = Ext.decode(response.responseText);
				if (response.status >= 400 && typeof(decodedResponse) != 'undefined' 
					&& typeof(decodedResponse.error) != 'undefined') {
					
					THROW({
						e:'SERVER.ERROR',
						o:decodedResponse.error
					},Pulse,'loadPanelCallBack');
					
					loadedPanel.update('<div>1...load failure:\n' + decodedResponse.error.e + '</div>');
					
					return;
				}
				
			} catch (ignoreError) {
				
				if (response.status >= 400) {
					/* check if this is necessary */
					loadedPanel.update('<div>2...load failure:\n' + response.responseText + '</div>');
					THROW({e:'REQUEST.ERROR.CHECK',o:response.responseText},Pulse,'loadPanelCallBack');
				}
				
				// DBG
				THROW({
					args:arguments,
					o:new Pulse.Error({
						e:'response does not contain JSONObject error!',
						o:ignoreError,
						propsObj:options,
						props:['url','method']
					}),
					propsObj: response,
					props:['status','responseText']
				},Pulse,'loadPanelCallBack.IgnoreError');
				
				return;
					
			}
						
		} else {
			
			if (typeof(response) == 'undefined') {
				
				loadedPanel.update('<div>3...load failure</div>');
				
				// DBG
				THROW({
					args:arguments,
					o:new Pulse.Error({
						e:'REQUEST.FAILED',
						propsObj:options,
						props:['url','method']
					})
				},Pulse,'loadPanelCallBack.Out');
				
				return;
				
			} else {
				
				loadedPanel.update('<div>4...load failure:\n' + response.responseText + '</div>');
				
				// DBG
				THROW({
					args:arguments,
					o:new Pulse.Error({
						e:'REQUEST.ERROR',
						propsObj:options,
						props:['url','method']
					}),
					propsObj:response,
					props:['status','responseText']
				},Pulse,'loadPanelCallBack.Out');
			
				return;
			}
			
		}
		
		// this should never happen
		if (response.status >= 400 || false === success) {
			THROW({
				e:'FATAL',
				args:arguments,
				propsObj:loadedPanel,
				props:['id','type','xtype'],
				o: new Pulse.Error({
					propsObj:options,
					props:['url','method','scripts'],
					o: new Pulse.Error({
						propsObj:response,
						props:['status','responseText']
					},'response','loadPanelCallBack')
				},'options','loadPanelCallBack')
			},Pulse,'loadPanelCallBack');
		}
		
	},
	
	/**
	 * 
	 */
	loadPanelCallBackDisablePanel: function(loadedPanel, success, response, options) {
		
		// DBG >>
		THROW({
			args:arguments,
			propsObj:loadedPanel,
			props:['id','type','xtype'],
			o: new Pulse.Error({
				propsObj:options,
				props:['url','method','scripts','callback','timeout'],
				o: new Pulse.Error({
					propsObj:response,
					props:['status','responseText']
				},'response','loadPanelCallBackDisablePanel')
			},'options','loadPanelCallBackDisablePanel')
		},Pulse,'loadPanelCallBackDisablePanel.In');		
			
//		el = loadedPanel.getEl().last().child('.x-panel-body');
	    if (true !== loadedPanel.pulseMask || false === loadedPanel.hasClass('pulseTransparentMask')) {
	        Ext.DomHelper.append(loadedPanel.dom, {cls:'pulseTransparentMask'}, true);
	        loadedPanel.pulseMask = true;
	    }

		if (true === success) {
			try {
				
				// see if server-side json-error-msg has been passed
				decodedResponse = Ext.decode(response.responseText);
				
				if (response.status >= 400 && typeof(decodedResponse) != 'undefined' 
					&& typeof(decodedResponse.error) != 'undefined') {
					
					THROW({
						e:'SERVER.ERROR',
						o:decodedResponse.error
					},Pulse,'loadPanelCallBackDisablePanel');
					
					loadedPanel.update('<div>1...load failure:\n' + decodedResponse.error.e + '</div>');
					
					return;
				}
				
			} catch (ignoreError) {
				
				if (response.status >= 400) {
					/* check if this is necessary */
					loadedPanel.update('<div>2...load failure:\n' + response.responseText + '</div>');
					THROW({e:'REQUEST.ERROR.CHECK',o:response.responseText},Pulse,'loadPanelCallBackDisablePanel');
				}
				
				// DBG
				THROW({
					args:arguments,
					o:new Pulse.Error({
						e:'response does not contain JSONObject error!',
						o:ignoreError,
						propsObj:options,
						props:['url','method']
					}),
					propsObj: response,
					props:['status','responseText']
				},Pulse,'loadPanelCallBackDisablePanel.IgnoreError');
				
				return;
					
			}
						
		} else {
			
			if (typeof(response) == 'undefined') {
				
				loadedPanel.update('<div>3...load failure</div>');
				
				// DBG
				THROW({
					args:arguments,
					o:new Pulse.Error({
						e:'REQUEST.FAILED',
						propsObj:options,
						props:['url','method']
					})
				},Pulse,'loadPanelCallBackDisablePanel.Out');
				
				return;
				
			} else {
				
				loadedPanel.update('<div>4...load failure:\n' + response.responseText + '</div>');
				
				// DBG
				THROW({
					args:arguments,
					o:new Pulse.Error({
						e:'REQUEST.ERROR',
						propsObj:options,
						props:['url','method']
					}),
					propsObj:response,
					props:['status','responseText']
				},Pulse,'loadPanelCallBackDisablePanel.Out');
			
				return;
			}
			
		}
		
		// this should never happen
		if (response.status >= 400 || false === success) {
			THROW({
				e:'FATAL',
				args:arguments,
				propsObj:loadedPanel,
				props:['id','type','xtype'],
				o: new Pulse.Error({
					propsObj:options,
					props:['url','method','scripts'],
					o: new Pulse.Error({
						propsObj:response,
						props:['status','responseText']
					},'response','loadPanelCallBackDisablePanel')
				},'options','loadPanelCallBackDisablePanel')
			},Pulse,'loadPanelCallBackDisablePanel');
		}
		
	},
	
	/**
	 * 
	 * @param {Object} validation = 
	 * 		
	 * 			{
	 * 				invalidText: {String},
	 * 				regex: {Regex},
	 * 				allowSave: {Boolean} [optional], default true
	 * 			}
	 * 
	 */
	initTextFieldMonitor: function (el, monitor, identifier, allowBlank/*, validation*/) {
		
		// DBG
		THROW({args:arguments},this,'initTextFieldMonitor');
		
		try {
			el.type = 'TextFieldMonitor';
			el.DBG = false/*{
				validate: {
					call: true,
					allowBlank: true,
					regex: true,
					handler: true,
					flagMsg: true,
					flagMsgEl: true,
					allowSave: true,
					beforeMsg:true,
					removeMsg: true
				}
			}*/;
			el.initValue = el.dom.value.trim();
			el.changed = false;
			el.monitor = monitor;
//			el.validation = validation;
			el.allowBlank = allowBlank;
			
			el.on('keyup', function() {
				// CHANGED :: '08/17/12 -> if (false === allowBlank && this[identifier].dom.value === '') {
				if (false === allowBlank && this[identifier].dom.value/*.trim()*/ === '') {
					this[identifier].replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Red');
					this[identifier].replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls + 'Red');
					this[identifier].changed = false;
					if (typeof(this.tab) != 'undefined' && this.tab !== null) {	
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'changeNotSaveable'}]});
					}
					if (typeof(this.fireEvent) == 'function') {
						this.fireEvent('MSG','changeNotSaveable',this);
					}
				} else if (this[identifier].dom.value/*.trim()*/ === this[identifier].initValue) {
					this[identifier].replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
					this[identifier].replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls);
					this[identifier].reset();
					if (typeof(this.hasChanges) == 'function' && typeof(this.reset) == 'function') {
						if (false === this.hasChanges()) {
//							alert('p.reset: ' + this + ', ' + this.id + ', ' + identifier);
							this.reset();
						}
					}
				} else {
					
//					// validation
//					success = this[identifier].validate();
//					if (false === success) {
//						this[identifier].replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Red');
//						this[identifier].replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls + 'Red');
//						return;
//					}
														
					this[identifier].replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
					this[identifier].replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls + 'Yellow');
					this[identifier].changed = true;
					if (typeof(this.tab) != 'undefined' && this.tab !== null) {
						if (typeof(this.tab.toggleHasChangesIcon) == 'function') {
							this.tab.toggleHasChangesIcon(true);
						}
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
					}
					if (typeof(this.panel) != 'undefined' && this.panel !== null 
						&& typeof(this.panel.toggleHasChangesIcon) == 'function') {
						this.panel.toggleHasChangesIcon(true);
					}
					if (typeof(this.fireEvent) == 'function') {
						this.fireEvent('MSG','change',this);
					}
				}			
			},monitor);
			el.commit = function() {
				this.initValue = this.dom.value.trim();
				this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
				this.replaceClass(Pulse.fieldCls + 'Red',Pulse.fieldCls);
				this.changed = false;
//				this.validate();
			};
			el.reset = function() {			
				this.dom.value = this.initValue;
				this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
				this.replaceClass(Pulse.fieldCls + 'Red',Pulse.fieldCls);
				this.changed = false;
				if (typeof(this.monitor.fieldReset) == 'function') {
					this.monitor.fieldReset();
				}
//				this.validate();
			};
			/*
			el.validate = function() {
				
				// DBG >>
				THROW({
					o: 'CALL',
					props: [
						'allowBlank',
						'validation',
						'validation.regex',
						'validation.invalidText',
						'validation.allowSave',
						'validation.handler',
						'validation.scope',
						'monitor','monitor.id'
					]
				},this,'validate.call');

				
				try {
					
					success = true;
					flagIconCls = 'warningIconCls';
					flagMsg = VIEWPORT_PROPERTIES.TEXT_ENTER_VALID_VALUE;
					flagStyle = 'font-weight:bold;padding-left:18px;' 
						+ 'height:18px;vertical-align:middle;'
					
					// validation
					if (typeof(this.validation) != 'undefined' && this.validation != null) {
						v = this.getValue().trim();
						v = v.trim();
						if (false === this.allowBlank) {
							// definite denyal of save
							this.validation.allowSave = false;
							success = (v === '');			
							
							// DBG >>
							THROW({
								o: 'ALLOWBLANK',
								args:[success,v],
								props: ['allowBlank']
							},this,'validate.allowBlank');	
							
							if (typeof(this.monitor.tab) != 'undefined' && this.monitor.tab !== null) {	
								PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.monitor.tab.id},{n:'msg',o:'changeNotSaveable'}]});
							}
							if (typeof(this.monitor.fireEvent) == 'function') {
								this.monitor.fireEvent('MSG','changeNotSaveable',this.monitor);
							}
						}
						
						// process regex
						if (true === success && typeof(this.validation) == 'object' 
							&& typeof(this.validation.regex) == 'object' 
							&& typeof(this.validation.regex.test) == 'function') {
							
							success = this.validation.regex.test(v);
							
							// DBG >>
							THROW({
								o: 'REGEX',
								args: [success,v],
								props: ['validation.regex']
							},this,'validate.regex');
							
						}
						
						// proccess handler
						if (true === success && typeof(this.validation) == 'object' 
							&& typeof(this.validation.handler) != 'undefined') {
														
							if (typeof(this.validation.handler) == 'function') {								
								success = this.validation.handler(v);
							} else if (typeof(this.validation.handler) == 'string'
								&& typeof(this.validation.scope) == 'object') {
								try {
									success = this.validation.scope[this.validation.handler](v);
								} catch(e) {
									throw(new Pulse.Error({
										e:'HANDLER UNDEFINED',
										props:['validation.scope','validation.handler']
									},this,'validation.handler'));
								}								
							}
							
							// DBG >>
							THROW({
								args:[success,v],
								o: 'HANDLER',
								props: ['validation.scope','validation.handler']
							},this,'validate.handler');
							
							if (typeof(success) != 'boolean') {
								success = true;
							}
						}
							
						// process validation (msg)
						if (typeof(this.validation) == 'object'
							&& typeof(this.validation.invalidText) == 'string' 
							&& this.validation.invalidText != '') {
							
							// DBG >>
							THROW({
								o: 'INVALIDTEXT',
								props: ['validation.invalidText']
							},this,'validate.flagMsg');
															
							flagMsg = this.validation.invalidText;
						}						
							
						// process validation (saveable)
						if (false === success && typeof(this.validation) == 'object' 
							&& true !== this.validation.allowSave) {
							
							// DBG >>
							THROW({
								o: 'ALLOWSAVE',
								args: [success],
								props: ['validation.allowSave']
							},this,'validate.allowSave');
							
							flagStyle += 'color:red;';
							flagIconCls = 'errorIconCls';
							this.changed = false;
							
							if (typeof(this.monitor.tab) != 'undefined' && this.monitor.tab !== null) {	
								PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.monitor.tab.id},{n:'msg',o:'changeNotSaveable'}]});
							}
							if (typeof(this.monitor.fireEvent) == 'function') {
								this.monitor.fireEvent('MSG','changeNotSaveable',this.monitor);
							}
							
						}
						
						THROW({o:'BEFOREMSG',args:[success,v]},this,'validate.beforeMsg');
							
						if (false === success) {
							
							// DBG >>
							THROW({
								o: 'FLAGMSGEL',
								args: [success,v],
								props: ['flagMsgEl']
							},this,'validate.flagMsgEl');
							
							if (typeof(this.flagMsgEl) != 'undefined') {								
								// update icon-class
								this.flagMsgEl.dom.className = flagIconCls;
								// update style
								this.flagMsgEl.set({ style: flagStyle });
								// update error-message-div
								this.flagMsgEl.update(flagMsg);							
							} else {								
								// show flag
								flagDiv = '<div class="' + flagIconCls + '" style="' + flagStyle + '">' 
										+ flagMsg + '</div>';										
								this.flagMsgEl = Ext.DomHelper.insertBefore(this,flagDiv,true);
							}
							
						} else {
							
							THROW({o:'REMOVEMSG',args:[success,v]},this,'validate.removeMsg');
							
							// validation passed: remove error-message-element
							if (typeof(this.flagMsgEl) != 'undefined') {
								this.flagMsgEl.remove();
								delete this.flagMsgEl;
							}
							
						}
						
					}
					
					if (false === success && typeof(this.validation) == 'object' 
							&& true === this.validation.allowSave) {
						return true;
					}
					
					return success;
					
				} catch(e) {
					THROW({e:'VALIDATIONFAILURE',o:e},this,'validate');
				}
			};
			el.validate();
			*/
			return el; 
		} catch(e) {
			
			THROW({e:e},this,'initTextFieldMonitor');
			
		}
	},
	
	/**
	 * 
	 */
	initTextAreaMonitor: function (el, monitor, identifier) {
		
		// DBG
		THROW({args:arguments},this,'initTextAreaMonitor');
		
		el.initValue = el.getValue().trim();
		el.changed = false;
		el.monitor = monitor;
		
		el.on('keyup', function() {			
			if (this[identifier].getValue().trim() === this[identifier].initValue) {
				this[identifier].replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				this[identifier].changed = false;
				if (typeof(this.hasChanges) == 'function' && typeof(this.reset) == 'function') {
					if (false === this.hasChanges()) {
						this.reset();
					}
				}
			} else {
				this[identifier].replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
				this[identifier].changed = true;
				if (typeof(this.tab) != 'undefined' && this.tab !== null) {
					if (typeof(this.tab.toggleHasChangesIcon) == 'function') {
						this.tab.toggleHasChangesIcon(true);
					}					
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
				}
				if (typeof(this.panel) != 'undefined' && this.panel !== null 
					&& typeof(this.panel.toggleHasChangesIcon) == 'function') {
					this.panel.toggleHasChangesIcon(true);
				}
				if (typeof(this.fireEvent) == 'function') {
					this.fireEvent('MSG','change',this);
				}
			}			
		},monitor);
		el.commit = function() {
			this.initValue = this.getValue().trim();
			this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
			this.changed = false;
		};
		el.reset = function() {
			this.update(this.initValue);
			this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
			this.changed = false;
			if (typeof(this.monitor.fieldReset) == 'function') {
				this.monitor.fieldReset();
			}
		};
	},
	
	/**
	 * 
	 */
	initCheckBoxMonitor: function (el, monitor, identifier) {
		
		// DBG
		THROW({args:arguments},this,'initCheckBoxMonitor');
				
		el.initValue = el.dom.checked;
		el.changed = false;
		el.monitor = monitor;
		
		el.on('click', function() {	
			if (this[identifier].dom.checked === this[identifier].initValue) {
				this[identifier].replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				this[identifier].changed = false;
				if (typeof(this.hasChanges) == 'function' && typeof(this.reset) == 'function') {
					if (false === this.hasChanges()) {
						this.reset();
					}
				}
			} else {
				this[identifier].replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
				this[identifier].changed = true;
				if (typeof(this.tab) != 'undefined' && this.tab !== null) {
					if (typeof(this.tab.toggleHasChangesIcon) == 'function') {
						this.tab.toggleHasChangesIcon(true);
					}
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
				}
				if (typeof(this.panel) != 'undefined' && this.panel !== null 
					&& typeof(this.panel.toggleHasChangesIcon) == 'function') {
					this.panel.toggleHasChangesIcon(true);
				}
				if (typeof(this.fireEvent) == 'function') {
					this.fireEvent('MSG','change',this);
				}
			}			
		},monitor);
		el.commit = function() {
			this.initValue = this.dom.checked;
			this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
			this.changed = false;
		};
		el.reset = function() {
			this.dom.checked = this.initValue;
			this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
			this.changed = false;
			if (typeof(this.monitor.fieldReset) == 'function') {
				this.monitor.fieldReset();
			}
		};
		if (true === el.hasClass('isBoolean')) {
			el.getValue = function() {
				return this.dom.checked;
			};
		}
	},
	
	/**
	 * @param {Object} box, Ext.form.ComboBox
	 */
	initDropDownBoxMonitor: function (box, monitor, identifier) {
		
		// DBG
		THROW({args:arguments},this,'initDropDownBoxMonitor');
		
		box.initValue = box.getValue().trim();
		box.changed = false;
		box.monitor = monitor;
		
		box.on('select', function() {			
			if (this[identifier].getValue().trim() === this[identifier].initValue) {
				this[identifier].getEl().replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				this[identifier].changed = false;
				if (typeof(this.hasChanges) == 'function' && typeof(this.reset) == 'function') {
					if (false === this.hasChanges()) {
						this.reset();
					}
				}
			} else {
				this[identifier].getEl().replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
				this[identifier].changed = true;
				if (typeof(this.tab) != 'undefined' && this.tab !== null) {
					if (typeof(this.tab.toggleHasChangesIcon) == 'function') {
						this.tab.toggleHasChangesIcon(true);
					}
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
				}
				if (typeof(this.panel) != 'undefined' && this.panel !== null 
					&& typeof(this.panel.toggleHasChangesIcon) == 'function') {
					this.panel.toggleHasChangesIcon(true);
				}
				if (typeof(this.fireEvent) == 'function') {
					this.fireEvent('MSG','change',this);
				}
			}			
		},monitor);
		
		box.commit = function() {
			this.initValue = this.getValue().trim();
			this.getEl().replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
			this.changed = false;
		};
		
		box.on('reset',function(){
			this.changed = false;
			if (typeof(this.monitor.fieldReset) == 'function') {
				this.monitor.fieldReset();
			}
		},box);
	},
	
	/**
	 * @param {Object} box, Ext.Element select
	 */
	initSelectBoxMonitor: function (box, monitor, identifier) {
		
		// DBG
		THROW({args:arguments},this,'initSelectBoxMonitor');
		
		box.initValue = box.getValue().trim();
		box.changed = false;
		box.monitor = monitor;
		
		box.on('change', function() {
			if (this[identifier].getValue().trim() === this[identifier].initValue) {
				this[identifier].replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				this[identifier].changed = false;
				if (typeof(this.hasChanges) == 'function' && typeof(this.reset) == 'function') {
					if (false === this.hasChanges()) {
						this.reset();
					}
				}
			} else {
				this[identifier].replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
				this[identifier].changed = true;
				if (typeof(this.tab) != 'undefined' && this.tab !== null) {
					if (typeof(this.tab.toggleHasChangesIcon) == 'function') {
						this.tab.toggleHasChangesIcon(true);
					}
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
				}
				if (typeof(this.panel) != 'undefined' && this.panel !== null 
					&& typeof(this.panel.toggleHasChangesIcon) == 'function') {
					this.panel.toggleHasChangesIcon(true);
				}
				if (typeof(this.fireEvent) == 'function') {
					this.fireEvent('MSG','change',this);
				}
			}			
		},monitor);
		
		box.commit = function() {
			this.initValue = this.getValue().trim();
			this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
			this.changed = false;
		};
		
		box.on('reset',function(){
			this.changed = false;
			this.replaceClass(Pulse.fieldCls + 'Yellow',Pulse.fieldCls);
			if (typeof(this.monitor.fieldReset) == 'function') {
				this.monitor.fieldReset();
			}
		},box);
	},
	
	/**
	 * builds a bundle-drop-down-box.
	 * 
	 * @param {string} emptySelect, 
	 * 		if given the string will be added to the drop-down-box 
	 * 		to enable selection of empty values 
	 * 
	 * @return {Ext.form.ComboBox}
	 */
	getBundleBox: function(emptySelect) {
		data = VIEWPORT_PROPERTIES.getKnownBundlesForBox();
		
		if (typeof(emptySelect) == 'string') {
			data.push([emptySelect]);
		}
		
		return new Ext.form.ComboBox({
			emptySelect: emptySelect,
			fieldLabel: VIEWPORT_PROPERTIES.BUNDLE, 
			fieldClass: Pulse.fieldCls,
            store: new Ext.data.SimpleStore({
		        fields: ['bundle'],
		        sortInfo: {field: 'bundle', direction: "ASC"},
		        data : data
		    }),	    
		    displayField: 'bundle',
		    valueField: 'bundle',
		    mode: 'local',
		    triggerAction: 'all',
		    editable: false,
		    width: 200,
		    emptyText: VIEWPORT_PROPERTIES.TEXT_SELECTBUNDLE_BOX,
		    validator: function(value) {
		    	if (typeof(this.emptySelect) == 'string') {
			    	if (typeof(value) == 'string' && value == this.emptySelect) {
			    		this.setValue('');
			    		this.setRawValue('');
			    	}
		    	}
		    	return true;
		    }
        });
	},
	
	/**
	 * builds a locale-drop-down-box.
	 * 
	 * @param {string} emptySelect, 
	 * 		if given the string will be added to the drop-down-box 
	 * 		to enable selection of empty values
	 * 
	 * @return {Ext.form.ComboBox}
	 */
	getLocaleBox: function(emptySelect) {
		data = VIEWPORT_PROPERTIES.getKnownLocalesForBox();
		
		if (typeof(emptySelect) == 'string') {
			data.push([emptySelect]);
		}

		return new Ext.form.ComboBox({
			fieldLabel: VIEWPORT_PROPERTIES.LOCALE,
			fieldClass: Pulse.fieldCls,
		    store: new Ext.data.SimpleStore({
		        fields: ['locale'],
		        sortInfo: {field: 'locale', direction: "ASC"},
		        data : data
		    }),	    
		    displayField: 'locale',
		    valueField: 'locale',
		    mode: 'local',
		    triggerAction: 'all',
		    editable: false,
		    width: 200,
		    emptyText: VIEWPORT_PROPERTIES.TEXT_SELECTLOCALE_BOX,
		    validator: function(value) {
		    	if (typeof(this.emptySelect) == 'string') {
			    	if (typeof(value) == 'string' && value == this.emptySelect) {
		    			this.setValue('');
		    			this.setRawValue('');
			    	}
		    	}
		    	return true;
		    }
		});
	},
	
	/**
	 * @param {Object} config
	 */
	getWestToolbar: function(config) {
		
		return ['->',{
            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
            scope: config,
            handler: function() {
            	
            	comp = Ext.getCmp(this.id);
            	
            	if (true === comp.getUpdater().isUpdating()) {
            		return;
            	}
            	
            	THROW({
            		args:arguments,
            		propsObj: comp,
            		props:[
            			'id','config','initialConfig',
            			'initialConfig.autoLoad',
            			'autoLoad',
            			'autoLoad.url',
            			'autoLoad.method',
            			'autoLoad.scripts',
            			'autoLoad.timeout',
            			'autoLoad.nocache',
            			'autoLoad.discardUrl',
            			'autoLoad.params',
            			'autoLoad.callback'
        			]
        		},Pulse,'getWestToolbar.refresh');
        		
        		cfg = comp.initialConfig.autoLoad;
        		cfg.callback = LPCB;
        		cfg.timeout = 30;
        		
        		THROW({
            		args:arguments,
            		propsObj: cfg,
            		o:comp,
            		props:[
            			'url','method','callback','scripts','params',
            			'nocache','discardUrl','timeout'
        			]
        		},Pulse,'getWestToolbar.cfg');
        		
        		comp.load(cfg);
                
            },
            iconCls: 'reloadIconCls'
        }];

	},
	
	/**
	 * 
	 */
	getWestMinimizeTool: function() {
		 
		 tools = [];
		 
		 tools.push({
	        id: 'minimize',
	        handler: function(evt, tEl, pnl) {
	            
	            // DBG
	            THROW({
	                args:arguments,
	                propsObj:pnl,
	                props:[
	                    'id','tbar','tools','title','iconCls',
	                    'initialConfig',
	                    'initialConfig.autoLoad.url',
	                    'initialConfig.autoLoad.method',
	                    'initialConfig.autoLoad.scripts',
	                    'initialConfig.autoLoad.timeout',
	                    'initialConfig.autoLoad.nocache',
	                    'initialConfig.autoLoad.discardUrl',
	                    'initialConfig.autoLoad.params',
	                    'initialConfig.autoLoad.callback'
	                ]
	            },Pulse,'getWestMinimizeTool.handlerTool');
	            
	            initialConfig = pnl.initialConfig;
	            title = pnl.title;
	            
	            west = Ext.getCmp('west-region');
	            
	            height = west.getSize().height;

	            west.remove(pnl/*, true*/);
	            pnl.destroy();
	            pnl = null;
	            delete pnl;
	            
	            pBar = west.getBottomToolbar();
	            action = new Ext.Action({
	                id: initialConfig.id + '.btn',
	                tooltip: title,
	                scope: initialConfig,
	                handler: function(passedConfig) {
	                    
	                    west = Ext.getCmp('west-region');
	                    height = west.getSize().height;
	                    
	                    // DBG
	                    THROW({
	                        args:arguments,
	                        propsObj: this,
	                        props:[
	                            'id','tbar','tools','title','iconCls',
	                            'autoLoad.url',
	                            'autoLoad.method',
	                            'autoLoad.scripts',
	                            'autoLoad.timeout',
	                            'autoLoad.nocache',
	                            'autoLoad.discardUrl',
	                            'autoLoad.params',
	                            'autoLoad.callback'
	                        ]
	                    },Pulse,'getWestMinimizeTool.handlerBtnInitialConfig');
	                    
	                    if (typeof(this.autoLoad) != 'undefined') {
	                    	this.autoLoad.callback = LPCB;
	                    	this.autoLoad.timeout = 30;
	                    }
	                    
	                    this.collapsed = false;
	                    if (typeof(passedConfig) != 'undefined' && typeof(passedConfig.callback) == 'function') {
	                    	this.passedConfig = passedConfig;
	                    }
	                    
	                    _panel = new Ext.Panel(this);
	                  	
	                  	
	                  	THROW({
	                    	args:arguments,
	                        propsObj: passedConfig,
	                        props:[
	                            'id',
								'decodedResponse',
								'decodedResponse.ids',
	                            'callback'
	                        ]
	                    },Pulse,'getWestMinimizeTool.handlerPassedConfig');
	                    
		                    
//	                    _panel.on({
//	                    	'expand': {
//	                    		single: true,
//	                    		handler: function() {
//			                    	alert('!');
//		                    		(function(){
//		
//										if (typeof(this.passedConfig) == 'undefined' || this.passedConfig === null || 
//											typeof(this.passedConfig.callback) != 'function') {
//											return;
//										}
//										
//		                    			this.passedConfig.callback(this, this.passedConfig);
//		                    			
//		                    			THROW({
//					                    	args:arguments,
//					                        propsObj: this.passedConfig,
//					                        props:[
//					                            'id',
//												'decodedResponse',
//												'decodedResponse.ids',
//					                            'callback'
//					                        ]
//					                    },Pulse,'getWestMinimizeTool.handlerPassedConfigExpandDeferred');
//					                    
////										this.passedConfig = null;
////			                    		delete this.passedConfig;
//		            			
//		                			}).defer(500,this);
//		                			
////		                    		THROW({
////				                    	args:arguments,
////				                        propsObj: this.passedConfig,
////				                        props:[
////				                            'id',
////											
////											'decodedResponse',
////											'decodedResponse.ids',
////				                            'callback'
////				                        ]
////				                    },Pulse,'getWestMinimizeTool.handlerPassedConfigExpand');
//			                    
//			                    	
//			                    
//			                    }
//	                    	}
//	                    });
		                    
//	                    alert(''+_panel.hasListener('expand'));  
      		           
      		           	west.insert(0,_panel);        	
	                   	Ext.getCmp(this.id + '.btn').destroy();
	                   	PULSE_TOOLBAR.actions[(this.id + '.btn').split('.').join('')] = null;
	                   	delete PULSE_TOOLBAR.actions[(this.id + '.btn').split('.').join('')];
	                    west.doLayout();
	                    
//	                    (function(height){
// 							this.expand();
							_panel.expand();
//		                   	_panel.fireEvent('expand',_panel);
		                   		                    
		                    Ext.getCmp('west-region').setHeight(height);
		                    VIEWPORT.fireEvent('resize',VIEWPORT,0,0,VIEWPORT.getSize().width,VIEWPORT.getSize().height);
//	                    }).defer(500,panel,[height]);



//						if (typeof(passedConfig) == 'undefined' || passedConfig === null || 
//							typeof(passedConfig.callback) != 'function') {
//							
//							passedConfig.callback(_panel, passedConfig);	
//							
////							(function(){
////								this.passedConfig.callback(this, this.passedConfig);
////		                    }).defer(500,_panel);
//		                    
//	                    	return;
//						}
						
	                },
	                iconCls: initialConfig.iconCls
	            });
	            if (typeof(pBar.actions) == 'undefined' || pBar.actions === null) {
	            	pBar.actions = {};
	            }
	            
	            pBar.actions[(initialConfig.id + '.btn').split('.').join('')] = action;
	            pBar.addButton(action);

	            west.setHeight(height);
	            west.doLayout();
	        }
	    });
	    
	    return tools;
	},
	
	/**
	 * 
	 */
	debug: function(eDef, obj, fn) {
	
		try {
			
			
			if (typeof(eDef) != 'undefined' && typeof(eDef.e) == 'undefined' 
				&& typeof(obj) != 'undefined') {
				
				show = true;
				if (false === obj.DBG) {
					show = false;
				} else if (typeof(obj.DBG) == 'object') {
					
					/*show = false;*/ // so msgs with DBG undefined won't be suppressed
					DBG_UNDEFINED_ERROR = false;
					switch (fn.split('.').length) {
						case 1:
							show = obj.DBG[fn.split('.')[0]];
							break;
							
						case 2:
							try {
								show = obj.DBG[fn.split('.')[0]][fn.split('.')[1]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						case 3:
							try {
								show = obj.DBG[fn.split('.')[0]][fn.split('.')[1]][fn.split('.')[2]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						case 4:
							try {
								show = obj.DBG[fn.split('.')[0]][fn.split('.')[1]][fn.split('.')[2]][fn.split('.')[3]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						case 5:
							try {
								show = obj.DBG[fn.split('.')[0]][fn.split('.')[1]][fn.split('.')[2]][fn.split('.')[3]][fn.split('.')[4]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						default:
							FATAL(fn + ' EXCEEDS MAX-DEPTH: 5',this,'debug');
							break;
					}
					
					if (typeof(show) != 'boolean') {
						if (DBG.Pulse.debug) {
							PulseErrorWindow.Throw(['DBG','ERROR::debug','DBG_UNDEFINED_ERROR: '+DBG_UNDEFINED_ERROR,'typeof(show) != \'boolean\' => ' + show]/*,false*/);
						}
						show = false;
					}
					
					if (DBG.Pulse.debug) {
						PulseErrorWindow.Throw(['DBG','DBG::debug','show => ' + show]/*,false*/);
					}
					
					/*
					if (false === obj.DBG[fn]) {
						show = false;
					} else {
						fnArr = fn.split('.');
						if (fnArr.length === 2 && typeof(obj.DBG[fnArr[0]]) == 'object') {
							 fn = fnArr[0];
							 if (false === obj.DBG[fn][fnArr[1]]) {
							 	show = false;
							 }
						}
					}
					*/
					
				} else if (typeof(obj.type) == 'string' && typeof(DBG[obj.type]) == 'object') {
					
					/*show = false;*/ // so msgs with DBG undefined won't be suppressed
					DBG_UNDEFINED_ERROR = false;
					switch (fn.split('.').length) {
						case 1:
							show = DBG[obj.type][fn.split('.')[0]];
							break;
							
						case 2:
							try {
								show = DBG[obj.type][fn.split('.')[0]][fn.split('.')[1]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						case 3:
							try {
								show = DBG[obj.type][fn.split('.')[0]][fn.split('.')[1]][fn.split('.')[2]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						case 4:
							try {
								show = DBG[obj.type][fn.split('.')[0]][fn.split('.')[1]][fn.split('.')[2]][fn.split('.')[3]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						case 5:
							try {
								show = DBG[obj.type][fn.split('.')[0]][fn.split('.')[1]][fn.split('.')[2]][fn.split('.')[3]][fn.split('.')[4]];
							} catch(_DBG_UNDEFINED_ERROR) {
								DBG_UNDEFINED_ERROR = _DBG_UNDEFINED_ERROR;
								/*show = false;*/ // so error won't be suppressed
							}
							break;
							
						default:
							FATAL(fn + ' EXCEEDS MAX-DEPTH: 5',this,'debug');
							break;
					}
					
					if (typeof(show) != 'boolean') {
						if (DBG.Pulse.debug) {
							PulseErrorWindow.Throw(['DBG','ERROR::debug','DBG_UNDEFINED_ERROR: '+DBG_UNDEFINED_ERROR,'typeof(show) != \'boolean\' => ' + show]/*,false*/);
						}
						show = false;
					}
					
					if (DBG.Pulse.debug) {
						PulseErrorWindow.Throw(['DBG','DBG::debug','show => ' + show]/*,false*/);
					}
					
					/*
					if (false === obj.DBG[fn]) {
						show = false;
					} else {
						fnArr = fn.split('.');
						if (fnArr.length === 2 && typeof(obj.DBG[fnArr[0]]) == 'object') {
							 fn = fnArr[0];
							 if (false === obj.DBG[fn][fnArr[1]]) {
							 	show = false;
							 }
						}
					}
					*/
					
				}
				
				if (false === show && false !== Pulse.DBG.THROW) {
					args = '';
					if (typeof(eDef) != 'undefined' && typeof(eDef.args) != 'undefined') {
						args += Pulse.getArgsString(eDef.args);
					}
					try {
						PulseErrorWindow.Throw(['DBG',
							'THROW DBG.supressed - {' + obj.type + '}.' + fn + '( ' + args + ' )'
						],false);
					} catch (e) {
						PulseErrorWindow.Throw(['DBG',
							'THROW DBG.supressed - {' + e + '}.' + fn + '( ' + args + ' )'
						],false);
					}
				}
				
				if (false === show) {
					return;
				}
				
			}
			
			if (false !== Pulse.DBG.THROW) {
				args = '';
				if (typeof(eDef) != 'undefined' && typeof(eDef.args) != 'undefined') {
					args += Pulse.getArgsString(eDef.args);
				}
				try {
					PulseErrorWindow.Throw(['DBG',
						'THROW DBG - {' + obj.type + '}.' + fn + '( ' + args + ' )'
					],false);
				} catch (e) {
					PulseErrorWindow.Throw(['DBG',
						'THROW DBG - {' + e + '}.' + fn + '( ' + args + ' )'
					],false);
				}
			}
			
			if (typeof(eDef) == 'object' && eDef.type == 'Error') {
				Pulse.Throw(eDef, obj, fn);
			} else {
				Pulse.Throw(new Pulse.Error(eDef, obj, fn));
			}
			
		} catch (ee) {
			
			args = '';
			try {
				args = Pulse.getArgsString(arguments);
			} catch(eee) {
				args = eee;
			}
			alert('FATAL THROW(' + args + ')\n\n' + ee);
			
		}
		
	},
	
	/**
	 * serializes the error to an array of strings for dbg-output.
	 * 
	 * @param {Object} error
	 * 
	 * @param {Array} dbg
	 * 
	 * @return {Array} dbg-info
	 */
	dbgError: function(error, dbg) {
		
		// DBG
		_ii = 0;
		if (true === this.DBG.dbgError) {
			PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError( ' + this.getArgsString(arguments) + ' )\n']);
		}
		
		try {
			
			if (typeof(dbg) == 'undefined' || typeof(dbg.length) == 'undefined') {
				// received new error
				
				dbg = [];
				
				// add root-cause
				rootCause = this.getRootCause(error);
				
				// DBG
				if (true === this.DBG.dbgError) {
					PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError.rootCause = { ' + typeof(rootCause) + ' } ' + rootCause + '\n']);
				}
				
				if (typeof(rootCause) == 'undefined') {
					dbg.push('ERROR');
					dbg.push('<b>e:</b> { ' + this.colorString(typeof(rootCause),'blue') 
								+ ' } ' + this.colorString(rootCause,'red'));
					dbg.push('<b>e.id</b> : ' + error.id);
				} else {
					
					eString = (typeof(rootCause.error) != 'undefined') ? rootCause.error.e : rootCause.e;
					
					// DBG
					if (true === this.DBG.dbgError) {
						PulseErrorWindow.Throw(['DBG',
						'[' + _ii++ + ']Pulse.dbgError.rootCause.error = { ' + typeof(rootCause.error) + ' } ' + rootCause.error + '\n',
						'[' + _ii++ + ']Pulse.dbgError.eString = { ' + typeof(eString) + ' } ' + eString + '\n',
						'[' + _ii++ + ']Pulse.dbgError.rootCause.e = { ' + typeof(rootCause.e) + ' } ' + rootCause.e + '\n']);
					}
					
					if (typeof(eString) == 'undefined') {
						oString = (typeof(error.object) != 'undefined' 
							&& typeof(error.object.type) == 'string') ? error.object.type : error.object;
						eString = oString + '.' + error.fn;
					}
					
					dbg.push(eString);
					dbg.push('<b>e.id</b> : ' + error.id);
					
					if (true === this.isError(rootCause)) {			
						dbg.push('<b>e.in:</b> ' + this.formatErrorHeader(rootCause));
						if (typeof(rootCause.error) == 'object') {
							dbg.push('<b>e:</b> { ' + this.colorString(typeof(rootCause.error.e),'blue') 
								+ ' } ' + this.colorString(rootCause.error.e,'red'));
						} else {
							dbg.push('<b>e:</b> { ' + this.colorString(typeof(rootCause.e
								),'blue') + ' } ' + this.colorString(rootCause.e,'red'));
						}
					}
				}
				
			} else {
				
				// received array of "parent-"error
				dbg.push('<hr class="adminHr"/>');
				dbg.push('<b>e.id</b> : ' + error.id);
				
				dbg.push('');
				dbg.push('<b>in:</b> ' + this.formatErrorHeader(error));

			}
			
			// DBG
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError serializing error properties... \n']);
			}
			
			// check
			if (typeof(error) == 'undefined') {
				return dbg;
			}	
			
			if (error.type == 'Error') {
				if (error.get('type') == 'Error') {
					e = error.error;
				} else {
					e = error.get('e');
				}
				o = error.get('o');
				p = error.get('p');
				args = error.get('args');
				props = error.get('props');
				propsObj = error.get('propsObj');
			} else {
				e = error.e;
				o = error.o;
				p = error.p;
				args = error.args;
				props = error.props;
				propsObj = error.propsObj;
			}
			
			// ARGS
			if (typeof(args) != 'undefined') {
				dbg.push('');
				dbg.push('<b>ARGS [' + args.length + ']</b>');
				dbg.push(this.getArgsString(args));
			}
			
			// DBG
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError ARGS done... \n']);
			}
			
			// PROPS
			if (typeof(props) != 'undefined') {
				
				dbg.push('');
				dbg.push('<b>PROPS [' + props.length + ']</b>');
				
				try {
					
					// check for propsObj other than error.object
					given = false;
					if (typeof(propsObj) == 'object') {
						given = true;
					} else if (typeof(error.object) == 'object') {
						propsObj = error.object;
					}
					
					// check
					if (typeof(propsObj) == 'undefined') {
						throw('no Object to read properties from...');
					}
					
					// add given propsObj-info
					if (true === given) {
						dbg.push('propsObj: ' + given);
						_propsObj = (typeof(propsObj.type) != 'undefined') ? propsObj.type : propsObj;
						_propsObjId = propsObj.id;					
						dbg.push('propsObj: { ' + this.colorString(typeof(propsObj),'blue') + ' } ' + 
							_propsObj + ' - ( id: ' + _propsObjId +' )');
					}
					
					// dbg props
					dbg = this.dbgProperties(dbg, propsObj, props);
					
				} catch (getPropFailure) {
					dbg.push('ERROR :: props: ' + getPropFailure);
				}
				
			}
			
			// DBG
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError PROPS done... \n']);
			}
			
			// PARAMS
			if (typeof(p) != 'undefined') {
				
				dbg.push('');
				dbg.push('<b>PARAMS [' + p.length + ']</b>');
				
				try {					
					dbg = this.dbgParams(dbg, p);
				} catch (getParamFailure) {
					dbg.push('ERROR :: params: ' + getParamFailure);
				}
				
			}
			
			// DBG
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError PARAMS done... \n']);
			}
			
			// DBG
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG',
					'[' + _ii++ + ']Pulse.dbgError NESTED {e} = { ' + typeof(rootCause) + ' } ' + 
					rootCause + '.isError = ' + this.isError(e) + '\n']);
			}
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError NESTED {o} = { ' + typeof(rootCause) + ' } ' + 
				rootCause + '.isError = ' + this.isError(o) + '\n']);
			}
			
			// nested errors			
			if (true === this.isError(e)) {
				dbg.push('nested e:');		
				dbg.concat(this.dbgError(e, dbg));		
			} else {
				dbg.push('');
				dbg.push('nested e: ' + this.formatProperty(e, 'e'));
			}
			if (true === this.isError(o)) {
				dbg.push('nested o:');
				dbg.concat(this.dbgError(o, dbg));
			} else {
				dbg.push('');
				dbg.push('nested o: ' + this.formatProperty(o, 'o'));
			}
			
			// DBG
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError NESTED {e} done... \n']);
			} 
			if (true === this.DBG.dbgError) {
				PulseErrorWindow.Throw(['DBG','[' + _ii++ + ']Pulse.dbgError NESTED {o} done... \n']);
			}
			
		} catch(dbgError) {
			try {
				dbg.push('ERROR :: dbg: ' + dbgError);
			} catch (ignoreError) {
				dbg = ['ERROR :: dbg: ' + dbgError];
			}
		}
		
		dbg.push('.');
		return dbg;

	},
	
	/**
	 * 
	 */
	errorTests: ['e','o','p','args','props','propsObj','handle','handler'],
	isError: function(obj) {
		
		// DBG
		_jj = 0;
		if (true === this.DBG.isError) {
			PulseErrorWindow.Throw(['DBG','[' + _jj++ + ']Pulse.isError( ' + this.getArgsString(arguments) + ' )\n']);
		}
		
		if (typeof(obj) != 'object' || typeof(obj) == 'undefined') {
			return false;
		}
		
		// DBG
		if (true === this.DBG.isError) {
			PulseErrorWindow.Throw(['DBG','[' + _jj++ + ']Pulse.isError( ' + this.getArgsString(arguments) + ' )\n']);
		}
		
		if (obj.type == 'Error') {
			return true;
		}
		
		// DBG
		if (true === this.DBG.isError) {
			PulseErrorWindow.Throw(['DBG','[' + _jj++ + ']Pulse.isError( ' + this.getArgsString(arguments) + ' )\n']);
		}		

		for (_j = 0; _j < this.errorTests.length; _j++) {
			if (obj[this.errorTests[_j]] != 'undefined') {
				return true;
			}
		}
		
		// DBG
		if (true === this.DBG.isError) {
			PulseErrorWindow.Throw(['DBG','[' + _jj++ + ']Pulse.isError( ' + this.getArgsString(arguments) + ' )\n']);
		}
				
		return false;

	},
	
	/**
	 * 
	 */
	dbgParams: function(array, params) {
		if (typeof(array) == 'undefined' || typeof(array.push) != 'function') {
			array = [];
		}
		
		for (i = 0; i < params.length; i++) {
			paramString = '[' + i + '] ';
			try {
				param = params[i];
				if (typeof(param.o) != 'undefined' || typeof(param.n) != 'undefined') {
					paramString += this.formatProperty(param.o, param.n);
				} else {
					paramString += this.formatProperty(param);
				}
			} catch (paramFailure) {
				paramString += this.formatProperty(param, 'param') + '  e: ' + paramFailure;
			}
			array.push(paramString);
		}
		
		return array;
	},
	
	/**
	 * @param {Array} array
	 * 		dbg-array to add values to if given
	 * @param {Object} propsObj
	 * 		the object to debug the properties from
	 * @param {Array} props
	 * 		the properties to debug as strings
	 * @return
	 * 		{Array string} properties dbg-info 
	 */
	dbgProperties: function(array, propsObj, props) {
		
		if (typeof(array) == 'undefined' || typeof(array.push) != 'function') {
			array = [];
		}
		
		for (i = 0; i < props.length; i++) {
			propString = '<b>[' + i + ']</b> ';				
			try {
				prop = props[i];				
				if (prop.indexOf('.') != -1) {
					propObj = this.retrieveProperty(prop, propsObj);					
					propString += this.formatProperty(propObj.o, prop);
					propString += '    @  ' + propObj.addstr;
//					propString += '           >>>' + prop;
				} else {
					propString += this.formatProperty(propsObj[prop], prop);
				}				
			} catch (propFailure) {
				propString += propFailure;
			}			
			array.push(propString);
		}
				
		return array;
	},
	
	/**
	 * 
	 */
	retrieveProperty: function(prop, propsObj) {
		
		propArr = prop.split('.');

		ii = 0;
		propObj = propsObj[propArr[ii]];
		addstr = '' + propArr[ii];
		ii += 1;
		while(typeof(propArr[ii]) != 'undefined' && propArr[ii] != '') {
			if (typeof(propObj) == 'undefined') {
				break;
			}
			propObj = propObj[propArr[ii]];
			addstr += '.' + propArr[ii];
			ii += 1;
		}
		
		/*
		addstr = '' + propArr[0];
		propObj = propsObj[propArr[0]];
		
		for (j = 1; j < propArr.length; j++) {
			if (typeof(propObj) == 'undefined') {
				break;
			}
			propObj = propObj[propArr[j]];
			addstr += '.' + propArr[j];
		}
		*/
		
		return {
			o: propObj,
			addstr: addstr
		};
	},
	
	/**
	 * 
	 */
	formatErrorHeader: function(error) {
		
		
		ostring = (typeof(error.object) != 'undefined' 
			&& typeof(error.object.type) == 'string') ? error.object.type : error.object;
				
		append = '';
		obj = error.object;
		if (typeof(error.error) == 'object' && typeof(error.error.args) != 'undfined') {
			if (typeof(obj[error.fn]) == 'function') {
				obj = obj[error.fn];
				append = '( ' + this.getArgsString(error.error.args) + ' )';
			}
		}
		
		return '<b>{ ' + this.colorString(typeof(obj),'blue') + ' }  ' + ostring + '.' + error.fn + append + '</b>';
		
	},
	
	/**
	 * 
	 */
	formatProperty: function(prop, identifier) {
		if (typeof(identifier) != 'undefined') {
			return '<b>{ ' + this.colorString(typeof(prop),'blue') + ' ' + identifier + ' } ' + 
				this.formatPropertyValue(prop) + '</b>';
		}
		return '<b>{ ' + this.colorString(typeof(prop),'blue') + ' } ' + 
			this.formatPropertyValue(prop) + '</b>';
	},
	
	/**
	 * @param {Object} value
	 * 
	 * @return 
	 * 		{String} '"value"' : if typeof(value) == {String}
	 * 		{String} '"[ value[1], value[2], ... ]"' : if typeof(value) == {Array}
	 * 		{String} 'value' : simple toString otherwise
	 */
	formatPropertyValue: function(value) {
		
		if (typeof(value) == 'string') {
			return '"' + value + '"';
		} else if (typeof(value) != 'undefined' && typeof(value.length) == 'number' 
			&& typeof(value.push) == 'function') {
			string = '[ ' + value;
//			for (i = 0; i < value.length; i++) {
//				string += this.formatPropertyValue(value[i]);
//				if (i == (value.length)) {
//					break;
//				}
//				string += ',';
//			}
			return string + ' ]';
		}		
		return '' + value;
	},
	
	/**
	 * 
	 */
	colorString: function(string, color) {
		return '<span style="color:' + color + ';">' + string + '</span>';
	},
	
	/**
	 * 
	 */
	getArgsString: function(args) {
		string = '';
		try {
			if (typeof(args) != 'undefined') {
				
				for (i = 0; i < args.length ;i++) {
					
					arg = args[i];					

					if (arg === null) {
						string += '{ ' + this.colorString(typeof(arg),'blue') + ' } [' + arg + ']';
					} else if (typeof(arg) == 'object' && typeof(arg.push) == 'function') {
						string += '{ ' + this.colorString(typeof(arg),'blue') + ' } [' + arg + ']';
					} else if (typeof(arg) == 'string') {
						string += '{ ' + this.colorString(typeof(arg),'blue') + ' } "' + arg + '"';
					} else {
						string += '{ ' + this.colorString(typeof(arg),'blue') + ' } ' + arg;
					}
					
					
					if (i < (args.length - 1)) {
						string += ' , ';
					}
					
				}
				
			}
		} catch (argsError) {
			return 'args: ' + args + ', e: ' + this.colorString(argsError,'red');
		}
		return string;
	},
	
	/**
	 * 
	 */
	getRootCause: function(error, _kk) {
		
		_kk = (typeof(_kk) == 'undefined') ? 0 : _kk;
		if (true === this.DBG.getRootCause) {
			PulseErrorWindow.Throw(['DBG',
				'[' + _kk++ + '.0]Pulse.getRootCause( ' + arguments + ' )\n',
				'[' + _kk++ + '.0]Pulse.getRootCause( ' + error.id + ' )\n']);
		}
		
		if(typeof(error.error) == 'object') {
		
			if (true === this.handleError(error)) {
				
				if(typeof(error.error.o) == 'object') {
					if (true === this.DBG.getRootCause) {
						PulseErrorWindow.Throw(['DBG',
							'[' + _kk++ + '.1]Pulse.getRootCause( ' + arguments + ' )\n',
							'[' + _kk++ + '.1]Pulse.getRootCause( ' + error.id + ' )\n']);
					}				
					return this.getRootCause(error.error.o, _kk);
								
				}
				
			} /*else {*/
			
			if (true === this.DBG.getRootCause) {
				PulseErrorWindow.Throw(['DBG',
					'[' + _kk++ + '.2]Pulse.getRootCause( ' + arguments + ' )\n',
					'[' + _kk++ + '.2]Pulse.getRootCause( ' + error.id + ' )\n']);
			}
			return this.getRootCause(error.error, _kk);
			
			
				
				
				/*if (typeof(error.error.type) == 'Error') {
					if (true === this.DBG.getRootCause) {
						PulseErrorWindow.Throw(['DBG','[' + _kk++ + '.2]Pulse.getRootCause( ' + arguments + ' )\n']);
					}
					return this.getRootCause(error.error);
					
				} else if (typeof(error.error.e) == 'object') {
					if (true === this.DBG.getRootCause) {
						PulseErrorWindow.Throw(['DBG','[' + _kk++ + '.3]Pulse.getRootCause( ' + arguments + ' )\n']);
					}
					return this.getRootCause(error.error.e);
					
				}*//* else if (typeof(error.object) == 'object' 
						&& typeof(error.get('e')) == 'string'
						&& error.object.type == error.get('e')) {
					
					return error.object;
					
				}*/
				
			/*}*/
		
		}
		if (true === this.DBG.getRootCause) {
			PulseErrorWindow.Throw(['DBG',
				'[' + _kk++ + '.3]Pulse.getRootCause( ' + arguments + ' )\n',
				'[' + _kk++ + '.3]Pulse.getRootCause( ' + error.id + ' )\n']);
		}
		if (typeof(error) != 'undefined' && typeof(error.e) == 'object') {
			return this.getRootCause(error.e, _kk);
		}
		return error;
	},
	
	/**
	 * 
	 */
	handleError: function(error) {
		
		if(typeof(error.error) == 'object') {
			
			if (error.error.type == 'Error') {
				e = error.get('e');
				handler = error.get('handler');
			} else {
				e = error.error.e;
				handler = error.error.handler;
			}
			
			if ((typeof(e) == 'string' && e.toUpperCase() == 'HANDLE') 
				|| typeof(handler) != 'undefined') {
				return true;
			}
			
		}
		
		return false;
		
	},
	
	/**
	 * 
	 */
	getErrorHandle: function(error, bHandle) {
		
		// determine handle state
		handle = (true !== bHandle) ? this.handleError(error) : bHandle;
		
		// ...go deep
		if (true === this.handleError(error)) {
			 
			if (typeof(error.get('o')) == 'object') {
			
				return this.getErrorHandle(error.get('o'), handle);
				
			}
			
		} else {
			
			if (typeof(error.get('e')) == 'object') {
			
				return this.getErrorHandle(error.get('e'), handle);
				
			}
			
		}
		
		// build handle
		if (true === handle) {
			
			// retrieve handleError
			handleError = this.getRootCause(error);
			
			// return handler if
			// typeof(handler) == fn()  >> return: handler
			// typeof(handler) == {obj} >> return: return {handler}.handle
			try {
				if (typeof(handleError.handler) == 'function') {
					return handleError.handler;
				}
				if (typeof(handleError.handler) == 'object') {
					return handleError.handler.handle;
				}
			} catch (e) {/* ignore */}
			
			// retrieve handleError.object		
			if (typeof(handleError.object) == 'string') {
				object = handleError.object;				
			} else if (typeof(handleError.object) == 'object' 
					&& typeof(handleError.object.type) == 'string') {
				object = handleError.object.type;
			}
			
			// checks continue getHandle
			if (typeof(Pulse[object]) == 'undefined') { return; }
			if (typeof(Pulse[object].Handler) == 'undefined') { return; }
			
			// retrieve handleError.handler || handleError.e
			handler = handleError.handler; 
			if (typeof(handler) != 'undefined') {				
				if (true === handler) {
					handler = handleError.e;
				}				
			} else {
				handler = handleError.e;
			}			
			
			// try handler || handleError.functionName
			if (typeof(Pulse[object].Handler[handler]) != 'undefined') {
				return Pulse[object].Handler[handler];
			} else {
				return Pulse[object].Handler[handleError.functionName];
			}
			
		}
		
	},
	
	/**
	 * @param localeString 
	 * 		the locale to build the country-flag-icon-css-class for
	 * 
	 * @return
	 * 		the country-flag-icon-css-class, or 'errorIconCls' 
	 */
	getFlagCls: function(localeString) {
		try {
			return localeString.split('_')[1].toLowerCase() + 'FlagCls';
		} catch (e) {
			THROW({o:e,args:arguments},Pulse,'getFlagCls');
			return 'errorIconCls';
		}
	},
	
	/**
 	 * 
 	 */
 	insertHasChangesIcon: function(panel) {
 		
		// DBG >>
		THROW({propsObj:panel,props:[
			'id','header','header.id','header.className'
		]},this,'insertHasChangesIcon');
 		
 		if (typeof(panel) == 'undefined'|| panel === null) {
 			// check
 			return;
 		}
	 		
 		try {
 		
	 		if (typeof(panel.toggleHasChangesIcon) == 'function') {
	 			// already there
	 			return;
	 		}
			
			// retrieve title-dom
			titleSelector = "*[@class*='x-panel-header-text']";
			if (panel.type == 'SubEditorWindow') {
				titleSelector = "*[@class*='x-window-header-text']";
			}
			extPanelElTitleDom = Ext.DomQuery.selectNode(
				titleSelector,
				Ext.get(panel.header.id).dom
			);
			// retrieve icon-dom
			iconSelector = "*[@class*='x-panel-inline-icon']";
			if (panel.type == 'SubEditorWindow') {
				iconSelector = "*[@class*='x-panel-icon']";
			}
			extPanelElIconDom = Ext.DomQuery.selectNode(
				iconSelector,
				Ext.get(panel.header.id).dom
			);
			
			// build img
			hasChangesIconImgEl = document.createElement('img');			
			hasChangesIconImgEl.id = panel.id + '.hasChangesIconImgEl';
			hasChangesIconImgEl.src = Ext.BLANK_IMAGE_URL;
			hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
			
			// add to header
			if (typeof(extPanelElIconDom) != 'undefined' && extPanelElIconDom !== null) {
				extPanelElIconDom.parentNode.insertBefore(hasChangesIconImgEl, extPanelElIconDom);
			} else {
				extPanelElTitleDom.parentNode.insertBefore(hasChangesIconImgEl, extPanelElTitleDom);
			}
			
			// set for tab
			panel.hasChangesIconImgEl = hasChangesIconImgEl;
			
			// add function for tab
			panel.toggleHasChangesIcon = function(bool) {
				
				// tabHasChangesIcon / tabHasChangesIconHidden
				
				if (typeof(bool) != 'boolean') {
					if (this.hasChangesIconImgEl.className == 'tabHasChangesIconHidden') {
						this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
					} else {
						this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
					}
				} else {
					if (true === bool) {
						this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
					} else {
						this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
					}
				}
				
			};
		
 		} catch(e) {
 			
 			// DBG >>
 			FATAL(e, this, 'insertHasChangesIcon');
 			
 		}
		return;

 	},
 	
 	id: function() {
 		
 		if (this.props.id === null) {
 			this.props.id = 0;
 		} else {
 			this.props.id += 1;
 		}
 		return 'pid_' + this.props.id;
 	}
		
};

/**
 * 
 * 
 * 
 * THROW(e,o,fn);
 * 
 * @param {Object} e: {
 * 						args: arguments, 
 * 								if given will output the current functions arguments
 * 						e: anything, 
 * 								if given will be tried to evaluate for output
 * 						o: anything, 
 * 								if given will be tried to evaluate for output
 * 						p: {Object} Array of anything, (use for array-dbg)
 * 								if given will be tried to evaluate for output
 * 
 * 								special output available for: 
 * 								p = [ 
 * 									{ o: {Object} parameter, n: {String} name }, 
 * 									{ o: {Object} parameter, n: {String} name }, 
 * 									...
 * 								]
 * 
 * 						props: {Object} Array [{String},{String},...]
 * 								if given will be tried to evaluate for output:
 * 								1. 	the properties will be debugged for given param o
 * 								2. 	if (e.propsObj) => the properties will be debugged 
 * 									for given param e.propsObj
 * 						propsObj: anything, 
 * 								if given will be tried to evaluate for output
 * 								if (e.props) => the properties of e.propsObj will be debugged
 * 					}
 * 
 * @param {Object} o, any object 
 * 			prefererably "Pulse.Object" with set type and id 
 * 			where the THROW is being called
 * 
 * @param {String} fn, any string
 * 			preferably the function-name or any other identifier-string
 * 			
 * 			fn will be used in combination with given o.DBG to determine whether 
 * 			to show dbg-output or not 
 * 
 * 
 * @see {function} Pulse.debug
 */
THROW = Pulse.debug;

FATAL = function(e, o, fn, eString) {
	
	
	
//	if (typeof(e) == 'object' && e !== null && e.type == 'Error') {
////		if (e.type == 'Error') {
//			if (typeof(e.e) == 'undefined') {
//				e.e = (typeof(eString) == 'string' && eString !== '') ? eString + ': ' + e.e : 'FATAL' + ': ' + e.e ;
//			}
//			THROW(e,o,fn);
//			return;
//		}
		
//		THROW({
//			e: (typeof(eString) == 'string' && eString !== '') ? eString : 'FATAL',
//			o: '' + e,
//			propsObj: e,
//			props: ['id','e','description']
//		},o,fn);
//		
//		return;
		
//	}
	
	props = ['id','e','description'];
	if (typeof(e) == 'object' && e !== null) {
		eString = (typeof(eString) == 'string' && eString !== '') ? eString + ': ' + e.e : 'FATAL' + ': ' + e.e;
		for (var _EPROP in e) {
			props.push('' + _EPROP);
		}
	} else {
		eString = (typeof(eString) == 'string' && eString !== '') ? eString : 'FATAL';
	}
	
	THROW({
		e: eString,
		o: e,
		propsObj: e,
		props: props
	},o,fn);
	
};

/**
 * 
 */
 

/**
 * @see {function} Pulse.loadPanelCallBack
 */
LPCB = Pulse.loadPanelCallBack;

/**
 * @see {function} Pulse.loadPanelCallBack
 */
LPCB_DISABLE = Pulse.loadPanelCallBackDisablePanel;

/**
 * @see {function} Pulse.loadPanelCallBack
 */
GETFLAG = Pulse.getFlagCls;


/**
 * 
 */
Pulse.Configuration = function(configuration) {
	this.configuration = configuration;
};

Pulse.Configuration.prototype = {
	
	/**
	 * 
	 */
	 type: 'Configuration',
	
	/**
	 * 
	 */
	getConfiguration: function() {
		return this.configuration;
	},
	
	/**
	 * 
	 */
	get: function(name) {
		if (typeof(this.configuration[name]) == 'undefined'
			|| this.configuration[name] === null) {
			return null;
		}
		return this.configuration[name];
	}, 
	
	/**
	 * 
	 */
	has: function(name) {
		if (typeof(this.configuration[name]) == 'undefined') {
			return false;
		}
		return true;
	}
	
};
/**
 * 
 */
DBG.Editor = {
	initComponent: { Editor: false },
	addSubEditor: { Editor: false },
	removeSubEditor: { Editor: false },
	removeSubEditors: false,
	isPulseEditor: false,
	hasChanges: { Editor: false },
	getChanges: { Editor: false },
	reset: { Editor: false },
	commit: { Editor: false },
	closeCreateFormWindow: false,
	createForm: { 
		create: false,
		close: false
	},
	closeCreateFormWindow: false,
	registerEditorMSG: { Editor: false },
	editorMSG: { Editor: false },
	getContent: { Editor: false },
	MSG: false,
	initialize: false
};
/**
 * @[comparable]
 * @see this.comparable
 */
Editor = {
	
	forbiddenInitialConfigValues: ['component','type','subEditors','isPulseEditor','configuration'],
	
	/**
	 * add this if not a direct sub-class of Pulse
	 * 
	 * {String} component: Pulse[component][type]
	 */
	component: null,
	
	/**
	 * 
	 */
	type: 'Editor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.Editor*/,
	
	/**
	 * required to fully show that this class
	 * has implemented: 
	 * 
	 * 		- this.equals(o) which follows certain rules.
	 * 		- this.toString()
	 * 
	 * @see this.equals(o)
	 */
	implementsComparable: true,
	
	/**
	 * required to fully show that this class is configurable: 
	 * 
	 * 		will call this.initialize during creation
	 * 
	 * @see this.initialize()
	 */
	implementsConfigurable: false,
	
	/**
	 * array of sub-editors.
	 * 
	 * @see this.getSubEditors()
	 */
	// subEditors: [],
	
	/**
	 * flags a Object<? extends Pulse.Editor>
	 */
	isPulseEditor: true,
	
	/**
	 * adds a sub-editor to the editor and registers the editor-MSG's.
	 * 
	 * 
	 * 		if the add is successfull and editor implements
	 * 		function editor.init() this will call 
	 * 		editor.init(this)
	 * 		(usefull if "masterEditor"-info is required on initalization) 
	 * 
	 * 
	 * @return {Boolean}
	 * 		true,	if the passed editor has been added
	 * 		false,	otherwise
	 */
	addSubEditor: function(editor) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,o:editor,props:['id','subEditors.length','subEditors']},this,'addSubEditor.Editor');
		}
		
		try {
			
			// if (true === this.isPulseEditor(editor)) {
			if (true === editor.isPulseEditor) {
				if (typeof(this.getSubEditor(editor.id)) != 'undefined') {
					this.removeSubEditor(editor.id);
				}
				if (typeof(editor.masterEditor) == 'undefined' || editor.masterEditor === null) {
					editor.masterEditor = this;
				}
				this.registerEditorMSG(editor);
				this.subEditors.push(editor);
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments,o:editor,props:['id','subEditors.length','subEditors']},this,'addSubEditor.Editor');
				}
				if (typeof(editor.init) == 'function') {
					editor.init(this);
				}
				return true;
			}
			
			throw({
				e:'PULSE_EDITOR_CHECK: ' + editor.isPulseEditor,
				editor: editor,
				editorId: editor.id,
				editorType: editor.type
			});
			
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'addSubEditor.Editor');
			}
		}
		return false;
		
	},
	
	/**
	 * returns a sub-editor by id.
	 * 
	 * @param {String} id
	 */
	getSubEditor: function(id) {
		if (this.subEditors.length < 1) {
			return;
		}
		for (var i = 0; i < this.subEditors.length; i++) {
			e = this.subEditors[i];
			if (e.id == id) {
				return e;
			}
		}

	},
	
	/**
	 * return the sub-editors of the editor. (clone)
	 * 
	 * @return {Object} Array[ {Object} "SubEditor", ... ]
	 */
	getSubEditors: function() {
		return this.subEditors;
		/*
		arr = this.subEditors;
		return arr;
		*/
	},
	
	/**
	 * reomves a sub-editor.
	 * 
	 * @param {String}/{Object} object, 
	 * 		the id of the sub-editor to remove
	 * 		the sub-editor-object to remove
	 * 
	 * @return {Boolean}
	 * 		true, 	if a sub-editor existed and 
	 * 				has been removed and destroyed
	 * 		false,	otherwise
	 */
	removeSubEditor: function(object, boolDestroy) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,propsObj:object,props:['id','type']},this,'removeSubEditor');
		}
		
		if (this.subEditors.length < 1) {
			return false;
		}
		id = object;
		if (typeof(object) == 'object') {
			try {
				id = object.getId();
			} catch (e) {
				// DBG >>
				if (this.DBG) {
					FATAL(e,this,'removeSubEditor');
				}
				return false;
			}
		}
		
		for (var i = 0; i < this.subEditors.length; i++) {
			e = this.subEditors[i];
			if (e.id == id) {
				this.subEditors.splice(i,1);
				if (true === boolDestroy) {
					e.destroy(e);
				}
				delete e;
				return true;
			}
		}
		
		return false;
		
	},
	
//	/**
//	 * @return {Boolean} 
//	 * 		true, if the passed editor is undefined or null.
//	 * 
//	 * 		if the passed editor != undefined && editor !== null		
//	 * 		calls editor.isPulseEditor()		
//	 * 
//	 * 		false, otherwise
//	 */
//	isPulseEditor: function(editor) {
//		
//		// DBG >>
//		if (this.DBG) {
//			THROW({propsObj:editor,props:['id','type']},this,'isPulseEditor');
//		}
//		
//		try {
//			if (typeof(editor) != 'object' || editor === null) {
//				return true;
//			} else {
//				return editor.isPulseEditor();
//			}
//		} catch(e) {
//			// DBG >>
//			if (this.DBG) {
//				FATAL(e,this,'isPulseEditor');
//			}
//		}
//		
//		return false;
//
//	},
	
	/**
	 * removes and destroys all sub-editors
	 * 
	 * @return {Boolean} true and only true on success, undefined otherwise
	 */
	removeSubEditors: function() {
		if (typeof(this.subEditors) != 'undefined' && this.subEditors.length < 1) {
			return false;
		}
		try {
			eO = {};
			for (var i = 0; i < this.subEditors.length; i++) {
				
				try {
					
					this.subEditors[i].destroy(this.subEditors[i]);
					
				} catch(de) {
					eO[i+'.o'] = de;
					eO[i+'.toString'] = ''+de;
					eO[i+'.editor'] = this.subEditors[i];
				}
			}
			
			// DBG >>
			if (this.DBG) {
				THROW({propsObj:eO,props:DBG.getPropertyArray(eO)},this,'removeSubEditors');
			}
			
			delete this.subEditors;
			this.subEditors = [];
			return true;
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'removeSubEditors');
			}
			return false;
		}
	},
	
	/**
	 * checks sub-editors for changes
	 * 
	 * @return {Boolean} or undefined on errors 
	 * 		true, if a sub-editor has changes
	 * 		false, if no sub-editor has changes
	 */
	hasChanges: function() {
				
		// DBG >>
		/*if (this.DBG) {
			THROW({args:arguments,props:['id','subEditors','subEditors.length'],o:'Editor.CALL'},this,'hasChanges.Editor');
		}*/
		
		try {
			
			if (typeof(this.subEditors) == 'undefined' || this.subEditors.length < 1) {
				THROW({args:arguments,props:['id','subEditors','subEditors.length'],o:'NO EDITORS'},this,'hasChanges.Editor');
				return false;
			}
			
			// DBG >>
			if (this.DBG && this.DBG.hasChanges) {
				this.DBG.DBG_ARRAY = []/*new Array()*/;
				this.DBG.DBG_hasChanges = false;
			}
			
			for (var i = 0; i < this.subEditors.length; i++) {
				
				try {

					if (typeof(this.subEditors[i]) == 'object' && typeof(this.subEditors[i].hasChanges) == 'function') {
						
						// DBG >>
						if (this.DBG && this.DBG.hasChanges) {
							this.DBG.DBG_ARRAY.push({n: /*i + '. ' + */this.subEditors[i].id + '.HASCHANGES', o: this.subEditors[i].hasChanges()});
						}
													
						// if no DBG return true as soon as first sub-editor has changes
						if (true === this.subEditors[i].hasChanges()) {							
							
							if (this.DBG && this.DBG.hasChanges) {
								// DBG >>
								this.DBG.DBG_hasChanges = (this.DBG.DBG_hasChanges || this.subEditors[i].hasChanges());
							} else {								
								return true;
							}
							
						}
						
					} else {
						
						// DBG >>
						if (this.DBG && this.DBG.hasChanges) {
							this.DBG.DBG_ARRAY.push({n: /*i + '. ' + */'NO-EDITOR',o: false});
						}				
						
					}
					
				} catch (e) {
					
					// DBG >>
					if (this.DBG && this.DBG.hasChanges) {
						this.DBG.DBG_ARRAY.push({n: 'ERROR', o: '' + e});
					}
					
					continue;
				}
				
			} // end for-loop
			
			// DBG >>
			if (this.DBG && this.DBG.hasChanges) {
				
				THROW({
					args: arguments,
					props: ['id','type','subEditors','subEditors.length'],
					p: this.DBG.DBG_ARRAY,
					o: this.id + '.hasChanges: ' + this.DBG.DBG_hasChanges
				},this,'hasChanges.Editor');
				
				// return accumulated hasChnages for all sub-editors
				return this.DBG.DBG_hasChanges;
				
			} else {
				
				// if any sub-editor were true for changes
				// we wouldn't be here -> so return false
				return false;
				
			}
		
		} catch (ee) {
			// DBG >>
//			if (this.DBG) {
				FATAL(ee,this,'hasChanges','HASCHANGES FAILED');
//			}
		}
		
	},
	 
	/**
	 * returns the changes of the subeditors.
	 * 
	 * @param {Object} v,
	 * 		a value object to apply the changes to,
	 * 		if no v is passed a new v will be created
	 * 
	 * @return {Object}
	 * 		either passed v with applied values
	 * 		or newly created v with values 		
	 */
	getChanges: function(v) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['subEditors','subEditors.length']},this,'getChanges.Editor');
		}
		
		if (this.subEditors.length < 1) {
			return v;
		}
		
		initialV = v;
		if (typeof(v) != 'object' || v === null) {
			v = {};
		}
		
		try {
			
			if (true === this.hasChanges() || true === this.getChangesAlways) {
				for (var i = 0; i < this.subEditors.length; i++) {
					v = this.subEditors[i].getChanges(v);
				}
			} else {
				return initialV;
			}
			return v;
		
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'getChanges.Editor','GETCHANGES FAILED');
			}
		}
		
	},
	
	/**
	 * resets the sub-editors.
	 */
	reset: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['subEditors','subEditors.length']},this,'reset.Editor');
		}
		
		if (this.subEditors.length < 1) {
			return;
		}
		
		try {
			
			for (var i = 0; i < this.subEditors.length; i++) {
				this.subEditors[i].reset();
			}
		
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'reset.Editor','RESET FAILED');
			}
		}
		
	},
	
	/**
	 * commits the sub-editors.
	 */
	commit: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['subEditors','subEditors.length']},this,'commit.Editor');
		}
		
		if (this.subEditors.length < 1) {
			return;
		}

		try {
			
			for (var i = 0; i < this.subEditors.length; i++) {
				this.subEditors[i].commit();
			}
		
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'commit.Editor','COMMIT FAILED');
			}
		}
		
	},
	
	/**
	 * @param {Object} config
	 */
	showCreateFormWindow: function(config) {
		
		// DBG >>
		if (this.DBG) {
	    	THROW({
	    		args:arguments,
	    		propsObj: config,
	    		props:['scope','handler','params','fields','fields.length']
			},this,'showCreateFormWindow');
		}
		
		try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('VIEWPORT.getEl() = ' + typeof(pel));
	        }
		
			this.createFormFields = [];			
			
			for (i = 0; i < config.fields.length; i++) {
				fieldCFG = {
					pEditor: config.fields[i].pEditor,
					id: this.id + '.createFormField.' + config.fields[i].name,
		            fieldLabel: config.fields[i].fieldLabel,
		            name: config.fields[i].name, 
		            width: 400,
		            emptyText: config.fields[i].emptyText,
		            allowBlank: /*(typeof(config.fields[i].allowBlank) == 'boolean') 
		            	? config.fields[i].allowBlank : */false,
	            	validator: config.fields[i].validator,
	            	validates: (typeof(config.fields[i].validator) != 'undefined') ? false : true
		        };
				this.createFormFields.push(
					new Ext.form.TextField(fieldCFG)
		        );
			}
	        
	        // DBG >>
			if (this.DBG) {
		    	THROW({
		    		args:arguments,
		    		props:['createFormFields','createFormFields.length']
				},this,'showCreateFormWindow');
			}
	                    
	        createFormPanel = new Ext.form.FormPanel({
	            id: this.id + '.createForm',
	            name: 'createForm', 
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield', 
	            autoHeight: true, 
	            items: this.createFormFields
	        }); 
	        
	        // create-button
	        createCFG = {
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            scope: this,
	            handler: function() {
	                
	                // check values
	                check = true;
	                for (i = 0; i < this.createFormFields.length; i++) { 
	                    check = check 
	                    	&& (this.createFormFields[i].getValue().trim() !== '') 
	                    	&& (true === this.createFormFields[i].validates);
	                }
	                if (false === check) {
	                	return check;
	                }
//	                for (i = 0; i < this.createFormFields.length; i++) { 
//	                    check = check && this.createFormFields[i].isValid();
//	                }
//	                if (false === check) {
//	                	return check;
//	                }
	                
	                // checks passed : create
	                // DBG >>
        			if (this.DBG) {
        				THROW({o:'CREATE',props:['el','win','createFormWindow']},this,'createForm.create');
        			}
        			
        			// execute createHandler
        			try {
	        			if (typeof(config.handler) == 'function') {
		        			config.handler(this,config);
						} else {
	        				// DBG >>
		        			if (this.DBG) {
		        				THROW({o:'CREATE',propsObj:config,
		        					props:['scope','handler']
	        					},this,'createForm.create');
		        			}
		        			if (typeof(config.scope) == 'object' && config.scope !== null) {
		        				config.scope[config.handler](this,config);
		        			} else {
		        				this[config.handler](this,config);
		        			}
        				}
        			} catch(e) {
        				if (this.DBG) {
        					FATAL(e,this,'createForm.create','CREATE FAILED');
        				}
        			}
        			
	            } 
	        };
	        createFormPanel.addButton(createCFG); 
	        
	        closeWinCFG = {
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.createFormWindow.close();
	            } 
	        };
	        createFormPanel.addButton(closeWinCFG); 
	        
	        if (typeof(this.el) === 'undefined' || this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: this.id + '.createForm.window.el'
			    });
	        
	        }
        
	        this.createFormWindow = new Ext.Window({
	        	id: this.id + '.createForm.window',
	            title: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            iconCls: 'addIconCls',
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 130,
	            layout: 'border',
	            items: [ createFormPanel ],
	            width: 600
	        });
	        
	        this.createFormWindow.on({
	        	'close': {
	        		scope: this,
	        		fn : function() {
	        			
	        			// DBG >>
	        			if (this.DBG) {
	        				THROW({o:'BEFORE CLEANUP',
	        					props:['el','createFormWindow','createFormFields']},this,'createForm.close');
	        			}
	        			
	        			// clean
	        			delete this.el;
	        			delete this.createFormWindow;
	        			delete this.createFormFields;
	        			
	        			// DBG >>
	        			if (this.DBG) {
	        				THROW({o:'AFTER CLEANUP',
	        					props:['el','createFormWindow','createFormFields']},this,'createForm.close');
	        			}

	        		}	
	        	}
	        });
	                                      
	        this.createFormWindow.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.createFormWindow.show(this);
	        for (i = 0; i < this.createFormFields.length; i++) {                       
	        	this.createFormFields[i].validate();
	        }
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
	},
	
	/**
	 * 
	 */
	closeCreateFormWindow: function() {
		try {
			this.createFormWindow.close();
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'closeCreateFormWindow');
			}
		}
	},
	
	/**
	 * 
	 */
	getCreateFormParams: function(v) {
		
		try {
			if (typeof(v) != 'object') {
				v = {};
			}
			
			for (i = 0; i < this.createFormFields.length; i++) {
				v[this.createFormFields[i].getName()] = this.createFormFields[i].getValue().trim();
			}
			
			return v;
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'getCreateFormParams');
			}
		}
	},
	
	/**
	 * 
	 */
	registerEditorMSG: function(editor) {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				args:arguments,
				propsObj: editor,
				props: ['id','type']
			},this,'registerEditorMSG.Editor');
		}
		
		try {
			
			// if (true === this.isPulseEditor(editor)) {
			if (true === editor.isPulseEditor) {
				editor.on('MSG',function(msgString, _editor){
					
					// DBG >>
					if (this.DBG) {
						THROW({
							args:arguments
						},this,'MSG');
					}
					
					this.editorMSG(msgString,_editor,this);				
					
				},this);
			} else {
				throw({e:'PULSE_EDITOR_CHECK: ' + this.isPulseEditor(editor),editor:editor});
			}
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'registerEditorMSG.Editor');
			}
		}
	},
	
	/**
	 * 
	 */
	editorMSG: function(msgString, editor, masterEditor) {		
		
		// DBG >>
		if (this.DBG) {
			
			var p = [
				{n: 'editor', o: editor},
				{n: 'editor.id', o: editor.id},
				{n: 'editor.type', o: editor.type},
				{n: 'editor.subEditors', o: editor.subEditors},
//				{n: 'editor.subEditors.length', o: editor.subEditors.length},
//				{n: 'editor.hasChanges', o: editor.hasChanges()},
				{n: 'masterEditor', o: masterEditor},
				{n: 'masterEditor.id', o: masterEditor.id},
				{n: 'masterEditor.type', o: masterEditor.type},
				{n: 'masterEditor.subEditors', o: masterEditor.subEditors}
//				,
//				{n: 'masterEditor.subEditors.length', o: masterEditor.subEditors.length},
//				{n: 'masterEditor.hasChanges', o: masterEditor.hasChanges()}
			];
			
			//
			p.push({n: 'editor.subEditors', o: '#####################'});
			if (Ext.isArray(editor.subEditors)) {
				for (var i = 0; i < editor.subEditors.length; i++) {
					p.push({n: 'editor.subEditor[' + (i+1) + '].id', o: editor.subEditors[i].id + ' # ' + editor.subEditors[i].hasChanges()});
				}
			}
			//
			p.push({n: 'masterEditor.subEditors', o: '#####################'});
			if (Ext.isArray(masterEditor.subEditors)) {
				for (var j = 0; j < masterEditor.subEditors.length; j++) {
					p.push({n: 'masterEditor.subEditor[' + (j+1) + '].id', o: masterEditor.subEditors[j].id + ' # ' + masterEditor.subEditors[j].hasChanges()});
				}
			}
			THROW({
				args: arguments,
				p: p/*[
					{n: 'editor', o: editor},
					{n: 'editor.id', o: editor.id},
					{n: 'editor.type', o: editor.type},
					{n: 'masterEditor', o: masterEditor},
					{n: 'masterEditor.id', o: masterEditor.id},
					{n: 'masterEditor.type', o: masterEditor.type}
				]*/,
				props: ['id','type']
			},this,'editorMSG.Editor');
		}
		
//		if ( (msgString == 'reset' && true === this.hasChanges())
//			|| msgString == 'commit' ) {
//			return;
//		}
		
		msg = msgString.toUpperCase();
		if (msg == 'RESET' || msg == 'COMMIT' || msg == 'SAVESUCCESS' || msg == 'DELETESUCCESS') {
			
//			THROW({e:this.hasChanges(),o:masterEditor.hasChanges(),props:['id','type'],args: arguments,
//				p: p/*[
//					{n: 'editor', o: editor},
//					{n: 'editor.id', o: editor.id},
//					{n: 'editor.type', o: editor.type},
//					{n: 'editor.subEditors', o: editor.subEditors},
//					{n: 'editor.subEditors.length', o: editor.subEditors.length},
//					{n: 'editor.hasChanges', o: editor.hasChanges()},
//					{n: 'masterEditor', o: masterEditor},
//					{n: 'masterEditor.id', o: masterEditor.id},
//					{n: 'masterEditor.type', o: masterEditor.type},
//					{n: 'masterEditor.subEditors', o: masterEditor.subEditors},
//					{n: 'masterEditor.subEditors.length', o: masterEditor.subEditors.length},
//					{n: 'masterEditor.hasChanges', o: masterEditor.hasChanges()}
//				]*/
//			},this,'test');
			
			if (true === this.hasChanges()) {
				// DBG >>
				if (this.DBG) {
					THROW({
						args: arguments,
						p: p/*[
							{n: 'editor', o: editor},
							{n: 'editor.id', o: editor.id},
							{n: 'editor.type', o: editor.type},
							{n: 'masterEditor', o: masterEditor},
							{n: 'masterEditor.id', o: masterEditor.id},
							{n: 'masterEditor.type', o: masterEditor.type}
						]*/,
						props: ['id','type'],
						o: 'SUPRESSED SUBEDITOR-MSG DUE TO INTERNAL CHANGES'
					},this,'editorMSG.Editor');
				}
				return;
			}
		}

		this.fireEvent('MSG',msgString,editor,this);
	},
	
	/**
	 * 
	 */
	getContent: function() {
		// DBG >>
		if (this.DBG) {
			THROW({props:['content','content.id','content.clazz',
				'masterEditor','masterEditor.id','masterEditor.type']},this,'getContent.Editor');
		}
		
		o = this.content;
		if (typeof(o) == 'object' && o !== null) {
			return o;
		}
		if (typeof(this.masterEditor) == 'object' && this.masterEditor !== null 
			&& typeof(this.masterEditor.getContent) == 'function') {
			return this.masterEditor.getContent();
		}
	},
	
	/**
	 * 
	 */
	destroy: function(e) {
	  	
	  	this.removeSubEditors();
	  	delete this.subEditors;
	  	
	  	// call super
		Pulse.Editor.superclass.destroy.call(this,e);
	},
	
	/**
	 * 
	 */
	getId: function() {
		if (typeof(this.id) == 'undefined' 
			&& (typeof(this.initialConfig.id) == 'undefined' || this.initialConfig.id === null)) {
			this.id = this.type + '.' + Ext.id();
		}
		return this.id;
	},
	
	/**
	 * 
	 */
	 getTypeString: function() {
	 	return this.type;
	 },
	
	/**
	 * Compares the specified object with this entry for equality (by toString).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 *  
	 * @see this.comparable
	 */
	equals: function(o) {
		if (typeof(o) == 'object' && o !== null && o.type == this.type) {
			return (o == this);
		}
		return false;
	},
	
	/**
	 * @return {String}
	 * 
	 * @see this.comparable
	 */
	toString: function() {
		return '{ (' + this.type + ') @ id: ' + this.id + ' }';
	},
	
	/**
	 * Initialises the editor with the given configuration
	 * 
	 * set this.editorConf if a configuration is available
	 */
	initialize: function() {

		if (typeof(this.component) == 'string') {
			configuration = Pulse[this.component][this.type]['configuration'];
		} else {
			configuration = Pulse[this.type]['configuration'];
		}
		
		if (typeof(configuration) != 'object' 
			|| configuration === null 
			|| configuration.type !== 'Configuration' ) {
			throw({e:'CONFIGURATION.EXCEPTION'});
		}
		
		this.configuration = configuration;

	},
	
	/**
	 * checks the initialConfig for forbidden values
	 */
	checkInitialConfig: function() {
		for (i = 0; i < this.forbiddenInitialConfigValues; i++) {
			if (typeof(this.initialConfig[this.forbiddenInitialConfigValues[i]]) != 'undefined') {
				throw({e:'USAGE OF FORBIDDEN PROPERTY IN CONFIGURATION',o:this});
			}
		}
	}
	
};
// create object for Ext.Component-extension
EditorComp = Editor;
/**
 * required because extending Ext.Component.
 */
EditorComp.initComponent = function() {
	
	// check for forbidden fields in initialConfig
	this.checkInitialConfig();
	
	// apply DBG >>
	if (this.initialConfig.DBG) {
		this.DBG = DBG.apply(DBG[this.getTypeString()],this.initialConfig.DBG);
	}
	
	// DBG >>
	if (this.DBG) {
		props = ['id','type'];
		props = props.concat(DBG.getPropertyArray(this.initialConfig));
		THROW({args:arguments,props:props},this,'initComponent.Editor');
	}
	
	//
	if (typeof(this.subEditors) == 'undefined') {
		this.subEditors = [];
	}
	 			
 	// call super
	Pulse.Editor.superclass.initComponent.call(this);
 	
 	// add common events
	this.addEvents({
		
		
	   /**
		* 
		*/		
		'MSG': true
		
	});
	
	// configure
	if (true === this.implementsConfigurable) {
		this.initialize();
	}
};
Pulse.Editor = Ext.extend(Ext.Component,EditorComp); // END :: Pulse.Editor


/**
 * 
 * 
 * 
 * 
 */
var AbstractBasicContentEditor = {
	
	type: 'AbstractBasicContentEditor',
	
	// DBG
	DBG: false/*{
		init: false,
		getFCKEditorWindow: false,
		initAttachmentsPanel: false,
		buildSummaryPanel: true
	}*/,
	
	tab: null,
	
	win: null,
	msgPanel: null,
	contentPanel: null,
	
	loadURL: '',
	saveURL: '',
	onSaveSuccess: null,
	
	/**
	 * @param {Object} config
	 */
	init: function(config){
		
		try {
		
			// DBG
			THROW({
				args: arguments,
				propsObj:config,
				props:['id','content.id','content.bundle','content.clazz']
			},this,'init');		
			
			if (typeof(config.initContentLocalizationMapURL) == 'string' 
					&& config.initContentLocalizationMapURL !== '') {
				ContentLocalizationMapEditor.init(config);
			}
			
			if (typeof(config.loadSitemapNodesURL) == 'string' 
					&& config.loadSitemapNodesURL !== '') {
				this.initSitemapNodesDisplayer(config);
			}
			
			if (typeof(config.loadAttachmentsURL) == 'string' 
					&& config.loadAttachmentsURL !== '') {
				this.initAttachmentsPanel(config);
			}
			
			// setup field-monitoring
			this.initFieldMonitoring(config);
		
		} catch(e) {			
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'init');			
		}
	},
	
	/**
	 * @param {Object} config
	 */
	initFieldMonitoring: function(config) {
		// fetch the tab that has to be initialized
		tab = (typeof(config.tab) == 'object' && config.tab !== null) ? config.tab : Ext.getCmp(config.id);
		tab.monitor =  {
			tab: tab,
			headlineEl: Ext.get(config.content.clazz + '.' + config.content.id + '.name'),
			suffixEl: Ext.get(config.content.clazz + '.' + config.content.id + '.suffix'),
			keywordsEl: Ext.get(config.content.clazz + '.' + config.content.id + '.keywords')
		};
		// headline
		Pulse.initTextFieldMonitor(tab.monitor.headlineEl,tab.monitor,'headlineEl',false);
		// suffix
		Pulse.initTextFieldMonitor(tab.monitor.suffixEl,tab.monitor,'suffixEl',false);
		// keywords
		Pulse.initTextAreaMonitor(tab.monitor.keywordsEl,tab.monitor,'keywordsEl');
	},
	
	/**
	 * 
	 */
	getBasicFieldValues: function(clazz, id) {
		tab = Ext.getCmp(clazz + '.' + id + '.editor');
		vals = {};
		
		if (true === tab.monitor.headlineEl.changed) {
			vals.name = tab.monitor.headlineEl.getValue().trim();
		}
		
		if (true === tab.monitor.suffixEl.changed) {
			vals.suffix = tab.monitor.suffixEl.getValue().trim();
		}
		
		if (true === tab.monitor.keywordsEl.changed) {
			vals.keywords = tab.monitor.keywordsEl.getValue().trim();
		}
		
//		attachmentsEditor = Ext.getCmp(clazz + '.' + id + '.attachments.editor');
		if (typeof(tab.attachmentsEditor) != 'undefined' && tab.attachmentsEditor !== null 
			&& true === tab.attachmentsEditor.hasChanges()) {
			vals = tab.attachmentsEditor.getChanges(vals);
		}
		
		return vals;
	},
	
	/**
	 * call this on save-success.
	 * 
	 * @param {Object} config
	 */
	resetFields: function(config) {		
		tab = (typeof(config.tab) == 'object' && config.tab !== null) ? config.tab : Ext.getCmp(config.id);
		if (true === tab.monitor.headlineEl.changed) {		
			// set new tab title
			tab.setTitle(tab.monitor.headlineEl.getValue().trim());		
			// set the content-registry-nodes-text
			ContentRegistryEditor.renameNodeByContentId(config.content.id, tab.monitor.headlineEl.getValue().trim());
			// reset field
			tab.monitor.headlineEl.commit();			
		}
		if (true === tab.monitor.suffixEl.changed) {
			// reset field
			tab.monitor.suffixEl.commit();
		}
		if (true === tab.monitor.keywordsEl.changed) {
			// reset field
			tab.monitor.keywordsEl.commit();
		}
		
//		attachmentsEditor = Ext.getCmp(clazz + '.' + id + 'attachments.editor');
		if (typeof(tab.attachmentsEditor) != 'undefined' && tab.attachmentsEditor !== null 
			&& true === tab.attachmentsEditor.hasChanges()) {
			tab.attachmentsEditor.commit();
		}		
	},
	
	/**
	 * @param {Object} config
	 */
	getFCKEditorWindow: function(config) {
		
		// DBG
		THROW({
			args: arguments,
			propsObj:config,
			props:['loadURL','loadParams.id','saveURL','saveParams.id','scope','onSaveSuccess']
		},this,'getFCKEditorWindow');

		try {
		
			this.loadURL = config.loadURL;
			this.saveURL = config.saveURL;
			this.saveParams = config.saveParams;
			this.scope = config.scope;
			this.onSaveSuccess = config.onSaveSuccess;
		
		
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('163 :: PULSE.AbstratcBasicContent.Editor.js.getFCKEditorWindow() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
	        if (this.win === null) {
	                
				el = pel.createChild({
			        tag: 'div', 
			        id: 'FCKEditorWindow.el'
			    });        
				
				this.msgPanel = new Ext.Panel({id: 'FCKEditorWindow.msgPanel', region: 'north', html: 'msgs go here', /*bodyStyle:'padding:4px;',*/ border:false,autoHeight:true});
				
				this.contentPanel = new Ext.Panel({
					id: 'FCKEditorWindow.contentPanel',
					region: 'center'
				});
				
				items = [this.msgPanel, this.contentPanel];
				
				// config
			    windowCfg = {
			    	id: 'FCKEditorWindow',
			    	maximizable: false,
			        title: (typeof(config.title) == 'string') ? config.title : '',
			        iconCls: (typeof(config.iconCls) == 'string') ? config.iconCls : '',
			        closable: true, 
			        plain: true,
			        modal: true, 
			        renderTo: el,
			        height: 300, 
			        width: 400, 
			        layout: 'border',
					tbar: [
						/*new Ext.Action(*/{
							text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
							handler: function() {																
								saveOpts = {									
									url: AbstractBasicContentEditor.saveURL,
									method: 'POST',
									success: function(response, options) {
										decodedResponse = Ext.decode(response.responseText);
//										PulseError.Throw({e:'DBG',p:[{n:'decodedResponse.status',o:'' + decodedResponse.status}]});
										if (true === decodedResponse.status) {
//											AbstractBasicContentEditor.win.isDirty = false; <- done by MessageHandler
											if (typeof(AbstractBasicContentEditor.onSaveSuccess) == 'function') {
												if (typeof(decodedResponse.id) != 'undefined') {
													AbstractBasicContentEditor.saveParams.id = decodedResponse.id;
													if (typeof(AbstractBasicContentEditor.lastLoadConfig.params) == 'undefined') {
														AbstractBasicContentEditor.lastLoadConfig.params = { id: decodedResponse.id };
													} else {
														AbstractBasicContentEditor.lastLoadConfig.params.id = decodedResponse.id;
													}
												}
												AbstractBasicContentEditor.onSaveSuccess(decodedResponse);
											}
											if (typeof(AbstractBasicContentEditor.onSaveSuccess) == 'string'
												&& typeof(AbstractBasicContentEditor.scope) == 'object') {
												if (typeof(decodedResponse.id) != 'undefined') {
													AbstractBasicContentEditor.saveParams.id = decodedResponse.id;
													if (typeof(AbstractBasicContentEditor.lastLoadConfig.params) == 'undefined') {
														AbstractBasicContentEditor.lastLoadConfig.params = { id: decodedResponse.id };
													} else {
														AbstractBasicContentEditor.lastLoadConfig.params.id = decodedResponse.id;
													}
												}
												if (typeof(AbstractBasicContentEditor.scope[AbstractBasicContentEditor.onSaveSuccess]) == 'function') {
													AbstractBasicContentEditor.scope[AbstractBasicContentEditor.onSaveSuccess](decodedResponse);
												}
											}
											PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:'FCKEditorWindow'},{n:'msg',o:'SAVESUCCESS'}]});
										} else {
											PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'AbstractBasicContentEditor','tbar.save.Action.execute()');
										}
										AbstractBasicContentEditor.win.getTopToolbar().enable();										
									},
									failure: function(response, options) {
										if (typeof(response.responseText) == 'undefined') {
					   						PulseError.Throw({e:'REQUEST.FAILED'},'AbstractBasicContentEditor','tbar.save.Action.execute()');
								        } else {
								        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'AbstractBasicContentEditor','tbar.save.Action.execute()');
								        }
								        AbstractBasicContentEditor.win.getTopToolbar().enable();
									}
								};
								if (typeof(AbstractBasicContentEditor.saveParams) != 'undefined') {
									saveOpts.params = AbstractBasicContentEditor.saveParams;
									saveOpts.params.value = FCKeditorAPI.GetInstance('FCKEditor').GetData();
								}
								AbstractBasicContentEditor.win.getTopToolbar().disable();
								Ext.Ajax.request(saveOpts);
								
							},
							iconCls: 'saveIconCls'
						}/*)*/,
						'-',
						/*new Ext.Action(*/{
							text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
							handler: function() {
								AbstractBasicContentEditor.win.close();
							},
							iconCls: 'cancelIconCls'
						}/*)*/,
						'-',
						'->',
						/*new Ext.Action(*/{
							text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
							handler: function() {
								if (true === AbstractBasicContentEditor.win.isDirty) {
									// confirm reload
									Ext.Msg.confirm(
										VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
			                    		VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
										VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
			                    		function(response) {
			                    			if ('yes' === response) {
			                    				AbstractBasicContentEditor.win.isDirty = false;
			                    				AbstractBasicContentEditor.lastLoadConfig.callback = LPCB;
			                    				AbstractBasicContentEditor.lastLoadConfig.timeout = 30;
												AbstractBasicContentEditor.contentPanel.load(AbstractBasicContentEditor.lastLoadConfig);
												AbstractBasicContentEditor.msgPanel.hide();
												AbstractBasicContentEditor.msgPanel.collapse();
			                    			}
		                				},
		                			this);
		                			
								} else {
									AbstractBasicContentEditor.lastLoadConfig.callback = LPCB;
									AbstractBasicContentEditor.lastLoadConfig.timeout = 30;
									AbstractBasicContentEditor.contentPanel.load(AbstractBasicContentEditor.lastLoadConfig);
									AbstractBasicContentEditor.msgPanel.hide();
									AbstractBasicContentEditor.msgPanel.collapse();
								}
							},
							iconCls: 'reloadIconCls'
						}/*)*/
					],
			        items: items		        
		    	};
		    	    
		    	this.win = new Ext.Window(windowCfg);
	    	
	        }
	    	
	    	// initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
//			this.msgPanel.on('show',function(){AbstractBasicContentEditor.win.doLayout()});
			this.msgPanel.on('hide',function(){AbstractBasicContentEditor.win.doLayout(true);});
			
			// load editor
			this.lastLoadConfig = {
	        	url: config.loadURL,
	        	method: 'POST',
	        	timeout: 30,
	        	scripts: true,
	        	callback: LPCB
	        };
	        if (typeof(config.loadParams) != 'undefined') {
	        	this.lastLoadConfig.params = config.loadParams;
	        }	        
			// load editor
			this.contentPanel.load(this.lastLoadConfig);
	    	
	    	// ! hide win on close
	    	this.win.on({
	    		'beforeclose': {
	    			scope: this,
	    			fn : function(win) {
	    				if (true === win.isDirty) {
	    					// confirm reload
							Ext.Msg.confirm(
								VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
	                    		VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
								VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
	                    		function(response) {
	                    			if ('yes' === response) {
	                    				win.isDirty = false;
	    								win.hide();
	    								delete this.loadURL;
										delete this.saveURL;
										delete this.saveParams;
										delete this.scope;
										delete this.onSaveSuccess;
	                    			}
                				},
                			this);
	    				} else {
	    					win.hide();
	    					delete this.loadURL;
							delete this.saveURL;
							delete this.saveParams;
							delete this.scope;
							delete this.onSaveSuccess;
	    				}
	    				return false;
	    			}
	    		},
	    		'close': {
	    			scope: this,
	    			fn: function() {
	    				delete this.loadURL;
						delete this.saveURL;
						delete this.saveParams;
						delete this.scope;
						delete this.onSaveSuccess;
	    			}
	    		}
	    	});

			
			this.win.setSize({width: VIEWPORT.getSize().width * 0.8, height: VIEWPORT.getSize().height * 0.8});
	    	this.win.show();
			this.win.setPosition(VIEWPORT.getSize().width * 0.1, VIEWPORT.getSize().height * 0.1);
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
		
	},

	buildSummaryPanel: function(config) {
		
		// DBG >>
		if (this.DBG) {
			THROW({propsObj:config,props:['content.id','content.clazz','initURL','saveURL','loadURL']},this,'buildSummaryPanel');
		}
			
		summaryPanel = new Ext.Panel({
            id: config.content.clazz + '.' + config.content.id + '.summary.panel',
            title: VIEWPORT_PROPERTIES.SUMMARY + ':',
            collapsible:true, collapsed:true,
            renderTo: config.content.clazz + '.' + config.content.id + '.summary',
            contentEl: config.content.clazz + '.' + config.content.id + '.summary.content',
            tbar: [
                {
                    text: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT,
                    handler: function() {
                        AbstractBasicContentEditor.getFCKEditorWindow({
                            loadURL: config.initURL,
                            loadParams: { id: config.content.id },
                            saveURL: config.saveURL,
                            saveParams: { id: config.content.id },
                            onSaveSuccess: function() {
                                thisPanel = Ext.getCmp(config.content.clazz + '.' + config.content.id + '.summary.panel');
                                thisPanel.reloadContentAction.execute();
                            }
                        });                               
                    },
                    iconCls: 'editIconCls'
                },'-'
            ],
            reloadContentAction: new Ext.Action({
                text: 'reloads the content.div',
                handler: function() {
                    contentEl = Ext.get(config.content.clazz + '.' + config.content.id + '.summary.content');
                    contentEl.getUpdater().update({
                        url: config.loadURL,
                        method: 'POST',
                        callback: LPCB,
                        params: { id: config.content.id }
                    });
                }
            })
        });
        
        // disable summary-panels' content on expand
        summaryPanel.on('expand',function(p){
            el = p.getEl().last().child('.x-panel-body');
            if (true !== el.pulseMask) {
                Ext.DomHelper.append(el.dom, {cls:"pulseTransparentMask"}, true);
                el.pulseMask = true;
            }
        });	
			
	},
	
	/**
	 * 
	 */
	initSitemapNodesDisplayer: function(config) {
		
		// store
		sitemapNodesStore = new Ext.data.JsonStore({
			url: config.loadSitemapNodesURL,
			root: 'sitemapNodes',
			fields: [
				'text',
				'locale',
				{ name: 'visible', type: 'boolean' },
				'expandInfo',
				'expandIds',
				'contentName']
		});
		
		// panel
		sitemapNodePanel = new Ext.Panel({
			title: VIEWPORT_PROPERTIES.SITEMAP,
			iconCls: 'sitemapIconCls',
			id: config.content.clazz + '.' + config.content.id + '.sitemapNodes.panel',
			renderTo: config.content.clazz + '.' + config.content.id + '.sitemapNodes',
			collapsible: true, collapsed: true,
			html: '',
			tbar: ['->','-',{
				text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
				scope: sitemapNodesStore,
				handler: function() {
					this.load({
						params: { id: config.content.id },
						scope: panel,
						callback: function(records, options, success) {
							if (false === success) {
								panel.body.update(
									'<div>...load failure:</div>' + 
									'<div>...records: <b>[ ' + records + ' ]</b> </div>' +
									'<div>...options: <b>{ ' + options + ' }</b> </div>' +
									'<div>...success: <b>' + success + '</b> </div>');
							}
						}
					});
				},
				iconCls: 'reloadIconCls'				
			}]
		});
		
		sitemapNodePanel.buildExpandInfo = function (nodes) {
			
			buf = [];
			for (ii = 0; ii < nodes.length; ii++) {
				buf.unshift(' / ');
				
				if (true === nodes[ii].visible || 'true' == nodes[ii].visible) {
					buf.unshift('>');
					buf.unshift('style="vertical-align:middle;" border="0"');
					buf.unshift('width="14" height="14" class="visibleIconCls_14_no"');
					buf.unshift('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
				} else {
					buf.unshift('>');
					buf.unshift('style="vertical-align:middle;" border="0"');
					buf.unshift('width="14" height="14" class="invisibleIconCls_14_no"');
					buf.unshift('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
				}
				
				buf.unshift('</a> ');
				buf.unshift(nodes[ii].text + ' (id: ' + nodes[ii].id + ')');
				buf.unshift('>');
				buf.unshift(' ext:qtip="show ' + nodes[ii].text + ' (id: ' + nodes[ii].id + ') in sitemap"');
				buf.unshift('this.blur();return;"');
				buf.unshift('SitemapTree.expandByIds(null,[' + nodes[ii].expandIds + '],null,\'' + nodes[ii].locale + '\');');
//				buf.unshift('Ext.getCmp(\'SitemapEditor.WEST\').expand();');
				buf.unshift(' onclick="');
				buf.unshift(' style=" "');
				buf.unshift(' class=" "');
				buf.unshift('<a href="#"');
				
			}
			
			buf.unshift('> ' + nodes[nodes.length-1].locale + ' : ');
			buf.unshift('style="vertical-align:middle;" border="0"');
			buf.unshift('width="16" height="16" class="' + GETFLAG(nodes[nodes.length-1].locale) + '"');
			buf.unshift('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
			
			return buf;
		};
		
		// store-listener
		sitemapNodesStore.on('beforeload',function(store, options){
			this.getUpdater().showLoading();
		},sitemapNodePanel);

		// store-listener
		sitemapNodesStore.on('load',function(store, records, options){
			try {
				htmlBuf = [
					'<div style="padding:5px;">',
					'<ul ',
					'id="' + config.content.clazz + '.' + config.content.id + '.sitemapNodes"',
					'style="font-weight:bold;list-style:none;"',
					'>'
				];
				
				for (i = 0 ; i < records.length; i++ ) {
					htmlBuf.push('<li style="padding:1px;">');
					htmlBuf.push('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
					htmlBuf.push('width="16" height="16" class="sitemapIconCls"');
					htmlBuf.push('style="vertical-align:middle;" border="0"');
					htmlBuf.push('>');
					htmlBuf.push(' // ');
					if (records[i].get('expandInfo').length > 0) {
						htmlBuf = htmlBuf.concat(this.buildExpandInfo(records[i].get('expandInfo')));
					} else {
						htmlBuf.push('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
						htmlBuf.push('width="16" height="16" class="' + GETFLAG(records[i].get('locale')) + '"');
						htmlBuf.push('style="vertical-align:middle;" border="0"');
						htmlBuf.push('> ' + records[i].get('locale') + ' : ');
					}
					
					htmlBuf.push('<a href="#"');
					htmlBuf.push(' class=" "');
					htmlBuf.push(' style=" "');
					htmlBuf.push(' ext:qtip="show ' + records[i].get('text') + ' (id: ' + records[i].id + ') in sitemap"');
					htmlBuf.push(' onclick="');
//					htmlBuf.push('Ext.getCmp(\'SitemapEditor.WEST\').expand();');
					htmlBuf.push('SitemapTree.expandByIds(null,[' + records[i].get('expandIds') + '],null,\'' + records[i].get('locale') + '\');');
					htmlBuf.push('this.blur();return;">');
					htmlBuf.push(records[i].get('text') + ' (id: ' + records[i].id + ')');
					htmlBuf.push('</a> ');
					
					if (true === records[i].get('visible')) {
						htmlBuf.push('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
						htmlBuf.push('width="14" height="14" class="visibleIconCls_14_no"');
						htmlBuf.push('style="vertical-align:middle;" border="0"');
						htmlBuf.push('>');
					} else {
						htmlBuf.push('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
						htmlBuf.push('width="14" height="14" class="invisibleIconCls_14_no"');
						htmlBuf.push('style="vertical-align:middle;" border="0"');
						htmlBuf.push('>');
					}
					
					htmlBuf.push(' / ');
					htmlBuf.push(records[i].get('contentName'));
					htmlBuf.push('</li>');
				}
					
				htmlBuf.push('</ul></div>');
				
				this.body.update(htmlBuf.join(''));
			} catch(e) {
				this.body.update('panel.html.build.error:\n' + e);
			}
		},sitemapNodePanel);
		
		// panel-listener
		sitemapNodePanel.on('expand',function(panel){
			this.load({
				params: { id: config.content.id },
				scope: panel,
				callback: function(records, options, success) {
					if (false === success) {
						panel.update(
							'<div>...load failure:</div>' + 
							'<div>...records: <b>[ ' + records + ' ]</b> </div>' +
							'<div>...options: <b>{ ' + options + ' }</b> </div>' +
							'<div>...success: <b>' + success + '</b> </div>');
					}
				}
			});
		},sitemapNodesStore);
		
	},
	
	/**
	 * @param {Object} config
	 */
	initAttachmentsPanel: function(config) {
		
		try {
//			_tb = Ext.getCmp(config.id);
			if (this.DBG) {
				THROW({
					args:arguments,
					propsObj:config,
					props:['id','loadAttachmentsURL'],
					o: {
						propsObj: Ext.getCmp(config.id),
						props: ['id']
					}
				},this,'initAttachmentsPanel');
			}
			// TODO refactor below
			//--> to become this.attachmentsEditor once this extends
			// Ext.Component
		
			// build editor / add to tab
			attachmentsEditor = new Pulse.AttachmentsEditor({
				// TODO remove below after refactoring
				tab: Ext.getCmp(config.id),
				// TODO above below after refactoring
				content: config.content,
				id: config.content.clazz + '.' + config.content.id + '.attachments.editor',
				renderTo: config.content.clazz + '.' + config.content.id + '.attachments',
				loadAttachmentsURL: config.loadAttachmentsURL,
				initFileBrowserURL: config.initFileBrowserURL,
				fileBrowserTreeURL: config.fileBrowserTreeURL,
				addAttachmentURL: config.addAttachmentURL,
				editAttachmentURL: config.editAttachmentURL,
				deleteAttachmentURL: config.deleteAttachmentURL,
				fileBrowserPreviewURL: config.fileBrowserPreviewURL,
				initAttachmentDescriptionEditorURL: config.initAttachmentDescriptionEditorURL,
				saveAttachmentDescriptionEditorURL: config.saveAttachmentDescriptionEditorURL
			});
			
			tab = Ext.getCmp(config.id);
			if (typeof(tab.attachmentsEditor) != 'undefined') {
				// remove former attachments editor form tab
				delete tab.attachmentsEditor;
			}			
			tab.attachmentsEditor = attachmentsEditor;
					
			tab.attachmentsEditor.on('MSG',function(msgString,editor){
				
				THROW({args:arguments,propsObj:editor,props:['id','type']},editor,'MSG');
				
				// TODO implement proper meg-ing after refactoring
				
			},tab);
		
		} catch (e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:'' + e + description}, this, 'initAttachmentsPanel');
		}
		
	}
	
}; // END :: AbstractBasicContentEditor


/**
 * 
 */
var CommandMatcherEditor = {
	
	type: 'CommandMatcherEditor',
	
	// DBG
	DBG: {
		initComponent: false,
		initEditor: false,
		buildParamterGrid: false,
		removeCommandMatcherParameter: false,
		removeCommandMatcherParameters: false,
		hasChanges: false,
		resize: false,
		// shows DBG for grid.cloumnModel renderers
		// edit/delete-buttons
		renderer: false
	},
	
	/*
	// editor-id
	id: null,
	
	commandMatcher: null,
	
	win: null,
	msgPanel: null,
	
	//
	bundleBox: null,
	actionField: null,
	actionEl: null,
	localeBox: null,
	sitemapField: null,
	sitemapEl: null,	
	
	// parameters
	parameterEditor: null
	*/
	
	/**
	 * initializes the edit window for the command-matcher.
	 */
	initEditor: function () {

		THROW({props:['saveCommandMatcherURL','grid','store','parameterEditor']},this,'initEditor');

		// add save button
        if (false === this.win.isInitialized
        	&& typeof(this.saveCommandMatcherURL) == 'string' 
        	&& this.saveCommandMatcherURL !== '') {
        	
	        this.win.getTopToolbar().insertButton(0,[{
	        	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
	        	scope: this.win,
	        	handler: function() {
	        		
	        		if (false === this.isDirty) {
						return;
					}
					
					if (false === this.commandMatcherEditor.hasChanges()) {
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:this.id},{n:'msg',o:'savesuccess'}]});
						return;
					}
	        		
	        		Ext.Ajax.request({
						url: this.commandMatcherEditor.saveCommandMatcherURL,
						method: 'POST',
						scope: this.commandMatcherEditor,
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {								
								// commit changes
								this.commit();								
								// reload command-matcher-overview
								this.win.editor.reload();
								// reload permissions-overview
								PermissionOverviewEditor.reload();
								// save success message
								PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:this.win.id},{n:'msg',o:'savesuccess'}]});
			        		} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'win.tbar.saveCommandMatcher');
							}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'win.tbar.saveCommandMatcher');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'win.tbar.saveCommandMatcher');
					        }
						},
						params: this.commandMatcherEditor.getChanges()
					});
	        		
	        	},
	        	iconCls: 'saveIconCls'
	        },
	        new Ext.Toolbar.Separator(),
	        {
	        	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	        	scope: this.win,
	        	handler: function() {
	        		this.close();
	        	},
	        	iconCls: 'deleteIconCls'
	        },new Ext.Toolbar.Separator()]);
	        
	        this.win.isInitialized = true;
	        
        }
	        
        // this setting is necessary for msg-ing
        this.tab = this.win;
        
        // retrieve msgPanel
        this.msgPanel = Ext.getCmp(this.win.id + '.msgPanel');

		// bundle
		this.bundleBox = Pulse.getBundleBox('...');        
        // action
		this.actionField = this.win.editor.getActionField();        
        // build locale-box
		this.localeBox = Pulse.getLocaleBox('...');		
		// sitemap-id
		this.sitemapField = this.win.editor.getSitemapField();
                    
        // build bundle/action/locale/sitemap-form            
        formPanel = new Ext.form.FormPanel({
            id: 'editCommandMatcherForm.' + this.id,
            name: 'editCommandMatcherForm.' + this.id,
            renderTo: this.commandMatcher.clazz + '.' + this.commandMatcher.id + '.formpanel',
            margins: '3 3 3 3',
            bodyStyle: 'padding: 5px', 
            defaultType: 'textfield',
            autoHeight: true,
            labelWidth: 110, 
            items: [this.bundleBox,this.actionField,this.localeBox,this.sitemapField]
        });
        
        // build parameter-grid
        this.parameterEditor = this.buildParamterGrid();
        
        this.win.commandMatcherEditor = this;
        
        // resize this.win
        this.resize();
        
        // setup resize-listener
        this.win.on('resize', this.resize, this);
//        this.win.editor.contentPanel.getUpdater().on('beforeupdate', function() {
//        	this.parameterEditor = null;
//        	delete this.parameterEditor;
//        	this.destroy();
//    	}, this);

        // set initial values
        
        // bundle
		if (this.commandMatcher.bundle !== '') {
			this.bundleBox.setValue(this.commandMatcher.bundle);
		}
        
        // action
		if (this.commandMatcher.action !== '') {
			this.actionField.setValue(this.commandMatcher.action);
		}
        
        // build locale-box
		if (this.commandMatcher.locale !== '') {
			this.localeBox.setValue(this.commandMatcher.locale);
		}
		
		// sitemap-id
		if (this.commandMatcher.sitemap !== '') {
			this.sitemapField.setValue(parseInt(this.commandMatcher.sitemap, 10));
		}
		
		// init field monitoring
		this.initFieldMonitoring();

		// DBG
		THROW({
			props:['saveCommandMatcherURL','grid','store','parameterEditor'],
			p:[{n:'parameterEditor.id',o:''+this.parameterEditor.id}]
		},this,'initEditor');

	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		
		// DBG
		THROW({p:[{n:'->',o:(this.bundleBox.changed || this.actionEl.changed 
    		|| this.localeBox.changed || this.sitemapEl.changed
    		|| this.parameterEditor.hasChanges())}]},this,'hasChanges');
    		
		return (this.bundleBox.changed || this.actionEl.changed 
    		|| this.localeBox.changed || this.sitemapEl.changed
    		|| this.parameterEditor.hasChanges());
	},
	
	/**
	 * 
	 */
	getChanges: function() {
		
		p = { id: this.commandMatcher.id };
				
    	if (true === this.bundleBox.changed) {
    		p.bundle = (this.bundleBox.getValue() != '...') ? this.bundleBox.getValue().trim() : '';
    	}
    	if (true === this.actionEl.changed) {
    		p.action = this.actionField.getValue().trim();
    	}
    	if (true === this.localeBox.changed) {
    		p.locale = (this.localeBox.getValue() != '...') ? this.localeBox.getValue().trim() : '';
    	}
    	if (true === this.sitemapEl.changed) {
    		p.sitemap = this.sitemapField.getValue().trim();
    	}
    	if (true === this.parameterEditor.hasChanges()) {        		
    		modparams = this.parameterEditor.getChanges().modparams;
    		if (modparams.length > 0) {
    			p.modParameter = modparams;
    		}
    		remparams = this.parameterEditor.getChanges().remparams;
    		if (remparams.length > 0) {
    			p.remParameter = remparams;
    		}
    	}
    	return p;
	},
	
	/**
	 * 
	 */
	commit: function() {
		this.bundleBox.commit();
    	this.actionEl.commit();
    	this.localeBox.commit();
		this.sitemapEl.commit();			
		this.parameterEditor.reload();
	},
	
	/**
	 * 
	 */
	initFieldMonitoring: function() {
		// bundle
		Pulse.initDropDownBoxMonitor(this.bundleBox, this, 'bundleBox');
		//action
		this.actionEl = this.actionField.getEl();
		Pulse.initTextFieldMonitor(this.actionEl, this, 'actionEl');
		// locale
		Pulse.initDropDownBoxMonitor(this.localeBox, this, 'localeBox');
		// sitemap
		this.sitemapEl = this.sitemapField.getEl();
		Pulse.initTextFieldMonitor(this.sitemapEl, this, 'sitemapEl');
	},
	
	/**
	 * 
	 */
	resize: function() {
		
		// DBG
		THROW({args:arguments,props:['id']},this,'resize');
    	
    	contentEl = Ext.get('contentPanel.content.' + this.commandMatcher.id);
        if (contentEl !== null) {
        	contentElHeight = contentEl.getSize().height;
        	difference = this.win.getSize().height - this.win.getInnerHeight();
        	msgPanelHeight = 0;
        	if (typeof(this.msgPanel) != 'undefined' && true === this.msgPanel.isVisible()) {
        		msgPanelHeight = this.msgPanel.getSize().height;
        	}
        	this.win.setHeight(contentElHeight + difference + msgPanelHeight + 10); // + 10 padding
        }
        
        this.parameterEditor.setWidth(this.win.getInnerWidth() - 15);
	},
	
	/**
	 * 
	 */
	removeCommandMatcherParameter: function(id) {
		
//		THROW({args: arguments},this,'removeCommandMatcherParameter');
				
		store = this.parameterEditor.getStore();
				
		record = null;
    	store.each(function(r) {
    		if (r.get('id') == id) {
    			record = r;
    			return false;
    		}
    	});
		
		if (record === null) {
			return;
		}
		
		id = parseInt(id, 10);
		if (typeof(id) == 'number') {
			// record was loaded
			store.removedRecords.push(record);
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:this.win.id},{n:'msg',o:'change'}]});
		}
		store.remove(record);

	},
	
	/**
	 * 
	 */
	removeCommandMatcherParameters: function(recs) {
		
//		THROW({args: arguments},this,'removeCommandMatcherParameters');
		
		store = this.parameterEditor.getStore();
				
		remove = false;
    	store.each(function(r) {
    		for(ii = 0; ii < recs.length; ii++) {
	    		if (r.get('id') == recs[ii].get('id')) {
	    			id = parseInt(r.get('id'), 10);
	    			if (typeof(id) == 'number') {
	    				this.parameterEditor.getStore().removedRecords.push(r);
	    			}
	    			this.parameterEditor.getStore().remove(r);
	    			remove = true;
	    		}
    		}
    	},this);
    	
    	if (true === remove) {
    		PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:this.win.id},{n:'msg',o:'change'}]});
    	}
    	
    	return;

	},
	
	/**
	 * builds parameter-grid for command-matcher-editor-window.
	 */
	buildParamterGrid: function() {
		
		record = new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'realid' },
			{ name: 'name' },
			{ name: 'value' },
			{ name: 'initvalue' }
        ]);
        
    	id = 'store...' + Ext.id();
        store = new Ext.data.JsonStore({
        	id: id,
        	editor: this,
            pruneModifiedRecords : true,
            fields: record,
            root: 'data',
            remoteSort: false,                    
            url: this.loadCommandMatcherParametersURL,
            baseParams: {
            	id: this.commandMatcher.id
            },
            removedRecords: []
        });
        
        // reset store.removedRecords on load/reload
        store.on('load',function(store, recs, opts) {
        	store.removedRecords = [];
        });
        store.on('add',function(store, recs, index) {
        	Ext.getCmp(store.gridId).doLayout();
        });        
        
        // selection-model
    	gridSm = new Ext.grid.CheckboxSelectionModel();        
        
        // build column-model                
        columns = [
        	gridSm,
            {
                header: 'id:',
                dataIndex: 'realid',
                sortable: true,
                width: 30,
                fixed: true,
                renderer: function(realid) {
                	realid = Number(realid) + '';
                	if (realid == 'NaN') {
                		return '';
                	}
                	return realid;
                }
            },{    
                header: VIEWPORT_PROPERTIES.NAME + ':',
                dataIndex: 'name',
                sortable: true,
                editor: new Ext.form.TextField()
            },{    
                header: VIEWPORT_PROPERTIES.VALUE + ':',
                dataIndex: 'value',
                sortable: true,
                editor: new Ext.form.TextField()
            }
        ];

		
		store.gridId = this.commandMatcher.clazz + '.' + this.commandMatcher.id + '.parameters.grid';

        // add delete button to rows
        if (typeof(this.saveCommandMatcherURL) == 'string'
        	&& this.saveCommandMatcherURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(value,meta,rec,rowIndex,colIndex,store) {
                	
                	THROW({
	    				args:arguments,
	    				propsObj:store,
	    				props:['id','gridId']
    				},store.editor,'renderer');
                	        		
					try {
			        	html = '<a href="#" onclick="Pulse.Execute({' + 
								'id: \'' + store.gridId + '\',' + 
								'editor: \'editor\',' + 							
								'fn: \'removeCommandMatcherParameter\',' + 
								'params: \'' + value + '\'' +
							'});this.blur();return;" ' + 
							'style="display:block;width:14px;height:14px;margin:0px;padding:0px;border:0px;vertical-align:middle;" ' + 
							'class="deleteIconCls_14" ';
				
					    html += 'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE + '"';
					    				
						html += '/><img src="' + Ext.BLANK_IMAGE_URL + '" width="1" height="1" border="0"/></a>';
				
						return html;
						
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
		
		gridCm = new Ext.grid.ColumnModel(columns);
        
    	createButtonCFG = {
        	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
        	scope: this,
            handler: function() {
        		store = this.parameterEditor.getStore();
        		Rec = new Ext.data.Record.create([
					{ name: 'id' },
					{ name: 'realid' },
					{ name: 'name' },
					{ name: 'value' },
					{ name: 'initvalue' }
		        ]);
		        id = Ext.id();
		        store.add(new Rec({id: id, realid: id, name: '', value: ''}));	
            },
            iconCls: 'addIconCls',
            disabled: true
        };
            
        deleteButtonCFG = {
        	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
        	scope: this,
            handler: function() {
            	// removes selected records
           		this.removeCommandMatcherParameters(this.parameterEditor.getSelectionModel().getSelections());                	                	
            },
            iconCls: 'deleteIconCls',
            disabled: true
        };
        
        reloadButtonCFG = {
        	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
        	scope: this,
        	handler: function() {
        		if (true === this.parameterEditor.hasChanges()) {						
					// display reload/close confirm-dialogue
					Ext.Msg.confirm(
						VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
						VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
						VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
			        	function(response) {
			        		// close win
				        	if('yes' === response) {
				        		this.parameterEditor.reload();
				        	}
			        	}, 
			        	this
		        	);
					return false;		
				}
        	},
        	iconCls: 'reloadIconCls'
        };
           
        if (typeof(this.saveCommandMatcherURL) == 'string' && this.saveCommandMatcherURL !== '') {
        	createButtonCFG.disabled = false;
        	deleteButtonCFG.disabled = false;
        }
        
        tbar = [];
        tbar.push(createButtonCFG);
        tbar.push('-');
        tbar.push(deleteButtonCFG);
        tbar.push('-');
        tbar.push('->');
        tbar.push('-');
        tbar.push(reloadButtonCFG);
        
        grid = new Ext.grid.EditorGridPanel({
        	title: VIEWPORT_PROPERTIES.PARAMETERS + ':',
//			collapsible: true, collapsed: true,
            renderTo: this.commandMatcher.clazz + '.' + this.commandMatcher.id + '.parameters',
        	id: this.commandMatcher.clazz + '.' + this.commandMatcher.id + '.parameters.grid',
            store: store,
            cm: gridCm,
            sm: gridSm,
            autoExpandColumn: 'id',
            height: 200,
            loadMask: true,
            viewConfig: { forceFit: true },
            frame: false,
            style: 'border: 1px solid #8DB2E3;',
            clicksToEdit: 1,
            editor: this,
            tbar: tbar,
        
	        reload: function() {
	        	this.getStore().reload();
	        },
	        
	        hasChanges: function() {
	        	store = this.getStore();
	        	/*
	        	THROW({p:[
		        		{n:'store.getModifiedRecords().length',o:store.getModifiedRecords().length},
		        		{n:'store.removedRecords.length',o:store.removedRecords.length},
		        		{n:'grid.id',o:''+this.id}
	    			],
	        		propsObj:store,
	        		props:['id']
	    		},this,'hasChanges');
	    		*/
	        	modLength= store.getModifiedRecords().length;
	        	remLength = store.removedRecords.length;
	        	return (modLength > 0 || remLength > 0);
	        },
	        
	        getChanges: function() {
		        
		        store = this.getStore();
		        
		        modparams = [];
		        mods = store.getModifiedRecords();
		        for (i = 0; i < mods.length; i++) {
		        	rec = Ext.encode(mods[i].data);
		        	modparams.push(rec);
		        }
		        
		        remparams = [];
		        rems = store.removedRecords;
		        for (i = 0; i < rems.length; i++) {
		        	rec = Ext.encode(rems[i].data);
		        	remparams.push(rec);
		        }
	
	        	return {
	        		modparams: modparams,
	        		remparams: remparams	
	        	};
	        }
	        
        });
        
        
        grid.on('collapse',function(){
        	this.win.fireEvent('resize',this);
        },this);
        grid.on('expand',function(){
        	this.win.fireEvent('resize',this);
        },this);
		grid.on('afteredit',function(obj){
        	if (obj.value != obj.originalValue) {
        		PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:this.win.id},{n:'msg',o:'change'}]});
        	}
        },this);
		
		// init grid
        store.load();

        THROW({
        	props:['id'],
        	propsObj:store,
        	p:[{n:'gridId',o:''+grid.id}]},this,'buildParamterGrid');

		// return grid
		return grid;
	},
	
	/**
	 * 
	 */
	initComponent: function() {
		
		// DBG
		THROW({
			args:arguments,
			props:['win','saveCommandMatcherURL','loadCommandMatcherParametersURL'],
			o: new Pulse.Error({
				props:['id','bundle','action','locale','sitemap'],
				propsObj: this.commandMatcher
			},this,'commandMatcher')
		},this,'initComponent');
		
		try {
			
			if (typeof(this.initialConfig.id) == 'undefined') {
				this.id = Ext.id(null, this.type + '.');
			}
			
			//
			this.initEditor();
			
		} catch (e) {
			THROW({e:'FATAL',o:e}, this, 'initComponent');
		}
		
	}
	
}; 
Pulse.CommandMatcherEditor = Ext.extend(Ext.Component,CommandMatcherEditor); // END :: Pulse.CommandMatcherEditor


/**
 * 
 */
var CommandMatcherOverview = {
	
	type: 'CommandMatcherOverview',
	
	DBG: {
		onRender: false,
		initComponent: false,
		createCommandMatcher: false,
		editCommandMatcher: false,
		deleteCommandMatcher: false,
		// shows DBG for grid.cloumnModel renderers
		// edit/delete-buttons
		renderer: false
	},
	
	id: null,
	
	baseParams: null,
	
	renderTo: null,
	
	//
	store: null,
	grid: null,
	
	//
	win: null,
	el: null,
	msgPanel: null,
	contentPanel: null,
	
	/**
	 * builds and innitializes the command-matcher-grid
	 * of the permission-editor.
	 * 
	 * (use during init of permission-editor)
	 */
	onRender: function() {
		
		THROW({args:arguments,p:[
			{n:'renderTo',o:this.renderTo}
		]},this,'onRender');
		
		try {
		
			record = new Ext.data.Record.create([
				{ name: 'id' },
				{ name: 'clazz' },
				{ name: 'locale' },
				{ name: 'bundle' },
				{ name: 'action' },
				{ name: 'sitemapNodeId' },
				{ name: 'noParameters' }
	        ]);
	        
	        this.store = new Ext.data.JsonStore({
	            editor: this,
	            pruneModifiedRecords : true,
	            fields: record,
	            root: 'data',
	            remoteSort: true,                    
	            sortInfo: {
	                field: 'action',
	                direction: 'ASC'
	            },
	            totalProperty: 'total',
	            url: this.loadCommandMatchersURL,
	            baseParams: this.baseParams
	        });
	        
	        // selection-model
	    	gridSm = new Ext.grid.CheckboxSelectionModel();
	        
	        // build column-model                
	        columns = [
	        	gridSm,
	            {
	                header: 'id:',
	                dataIndex: 'id',
	                sortable: true,
	                width: 30,
	                fixed: true
	            },{    
	                header: VIEWPORT_PROPERTIES.BUNDLE + ':',
	                dataIndex: 'bundle',
	                sortable: true
	            },{    
	                header: VIEWPORT_PROPERTIES.ACTION + ':',
	                dataIndex: 'action',
	                sortable: true
	            },{    
	                header: VIEWPORT_PROPERTIES.LOCALE + ':',
	                dataIndex: 'locale',
	                sortable: true
	            },{    
	                header: VIEWPORT_PROPERTIES.SITEMAPNODE + ':',
	                dataIndex: 'sitemapNodeId',
	                sortable: true
	            },{    
	                header: VIEWPORT_PROPERTIES.PARAMETERS + ':',
	                dataIndex: 'noParameters',
	                sortable: false
	            }
	        ];
	        
    		this.store.gridId = this.renderTo + '.grid';
    		
    		// add edit button to rows
	        if (typeof(this.editCommandMatcherURL) != 'undefined' && this.editCommandMatcherURL !== '') {
	        	columns.push({
	            	header: '',
	            	dataIndex: 'id',
	                width: 25,
	                fixed: true,
	                sortable: false,
	                renderer: function(value,meta,rec,rowIndex,colIndex,store) {
		    			
		    			THROW({
		    				args:arguments,
		    				propsObj:store,
		    				props:['id','gridId']
	    				},store.editor,'renderer');
	    				
						try {
							html = '<a href="#" ' + 
							'onclick="Pulse.Execute({' + 
									'id: \'' + store.gridId + '\',' + 
									'editor: \'editor\',' + 							
									'fn: \'editCommandMatcher\',' + 
									'params: ' + value + 
								'});this.blur();return;" ' + 
								'style="display:block;width:14px;height:14px;margin:0px;padding:0px;border:0px;vertical-align:middle;" ' + 
								'class="editIconCls_14" ';
					
						    html += 'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT + '"';
						    				
							html += '/><img src="' + Ext.BLANK_IMAGE_URL + '" width="1" height="1" border="0"/></a>';
					
							return html;		
		
			        	} catch (renderError) {
							return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
								'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
								'try to reload (' + renderError + ')"/>';
						}
			        }
	            });
	        }
	        
	        // add delete button to rows
	        if (typeof(this.deleteCommandMatcherURL) != 'undefined' && this.deleteCommandMatcherURL !== '') {      
	        	columns.push({
	            	header: '',
	            	dataIndex: 'id',
	                width: 25,
	                fixed: true,
	                sortable: false,
	                renderer: function(value,meta,rec,rowIndex,colIndex,store) {
	                	
	                	THROW({
		    				args:arguments,
		    				propsObj:store,
		    				props:['id','gridId']
	    				},store.editor,'renderer');
	                	
						try {
				        	html = '<a href="#" ' + 
				        		'onclick="Pulse.Execute({' + 
									'id: \'' + store.gridId + '\',' + 									
									'editor: \'editor\',' + 							
									'fn: \'deleteCommandMatcher\',' + 
									'params: ' + value + 
								'});this.blur();return;" ' + 
								'style="display:block;width:14px;height:14px;margin:0px;padding:0px;border:0px;vertical-align:middle;" ' + 
								'class="deleteIconCls_14" ';
					
						    html += 'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE + '"';
						    				
							html += '/><img src="' + Ext.BLANK_IMAGE_URL + '" width="1" height="1" border="0"/></a>';
					
							return html;
							
			        	} catch (renderError) {
							return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
								'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
								'try to reload (' + renderError + ')"/>';
						}
			        }
	            });
	        }
			
			gridCm = new Ext.grid.ColumnModel(columns);
	        
	        this.grid = new Ext.grid.GridPanel({
	        	title: VIEWPORT_PROPERTIES.COMMANDMATCHERS + ':',
				collapsible: true, collapsed: true,
	            renderTo: this.renderTo,
	        	id: this.renderTo + '.grid',
	            store: this.store,
	            cm: gridCm,
	            sm: gridSm,
	            autoExpandColumn: 'id',
	            height: 250,
	            loadMask: true,
	            viewConfig: { forceFit: true },
	            frame: false,
	            editor: this,
	            tbar: (typeof(this.deleteCommandMatcherURL) != 'undefined' && this.deleteCommandMatcherURL !== '') ? [{
	            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            	scope: this,
	                handler: function() {
	                	this.createCommandMatcher();
	                },
	                iconCls: 'addIconCls'
	            },'-',{
	            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
	            	scope: this,
	                handler: function() {
	                	// delete
	                	this.deleteCommandMatcher();
	                },
	                iconCls: 'deleteIconCls'
	            },'-','->','-',{
	            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	            	scope: this,
	            	handler: function() {	            		
	            		this.reload();
	            	},
	            	iconCls: 'reloadIconCls'
	            }] : ['->','-',{
	            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	            	scope: this,
	            	handler: function() {
	            		this.reload();
	            	},
	            	iconCls: 'reloadIconCls'
	            }]
	        });
			
			// init grid
	        this.store.load({
	            params:{
	                start: 0,
	                limit: 10
	            }
	        });
        
        } catch (e) {
			THROW({e:'FATAL',o:e}, this, 'onRender');
		}
	},
	
	/**
	 * removes a command-matcher from the permission.
	 * 
	 * @param {String}/{Number} id
	 */
	deleteCommandMatcher: function(id) {
		
		// DBG
		THROW({args:arguments,
 			p:[
 				{n:'URL',o:this.deleteCommandMatcherURL}
 			]
 		},this,'deleteCommandMatcher');
		
		
		params = [];
		if (typeof(id) == 'string' || typeof(id) == 'number') {
			// received id-string or number
			params.push(id);
		} else {
			// try selected records			
			selectedRecords = this.grid.getSelectionModel().getSelections();
			for (i = 0; i < selectedRecords.length; i++) {
				record = selectedRecords[i];
				if (typeof(record) != 'undefined') {
					params.push(record.get('id'));
				}
			}
		}
		
		// abort if no ids
		if (params.length === 0) {
			return;
		}
		
		// proceed with confirm
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + params.concat() + '"',
    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
		
					Ext.Ajax.request({
						url: this.deleteCommandMatcherURL,
						method: 'POST',
						scope: this,
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
			        		if (true === decodedResponse.status) {      				
			      				// reload grid
								this.reload();
			      				// reload permission-overview
			      				PermissionOverviewEditor.reload();
			      				// fire msg
			      				this.fireEvent('MSG','DELETESUCCESS',this);
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'deleteCommandMatcher()');
			        		}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},this.type,'deleteCommandMatcher()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'deleteCommandMatcher()');
					        }
						},
						params: { ids: params }
					});
		
    			}    			
    		},
    	this);
	},
	
	/**
	 * reloads the command-matchers-grid.
	 */
	reload: function() {
		this.store.reload();
//		this.grid.editor = this;
	},
	
	/**
	 * creates a new command-matcher.
	 * 
	 * - shows window
	 * - performs server-call
	 * - starts edit of new command-matcher
	 */
	createCommandMatcher: function() {
		
		THROW({
			p:[
				{n:'URL',o:this.createCommandMatcherURL},
				{n:'id',o:this.id}
			]
		},this,'createCommandMatcher');
		
		try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('247 :: ' + this.type + '.createCommandMatcher() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
	        // bundle
			bundleBox = Pulse.getBundleBox('...');
	        
	        // action
			actionField = this.getActionField();
	        
	        // build locale-box
			localeBox = Pulse.getLocaleBox('...');
			
			// sitemap-id
			sitemapField = this.getSitemapField();
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'createCommandMatcherForm.' + this.id,
	            name: 'createCommandMatcherForm.' + this.id,
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield',
	            autoHeight: true,
	            labelWidth: 110, 
	            items: [bundleBox,actionField,localeBox,sitemapField]
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            scope: this,
	            handler: function() {

	                // checks passed : create
	                params = this.baseParams;
	                // bundle
	                if (bundleBox.getValue() !== null && bundleBox.getValue().trim() !== '') {
	                	params.bundle = bundleBox.getValue();
	                }
	                // action
	                if (actionField.getValue().trim() !== '') {
	                	params.action = actionField.getValue().trim();
	                }
	                // locale
	                if (localeBox.getValue() !== null && localeBox.getValue().trim() !== '') {
	                	params.locale = localeBox.getValue();
	                }
	                // sitemap
	                if (sitemapField.getValue().trim() !== '') {
	                	params.sitemap = sitemapField.getValue().trim();
	                }	
	                
	                Ext.Ajax.request({
	                	url: this.createCommandMatcherURL,
	                	method: 'POST',
	                	scope: this,
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		if (true === decodedResponse.status) {
	                			
	                			this.win.close();
	                			
	                			// reload command-matchers-grid
	                			this.reload();
	                			
	                			// edit command-matcher
	                			this.editCommandMatcher(
	                				decodedResponse.commandMatcher.id, 
	                				decodedResponse.commandMatcher.clazz
                				);
									
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error}, this.type, 'createCommandMatcher()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'}, this.type, 'createCommandMatcher()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}}, this.type, 'createCommandMatcher()');
					        }
	                	},
	                	params: params
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'commandMatcher.win.el'
			    });
	        
	        }
	            
		    this.msgPanel = new Ext.Panel({
	    		id: 'commandMatcher.win.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'commandMatcher.win',
	        	iconCls: 'commandmatcherIconCls',
	            title: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 200,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        // clean-up on close
	        this.win.on('close',function(){
	        	delete this.win;
	        	delete this.el;
	        	delete this.msgPanel;
	        	this.win = null;
	        	this.el = null;
	        	this.msgPanel = null;
	        },this);
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){this.win.doLayout(true);},this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
			
		}
	},
	
	/**
	 * starts edit-window for a command-matcher.
	 * 
	 * @param {Object} options
	 * 
	 * 		options = {
	 * 			commandmatcherid: {String}/{Number}, 
	 * 				the id of the command-matcher
	 * 			clazz: {String} [optional],
	 * 				the FQ-class-name of the command-matcher
	 * 		}
	 * 
	 * 		if typeof(clazz) == 'undefined':
	 * 		
	 * 			will try to load record from current store
	 * 			to initialze edit-process. (use: start of edit from grid)
	 * 
	 * 		else:
	 * 
	 * 			will use given command-matcher-class
	 * 			to initialze edit-process. (use: start of edit after 
	 * 			create of new command-matcher)
	 */
	editCommandMatcher: function(id, clazz) {
		
		// DBG
		THROW({args: arguments,
			p:[
				{n:'URL',o:this.editCommandMatcherURL}
			]
		},this,'editCommandMatcher');
		
		if (typeof(clazz) == 'undefined') {
			record = null;
	    	this.store.each(function(r) {
	    		if (r.get('id') == id) {
	    			record = r;
	    			return false;
	    		}
	    	});
	    	clazz = record.get('clazz');
		}
		
		try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('247 :: ' + this.type + '.createCommandMatcher() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'commandMatcher.win.el'
			    });
	        
	        }
		
			this.msgPanel = new Ext.Panel({
	    		id: clazz + '.' + id + '.editor.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
    		
    		this.contentPanel = new Ext.Panel({
	    		id: clazz + '.' + id + '.editor.contentPanel',
	    		region: 'center',
	    		html: 'content goes here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: clazz + '.' + id + '.editor',
	            title: '...loading: ' + id,
	        	iconCls: 'commandmatcherIconCls',
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 400,
	            minHeight: 200,
	            layout: 'border',
	            width: 600,
	            editor: this,
	            tbar: ['->','-',{
	            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	            	scope: this,
	            	handler: function() {
//	            		alert(':' + this.id); return;
	            		this.contentPanel.load({
			        		method: 'Post',
			        		scope: this,
	        				scripts: true,
			        		callback: LPCB,
			            	url: this.editCommandMatcherURL,
			                params: { id: id },
                            text: 'loading...',
                            discardUrl: true,
                            nocache: true,
                            timeout: 30
			            });
	            	},
	            	iconCls: 'reloadIconCls'
	            }],
	            items: [this.msgPanel, this.contentPanel],
	            isDirty: false,
	            isInitialized: false
	        });
	        
	        // clean-up on close
	        this.win.on('close',function(){
	        	delete this.win;
	        	delete this.el;
	        	delete this.msgPanel;
	        	delete this.contentPanel;
	        	this.win = null;
	        	this.el = null;
	        	this.msgPanel = null;
	        	this.contentPanel = null;
	        },this);
	        
	        this.win.on('show',function(){
	        	
	        	this.contentPanel.load({
	        		method: 'Post',
	        		scope: this,
	        		scripts: true,
	        		callback: LPCB,
	            	url: this.editCommandMatcherURL,
	                params: { id: id },
                    text: 'loading...',
                    discardUrl: true,
                    nocache: true,
                    timeout: 30
	            });
	            
	            //
		        this.contentPanel.getUpdater().on('beforeupdate',function(){
		        	// win.isDirty-check
					if (true === this.win.isDirty) {						
						// display reload/close confirm-dialogue
						Ext.Msg.confirm(
							VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
							VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
							VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
				        	function(response) {
				        		// close win
					        	if('yes' === response) {
					        		this.win.isDirty = false;
					        		if (this.msgPanel.isVisible()) {
										PulseMessageHandler.closeMsg(this.msgPanel.id);
									}
					        		this.contentPanel.load({
						        		method: 'Post',
						        		scope: this,
						        		scripts: true,
						        		callback: LPCB,
						            	url: this.editCommandMatcherURL,
						                params: { id: id },
		                                text: 'loading...',
		                                discardUrl: true,
		                                nocache: true,
		                                timeout: 30
						            });
					        	}
				        	}, 
				        	this
			        	);
						return false;		
					} else {
						if (this.msgPanel.isVisible()) {
							PulseMessageHandler.closeMsg(this.msgPanel.id);
						}
					}
		        },this);
		        
		                    
	            
	        },this);
	        
	        this.win.on('beforeClose',function(){
	        	// win.isDirty-check
				if (true === this.win.isDirty) {						
					// display reload/close confirm-dialogue
					Ext.Msg.confirm(
						VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
						VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
						VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
			        	function(response) {
			        		// close or reload tab
				        	if('yes' === response) {
				        		this.win.isDirty = false;
				        		this.win.close();
				        		CENTER_TAB_PANEL.remove(tab.id, true);
				        	}
			        	}, 
			        	this
		        	);
					return false;		
				}
	        },this);
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){this.win.doLayout(true);},this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
			
		}
	},
	
		/**
	 * builds action-text-field.
	 * 
	 * @return {Ext.form.TextField}
	 */
	getActionField: function() {
		
		return new Ext.form.TextField({ 
            fieldLabel: VIEWPORT_PROPERTIES.ACTION,
            fieldClass: Pulse.fieldCls,
            width: 400,
            enableKeyEvents: true,
            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_ACTION
        });
        
	},
	
	/**
	 * builds sitemap-id-text-field.
	 * 
	 * @return {Ext.form.TextField}
	 */
	getSitemapField: function() {
		
		return new Ext.form.TextField({ 
            fieldLabel: VIEWPORT_PROPERTIES.SITEMAPNODE + '-id',
            fieldClass: Pulse.fieldCls,
            width: 400,
            regex: /\d/,
            enableKeyEvents: true,
            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_SITEMAPNODEID
        });
        
	},
	
	/**
	 * called during initialization.
	 * 
	 * applys given config...
	 */
	initComponent: function() {
		
		THROW({args:arguments,props:[
			'baseParams','loadCommandMatchersURL','createCommandMatcherURL',
			'editCommandMatcherURL','deleteCommandMatcherURL'
		]},this,'initComponent');
		
		try {
			
			if (typeof(this.initialConfig.id) == 'undefined') {
				this.id = Ext.id(null, this.type + '.');
			}
			
			// add events
			this.addEvents('MSG');
			
		} catch (e) {
			THROW({e:'FATAL',o:e}, this, 'initComponent');
		}
		
	}
	
};
Pulse.CommandMatcherOverview = Ext.extend(Ext.Component,CommandMatcherOverview); // END :: Pulse.CommandMatcherOverview




/**
 * 
 */
var AccessControlEditor = {

	type: 'AccessControlEditor',
	
	DBG: false/*{
		openUserOverview: false,
		openRoleOverview: false,
		openGroupOverview: false,
		openPermissionOverview: false,
		openVfsPermissionOverview: false
	}*/,

	/**
	 * @param {String} initOverViewTabURL
	 */
	openUserOverview: function(initOverViewTabURL) {
		
		if (this.DBG) {
			THROW({
				args:arguments
			},this,'openUserOverview');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: 'AccessControl.users.overview',
            title: '...loading',
            iconCls: 'userIconCls',
            loadParams: {
                url: initOverViewTabURL
            }
        });
	},
	
	/**
	 * @param {String} initOverViewTabURL
	 */
	openRoleOverview: function(initOverViewTabURL) {
		
		if (this.DBG) {
			THROW({
				args:arguments
			},this,'openRoleOverview');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: 'AccessControl.roles.overview',
            title: '...loading',
            iconCls: 'roleIconCls',
            loadParams: {
                url: initOverViewTabURL
            }
        });
	},
	
	/**
	 * @param {String} initOverViewTabURL
	 */
	openGroupOverview: function(initOverViewTabURL) {
		
		if (this.DBG) {
			THROW({
				args:arguments
			},this,'openGroupOverview');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: 'AccessControl.usergroups.overview',
            title: '...loading',
            iconCls: 'usergroupIconCls',
            loadParams: {
                url: initOverViewTabURL
            }
        });
	},
	
	/**
	 * @param {String} initOverViewTabURL
	 */
	openPermissionOverview: function(initOverViewTabURL) {
		if (this.DBG) {
			THROW({
				args:arguments
			},this,'openPermissionOverview');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: 'AccessControl.permissions.overview',
            title: '...loading',
            iconCls: 'permissionIconCls',
            loadParams: {
                url: initOverViewTabURL
            }
        });
	},
	
	/**
	 * @param {String} initOverViewTabURL
	 */
	openVfsPermissionOverview: function(initOverViewTabURL) {
		if (this.DBG) {
			THROW({
				args:arguments
			},this,'openVfsPermissionOverview');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: 'AccessControl.vfsPermissions.overview',
            title: '...loading',
            iconCls: 'vfsPermissionIconCls',
            loadParams: {
                url: initOverViewTabURL
            }
        });
	}
	
}; // END :: AccessControlEditor


/**
 * builds a new UserEditor from given config
 * 
 * @param {Object} config.tab
 * @param {Number} config.id
 * @param {String} config.clazz
 * @param {String} config.saveURL
 * @param {String} config.loadUsersURL
 * @param {String} config.loadPermissionsURL
 */
Pulse.GroupEditor = function(config) {
	
	// type
	this.type = 'GroupEditor';
	
	// DBG
	this.DBG = {
		MSG: false
	};
	
	// properties
	this.tab = null;
	this.id = null;
	this.clazz = null;
	
	//
	this.win = null;
	this.el = null;
	this.msgPanel = null;

	// basic fields	
	this.nameEl = null; // textfield
	this.descriptionEl = null; // text-area
	
	// editors
	this.rolesEditor = null;
	this.usersEditor = null;
	this.permissionsEditor = null;
	
	/**
	 * initializes the tab
	 */
	this.initTab = function() {
		if (typeof(this.tab) != 'undefined') {
			
			// initialize tab if !tab.isInitialized
			if (true !== this.tab.isInitialized) {			
				
				// add buttons to bar
				
				// save-button-config
				saveButtonConfig = {
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope: this,
					handler: function() {
						if (false === this.tab.isDirty) {
							return;
						}
						if (false === this.hasChanges()) {
							PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
							return;
						}
						
						// retrieve basic fields values
						v = this.getChanges();
						
//						PulseError.Throw({e:'TODO',p:[
//							{n:'hasChanges',o:''+this.hasChanges()},
//							{n:'id',o:''+v.id},
//						]},this.type,'save.button');
						
						Ext.Ajax.request({
							url: this.config.saveURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									
									// commit changes
									this.commitChanges();
									
									// reload user-overview-grid
									GroupOverviewEditor.reload();
									
									// save success message
									PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
				            		
				        		} else {
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.saveGroup');
								}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.saveGroup');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.saveGroup');
						        }
							},
							params: v
						});
						
					},
					iconCls: 'saveIconCls'
				};				
				
				// add buttons
				tabTbar = this.tab.getTopToolbar().insertButton(0, [
					saveButtonConfig,
					new Ext.Toolbar.Separator()
				]);
				
				// used to rertieve change-state in vp-controller
				this.tab.pEditor = this;
				
				// set initialized-flag	
				this.tab.isInitialized = true;
			
			}
		}
	};
	
	/**
	 * sets up change-monitoring for basic fields
	 * 
	 * 		- username
	 * 		- email
	 * 
	 */
	this.initFieldMonitoring = function() {
		// name
		this.nameEl = Ext.get(this.clazz + '.' + this.id + '.name');		
		if (false === this.nameEl.hasClass(Pulse.disabledFieldCls)) {			
			Pulse.initTextFieldMonitor(this.nameEl, this, 'nameEl', false);
		}		
		// description
		this.descriptionEl = Ext.get(this.clazz + '.' + this.id + '.description');
		Pulse.initTextAreaMonitor(this.descriptionEl, this, 'descriptionEl');
	};
	
	/**
	 * "Commits" field values and restets changed state. Use after successfull save.
	 */
	this.commitChanges = function() {
		
		// name
		if (this.nameEl.changed === true) {
			this.tab.setTitle(this.nameEl.dom.value.trim());
			this.nameEl.commit();
		}
		
		// description
		if (this.descriptionEl.changed === true) {
			this.descriptionEl.commit();
		}
		
		// roles-editor
		this.rolesEditor.commit();
		
		// users-editor
		this.usersEditor.commit();
		
		// permissions-editor
		this.permissionsEditor.commit();
	};
	
	/**
	 * returns the values of the basic fields
	 * 
	 * @return {Object} values = {
	 * 				id: {Number},
	 * 				name: {String},			if changed
	 * 			};
	 */
	this.getChanges = function() {
		
		try {
		
			v = { 
				id: this.id
			};
			
			// add name if changed
			if (true === this.nameEl.changed) {
				v.name = this.nameEl.getValue().trim();
			}
			
			// add description if changed
			if (true === this.descriptionEl.changed) {
				v.description = this.descriptionEl.getValue().trim();
			}
			
			// add roles if changed
			if (typeof(this.rolesEditor) != 'undefined' && this.rolesEditor !== null) {
				if (true === this.rolesEditor.hasChanges()) {
					chgs = this.rolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addroles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remroles = chgs.unasoc;
					}
				}
			}
		
			// add users if changed
			if (typeof(this.usersEditor) != 'undefined' && this.usersEditor !== null) {
				if (true === this.usersEditor.hasChanges()) {
					chgs = this.usersEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addusers = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remusers = chgs.unasoc;
					}
				}
			}
			
			// add permissions if changed
			if (typeof(this.permissionsEditor) != 'undefined' && this.permissionsEditor !== null) {
				if (true === this.permissionsEditor.hasChanges()) {
					chgs = this.permissionsEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addpermissions = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.rempermissions = chgs.unasoc;
					}
				}
			}
			
			return v;
		
		} catch (e) {
			THROW({e:'FATAL',o:e}, this, 'getChanges');
		}
		
	};
	
	/**
	 * returns if this editor has changes
	 * 
	 * @return {Boolean}
	 */
	this.hasChanges = function() {
		return (this.nameEl.changed || this.descriptionEl.changed 
			|| this.rolesEditor.hasChanges() || this.usersEditor.hasChanges() 
			|| this.permissionsEditor.hasChanges());
	};
	
	/**
	 * initialize the editor
	 */
	try {
		
		// this.config = config;
		this.config = config;
		
		// properties
		this.tab = config.tab;
		this.tab.tabEditor = this;
		this.id = config.id;
		this.clazz = config.clazz;
		
		// initializes the tab-toolbar
		this.initTab();
		
		// setup field-monitoring
		this.initFieldMonitoring();
		
		// build sub-editors
		
		// show roles-assorter
		this.rolesEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.ROLES,
			renderTo: this.clazz + '.' + this.id + '.roles',
			loadURL: this.config.loadRolesURL + '?id=' + this.id,
			editURL: this.config.editRoleURL,
			editHandler: function(node) {
				RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.rolesEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
		
		// show users-assorter
		this.usersEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.USERS,
			renderTo: this.clazz + '.' + this.id + '.users',
			loadURL: this.config.loadUsersURL + '?id=' + this.id,
			editURL: this.config.editUserURL,
			editHandler: function(node) {
				UserOverviewEditor.editUser(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.usersEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
		
		// show permissions-assorter
		this.permissionsEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.PERMISSIONS,
			renderTo: this.clazz + '.' + this.id + '.permissions',
			loadURL: this.config.loadPermissionsURL + '?id=' + this.id,
			editURL: this.config.editPermissionURL,
			editHandler: function(node) {
				PermissionOverviewEditor.editPermission(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.permissionsEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
	
	} catch(e) {
		THROW({e:'FATAL',o:e},this,'init');
	}
	 	
}; // END :: GroupEditor


/**
 * 
 */
var GroupOverviewEditor = {
	
	defaultOverviewPageSize: 20,
	
	el: null,
	win: null,
	msgPanel: null,
	
	
	/**
	 * @param {Object} config
	 */
	initEditor: function(config) {
		
		if (typeof(config.tab) != 'undefined') {
		// fetch the tab that has to be initialized
			tab = config.tab;		
			if (true !== tab.isInitialized) {			
				
				// add create button to tab
	        	if (typeof(config.createGroupURL) != 'undefined' && config.createGroupURL !== '') {
					tabTbar = tab.getTopToolbar().insertButton(0, [
						{
							text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW,
							scope: this,
							handler: function() {					
								this.createGroup(config.createGroupURL, config.editGroupURL);
							},
							iconCls: 'addUsergroupIconCls'
						},
						new Ext.Toolbar.Separator()
					]);		
	        	}	
				tab.isInitialized = true;
			
			}
		}
				
		// build overview grid
		
		gridStoreRecord = new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'clazz' },
			{ name: 'name' },
			{ name: 'noUsers' },
			{ name: 'noRoles' },
			{ name: 'noPermissions' }
        ]);
        
        gridStore = new Ext.data.JsonStore({
//            id: 'id',
            pruneModifiedRecords : true,
            fields: gridStoreRecord,
            root: 'data',
            remoteSort: true,                    
            sortInfo: {
                field: 'name',
                direction: 'ASC'
            },
            totalProperty: 'total',
            url: config.loadGroupsURL
        });

        // buld paging-tool with combobox to set page-size        
        pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),	    
		    displayField: 'size',
		    valueField: 'size',
		    selectOnFocus: true,
		    mode: 'local',
		    triggerAction: 'all',
//			editable: false,
		    width: 60,
		    blankText: '' + this.defaultOverviewPageSize,
		    emptyText: '' + this.defaultOverviewPageSize
		});
        
        pagingToolBar = new Ext.PagingToolbar({
       		// id: 'toolbar',
            displayInfo: true,
            pageSize: this.defaultOverviewPageSize,
            store: gridStore,
            items: ['-', pageSizeBox]
        });
        
        // add gridStore-listener for paging-toolbar
        gridStore.on('beforeLoad', function(store, options) {
        	this.isLoading = true;
        	if (pageSizeBox.getRawValue() !== '') {
        		try {
        			limit = parseInt(pageSizeBox.getRawValue().trim(), 10);
        			pagingToolBar.pageSize = limit;
        			options.params.limit = limit;
        		} catch(e) { /* ignore */ }
        	} else {
        		pagingToolBar.pageSize = GroupOverviewEditor.defaultOverviewPageSize;
    			options.params.limit = GroupOverviewEditor.defaultOverviewPageSize;
        	}
//        	alert('' + config.filterIds.concat());
			
//			PulseError.Throw({e:'filterIds',p:config.filterIds});
//			p = [];
        	for (i = 0; i < config.filterIds.length; i++) {
        		filterEl = Ext.get(config.filterIds[i]);
//        		p.push({n:filterEl+'['+i+']',o:filterEl});
 				if (typeof(filterEl) != 'undefined') {
        			try {        			
        				pname = filterEl.dom.name;
        				pvalue = filterEl.getValue().trim();
//        				p.push({n:''+pname,o:''+pvalue});
        				options.params[pname] = pvalue;
        			
        			} catch (e) { 
        				/* ignore */ 
//        				p.push({n:'error[' + i + ']: ' + e,o:'id: '+config.filterIds[i]});
        			}
 				}
        	}
//        	PulseError.Throw({e:'params',p:p});
        },gridStore);
        gridStore.on('load', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },gridStore);
        gridStore.on('loadexception', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },gridStore);
        
        // initialize filters for reload of grid onChange
        for (i = 0; i < config.filterIds.length; i++) {
    		filterEl = Ext.get(config.filterIds[i]);
    		if (typeof(filterEl) != 'undefined') {
    			
    			filterEl.on({
    				'keyup': {
    					scope: gridStore,
    					fn: function(evt, el, opts) {
    						/*if (evt.getKey() != Ext.EventObject.ENTER) {
								return;
							}*/
//    						alert(el.id + ', ' + el.value + ', ' + el.name);
    						if (true === this.isLoading) {
								return;
							}
    						this.reload();
    					}
    				}
    			},gridStore);

    		}
    	}
    	
    	// selection-model
    	gridSm = new Ext.grid.CheckboxSelectionModel();
		
		// build column-model                
        columns = [
        	gridSm,
            {
                header: 'id:',
                dataIndex: 'id',
                sortable: true,
                width: 30,
                fixed: true
            },{    
                header: VIEWPORT_PROPERTIES.NAME + ':',
                dataIndex: 'name',
                sortable: true
            },{    
                header: VIEWPORT_PROPERTIES.USERS + ':',
                dataIndex: 'noUsers',
                width: 100,
                fixed: true,
                sortable: false
            },{    
                header: VIEWPORT_PROPERTIES.ROLES + ':',
                dataIndex: 'noRoles',
                width: 100,
                fixed: true,
                sortable: false
            },{    
                header: VIEWPORT_PROPERTIES.PERMISSIONS + ':',
                dataIndex: 'noPermissions',
                width: 100,
                fixed: true,
                sortable: false
            }
        ];
        
        // add edit button to rows
        if (typeof(config.editGroupURL) != 'undefined' && config.editGroupURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'GroupOverviewEditor.editGroup(\'' + config.editGroupURL + '\',' + id + ')',
			        		iconCls: 'editIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
			        	});
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
        
        // add delete button to rows
        if (typeof(config.deleteGroupURL) != 'undefined' && config.deleteGroupURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'GroupOverviewEditor.deleteGroup(\'' + config.deleteGroupURL + '\',' + id + ')',
			        		iconCls: 'deleteIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
			        	});
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
		
		gridCm = new Ext.grid.ColumnModel(columns);
        
//        grid = new Ext.grid.EditorGridPanel({
        grid = new Ext.grid.GridPanel({
        	id: (typeof(config.gridId) == 'undefined') ? 'GroupOverViewGrid.grid' : config.gridId,
            store: gridStore,
            cm: gridCm,
            sm: gridSm,
            renderTo: (typeof(config.gridId) == 'undefined') ? 'GroupOverViewGrid' : config.gridId + '.el',
            autoExpandColumn: 'id',
//            height: 400,
//            width: 725,
            loadMask: true,
            viewConfig: { forceFit: true },
//            title: FilterLocalizations.Filter,
            frame: false,
            style: 'border: 1px solid #8DB2E3;',
//            enableHdMenu: false,
//            clicksToEdit: 1,            
            /*buttons: [{
                        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
                        iconCls: 'saveIconCls', 
                        handler: <xsl:value-of select="$editorIdentifier"/>SaveGrid
                     }],
            buttonAlign: 'center',*/
            tbar: (typeof(config.deleteGroupURL) != 'undefined' && config.deleteGroupURL !== '') ? [{
            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
                iconCls: 'deleteIconCls',
                handler: function() {
                	// retrieve grid
                	id = (typeof(config.gridId) == 'undefined') ? 'GroupOverViewGrid.grid' : config.gridId;
                	grid = Ext.getCmp(id);
                	// retrieve selected records
                	selectedRecords = grid.getSelectionModel().getSelections();
                	// delete
                	GroupOverviewEditor.deleteGroup(config.deleteGroupURL,selectedRecords);
                }
            },'-'] : [],
            bbar: pagingToolBar
        });
        
        // grid: resize
        if (typeof(config.tab) != 'undefined') {
        	// w
	        grid.setWidth(config.tab.getInnerWidth() - 10);
	        // h
	        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
	        msgPanelHeight = 0;
	        if (tabMsgPanel.isVisible()) {
	        	msgPanelHeight = tabMsgPanel.getSize().height;
	        }
	        tabHeader = Ext.get(config.tab.id + '.header');
	        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);
	        
	        
	        // config.tab: listeners for grid: resize              
	        config.tab.on({
	            'resize': {
	                fn: function(tab, adjWidth, adjHeight, rawWidth, rawHeight) {
	                	grid = Ext.getCmp('GroupOverViewGrid.grid');
	                    // w
				        tabContentPanel = Ext.getCmp(config.tab.id + '.contentPanel'); 
				        grid.setWidth(config.tab.getInnerWidth() - 10);
				        // h
				        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
				        msgPanelHeight = 0;
				        if (tabMsgPanel.isVisible()) {
				        	msgPanelHeight = tabMsgPanel.getSize().height;
				        }
				        tabHeader = Ext.get(config.tab.id + '.header');
				        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);       
	                }
	            }
	        });
	        
        
        }
        
        // init grid
        gridStore.load({
            params:{
                start: 0, 
                limit: 10
            }
        });                    
		
		return grid;
	},
	
	/**
	 * @param {String} editURL
	 * @param {String}/{Number} groupid
	 * @param {String} clazz
	 */
	editGroup: function(editURL, groupid, clazz) {
		// PulseError.Throw({e:'DBG',p:[{n:'editURL',o:editURL},{n:'id',o:groupid},{n:'class',o:clazz}]},'GroupOverviewEditor','editGroup()');
		
		if (typeof(clazz) == 'undefined') {
			record = null;
			store = Ext.getCmp('GroupOverViewGrid.grid').getStore();
			if (store !== null && typeof(store) != 'undefined') {		
		    	store.each(function(r) {
		    		if (r.get('id') == groupid) {
		    			record = r;
		    			return false;
		    		}
		    	});
			}
			
			if (record === null) {
				return;
			}
			clazz = record.get('clazz');
		}

		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: clazz + '.' + groupid + '.editor',
            title: '...loading: ' + groupid,
            tabTip: '(id:' + groupid + ')',
            iconCls: 'usergroupIconCls',
            loadParams: {
                url: editURL,
                params: { id: groupid }
            }
        });
	},
	
		/**
	 * @param {String} deleteURL
	 * @param {String}/{Number}/{Array} groupid_OR_gridRecords
	 */
	deleteGroup: function(deleteURL, groupid_OR_gridRecords) {
//		PulseError.Throw({e:'TODO',p:[{n:'deleteURL',o:deleteURL},{n:'groupid_OR_gridRecords',o:groupid_OR_gridRecords},{n:'class',o:clazz}]},'GroupOverviewEditor','deleteGroup()');
		
		record = null;
		if (typeof(groupid_OR_gridRecords) == 'string' || typeof(groupid_OR_gridRecords) == 'number') {
			// received id-string or number
			params = [groupid_OR_gridRecords];
			
			store = Ext.getCmp('GroupOverViewGrid.grid').getStore();
			if (store !== null && typeof(store) != 'undefined') {		
		    	store.each(function(r) {
		    		if (r.get('id') == groupid_OR_gridRecords) {
		    			record = r;
		    			return false;
		    		}
		    	});
			}
			
			if (record === null) {
				return;
			}
		} else if (typeof(groupid_OR_gridRecords.length) == 'number' && groupid_OR_gridRecords.length > 0) {
			// received array
			params = [];
			for (i = 0; i < groupid_OR_gridRecords.length; i++) {
				record = groupid_OR_gridRecords[i];
				if (typeof(record) != 'undefined') {
					params.push(record.get('id'));
				}
			}
		} else {
			// invalid id or ids-object
			return;
		}
		
		// proceed with confirm
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + params.concat() + '"',
    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
		
					Ext.Ajax.request({
						url: deleteURL,
						method: 'POST',
						scope: this,
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
			        		if (true === decodedResponse.status) {      				
			      				// close editor/s
			      				if (typeof(options.groupid_OR_gridRecords) == 'string' || typeof(options.groupid_OR_gridRecords) == 'number') {
									// received id-string or number -> close single editor
									PULSE_VIEWPORT_CONTROLLER.closeTab(options.clazz + '.' + options.groupid_OR_gridRecords + '.editor', true);
								} else {
									// close several editors
									for (i = 0; i < options.groupid_OR_gridRecords.length; i++) {
										record = options.groupid_OR_gridRecords[i];
										if (typeof(record) != 'undefined') {
											PULSE_VIEWPORT_CONTROLLER.closeTab(record.get('clazz') + '.' + record.get('id') + '.editor', true);
										}
									}
								}
								// reload overview-grid
								this.reload();
			      				// show delete-success msg
			      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:'AccessControl.usergroups.overview'},{n:'msg',o:'DELETESUCCESS'}]});
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'GroupOverviewEditor','deleteGroup()');
			        		}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},'GroupOverviewEditor','deleteGroup()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'GroupOverviewEditor','deleteGroup()');
					        }
						},
						clazz: (record !== null) ? record.get('clazz') : null,
						groupid_OR_gridRecords: groupid_OR_gridRecords,
						params: { ids: params }
					});
		
    			}    			
    		},
    	this);
	},
	
	/**
	 * 
	 */
	reload: function() {
		// reload overview-grid
		grid = Ext.getCmp('GroupOverViewGrid.grid');
		if (grid !== null && typeof(grid) != 'undefined') {
			grid.getStore().reload();
		}
	},
	
	
	/**
	 * @param {String} createURL
	 */
	 createGroup: function(createURL, editURL) {
	 	
	 	try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('302 :: GroupOverviewEditor.createGroup() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
			nameField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.NAME, 
	            name: 'name', 
	            width: 400,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
	            allowBlank: false
	        });
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'createGroupForm',
	            name: 'createGroupForm',
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield',
	            autoHeight: true,
	            labelWidth: 100, 
	            items: [nameField] 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            scope: this,
	            handler: function() {
	                // check values
	                if (nameField.getValue().trim() === '') {	                	 
	                    return false;
	                }
	                
	                // checks passed : create
	                
	                Ext.Ajax.request({
	                	url: createURL,
	                	method: 'POST',
	                	scope: this,
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		if (true === decodedResponse.status) {
	                			
	                			this.win.close();
	                			
	                			// reload overview-grid
	                			this.reload();
	                			
	                			// edit user
	                			group = decodedResponse.group;
	                			this.editGroup(editURL, group.id, group.clazz);
									
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'GroupOverviewEditor','createGroup()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'GroupOverviewEditor','createGroup()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'GroupOverviewEditor','createUser()');
					        }
	                	},
	                	params: {
	                		name: nameField.getValue().trim()
	                	}
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'createGroup.win.el'
			    });
	        
	        }
	            
		    this.msgPanel = new Ext.Panel({
	    		id: 'createGroup.win.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'createGroup.win',
	        	iconCls: 'addUsergroupIconCls',
	            title: VIEWPORT_PROPERTIES.NEW,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 130,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        // clean-up on close
	        this.win.on('close',function(){
	        	delete this.win;
	        	delete this.el;
	        	delete this.msgPanel;
	        	this.win = null;
	        	this.el = null;
	        	this.msgPanel = null;
	        },this);
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){this.win.doLayout(true);},this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
	        nameField.validate();
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
			
		}
	 	
	 }
	
}; // END :: GroupOverviewEditor


/**
 * builds a new PermissionEditor from given config
 * 
 * contains command-matcher-editing
 * 
 * @param {Object} config.tab
 * 
 * (initial values)
 * @param {Number} config.id
 * @param {String} config.clazz
 * 
 * (load/edit-urls)
 * @param {String} config.saveURL
 * @param {String} config.loadUsersURL
 * @param {String} config.loadGroupsURL
 * @param {String} config.loadCommandMatchersURL
 * @param {String} config.editCommandMatcherURL
 * @param {String} config.deleteCommandMatcherURL
 * @param {String} config.createCommandMatcherURL
 */
Pulse.PermissionEditor = function(config) {
	
	// type
	this.type = 'PermissionEditor';
	
	// DBG
	this.DBG = {
		MSG: false
	};
	
	// properties
	this.tab = null;
	this.id = null;
	this.clazz = null;

	// basic fields	
	this.nameEl = null; // textfield
	this.descriptionEl = null; // text-area
	
	// editors
	this.rolesEditor = null;
	this.usersEditor = null;
	this.groupsEditor = null;
	
	this.commmandMatcherEditor = null;
	
	/**
	 * initializes the tab of the permission-editor.
	 * 
	 * - adds save button
	 */
	this.initTab = function() {
		if (typeof(this.tab) != 'undefined') {
			
			// initialize tab if !tab.isInitialized
			if (true !== this.tab.isInitialized) {			
				
				// add buttons to bar
				
				// save-button-config
				saveButtonConfig = {
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope: this,
					handler: function() {
						if (false === this.tab.isDirty) {
							return;
						}
						if (false === this.hasChanges()) {
							PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
							return;
						}
						
						// retrieve basic fields values
						v = this.getChanges();
						
//						PulseError.Throw({e:'TODO',p:[
//							{n:'hasChanges',o:''+this.hasChanges()},
//							{n:'id',o:''+v.id},
//						]},this.type,'save.button');
						
						Ext.Ajax.request({
							url: this.config.saveURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									
									// commit changes
									this.commitChanges();
									
									// reload user-overview-grid
									PermissionOverviewEditor.reload();
									
									// save success message
									PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
				            		
				        		} else {
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.savePermission');
								}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.savePermission');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.savePermission');
						        }
							},
							params: v
						});
						
					},
					iconCls: 'saveIconCls'
				};				
				
				// add buttons
				tabTbar = this.tab.getTopToolbar().insertButton(0, [
					saveButtonConfig,
					new Ext.Toolbar.Separator()
				]);
				
				// used to rertieve change-state in vp-controller
				this.tab.pEditor = this;
				
				// set initialized-flag	
				this.tab.isInitialized = true;
			
			}
		}
	};
	
	/**
	 * sets up change-monitoring for basic fields
	 * 
	 * 		- username
	 * 		- email
	 * 
	 */
	this.initFieldMonitoring = function() {
		// name
		this.nameEl = Ext.get(this.clazz + '.' + this.id + '.name');		
		if (false === this.nameEl.hasClass(Pulse.disabledFieldCls)) {			
			Pulse.initTextFieldMonitor(this.nameEl, this, 'nameEl', false);
		}		
		// description
		this.descriptionEl = Ext.get(this.clazz + '.' + this.id + '.description');		
		Pulse.initTextAreaMonitor(this.descriptionEl, this, 'descriptionEl');
	};
	
	/**
	 * "Commits" field values and resets changed state 
	 * of the permission-editor. 
	 * 
	 * Use after successfull save.
	 */
	this.commitChanges = function() {
		
		// name
		if (this.nameEl.changed === true) {
			this.tab.setTitle(this.nameEl.dom.value.trim());
			this.nameEl.commit();
		}
		
		// description
		if (this.descriptionEl.changed === true) {
			this.descriptionEl.commit();
		}
		
		// roles-editor
		this.rolesEditor.commit();
		
		// users-editor
		this.usersEditor.commit();
		
		// permissions-editor
		this.groupsEditor.commit();
	};
	
	/**
	 * returns the values of the basic fields.
	 * 
	 * @return {Object} values = {
	 * 				id: 			{Number},
	 * 				name: 			{String},			if changed
 	 * 				description: 	{String},			if changed
	 * 				addusers: 		{Array} [id,...],	if changed
	 * 				remusers: 		{Array} [id,...],	if changed
	 * 				addgroups: 		{Array} [id,...],	if changed
	 * 				remgroups: 		{Array} [id,...],	if changed
	 * 			};
	 */
	this.getChanges = function() {
		
		try {
		
			v = { 
				id: this.id
			};
			
			// add name if changed
			if (true === this.nameEl.changed) {
				v.name = this.nameEl.getValue().trim();
			}
			
			// add description if changed
			if (true === this.descriptionEl.changed) {
				v.description = this.descriptionEl.getValue().trim();
			}
			
			// add roles if changed
			if (typeof(this.rolesEditor) != 'undefined' && this.rolesEditor !== null) {
				if (true === this.rolesEditor.hasChanges()) {
					chgs = this.rolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addroles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remroles = chgs.unasoc;
					}
				}
			}
		
			// add users if changed
			if (typeof(this.usersEditor) != 'undefined' && this.usersEditor !== null) {
				if (true === this.usersEditor.hasChanges()) {
					chgs = this.usersEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addusers = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remusers = chgs.unasoc;
					}
				}
			}
			
			// add groups if changed
			if (typeof(this.groupsEditor) != 'undefined' && this.groupsEditor !== null) {
				if (true === this.groupsEditor.hasChanges()) {
					chgs = this.groupsEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addgroups = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remgroups = chgs.unasoc;
					}
				}
			}
			
			return v;
		
		} catch (e) {
			THROW({e:'FATAL',o:e}, this, 'getChanges');
		}
	};
	
	/**
	 * returns if this permission-editor has changes.
	 * 
	 * @return {Boolean} 
	 * 		true: 
	 * 			if the permission-editor has
	 * 			changes: name, description, groups, users
	 * 		false:
	 * 			if the permission-editor has NO
	 * 			changes: name, description, groups, users
	 */
	this.hasChanges = function() {
		return (this.nameEl.changed || this.descriptionEl.changed
			|| this.rolesEditor.hasChanges() || this.usersEditor.hasChanges() 
			|| this.groupsEditor.hasChanges());
	};
	
//	/**
//	 * unused... just leave for now
//	 */
//	this.execute = function(fnName, params) {
//		
//		switch (fnName) {
//			
//			// edit
//			case 'editCommandMatcher':
//				this.editCommandMatcher(params);
//				break;
//				
//			// delete
//			case 'deleteCommandMatcher':
//				this.deleteCommandMatcher(params);
//				break;
//
//			// undefined
//			default:
//				PulseError.Throw({e:'UNDEFINED'},this.type,'execute(' + fnName + ')');
//				break;
//		}
//
//	};
	
	/**
	 * initializes the editor.
	 * 
	 * - sets values for the editor
	 * - initializes tab
	 * - initializes edit-field-monitoring
	 * - builds:
	 * 		- command-matcher-grid
	 * 		- user-assorter
	 * 		- group-assorter
	 */
	try {
		
		// this.config = config;
		this.config = config;
		
		// properties
		this.tab = config.tab;
		this.tab.tabEditor = this;
		this.id = config.id;
		this.clazz = config.clazz;
		
		// initializes the tab-toolbar
		this.initTab();
		
		// setup field-monitoring
		this.initFieldMonitoring();
		
		// build sub-editors
		
		// show command-matchers
		this.commmandMatcherEditor = new Pulse.CommandMatcherOverview({
			renderTo: this.clazz + '.' + this.id + '.commandmatchers',
			baseParams: {id: this.id },
			loadCommandMatchersURL: this.config.loadCommandMatchersURL,
			createCommandMatcherURL: this.config.createCommandMatcherURL,
			editCommandMatcherURL: this.config.editCommandMatcherURL,
			deleteCommandMatcherURL: this.config.deleteCommandMatcherURL
		});
		this.commmandMatcherEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
		
		// show roles-assorter
		this.rolesEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.ROLES,
			renderTo: this.clazz + '.' + this.id + '.roles',
			loadURL: this.config.loadRolesURL + '?id=' + this.id,
			editURL: this.config.editRoleURL,
			editHandler: function(node) {
				RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.rolesEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
		
		// show users-assorter
		this.usersEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.USERS,
			renderTo: this.clazz + '.' + this.id + '.users',
			loadURL: this.config.loadUsersURL + '?id=' + this.id,
			editURL: this.config.editUserURL,
			editHandler: function(node) {
				UserOverviewEditor.editUser(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.usersEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
		
		// show groups-assorter
		this.groupsEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.USERGROUPS,
			renderTo: this.clazz + '.' + this.id + '.groups',
			loadURL: this.config.loadGroupsURL + '?id=' + this.id,
			editURL: this.config.editGroupURL,
			editHandler: function(node) {
				GroupOverviewEditor.editGroup(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.groupsEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
	
	} catch(e) {
		THROW({e:'FATAL',o:e},this,'init');
	}
	 	
}; // END :: PermissionEditor


/**
 * 
 */
var PermissionOverviewEditor = {
	
	defaultOverviewPageSize: 20,
	
	el: null,
	win: null,
	msgPanel: null,
	
	
	/**
	 * @param {Object} config
	 */
	initEditor: function(config) {
		
		if (typeof(config.tab) != 'undefined') {
		// fetch the tab that has to be initialized
			tab = config.tab;		
			if (true !== tab.isInitialized) {			
				
				// add create button to tab
	        	if (typeof(config.createPermissionURL) != 'undefined' && config.createPermissionURL !== '') {
					tabTbar = tab.getTopToolbar().insertButton(0, [
						{
							text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW,
							scope: this,
							handler: function() {					
								this.createPermission(config.createPermissionURL, config.editPermissionURL);
							},
							iconCls: 'addPermissionIconCls'
						},
						new Ext.Toolbar.Separator()
					]);		
	        	}
				tab.isInitialized = true;
			
			}
		}
				
		// build overview grid
		
		gridStoreRecord = new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'clazz' },
			{ name: 'name' },
			{ name: 'noUsers' },
			{ name: 'noRoles' },
			{ name: 'noGroups' },
			{ name: 'noCommandMatchers' }
        ]);
        
        gridStore = new Ext.data.JsonStore({
//            id: 'id',
            pruneModifiedRecords : true,
            fields: gridStoreRecord,
            root: 'data',
            remoteSort: true,                    
            sortInfo: {
                field: 'name',
                direction: 'ASC'
            },
            totalProperty: 'total',
            url: config.loadPermissionsURL
        });

        // buld paging-tool with combobox to set page-size        
        pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),	    
		    displayField: 'size',
		    valueField: 'size',
		    selectOnFocus: true,
		    mode: 'local',
		    triggerAction: 'all',
//			editable: false,
		    width: 60,
		    blankText: '' + this.defaultOverviewPageSize,
		    emptyText: '' + this.defaultOverviewPageSize
		});
        
        pagingToolBar = new Ext.PagingToolbar({
       		// id: 'toolbar',
            displayInfo: true,
            pageSize: this.defaultOverviewPageSize,
            store: gridStore,
            items: ['-', pageSizeBox]
        });
        
        // add gridStore-listener for paging-toolbar
        gridStore.on('beforeLoad', function(store, options) {
        	this.isLoading = true;
        	if (pageSizeBox.getRawValue() !== '') {
        		try {
        			limit = parseInt(pageSizeBox.getRawValue().trim(), 10);
        			pagingToolBar.pageSize = limit;
        			options.params.limit = limit;
        		} catch(e) { /* ignore */ }
        	} else {
        		pagingToolBar.pageSize = PermissionOverviewEditor.defaultOverviewPageSize;
    			options.params.limit = PermissionOverviewEditor.defaultOverviewPageSize;
        	}
//        	alert('' + config.filterIds.concat());
			
//			PulseError.Throw({e:'filterIds',p:config.filterIds});
//			p = [];
        	for (i = 0; i < config.filterIds.length; i++) {
        		filterEl = Ext.get(config.filterIds[i]);
//        		p.push({n:filterEl+'['+i+']',o:filterEl});
 				if (typeof(filterEl) != 'undefined') {
        			try {        			
        				pname = filterEl.dom.name;
        				pvalue = filterEl.getValue().trim();
//        				p.push({n:''+pname,o:''+pvalue});
        				options.params[pname] = pvalue;
        			
        			} catch (e) { 
        				/* ignore */ 
//        				p.push({n:'error[' + i + ']: ' + e,o:'id: '+config.filterIds[i]});
        			}
 				}
        	}
//        	PulseError.Throw({e:'params',p:p});
        },gridStore);
        gridStore.on('load', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },gridStore);
        gridStore.on('loadexception', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },gridStore);
        
        // initialize filters for reload of grid onChange
        for (i = 0; i < config.filterIds.length; i++) {
    		filterEl = Ext.get(config.filterIds[i]);
    		if (typeof(filterEl) != 'undefined') {
    			
    			filterEl.on({
    				'keyup': {
    					scope: gridStore,
    					fn: function(evt, el, opts) {
    						/*if (evt.getKey() != Ext.EventObject.ENTER) {
								return;
							}*/
//    						alert(el.id + ', ' + el.value + ', ' + el.name);
    						if (true === this.isLoading) {
								return;
							}
    						this.reload();
    					}
    				}
    			},gridStore);

    		}
    	}
    	
    	// selection-model
    	gridSm = new Ext.grid.CheckboxSelectionModel();
		
		// build column-model                
        columns = [
        	gridSm,
            {
                header: 'id:',
                dataIndex: 'id',
                sortable: true,
                width: 30,
                fixed: true
            },{    
                header: VIEWPORT_PROPERTIES.NAME + ':',
                dataIndex: 'name',
                sortable: true
            },{    
                header: VIEWPORT_PROPERTIES.USERS + ':',
                dataIndex: 'noUsers',
                width: 110,
                fixed: true,
                sortable: false
            },{    
                header: VIEWPORT_PROPERTIES.ROLES + ':',
                dataIndex: 'noRoles',
                width: 100,
                fixed: true,
                sortable: false
            },{    
                header: VIEWPORT_PROPERTIES.USERGROUPS + ':',
                dataIndex: 'noGroups',
                width: 110,
                fixed: true,
                sortable: false
            },{    
                header: VIEWPORT_PROPERTIES.COMMANDMATCHERS + ':',
                dataIndex: 'noCommandMatchers',
                width: 110,
                fixed: true,
                sortable: false
            }
        ];
        
        // add edit button to rows
        if (typeof(config.editPermissionURL) != 'undefined' && config.editPermissionURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'PermissionOverviewEditor.editPermission(\'' + config.editPermissionURL + '\',' + id + ')',
			        		iconCls: 'editIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
			        	});
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
        
        // add delete button to rows
        if (typeof(config.deletePermissionURL) != 'undefined' && config.deletePermissionURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'PermissionOverviewEditor.deletePermission(\'' + config.deletePermissionURL + '\',' + id + ')',
			        		iconCls: 'deleteIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
			        	});
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
		
		gridCm = new Ext.grid.ColumnModel(columns);
        
//        grid = new Ext.grid.EditorGridPanel({
        grid = new Ext.grid.GridPanel({
        	id: (typeof(config.gridId) == 'undefined') ? 'PermissionOverViewGrid.grid' : config.gridId,
            store: gridStore,
            cm: gridCm,
            sm: gridSm,
            renderTo: (typeof(config.gridId) == 'undefined') ? 'PermissionOverViewGrid' : config.gridId + '.el',
            autoExpandColumn: 'id',
//            height: 400,
//            width: 725,
            loadMask: true,
            viewConfig: { forceFit: true },
//            title: FilterLocalizations.Filter,
            frame: false,
            style: 'border: 1px solid #8DB2E3;',
//            enableHdMenu: false,
//            clicksToEdit: 1,            
            /*buttons: [{
                        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
                        iconCls: 'saveIconCls', 
                        handler: <xsl:value-of select="$editorIdentifier"/>SaveGrid
                     }],
            buttonAlign: 'center',*/
            tbar: (typeof(config.deletePermissionURL) != 'undefined' && config.deletePermissionURL !== '') ? [{
            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
                iconCls: 'deleteIconCls',
                handler: function() {
                	// retrieve grid
                	id = (typeof(config.gridId) == 'undefined') ? 'PermissionOverViewGrid.grid' : config.gridId;
                	grid = Ext.getCmp(id);
                	// retrieve selected records
                	selectedRecords = grid.getSelectionModel().getSelections();
                	// delete
                	PermissionOverviewEditor.deletePermission(config.deletePermissionURL,selectedRecords);
                }
            },'-'] : [],
            bbar: pagingToolBar
        });
        
        // grid: resize
        if (typeof(config.tab) != 'undefined') {
        	// w
	        grid.setWidth(config.tab.getInnerWidth() - 10);
	        // h
	        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
	        msgPanelHeight = 0;
	        if (tabMsgPanel.isVisible()) {
	        	msgPanelHeight = tabMsgPanel.getSize().height;
	        }
	        tabHeader = Ext.get(config.tab.id + '.header');
	        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);
	        
	        
	        // config.tab: listeners for grid: resize              
	        config.tab.on({
	            'resize': {
	                fn: function(tab, adjWidth, adjHeight, rawWidth, rawHeight) {
	                	grid = Ext.getCmp('PermissionOverViewGrid.grid');
	                    // w
				        tabContentPanel = Ext.getCmp(config.tab.id + '.contentPanel'); 
				        grid.setWidth(config.tab.getInnerWidth() - 10);
				        // h
				        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
				        msgPanelHeight = 0;
				        if (tabMsgPanel.isVisible()) {
				        	msgPanelHeight = tabMsgPanel.getSize().height;
				        }
				        tabHeader = Ext.get(config.tab.id + '.header');
				        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);       
	                }
	            }
	        });
	        
        
        }
        
        // init grid
        gridStore.load({
            params:{
                start: 0, 
                limit: 10
            }
        });                    
		
		return grid;
	},
	
	/**
	 * @param {String} editURL
	 * @param {String}/{Number} permissionid
	 * @param {String} clazz
	 */
	editPermission: function(editURL, permissionid, clazz) {
		// PulseError.Throw({e:'DBG',p:[{n:'editURL',o:editURL},{n:'id',o:permissionid},{n:'class',o:clazz}]},'PermissionOverviewEditor','editPermission()');
		
		if (typeof(clazz) == 'undefined') {
			record = null;
			store = Ext.getCmp('PermissionOverViewGrid.grid').getStore();
			if (store !== null && typeof(store) != 'undefined') {
				store.each(function(r) {
		    		if (r.get('id') == permissionid) {
		    			record = r;
		    			return false;
		    		}
		    	});
			}
			if (record === null) {
				return;
			}
			clazz = record.get('clazz');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: clazz + '.' + permissionid + '.editor',
            title: '...loading: ' + permissionid,
            tabTip: '(id:' + permissionid + ')',
            iconCls: 'permissionIconCls',
            loadParams: {
                url: editURL,
                params: { id: permissionid }
            }
        });
	},
	
		/**
	 * @param {String} deleteURL
	 * @param {String}/{Number}/{Array} permissionid_OR_gridRecords
	 * @param {String} clazz
	 */
	deletePermission: function(deleteURL, permissionid_OR_gridRecords, clazz) {
//		PulseError.Throw({e:'TODO',p:[{n:'deleteURL',o:deleteURL},{n:'permissionid_OR_gridRecords',o:permissionid_OR_gridRecords},{n:'class',o:clazz}]},'PermissionOverviewEditor','deletePermission()');
		
		record = null;
		if (typeof(permissionid_OR_gridRecords) == 'string' || typeof(permissionid_OR_gridRecords) == 'number') {
			// received id-string or number
			params = [permissionid_OR_gridRecords];
			
			store = Ext.getCmp('PermissionOverViewGrid.grid').getStore();
			if (store !== null && typeof(store) != 'undefined') {
				store.each(function(r) {
		    		if (r.get('id') == permissionid_OR_gridRecords) {
		    			record = r;
		    			return false;
		    		}
		    	});
			}
			if (record === null) {
				return;
			}
			
		} else if (typeof(permissionid_OR_gridRecords.length) == 'number' && permissionid_OR_gridRecords.length > 0) {
			// received array
			params = [];
			for (i = 0; i < permissionid_OR_gridRecords.length; i++) {
				record = permissionid_OR_gridRecords[i];
				if (typeof(record) != 'undefined') {
					params.push(record.get('id'));
				}
			}
		} else {
			// invalid id or ids-object
			return;
		}
		
		// proceed with confirm
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + params.concat() + '"',
    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
		
					Ext.Ajax.request({
						url: deleteURL,
						method: 'POST',
						scope: this,
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
			        		if (true === decodedResponse.status) {      				
			      				// close editor/s
			      				if (typeof(options.permissionid_OR_gridRecords) == 'string' || typeof(options.permissionid_OR_gridRecords) == 'number') {
									// received id-string or number -> close single editor
									PULSE_VIEWPORT_CONTROLLER.closeTab(options.clazz + '.' + options.permissionid_OR_gridRecords + '.editor', true);
								} else {
									// close several editors
									for (i = 0; i < options.permissionid_OR_gridRecords.length; i++) {
										record = options.permissionid_OR_gridRecords[i];
										if (typeof(record) != 'undefined') {
											PULSE_VIEWPORT_CONTROLLER.closeTab(record.get('clazz') + '.' + record.get('id') + '.editor', true);
										}
									}
								}
								// reload overview-grid
								this.reload();
			      				// show delete-success msg
			      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:'AccessControl.permissions.overview'},{n:'msg',o:'DELETESUCCESS'}]});
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'PermissionOverviewEditor','deletePermission()');
			        		}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},'PermissionOverviewEditor','deletePermission()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'PermissionOverviewEditor','deletePermission()');
					        }
						},
						clazz: (record !== null) ? record.get('clazz') : null,
						permissionid_OR_gridRecords: permissionid_OR_gridRecords,
						params: { ids: params }
					});
		
    			}    			
    		},
    	this);
	},
	
	/**
	 * 
	 */
	reload: function() {
		// reload overview-grid
		grid = Ext.getCmp('PermissionOverViewGrid.grid');
		if (grid !== null && typeof(grid) != 'undefined') {
			grid.getStore().reload();
		}
	},
	
	
	/**
	 * @param {String} createURL
	 */
	 createPermission: function(createURL, editURL) {
	 	
	 	try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('302 :: PermissionOverviewEditor.createPermission() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
			nameField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.NAME, 
	            name: 'name', 
	            width: 400,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
	            allowBlank: false
	        });
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'createPermissionForm',
	            name: 'createPermissionForm',
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield',
	            autoHeight: true,
	            labelWidth: 100, 
	            items: [nameField] 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            scope: this,
	            handler: function() {
	                // check values
	                if (nameField.getValue().trim() === '') {	                	 
	                    return false;
	                }
	                
	                // checks passed : create
	                
	                Ext.Ajax.request({
	                	url: createURL,
	                	method: 'POST',
	                	scope: this,
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		if (true === decodedResponse.status) {
	                			
	                			this.win.close();
	                			
	                			// reload overview-grid
	                			this.reload();
	                			
	                			// edit user
	                			permission = decodedResponse.permission;
	                			this.editPermission(editURL, permission.id, permission.clazz);
									
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'PermissionOverviewEditor','createPermission()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'PermissionOverviewEditor','createPermission()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'PermissionOverviewEditor','createPermission()');
					        }
	                	},
	                	params: {
	                		name: nameField.getValue().trim()
	                	}
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'createPermission.win.el'
			    });
	        
	        }
	            
		    this.msgPanel = new Ext.Panel({
	    		id: 'createPermission.win.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'createPermission.win',
	        	iconCls: 'addPermissionIconCls',
	            title: VIEWPORT_PROPERTIES.NEW,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 130,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        // clean-up on close
	        this.win.on('close',function(){
	        	delete this.win;
	        	delete this.el;
	        	delete this.msgPanel;
	        	this.win = null;
	        	this.el = null;
	        	this.msgPanel = null;
	        },this);
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){this.win.doLayout(true);},this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
	        nameField.validate();
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
			
		}
	 	
	 }
	
}; // END :: PermissionOverviewEditor


/**
 * builds a new RoleEditor from given config
 * 
 * @param {Object} config.tab
 * @param {Number} config.id
 * @param {String} config.clazz
 * @param {String} config.saveURL
 * @param {String} config.loadUsersURL
 * @param {String} config.loadPermissionsURL
 */
Pulse.RoleEditor = function(config) {
	
	// type
	this.type = 'RoleEditor';
	
	// DBG
	this.DBG = {
		MSG: false
	};
	
	// properties
	this.tab = null;
	this.id = null;
	this.clazz = null;
	
	//
	this.win = null;
	this.el = null;
	this.msgPanel = null;

	// basic fields	
	this.nameEl = null; // textfield
	this.descriptionEl = null; // text-area
	
	// editors
	this.usersEditor = null;
	this.groupsEditor = null;
	this.permissionsEditor = null;
	
	/**
	 * initializes the tab
	 */
	this.initTab = function() {
		if (typeof(this.tab) != 'undefined') {
			
			// initialize tab if !tab.isInitialized
			if (true !== this.tab.isInitialized) {			
				
				// add buttons to bar
				
				// save-button-config
				saveButtonConfig = {
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope: this,
					handler: function() {
						if (false === this.tab.isDirty) {
							return;
						}
						if (false === this.hasChanges()) {
							PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
							return;
						}
						
						// retrieve basic fields values
						v = this.getChanges();
						
//						PulseError.Throw({e:'TODO',p:[
//							{n:'hasChanges',o:''+this.hasChanges()},
//							{n:'id',o:''+v.id},
//						]},this.type,'save.button');
						
						Ext.Ajax.request({
							url: this.config.saveURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									
									// commit changes
									this.commitChanges();
									
									// reload user-overview-grid
									RoleOverviewEditor.reload();
									
									// save success message
									PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
				            		
				        		} else {
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.saveRole');
								}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.saveRole');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.saveRole');
						        }
							},
							params: v
						});
						
					},
					iconCls: 'saveIconCls'
				};				
				
				// add buttons
				tabTbar = this.tab.getTopToolbar().insertButton(0, [
					saveButtonConfig,
					new Ext.Toolbar.Separator()
				]);
				
				// used to rertieve change-state in vp-controller
				this.tab.pEditor = this;
				
				// set initialized-flag	
				this.tab.isInitialized = true;
			
			}
		}
	};
	
	/**
	 * sets up change-monitoring for basic fields
	 * 
	 * 		- username
	 * 		- email
	 * 
	 */
	this.initFieldMonitoring = function() {		
		// name
		this.nameEl = Ext.get(this.clazz + '.' + this.id + '.name');		
		if (false === this.nameEl.hasClass(Pulse.disabledFieldCls)) {			
			Pulse.initTextFieldMonitor(this.nameEl, this, 'nameEl', false);
		}		
		// description
		this.descriptionEl = Ext.get(this.clazz + '.' + this.id + '.description');		
		Pulse.initTextAreaMonitor(this.descriptionEl, this, 'descriptionEl');
	};
	
	/**
	 * "Commits" field values and restets changed state. Use after successfull save.
	 */
	this.commitChanges = function() {
		
		// name
		if (this.nameEl.changed === true) {
			this.tab.setTitle(this.nameEl.dom.value.trim());
			this.nameEl.commit();
		}
		
		// description
		if (this.descriptionEl.changed === true) {
			this.descriptionEl.commit();
		}
		
		// users-editor
		this.usersEditor.commit();
		
		// groups-editor
		this.groupsEditor.commit();
		
		// permissions-editor
		this.permissionsEditor.commit();
	};
	
	/**
	 * returns the values of the basic fields
	 * 
	 * @return {Object} values = {
	 * 				id: {Number},
	 * 				name: 			{String},			if changed
	 * 				description: 	{String},			if changed
	 * 				addusers: 		{Array}ids,			if changed
	 * 				remusers: 		{Array}ids,			if changed
	 * 				addgroups: 		{Array}ids,			if changed
	 * 				remgroups: 		{Array}ids,			if changed
	 * 				addpermissions: {Array}ids,			if changed
	 * 				rempermissions: {Array}ids,			if changed
	 * 			};
	 */
	this.getChanges = function() {
		
		try {
		
			v = { 
				id: this.id
			};
			
			// add name if changed
			if (true === this.nameEl.changed) {
				v.name = this.nameEl.getValue().trim();
			}
			
			// add description if changed
			if (true === this.descriptionEl.changed) {
				v.description = this.descriptionEl.getValue().trim();
			}
			
			// add users if changed
			if (typeof(this.usersEditor) != 'undefined' && this.usersEditor !== null) {
				if (true === this.usersEditor.hasChanges()) {
					chgs = this.usersEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addusers = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remusers = chgs.unasoc;
					}
				}
			}
			
			// add groups if changed
			if (typeof(this.groupsEditor) != 'undefined' && this.groupsEditor !== null) {
				if (true === this.groupsEditor.hasChanges()) {
					chgs = this.groupsEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addgroups = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remgroups = chgs.unasoc;
					}
				}
			}
			
			// add permissions if changed
			if (typeof(this.permissionsEditor) != 'undefined' && this.permissionsEditor !== null) {
				if (true === this.permissionsEditor.hasChanges()) {
					chgs = this.permissionsEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addpermissions = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.rempermissions = chgs.unasoc;
					}
				}
			}
			
			return v;
		
		} catch (e) {
			THROW({e:'FATAL',o:e}, this, 'getChanges');
		}
	};
	
	/**
	 * returns if this editor has changes
	 * 
	 * @return {Boolean}
	 */
	this.hasChanges = function() {
		return (this.nameEl.changed || this.descriptionEl.changed 
			|| this.usersEditor.hasChanges() || this.groupsEditor.hasChanges() 
			|| this.permissionsEditor.hasChanges());
	};
	
	/**
	 * initialize the editor
	 */
	try {
		
		// this.config = config;
		this.config = config;
		
		// properties
		this.tab = config.tab;
		this.tab.tabEditor = this;
		this.id = config.id;
		this.clazz = config.clazz;
		
		// initializes the tab-toolbar
		this.initTab();
		
		// setup field-monitoring
		this.initFieldMonitoring();
		
		// build sub-editors
		
		// show users-assorter
		this.usersEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.USERS,
			renderTo: this.clazz + '.' + this.id + '.users',
			loadURL: this.config.loadUsersURL + '?id=' + this.id,
			editURL: this.config.editUserURL,
			editHandler: function(node) {
				UserOverviewEditor.editUser(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.usersEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
		
		// show groups-assorter
		this.groupsEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.USERGROUPS,
			renderTo: this.clazz + '.' + this.id + '.groups',
			loadURL: this.config.loadGroupsURL + '?id=' + this.id,
			editURL: this.config.editGroupURL,
			editHandler: function(node) {
				GroupOverviewEditor.editGroup(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.groupsEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
		
		// show permissions-assorter
		this.permissionsEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.PERMISSIONS,
			renderTo: this.clazz + '.' + this.id + '.permissions',
			loadURL: this.config.loadPermissionsURL + '?id=' + this.id,
			editURL: this.config.editPermissionURL,
			editHandler: function(node) {
				PermissionOverviewEditor.editPermission(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		this.permissionsEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
		},this);
	
	} catch(e) {
		THROW({e:'FATAL',o:e},this,'init');
	}
	 	
}; // END :: GroupEditor


/**
 * 
 */
var RoleOverviewEditor = {
	
	defaultOverviewPageSize: 20,
	
	el: null,
	win: null,
	msgPanel: null,
	
	
	/**
	 * @param {Object} config
	 */
	initEditor: function(config) {
		
		if (typeof(config.tab) != 'undefined') {
		// fetch the tab that has to be initialized
			tab = config.tab;		
			if (true !== tab.isInitialized) {			
				
				// add create button to tab
	        	if (typeof(config.createURL) != 'undefined' && config.createURL !== '') {
					tabTbar = tab.getTopToolbar().insertButton(0, [
						{
							text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW,
							scope: this,
							handler: function() {					
								this.createRole(config.createURL, config.editURL);
							},
							iconCls: 'addRoleIconCls'
						},
						new Ext.Toolbar.Separator()
					]);		
	        	}
				tab.isInitialized = true;
			
			}
		}
				
		// build overview grid
		
		gridStoreRecord = new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'clazz' },
			{ name: 'name' },
			{ name: 'noUsers' },
			{ name: 'noGroups' },
			{ name: 'noPermissions' }
        ]);
        
        gridStore = new Ext.data.JsonStore({
//            id: 'id',
            pruneModifiedRecords : true,
            fields: gridStoreRecord,
            root: 'data',
            remoteSort: true,                    
            sortInfo: {
                field: 'name',
                direction: 'ASC'
            },
            totalProperty: 'total',
            url: config.loadURL
        });

        // buld paging-tool with combobox to set page-size        
        pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),	    
		    displayField: 'size',
		    valueField: 'size',
		    selectOnFocus: true,
		    mode: 'local',
		    triggerAction: 'all',
//			editable: false,
		    width: 60,
		    blankText: '' + this.defaultOverviewPageSize,
		    emptyText: '' + this.defaultOverviewPageSize
		});
        
        pagingToolBar = new Ext.PagingToolbar({
       		// id: 'toolbar',
            displayInfo: true,
            pageSize: this.defaultOverviewPageSize,
            store: gridStore,
            items: ['-', pageSizeBox]
        });
        
        // add gridStore-listener for paging-toolbar
        gridStore.on('beforeLoad', function(store, options) {
        	this.isLoading = true;
        	if (pageSizeBox.getRawValue() !== '') {
        		try {
        			limit = parseInt(pageSizeBox.getRawValue().trim(), 10);
        			pagingToolBar.pageSize = limit;
        			options.params.limit = limit;
        		} catch(e) { /* ignore */ }
        	} else {
        		pagingToolBar.pageSize = RoleOverviewEditor.defaultOverviewPageSize;
    			options.params.limit = RoleOverviewEditor.defaultOverviewPageSize;
        	}
//        	alert('' + config.filterIds.concat());
			
//			PulseError.Throw({e:'filterIds',p:config.filterIds});
//			p = [];
        	for (i = 0; i < config.filterIds.length; i++) {
        		filterEl = Ext.get(config.filterIds[i]);
//        		p.push({n:filterEl+'['+i+']',o:filterEl});
 				if (typeof(filterEl) != 'undefined') {
        			try {        			
        				pname = filterEl.dom.name;
        				pvalue = filterEl.getValue().trim();
//        				p.push({n:''+pname,o:''+pvalue});
        				options.params[pname] = pvalue;
        			
        			} catch (e) { 
        				/* ignore */ 
//        				p.push({n:'error[' + i + ']: ' + e,o:'id: '+config.filterIds[i]});
        			}
 				}
        	}
//        	PulseError.Throw({e:'params',p:p});
        },gridStore);
        gridStore.on('load', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },gridStore);
        gridStore.on('loadexception', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },gridStore);
        
        // initialize filters for reload of grid onChange
        for (i = 0; i < config.filterIds.length; i++) {
    		filterEl = Ext.get(config.filterIds[i]);
    		if (typeof(filterEl) != 'undefined') {
    			
    			filterEl.on({
    				'keyup': {
    					scope: gridStore,
    					fn: function(evt, el, opts) {
    						/*if (evt.getKey() != Ext.EventObject.ENTER) {
								return;
							}*/
//    						alert(el.id + ', ' + el.value + ', ' + el.name);
    						if (true === this.isLoading) {
								return;
							}
    						this.reload();
    					}
    				}
    			},gridStore);

    		}
    	}
    	
    	// selection-model
    	gridSm = new Ext.grid.CheckboxSelectionModel();
		
		// build column-model                
        columns = [
        	gridSm,
            {
                header: 'id:',
                dataIndex: 'id',
                sortable: true,
                width: 30,
                fixed: true
            },{    
                header: VIEWPORT_PROPERTIES.NAME + ':',
                dataIndex: 'name',
                sortable: true
            },{    
                header: VIEWPORT_PROPERTIES.USERS + ':',
                dataIndex: 'noUsers',
                width: 110,
                fixed: true,
                sortable: false
            },{    
                header: VIEWPORT_PROPERTIES.USERGROUPS + ':',
                dataIndex: 'noGroups',
                width: 110,
                fixed: true,
                sortable: false
            },{    
                header: VIEWPORT_PROPERTIES.PERMISSIONS + ':',
                dataIndex: 'noPermissions',
                width: 110,
                fixed: true,
                sortable: false
            }
        ];
        
        // add edit button to rows
        if (typeof(config.editURL) != 'undefined' && config.editURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'RoleOverviewEditor.editRole(\'' + config.editURL + '\',' + id + ')',
			        		iconCls: 'editIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
			        	});
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
        
        // add delete button to rows
        if (typeof(config.deleteURL) != 'undefined' && config.deleteURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'RoleOverviewEditor.deleteRole(\'' + config.deleteURL + '\',' + id + ')',
			        		iconCls: 'deleteIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
			        	});
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
		
		gridCm = new Ext.grid.ColumnModel(columns);
        
//        grid = new Ext.grid.EditorGridPanel({
        grid = new Ext.grid.GridPanel({
        	id: (typeof(config.gridId) == 'undefined') ? 'RoleOverViewGrid.grid' : config.gridId,
            store: gridStore,
            cm: gridCm,
            sm: gridSm,
            renderTo: (typeof(config.gridId) == 'undefined') ? 'RoleOverViewGrid' : config.gridId + '.el',
            autoExpandColumn: 'id',
//            height: 400,
//            width: 725,
            loadMask: true,
            viewConfig: { forceFit: true },
//            title: FilterLocalizations.Filter,
            frame: false,
            style: 'border: 1px solid #8DB2E3;',
//            enableHdMenu: false,
//            clicksToEdit: 1,            
            /*buttons: [{
                        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
                        iconCls: 'saveIconCls', 
                        handler: <xsl:value-of select="$editorIdentifier"/>SaveGrid
                     }],
            buttonAlign: 'center',*/
            tbar: (typeof(config.deleteURL) != 'undefined' && config.deleteURL !== '') ? [{
            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
                iconCls: 'deleteIconCls',
                handler: function() {
                	// retrieve grid
                	id = (typeof(config.gridId) == 'undefined') ? 'RoleOverViewGrid.grid' : config.gridId;
                	grid = Ext.getCmp(id);
                	// retrieve selected records
                	selectedRecords = grid.getSelectionModel().getSelections();
                	// delete
                	RoleOverviewEditor.deleteRole(config.deleteURL,selectedRecords);
                }
            },'-'] : [],
            bbar: pagingToolBar
        });
        
        // grid: resize
        if (typeof(config.tab) != 'undefined') {
        	// w
	        grid.setWidth(config.tab.getInnerWidth() - 10);
	        // h
	        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
	        msgPanelHeight = 0;
	        if (tabMsgPanel.isVisible()) {
	        	msgPanelHeight = tabMsgPanel.getSize().height;
	        }
	        tabHeader = Ext.get(config.tab.id + '.header');
	        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);
	        
	        
	        // config.tab: listeners for grid: resize              
	        config.tab.on({
	            'resize': {
	                fn: function(tab, adjWidth, adjHeight, rawWidth, rawHeight) {
	                	grid = Ext.getCmp('RoleOverViewGrid.grid');
	                    // w
				        tabContentPanel = Ext.getCmp(config.tab.id + '.contentPanel'); 
				        grid.setWidth(config.tab.getInnerWidth() - 10);
				        // h
				        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
				        msgPanelHeight = 0;
				        if (tabMsgPanel.isVisible()) {
				        	msgPanelHeight = tabMsgPanel.getSize().height;
				        }
				        tabHeader = Ext.get(config.tab.id + '.header');
				        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);       
	                }
	            }
	        });
	        
        
        }
        
        // init grid
        gridStore.load({
            params:{
                start: 0, 
                limit: 10
            }
        });                    
		
		return grid;
	},
	
	/**
	 * @param {String} editURL
	 * @param {String}/{Number} roleid
	 * @param {String} clazz
	 */
	editRole: function(editURL, roleid, clazz) {
		// PulseError.Throw({e:'DBG',p:[{n:'editURL',o:editURL},{n:'id',o:roleid},{n:'class',o:clazz}]},'RoleOverviewEditor','editRole()');
		
		if (typeof(clazz) == 'undefined') {
			record = null;
			store = Ext.getCmp('RoleOverViewGrid.grid').getStore();
			if (store !== null && typeof(store) != 'undefined') {
				store.each(function(r) {
		    		if (r.get('id') == roleid) {
		    			record = r;
		    			return false;
		    		}
		    	});
			}
			if (record === null) {
				return;
			}
			clazz = record.get('clazz');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: clazz + '.' + roleid + '.editor',
            title: '...loading: ' + roleid,
            tabTip: '(id:' + roleid + ')',
            iconCls: 'roleIconCls',
            loadParams: {
                url: editURL,
                params: { id: roleid }
            }
        });
	},
	
		/**
	 * @param {String} deleteURL
	 * @param {String}/{Number}/{Array} roleid_OR_gridRecords
	 * @param {String} clazz
	 */
	deleteRole: function(deleteURL, roleid_OR_gridRecords, clazz) {
//		PulseError.Throw({e:'TODO',p:[{n:'deleteURL',o:deleteURL},{n:'roleid_OR_gridRecords',o:roleid_OR_gridRecords},{n:'class',o:clazz}]},'RoleOverviewEditor','deleteRole()');
		
		record = null;
		if (typeof(roleid_OR_gridRecords) == 'string' || typeof(roleid_OR_gridRecords) == 'number') {
			// received id-string or number
			params = [roleid_OR_gridRecords];
			
			store = Ext.getCmp('RoleOverViewGrid.grid').getStore();
			if (store !== null && typeof(store) != 'undefined') {
				store.each(function(r) {
		    		if (r.get('id') == roleid_OR_gridRecords) {
		    			record = r;
		    			return false;
		    		}
		    	});
			}
			if (record === null) {
				return;
			}
			
		} else if (typeof(roleid_OR_gridRecords.length) == 'number' && roleid_OR_gridRecords.length > 0) {
			// received array
			params = [];
			for (i = 0; i < roleid_OR_gridRecords.length; i++) {
				record = roleid_OR_gridRecords[i];
				if (typeof(record) != 'undefined') {
					params.push(record.get('id'));
				}
			}
		} else {
			// invalid id or ids-object
			return;
		}
		
		// proceed with confirm
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + params.concat() + '"',
    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
		
					Ext.Ajax.request({
						url: deleteURL,
						method: 'POST',
						scope: this,
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
			        		if (true === decodedResponse.status) {      				
			      				// close editor/s
			      				if (typeof(options.roleid_OR_gridRecords) == 'string' || typeof(options.roleid_OR_gridRecords) == 'number') {
									// received id-string or number -> close single editor
									PULSE_VIEWPORT_CONTROLLER.closeTab(options.clazz + '.' + options.roleid_OR_gridRecords + '.editor', true);
								} else {
									// close several editors
									for (i = 0; i < options.roleid_OR_gridRecords.length; i++) {
										record = options.roleid_OR_gridRecords[i];
										if (typeof(record) != 'undefined') {
											PULSE_VIEWPORT_CONTROLLER.closeTab(record.get('clazz') + '.' + record.get('id') + '.editor', true);
										}
									}
								}
								// reload overview-grid
								this.reload();
			      				// show delete-success msg
			      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:'AccessControl.roles.overview'},{n:'msg',o:'DELETESUCCESS'}]});
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'RoleOverviewEditor','deleteRole()');
			        		}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},'RoleOverviewEditor','deleteRole()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'RoleOverviewEditor','deleteRole()');
					        }
						},
						clazz: (record !== null) ? record.get('clazz') : null,
						roleid_OR_gridRecords: roleid_OR_gridRecords,
						params: { ids: params }
					});
		
    			}    			
    		},
    	this);
	},
	
	/**
	 * 
	 */
	reload: function() {
		// reload overview-grid
		grid = Ext.getCmp('RoleOverViewGrid.grid');
		if (grid !== null && typeof(grid) != 'undefined') {
			grid.getStore().reload();
		}
	},
	
	
	/**
	 * @param {String} createURL
	 */
	 createRole: function(createURL, editURL) {
	 	
	 	try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('302 :: RoleOverviewEditor.createRole() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
			nameField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.NAME, 
	            name: 'name', 
	            width: 400,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
	            allowBlank: false
	        });
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'createRoleForm',
	            name: 'createRoleForm',
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield',
	            autoHeight: true,
	            labelWidth: 100, 
	            items: [nameField] 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            scope: this,
	            handler: function() {
	                // check values
	                if (nameField.getValue().trim() === '') {	                	 
	                    return false;
	                }
	                
	                // checks passed : create
	                
	                Ext.Ajax.request({
	                	url: createURL,
	                	method: 'POST',
	                	scope: this,
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		if (true === decodedResponse.status) {
	                			
	                			this.win.close();
	                			
	                			// reload overview-grid
	                			this.reload();
	                			
	                			// edit
	                			role = decodedResponse.role;
	                			this.editRole(editURL, role.id, role.clazz);
									
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'RoleOverviewEditor','createRole()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'RoleOverviewEditor','createRole()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'RoleOverviewEditor','createRole()');
					        }
	                	},
	                	params: {
	                		name: nameField.getValue().trim()
	                	}
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'createRole.win.el'
			    });
	        
	        }
	            
		    this.msgPanel = new Ext.Panel({
	    		id: 'createRole.win.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'createRole.win',
	        	iconCls: 'addRoleIconCls',
	            title: VIEWPORT_PROPERTIES.NEW,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 130,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        // clean-up on close
	        this.win.on('close',function(){
	        	delete this.win;
	        	delete this.el;
	        	delete this.msgPanel;
	        	this.win = null;
	        	this.el = null;
	        	this.msgPanel = null;
	        },this);
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){this.win.doLayout(true);},this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
	        nameField.validate();
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
			
		}
	 	
	 }
	
}; // END :: RoleOverviewEditor


/**
 * 
 */
UserAttributesEditor = {
	
	type: 'UserAttributesEditor',
	
	DBG: {
		initComponent: false,
		onRender: false,
		initPanel: false,
		tree: { click : false, beforeselect: false, selectionchange: false },
		initEditor: false,
		MSG: false
	},
	
	// defaults
	treeHeight: 300,
	
	/**
	 * 
	 */
	initEditor: function(config) {
		// DBG >>
		THROW({props:['id'],o:{propsObj:config,props:['clazz','parameterNames']}},this,'initEditor');
		
		if (typeof(this.valuesEditor) != 'undefined') {
			delete this.valuesEditor;
		}
		
		this.valuesEditor = new Pulse.AttributeCheckOrValueEditor({
			check: config,
			pEditor: this
		});
		
		this.valuesEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			if (msgString == 'reset' && false === this.hasChanges()) {
				this.panel.toggleHasChangesIcon(false);
				this.fireEvent('reset',{editor: this, success: true});
				return;
			}
			this.fireEvent('MSG',msgString,this);			
		},this);
		
		this.valuesEditor.on('reset',function(vEditor){
			if (false === this.hasChanges()) {
				this.panel.toggleHasChangesIcon(false);
				this.fireEvent('reset',{editor: this, success: true});
				return;
			}
		},this);
		
	},
	
	/**
	 * 
	 */
	initPanel: function() {
		THROW({
			props:['editor.config.browseAttributesURL'],
			args:arguments
		},this,'initPanel');
		
		this.tree.render();
		
		this.tree.getRootNode().expand();
		
	},
	
	/**
	 * 
	 */
	onRender: function() {
		
		// DBG
		THROW({
			props:['renderTo','editor.config.browseAttributesURL'],
			args:arguments
		},this,'onRender');
		
		try {
		
			// build tab-panel
			this.editorPanel = new Ext.Panel({
				id: this.id + '.editorPanel',
	            region: 'center',  
	            margins: '5 5 5 0', 
	            autoScroll: true,
            	html: '<div style="padding:5px;">please select an attribute...</div>'
			});
			
			// build tree
			this.tree = new Ext.tree.TreePanel({
				id: this.id + '.treePanel',
				title: VIEWPORT_PROPERTIES.ATTRIBUTEREGISTRY,
	            iconCls: 'attributeRegistryIconCls', 
	            split: true,
	            height: this.treeHeight,
	            width: 250, 
	            minSize: 150, 
	            maxSize: 600,
	            margins: '5 0 5 5',
	    		region: 'west',
		        animate: true,
		        creatingNewNode: false, 
		        enableDD: false,
		        autoScroll: true, 
		        containerScroll: true, 
		        rootVisible: false,
		        border: true,
	            loader: new Ext.tree.TreeLoader({ 
		            dataUrl: this.editor.config.browseAttributesURL,
		            uiProviders: { 
		            	'RegistryTreeNodeUI': PULSE.RegistryTreeNodeUI
	            	}
		        }),
		        iconRenderer: function(nodeattributes) {                    
                    clazzArray = nodeattributes.clazz.split('.');
                    iconCls = clazzArray.join('');
                    return iconCls;                    
                }
			});
			
//			this.tree.on('click',function(node){
//				
//				THROW({
//					args:arguments,
//					o:{
//						propsObj:node,
//						props:['id','text','attributes.clazz']
//					},
//					props:['id','editor.id','editor.config.loadAttributeURL']
//				},this,'tree.click');
//				
//				if (false === this.hasChanges()) {
//					this.editorPanel.load({
//						url: this.editor.config.loadAttributeURL,
//						method: 'POST',
//						scripts: true,
//						callback: LPCB,
//						params: { id: this.editor.id, attributeid: node.id },
//	                    text: 'loading...',
//	                    discardUrl: true,
//	                    nocache: true,
//	                    timeout: 30
//					});
//				}
//				
//			},this);
			
			
			this.tree.getSelectionModel().on('beforeselect',function(selMode, newnode, prevnode){
				
				THROW({
					args:arguments,
					o:{
						propsObj:newnode,
						props:['id','text','attributes.clazz']
					},
					props:['id','editor.id','editor.config.loadAttributeURL']
				},this,'tree.beforeselect');
				
				// no chgs -> select node
				if (false === this.hasChanges()) {
					return true;
				}
				
				Ext.Msg.confirm(
					VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
					VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
					VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
		        	function(response) {
		        		// reset permissions & select new node
			        	if('yes' === response) {
			        		this.reset();
			        		newnode.select();
			        	}
		        	}, 
		        	this
	        	);
				return false;
				
			},this);
			
			this.tree.getSelectionModel().on('selectionchange',function(selMode, node){
				
				THROW({
					args:arguments,
					o:{
						propsObj:node,
						props:['id','text','attributes.clazz']
					},
					props:['id','editor.id','editor.config.loadAttributeURL']
				},this,'tree.selectionchange');
				
				this.editorPanel.load({
					url: this.editor.config.loadAttributeURL,
					method: 'POST',
					scripts: true,
					callback: LPCB,
					params: { id: this.editor.id, attributeid: node.id },
                    text: 'loading...',
                    discardUrl: true,
                    nocache: true,
                    timeout: 30
				});
			},this);
			
			
			// build root
			this.root = new Ext.tree.AsyncTreeNode({
		        text: 'root',
		        type: 'dir',
		        draggable: false, 
		        id: 'source.' + Ext.id()
		    });
		    
		    this.tree.setRootNode(this.root);
			
			this.panel = new Ext.Panel({
				renderTo: this.renderTo,
				title: '' + VIEWPORT_PROPERTIES.ATTRIBUTES,
				iconCls: 'attributesIconCls',
				collapsible: true, collapsed: true,
				layout: 'border',
				height: 400,
				items: [this.tree,this.editorPanel]
			});
			
			this.panel.on('expand',function(){
				this.initPanel();
			},this);
			
			//
			Pulse.insertHasChangesIcon(this.panel);
			
		} catch(e) {
			THROW({e:'FATAL',o:e}, this, 'onRender');
		}
		
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		if (typeof(this.valuesEditor) == 'undefined' || this.valuesEditor === null) {
			return false;
		}
		return this.valuesEditor.hasChanges();
	},
	 
	 /**
	  * 
	  */
	getChanges: function(v) {
		
//		if (typeof(v) == 'object' && v !== null) {
//			if (typeof(this.valuesEditor) == 'undefined' || this.valuesEditor === null) {
//				return false;
//			}
//		}

		if (typeof(this.valuesEditor) != 'undefined' && this.valuesEditor !== null) {
			return this.valuesEditor.getChanges(v);
		}
		
		return v;
		
	},
	
	/**
	 * 
	 */
	commit: function() {
		if (false === this.fireEvent('beforecommit',this)) {
			return false;
		}
		
		this.panel.toggleHasChangesIcon(false);
		
		if (typeof(this.valuesEditor) != 'undefined' && this.valuesEditor !== null) {
			return this.valuesEditor.commit();
		}
		
		
		this.fireEvent('commit',this);
	},
	
	reset: function() {
		
		if (false === this.fireEvent('beforereset',this)) {
			return false;
		}
		
		this.panel.toggleHasChangesIcon(false);
		
		if (typeof(this.valuesEditor) != 'undefined' && this.valuesEditor !== null) {
			return this.valuesEditor.reset();
		}
		
		
		this.fireEvent('reset',this);
	},
	
	/**
	 * initializes this componenet with a given config.
	 */
	initComponent: function() {
		
		if (typeof(this.id) == 'undefined' || this.id === null) {
			this.id = Ext.id();
		}
		
		// DBG >>	
		THROW({
			args:arguments,
			props:[
				'id','renderTo','editor.id','editor.clazz','editor.tab','editor.tab.id',
				'editor.config','editor.config.browseAttributesURL'
			]
		},this,'initComponent');
		
		try {
		
			// add common events
			this.addEvents({
				'MSG': true,
				'beforereset': true,
				'reset': true,
				'beforecommit': true,
				'commit': true
			});
		
			// TODO
		
		} catch(e) {
			description = (typeof(e) == 'object') ? e.description : 'undefined'; 			
 			THROW({e:'FATAL',o:'' + e + ', ' + description}, this, 'initComponent');
		}
				
	}
	
};
Pulse.UserAttributesEditor = Ext.extend(Ext.Component,UserAttributesEditor);


/**
 * builds a new UserEditor from given config
 * 
 * @param {Object} config.tab
 * @param {Number} config.id
 * @param {Boolean} config.active
 * @param {String} config.clazz
 * @param {String} config.saveURL
 * @param {String} config.toggleUserStateURL
 */
Pulse.UserEditor = function(config) {
	
	// type
	this.type = 'UserEditor';
	
	// DBG
	this.DBG = {
		MSG: false,
		initAttributesEditor: false
	};
	
	// properties
	this.tab = null;
	this.id = null;
	this.active = null;
	this.clazz = null;
	
	//
	this.win = null;
	this.el = null;
	this.msgPanel = null;
	
	// toolbar
	this.toggleActiveButton = null;
	
	// basic fields	
	this.nameEl = null; // textfield
	this.emailEl = null; // textfield
	this.webdavEnabledEl = null; // checkbox
	
	// editors
	/*
	this.rolesEditor = null;
	this.groupsEditor = null;
	this.permissionsEditor = null;
	*/
	
	/**
	 * initializes the tab
	 */
	this.initTab = function() {
		if (typeof(this.tab) != 'undefined') {
			
			// initialize tab if !tab.isInitialized
			if (true !== this.tab.isInitialized) {			
				
				// add buttons to bar
				
				// save-button-config
				saveButtonConfig = {
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope: this,
					handler: function() {
						if (false === this.tab.isDirty) {
							return;
						}
						if (false === this.hasChanges()) {
							this.tab.toggleHasChangesIcon(false);
							PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
							return;
						}
						
						// retrieve basic fields values
						v = this.getChanges();
						
//						PulseError.Throw({e:'TODO',p:[
//							{n:'hasChanges',o:''+this.hasChanges()},
//							{n:'active',o:''+this.active},
//							{n:'id',o:''+v.id},
//							{n:'name',o:''+v.name},
//							{n:'email',o:''+v.email},
//							{n:'webdavEnabled',o:''+v.webdavEnabled}
//						]},this.type,'save.button');
						
						Ext.Ajax.request({
							url: this.config.saveURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									
									// commit changes
									this.commitChanges();
									
									// reload user-overview-grid
									UserOverviewEditor.reload();
									
									// save success message
									PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
				            		
				        		} else {
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.saveUser');
								}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.saveUser');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.saveUser');
						        }
							},
							params: v
						});
						
					},
					iconCls: 'saveIconCls'
				};
				
				// change-password-button-config
				changePasswordButtonConfig = {
					text:  VIEWPORT_PROPERTIES.PASSWORDCHANGE,
					scope: this,
					handler: function() {					
						this.changePassword();
					},
					iconCls: 'editPasswordIconCls'
				};
				
				// toggle-active-button
				this.toggleActiveButton = new Ext.Toolbar.Button({
					text:  (true === this.active) ? 'active' : 'inactive',
//						tooltip:  (true === this.active) ? 'deactivate' : 'activate',
					scope: this,
					handler: function() {
						
						this.showToggleIsLoading();					
						
						Ext.Ajax.request({
							url: this.config.toggleUserStateURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									
									// reload user-overview-grid
									UserOverviewEditor.reload();
									
									// toggle active state
									this.toggleActive();
									
									// success message
									/* // uncommented due to save-state-problems in tab
									PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
				            		*/
				        		} else {
				        			this.setToggleActive(this.active);
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.toggleUserState');
								}
							},
							failure: function(response, options) {
								this.setToggleActive(this.active);
								if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.toggleUserState');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.toggleUserState');
						        }
							},
							params: { ids: [ this.id ] }
						});
						
					},
					iconCls: (true === this.active) ? 'isSelectedIconCls' : 'isSelectedDisabledIconCls'
				});
				
				// delete button config
                deleteButtonConfig = {
                    text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
                    scope: this,
                    handler: function() {
                        Ext.Msg.confirm(
			            VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + this.id + '"',
			            VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
			            function(response) {
			                if ('yes' === response) {
		                        Ext.Ajax.request({
		                            url: this.config.deleteURL,
		                            method: 'POST',
		                            scope: this,
		                            success: function(response, options) {
		                                decodedResponse = Ext.decode(response.responseText);
		                                if (true === decodedResponse.status) {
		                                    
		                                    // close tab
		                                    PULSE_VIEWPORT_CONTROLLER.closeTab(this.tab.id, true);
		                                    	
	                                    	// reload user-overview-grid
	                                    	UserOverviewEditor.reload();
	                                    
	                                    	// delete success message
	                                    	PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:UserOverviewEditor.tab.id},{n:'msg',o:'deletesuccess'}]});
		                                    
		                                    
		                                } else {
		                                    PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.deleteUser');
		                                }
		                            },
		                            failure: function(response, options) {
		                                if (typeof(response.responseText) == 'undefined') {
		                                    PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.deleteUser');
		                                } else {
		                                    PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.deleteUser');
		                                }
		                            },
		                            params: { id: this.id }
		                        });
			                }
			            }, this);
                        
                    },
                    iconCls: 'deleteIconCls'
                };
				
				// add buttons
				tabTbar = this.tab.getTopToolbar().insertButton(0, [
					saveButtonConfig,
					new Ext.Toolbar.Separator(),
					changePasswordButtonConfig,
					new Ext.Toolbar.Separator(),
					this.toggleActiveButton,
					new Ext.Toolbar.Separator(),
					deleteButtonConfig,
                    new Ext.Toolbar.Separator()
				]);
				
				// used to retrieve change-state in vp-controller
				this.tab.pEditor = this;
				
				PULSE_VIEWPORT_CONTROLLER.insertHasChangesIcon(this.tab);
				
				// set initialized-flag	
				this.tab.isInitialized = true;
			
			}
		}
	};
	
	/**
	 * sets up change-monitoring for basic fields
	 * 
	 * 		- username
	 * 		- email
	 *		- webDAV-role
	 */
	this.initFieldMonitoring = function() {
		// name
		this.nameEl = Ext.get(this.clazz + '.' + this.id + '.name');
		Pulse.initTextFieldMonitor(this.nameEl, this, 'nameEl', false);				
		// email
		this.emailEl = Ext.get(this.clazz + '.' + this.id + '.email');
		Pulse.initTextFieldMonitor(this.emailEl, this, 'emailEl', false);		
		// webdavEnabled
		this.webdavEnabledEl = Ext.get(this.clazz + '.' + this.id + '.webdavEnabled');
		Pulse.initCheckBoxMonitor(this.webdavEnabledEl, this, 'webdavEnabledEl');
	};
	
	/**
	 * "Commits" field values and restets changed state. Use after successfull save.
	 */
	this.commitChanges = function() {
		
		// name
		if (typeof(this.nameEl) != 'undefined' && this.nameEl !== null) {
			if (this.nameEl.changed === true) {
				this.tab.setTitle(this.nameEl.dom.value.trim());
				this.nameEl.commit();
			}
		}
		
		// email
		if (typeof(this.emailEl) != 'undefined' && this.emailEl !== null) {
			if (this.emailEl.changed === true) {
				this.emailEl.commit();
			}
		}
		
		// webdavEnabled
		if (typeof(this.webdavEnabledEl) != 'undefined' && this.webdavEnabledEl !== null) {
			if (this.webdavEnabledEl.changed === true) {
				this.webdavEnabledEl.commit();
			}
		}
		
		// roles-editor
		if (typeof(this.rolesEditor) != 'undefined' && this.rolesEditor !== null) {
			this.rolesEditor.commit();
		}
		
		// groups-editor
		if (typeof(this.groupsEditor) != 'undefined' && this.groupsEditor !== null) {
			this.groupsEditor.commit();
		}
		
		// permissions-editor
		if (typeof(this.permissionsEditor) != 'undefined' && this.permissionsEditor !== null) {
			this.permissionsEditor.commit();
		}
		
		// attributes-editor
		if (typeof(this.attributesEditor) != 'undefined' && this.attributesEditor !== null) {
			this.attributesEditor.commit();
		}
		
		// 
		if (typeof(this.tab.toggleHasChangesIcon) == 'function') {
			this.tab.toggleHasChangesIcon(false);
		}
	};
	
	/**
	 * returns the values of the basic fields
	 * 
	 * @return {Object} values = {
	 * 				id: {Number},
	 * 				name: {String},			if changed
	 * 				email: {String},		if changed
	 * 				webdavEnabled: {Boolean},	if changed
	 * 
	 * 				attrib-value-changes,	if changed
	 * 			};
	 */
	this.getChanges = function() {
		
		try {
		
			v = { 
				id: this.id
			};
			
			// add name if changed
			if (true === this.nameEl.changed) {
				v.name = this.nameEl.getValue().trim();
			}
			
			// add email if changed
			if (true === this.emailEl.changed) {
				v.email = this.emailEl.getValue().trim();
			}
			
			// add webdavEnabled if changed
			if (true === this.webdavEnabledEl.changed) {
				v.webdavEnabled = this.webdavEnabledEl.dom.checked;
			}
	
			// add roles if changed
			if (typeof(this.rolesEditor) != 'undefined' && this.rolesEditor !== null) {
				if (true === this.rolesEditor.hasChanges()) {
					chgs = this.rolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addroles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remroles = chgs.unasoc;
					}
				}
			}
			
			// add groups if changed
			if (typeof(this.groupsEditor) != 'undefined' && this.groupsEditor !== null) {
				if (true === this.groupsEditor.hasChanges()) {
					chgs = this.groupsEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addgroups = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remgroups = chgs.unasoc;
					}
				}
			}
			
			// add permissions if changed
			if (typeof(this.permissionsEditor) != 'undefined' && this.permissionsEditor !== null) {
				if (true === this.permissionsEditor.hasChanges()) {
					chgs = this.permissionsEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addpermissions = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.rempermissions = chgs.unasoc;
					}
				}
			}
			
			if (typeof(this.attributesEditor) != 'undefined' && this.attributesEditor !== null) {
				if (true === this.attributesEditor.hasChanges()) {
					v = this.attributesEditor.getChanges(v);
				}
			}
			
			return v;
			
		} catch (e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:'' + e + description}, this, 'getChanges');
		}
	};
	
	/**
	 * returns if this editor has changes
	 * 
	 * @return {Boolean}
	 */
	this.hasChanges = function() {
		
		if ((typeof(this.nameEl) == 'undefined' || this.nameEl === null)
			&& (typeof(this.emailEl) == 'undefined' || this.emailEl === null)
			&& (typeof(this.webdavEnabledEl) == 'undefined' || this.webdavEnabledEl === null)
			&& typeof(this.rolesEditor) == 'undefined'
			&& typeof(this.groupsEditor) == 'undefined'
			&& typeof(this.permissionsEditor) == 'undefined'
			&& typeof(this.attributesEditor) == 'undefined') {
			return false;
		}
		
		return ((typeof(this.nameEl) != 'undefined' && this.nameEl.changed)
			|| (typeof(this.emailEl) != 'undefined' && this.emailEl.changed)
			|| (typeof(this.webdavEnabledEl) != 'undefined' && this.webdavEnabledEl.changed)
			|| (typeof(this.rolesEditor) != 'undefined' && this.rolesEditor.hasChanges())
			|| (typeof(this.groupsEditor) != 'undefined' && this.groupsEditor.hasChanges())
			|| (typeof(this.permissionsEditor) != 'undefined' && this.permissionsEditor.hasChanges())
			|| (typeof(this.attributesEditor) != 'undefined' && this.attributesEditor.hasChanges()));
		
//		return (this.nameEl.changed || this.emailEl.changed || this.webdavEnabledEl.changed 
//			|| this.rolesEditor.hasChanges() || this.groupsEditor.hasChanges() 
//			|| this.permissionsEditor.hasChanges());
	};
	
	this.resetEditors = function() {
		if (typeof(this.nameEl) != 'undefined' && this.nameEl !== null) {
			this.nameEl.reset();
		}
		if (typeof(this.emailEl) != 'undefined' && this.emailEl !== null) {
			this.emailEl.reset();
		}
		if (typeof(this.webdavEnabledEl) != 'undefined' && this.webdavEnabledEl !== null) {
			this.webdavEnabledEl.reset();
		}
		if (typeof(this.rolesEditor) != 'undefined' && this.rolesEditor !== null) {
			this.rolesEditor.reset();
		}
		if (typeof(this.groupsEditor) != 'undefined' && this.groupsEditor !== null) {
			this.groupsEditor.reset();
		}
		if (typeof(this.permissionsEditor) != 'undefined' && this.permissionsEditor !== null) {
			this.permissionsEditor.reset();
		}
		if (typeof(this.attributesEditor) != 'undefined' && this.attributesEditor !== null) {
			this.attributesEditor.reset();
		}
	};
	
	/**
	 * 
	 */
	 this.reset = function() {
	 	
	 	this.resetEditors();
	 	
 		this.tab.toggleHasChangesIcon(false);
		PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
	 };
	
	/**
	 * toggles active state
	 * 
	 * used for external toggeling of button...
	 */
	this.toggleActive = function() {
		// set button
		if (false === this.active) { 
			// active
			this.toggleActiveButton.setText('active');
			this.toggleActiveButton.setIconClass('isSelectedIconCls');
			this.active = true;
		} else { 
			// inactive
			this.toggleActiveButton.setText('inactive');
			this.toggleActiveButton.setIconClass('isSelectedDisabledIconCls');
			this.active = false;
		}
	};
	
	/**
	 * toggles active state
	 * 
	 * used for external toggeling of button...
	 */
	this.setToggleActive = function(active) {
		// set button
		if (false === active) {
			// inactive
			this.toggleActiveButton.setText('inactive');
			this.toggleActiveButton.setIconClass('isSelectedDisabledIconCls');
			this.active = false;
		} else { 
			// active
			this.toggleActiveButton.setText('active');
			this.toggleActiveButton.setIconClass('isSelectedIconCls');
			this.active = true;
		}
	};
	
	/**
	 * shows loading-icon for toggle-button...
	 */
	this.showToggleIsLoading = function() {
		this.toggleActiveButton.setIconClass('loadingIconCls');
	};
	
	/**
	 * @param {Object} config
	 */
	this.changePassword = function() {
		
		try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('339 :: UserEditor.changeUserPassword() :: ' + 
	        	'CHECK for element failed...');
	        }
		
			pwdField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.PASSWORD, 
	            name: 'name', 
	            width: 400,
//	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_PASSWORD, 
	            allowBlank: false,
	            enableKeyEvents: true,
	            inputType: 'password'
	        });
	        
	        pwdConfirmField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.PASSWORDCONFIRM, 
	            name: 'name', 
	            width: 400,
//	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_PASSWORDCONFIRM, 
	            allowBlank: false,
	            inputType: 'password',
	            validator: function(value) {
	            	if (value.trim() === pwdField.getValue().trim()) {
	            		return true;
	            	} else {
	            		return 'pwds don\'t match!';
	            	}
	            }
	        });
	        
	        pwdField.on('keyup',function(){
	        	pwdConfirmField.validate();
	        },this);
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'chgPasswordForm',
	            name: 'chgPasswordForm', 
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield',
	            autoHeight: true,
	            labelWidth: 100, 
	            items: [pwdField,pwdConfirmField] 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CHANGE,
	            scope: this,
	            handler: function() {
	                // check values 
	                if (pwdField.getValue().trim() !== pwdConfirmField.getValue().trim()) {	                	 
	                    return false;
	                } 
	                // checks passed : create
	                
	                Ext.Ajax.request({
	                	url: this.config.changePasswordURL,
	                	method: 'POST',
	                	scope: this,
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		if (true === decodedResponse.status) {
	                			this.win.close();
	                			// success message
								PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'changePassword()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'changePassword()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'changePassword()');
					        }
	                	},
	                	params: {
	                		id: this.id, 
	                		pwd: pwdField.getValue().trim(),
	                		cnf: pwdConfirmField.getValue().trim() 
	                	}
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: this.tab.id + '.win.el'
			    });
	        
	        }
	            
		    this.msgPanel = new Ext.Panel({
	    		id: this.tab.id + '.win.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: this.tab.id + '.win',
	        	iconCls: 'editPasswordIconCls',
	            title: VIEWPORT_PROPERTIES.PASSWORDCHANGE,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 150,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){this.win.doLayout(true);},this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);                       
	        pwdField.validate();
	        pwdConfirmField.validate();		
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
			
		}
	};
	
	/**
	 * 
	 */
	this.initAttributesEditor = function() {
		THROW({args:arguments,props:['config.browseAttributesURL','tab','tab.id']},this,'initAttributesEditor');
		
		if (typeof(this.config.browseAttributesURL) == 'string' && this.config.browseAttributesURL !== '') {
			
			this.attributesEditor = new Pulse.UserAttributesEditor({
				id: this.clazz + '.' + this.id + '.attributes.editor',
				editor: this,
				renderTo: this.clazz + '.' + this.id + '.attributes'
			});
			
			this.attributesEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (false === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					} else {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
					}
				} else {
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
				}
			},this);
			
			this.attributesEditor.on('reset',function(eObj){
				if (true === eObj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}
			},this);
			
		}
		
	};
	
	/**
	 * initialize the editor
	 */
	try {
		
		// this.config = config;
		this.config = config;
		
		// properties
		this.tab = config.tab;
		this.tab.tabEditor = this;
		this.id = config.id;
		this.active = config.active;
		this.clazz = config.clazz;
		
		// initializes the tab-toolbar
		this.initTab();
		
		// setup field-monitoring
		this.initFieldMonitoring();
		
		// build sub-editors
		
		// show roles-assorter
		if (typeof(this.config.loadRolesURL)=='string' && this.config.loadRolesURL !== '') {
			this.rolesEditor = new Pulse.AssorterPanel({
				iconCls: 'roleIconCls',
				preLoad: false,
				title: VIEWPORT_PROPERTIES.ROLES,
				renderTo: this.clazz + '.' + this.id + '.roles',
				loadURL: this.config.loadRolesURL + '?id=' + this.id,
				editURL: this.config.editRoleURL,
				editHandler: function(node) {
					RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.rolesEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (false === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					} else {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
					}
				} else {
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
				}
			},this);
			this.rolesEditor.on('reset',function(eObj){
				if (true === eObj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}
			},this);
		}
		
		// show groups-assorter
		if (typeof(this.config.loadGroupsURL)=='string' && this.config.loadGroupsURL !== '') {
			this.groupsEditor = new Pulse.AssorterPanel({
				iconCls: 'usergroupIconCls',
				preLoad: false,
				title: VIEWPORT_PROPERTIES.USERGROUPS,
				renderTo: this.clazz + '.' + this.id + '.groups',
				loadURL: this.config.loadGroupsURL + '?id=' + this.id,
				editURL: this.config.editGroupURL,
				editHandler: function(node) {
					GroupOverviewEditor.editGroup(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.groupsEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (false === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					} else {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
					}
				} else {
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
				}
			},this);
			this.groupsEditor.on('reset',function(eObj){
				if (true === eObj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}
			},this);
		}
		
		// show permissions-assorter
		if (typeof(this.config.loadPermissionsURL)=='string' && this.config.loadPermissionsURL !== '') {
			this.permissionsEditor = new Pulse.AssorterPanel({
				iconCls: 'permissionIconCls',
				preLoad: false,
				title: VIEWPORT_PROPERTIES.PERMISSIONS,
				renderTo: this.clazz + '.' + this.id + '.permissions',
				loadURL: this.config.loadPermissionsURL + '?id=' + this.id,
				editURL: this.config.editPermissionURL,
				editHandler: function(node) {
					PermissionOverviewEditor.editPermission(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.permissionsEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (false === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					} else {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
					}
				} else {
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
				}
			},this);
			this.permissionsEditor.on('reset',function(eObj){
				if (true === eObj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}
			},this);
		}
		
		// attributesEditor
		this.initAttributesEditor();
		
	
	} catch(e) {
		THROW({e:'FATAL',o:''+e},this,'init');
	}
	 	
}; // END :: UserEditor


/**
 * 
 */
var UserOverviewEditor = {
	
	type: 'UserOverviewEditor',
	
	defaultUserOverviewPageSize: 20,
	
	el: null,
	win: null,
	msgPanel: null,
	
	
	/**
	 * @param {Object} config
	 */
	initEditor: function(config) {
		
		if (typeof(config.tab) != 'undefined') {
		// fetch the tab that has to be initialized
			this.tab = config.tab;		
			if (true !== this.tab.isInitialized) {			
				
				// add create button to tab
	        	if (typeof(config.createUserURL) != 'undefined' && config.createUserURL !== '') {
					tabTbar = this.tab.getTopToolbar().insertButton(0, [
						{
							text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW,
							scope: this,
							handler: function() {					
								this.createUser(config.createUserURL, config.editUserURL);
							},
							iconCls: 'addUserIconCls'
						},
						new Ext.Toolbar.Separator()
					]);		
	        	}	
				this.tab.isInitialized = true;
			
			}
		}
				
		// build overview grid
		
		gridStoreRecord = new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'clazz' },
			{ name: 'name' },
			{ name: 'email' },
			{ name: 'superuser' },
			{ name: 'active' },
			{ name: 'creationTime' },
			{ name: 'lastModificationTime' },
			{ name: 'lastLoginTime' },
			{ name: 'webdavEnabled' }
        ]);
        
        gridStore = new Ext.data.JsonStore({
//            id: 'id',
            pruneModifiedRecords : true,
            fields: gridStoreRecord,
            root: 'data',
            remoteSort: true,                    
            sortInfo: {
                field: 'name',
                direction: 'ASC'
            },
            totalProperty: 'total',
            url: config.loadUsersURL
        });

        // buld paging-tool with combobox to set page-size        
        pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),	    
		    displayField: 'size',
		    valueField: 'size',
		    selectOnFocus: true,
		    mode: 'local',
		    triggerAction: 'all',
//			editable: false,
		    width: 60,
		    blankText: '' + this.defaultUserOverviewPageSize,
		    emptyText: '' + this.defaultUserOverviewPageSize
		});
        
        pagingToolBar = new Ext.PagingToolbar({
       		// id: 'toolbar',
            displayInfo: true,
            pageSize: this.defaultUserOverviewPageSize,
            store: gridStore,
            items: ['-', pageSizeBox]
        });
        
        // add gridStore-listener for paging-toolbar
        gridStore.on('beforeLoad', function(store, options) {
        	store.isLoading = true;
        	if (pageSizeBox.getRawValue() !== '') {
        		try {
        			limit = parseInt(pageSizeBox.getRawValue().trim(), 10);
        			pagingToolBar.pageSize = limit;
        			options.params.limit = limit;
        		} catch(e) { /* ignore */ }
        	} else {
        		pagingToolBar.pageSize = UserOverviewEditor.defaultUserOverviewPageSize;
    			options.params.limit = UserOverviewEditor.defaultUserOverviewPageSize;
        	}
//        	alert('' + config.filterIds.concat());
			
//			PulseError.Throw({e:'filterIds',p:config.filterIds});
//			p = [];
        	for (i = 0; i < config.filterIds.length; i++) {
        		filterEl = Ext.get(config.filterIds[i]);
//        		p.push({n:filterEl+'['+i+']',o:filterEl});
 				if (typeof(filterEl) != 'undefined') {
        			try {        			
        				pname = filterEl.dom.name;
        				pvalue = filterEl.getValue().trim();
//        				p.push({n:''+pname,o:''+pvalue});
        				options.params[pname] = pvalue;
        			
        			} catch (e) { 
        				/* ignore */ 
//        				p.push({n:'error[' + i + ']: ' + e,o:'id: '+config.filterIds[i]});
        			}
 				}
        	}
//        	PulseError.Throw({e:'params',p:p});
        });
        gridStore.on('load', function(store, recs, options) {
        	(function(){this.isLoading = false;}).defer(500,this);
        });
        gridStore.on('loadexception', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },gridStore);
        
        // initialize filters for reload of grid onChange
        for (i = 0; i < config.filterIds.length; i++) {
    		filterEl = Ext.get(config.filterIds[i]);
    		if (typeof(filterEl) != 'undefined') {
    			
    			filterEl.on({
    				'keyup': {
    					scope: gridStore,
    					fn: function(evt, el, opts) {
//    						if (evt.getKey() != Ext.EventObject.ENTER) {
//								return;
//							}
//    						alert(el.id + ', ' + el.value + ', ' + el.name);							
							
							// delay by 500ms
    						(function(){ 
    							if (true === this.isLoading) {
	                                return;
	                            }
    							this.reload(); 
							}).defer(500,this);
    					}
    				}
    			},gridStore);
    			
//    			pname = filterEl.dom.name;
//    			pvalue = filterEl.getValue();
//    			options.params[pname] = pvalue;
    		}
    	}
        
        gridSm = new Ext.grid.CheckboxSelectionModel();
		
		// build column-model                
        columns = [
            gridSm,
            {    
                header: 'su:',
                dataIndex: 'superuser',
                tooltip: 'superuser',
                sortable: true,
                width: 30,
                fixed: true,
                renderer: function (bSuperuser) {
                	return UserOverviewEditor.getSuperuserField(bSuperuser);
                }
            },{    
                header: 'act:',
                dataIndex: 'active',
                tooltip: 'active/inactive',
                sortable: true,
                width: 30,
                fixed: true,
                renderer: function (bActive) {
                	return UserOverviewEditor.getUserActiveField(bActive);
                }
            },{
                header: 'id:',
                dataIndex: 'id',
                sortable: true,
                width: 45,
                fixed: false
            },{    
                header: VIEWPORT_PROPERTIES.USERNAME + ':',
                dataIndex: 'name',
                sortable: true
            },{    
                header: VIEWPORT_PROPERTIES.EMAIL + ':',
                dataIndex: 'email',
                sortable: true
            },{    
                header: 'DAV:',
                dataIndex: 'webdavEnabled',
                tooltip: 'WebDAV',
                sortable: true,
                width: 35,
                fixed: true,
                renderer: function (webdavEnabled) {
                	return UserOverviewEditor.getWebDAVField(webdavEnabled);
                }
            },{    
                header: 'created:',
                dataIndex: 'creationTime',
                sortable: true,
                renderer: function (creationTime) {
                	return UserOverviewEditor.getQtipField(creationTime);
                }
            },{    
                header: 'last modified:',
                dataIndex: 'lastModificationTime',
                sortable: true,
                renderer: function (lastModificationTime) {
                	return UserOverviewEditor.getQtipField(lastModificationTime);
                }
            },{    
                header: 'last login:',
                dataIndex: 'lastLoginTime',
                sortable: true,
                renderer: function (lastLoginTime) {
                	return UserOverviewEditor.getQtipField(lastLoginTime);
                }
            }
        ];
        
        // add edit button to rows
        if (typeof(config.editUserURL) != 'undefined' && config.editUserURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
                	
//                	record = null;
//                	record = gridStore.getById(''+id);
//                	gridStore.each(function(r) {
//                		if (r.get('id') == id) {
//                			record = r;
//                			return false;
//                		}
//                	});
//                	if (record != null) {
//                		PulseError.Throw({e:'DBG',p:[{n:'id',o:id},{n:'record',o:record},{n:'clazz',o:''+record.get('clazz')}]});
//                	}
					try {
			        	return FilterEditor.getGridImageField({
//			        		functionString: 'UserOverviewEditor.editUser(\'' + config.editUserURL + '\',' + id + ', \'' + record.get('clazz') + '\')',
			        		functionString: 'UserOverviewEditor.editUser(\'' + config.editUserURL + '\',' + id + ')',
			        		iconCls: 'editIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
			        	});
					} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
		
		gridCm = new Ext.grid.ColumnModel(columns);
        
//        grid = new Ext.grid.EditorGridPanel({
        grid = new Ext.grid.GridPanel({
        	id: (typeof(config.gridId) == 'undefined') ? 'UserOverViewGrid.grid' : config.gridId,
            store: gridStore,
            cm: gridCm,
            sm: gridSm,
            renderTo: (typeof(config.gridId) == 'undefined') ? 'UserOverViewGrid' : config.gridId + '.el',
            autoExpandColumn: 'id',
//            height: 400,
//            width: 725,
            loadMask: true,
            viewConfig: { forceFit: true },
//            title: FilterLocalizations.Filter,
            frame: false,
            style: 'border: 1px solid #8DB2E3;',
//            enableHdMenu: false,
//            clicksToEdit: 1,            
            tbar: (typeof(config.toggleUserStateURL) != 'undefined' && config.toggleUserStateURL !== '') ? [
            	{
	            	text: 'LOC: Toggle User active or inactive',
	                iconCls: 'isSelectedIconCls',
	                handler: function() {
	                	
	                	// retrieve
	                	id = (typeof(config.gridId) == 'undefined') ? 'UserOverViewGrid.grid' : config.gridId;
	                	grid = Ext.getCmp(id);
	                	
	                	selectedRecords = grid.getSelectionModel().getSelections();
	                	if (selectedRecords.length === 0) {
	                		return;
	                	}
	                	
	                	// build ids-array for request
	                	ids = [];
	                	mapping = []; // required for update of user-editor-tabs
	                	for (i = 0; i < selectedRecords.length; i++) {
	                		ids.push(selectedRecords[i].get('id'));
	                		mapping.push({
	                			id: selectedRecords[i].get('id'),
	                			clazz: selectedRecords[i].get('clazz')
	                		});
	                	}
	                	
	                	Ext.Ajax.request({
							url: config.toggleUserStateURL,
							method: 'POST',
							scope: grid,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									
									// reload grid
				            		this.getStore().reload();
				            		
				            		// toggle any open user-editors
				            		UserOverviewEditor.toggleActiveForOpenUserEditors(options.mapping);
				            		
				        		} else {
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'UserOverviewEditor','tbar.toggleUserState');
								}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
				   						PulseError.Throw({e:'REQUEST.FAILED'},'UserOverviewEditor','tbar.toggleUserState');
							        } else {
							        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'UserOverviewEditor','tbar.toggleUserState');
							        }
							},
							mapping: mapping,
							params: { ids: ids }
						});
	
	                }
	            },
				new Ext.Toolbar.Separator()
			] : [],
            /*buttons: [{
                        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
                        iconCls: 'saveIconCls', 
                        handler: <xsl:value-of select="$editorIdentifier"/>SaveGrid
                     }],
            buttonAlign: 'center',*/
            bbar: pagingToolBar
        });
        
        
        //below doesn't work for ie7
        /*tbar = grid.getTopToolbar();        
        tbar.insertButton(0, [
        	{
            	text: 'LOC: Toggle User active/inactive',
                iconCls: 'isSelectedIconCls',
                scope: grid,
                handler: function() {
                	
                	selectedRecords = this.getSelectionModel().getSelections();
                	if (selectedRecords.length === 0) {
                		return;
                	}
                	
                	// build ids-array for request
                	ids = [];
                	for (i = 0; i < selectedRecords.length; i++) {
                		ids.push(selectedRecords[i].get('id'));
                	}
                	
                	Ext.Ajax.request({
						url: config.toggleUserStateURL,
						method: 'POST',
						scope: grid,
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								// reload grid
			            		this.getStore().reload();
			        		} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'UserOverviewEditor','tbar.toggleUserState');
							}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},'UserOverviewEditor','tbar.toggleUserState');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'UserOverviewEditor','tbar.toggleUserState');
						        }
						},
						params: { ids: ids }
					});

                }
            },
			new Ext.Toolbar.Separator()
		]);*/
		
		
		
		
        
//        grid.on({
//            'afteredit': {
//                fn: function() {
//                    // show tab-changed msg
//                    PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:'FilterEditor.OverView'},{n:'msg',o:'CHANGE'}]});
//                }                    
//            }
//        });
        
        // grid: resize
        if (typeof(config.tab) != 'undefined') {
        	// w
	        grid.setWidth(config.tab.getInnerWidth() - 10);
	        // h
	        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
	        msgPanelHeight = 0;
	        if (tabMsgPanel.isVisible()) {
	        	msgPanelHeight = tabMsgPanel.getSize().height;
	        }
	        tabHeader = Ext.get(config.tab.id + '.header');
	        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);
	        
	        
	        // config.tab: listeners for grid: resize              
	        config.tab.on({
	            'resize': {
	                fn: function(tab, adjWidth, adjHeight, rawWidth, rawHeight) {
	                	grid = Ext.getCmp('UserOverViewGrid.grid');
	                    // w
				        tabContentPanel = Ext.getCmp(config.tab.id + '.contentPanel'); 
				        grid.setWidth(config.tab.getInnerWidth() - 10);
				        // h
				        tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
				        msgPanelHeight = 0;
				        if (tabMsgPanel.isVisible()) {
				        	msgPanelHeight = tabMsgPanel.getSize().height;
				        }
				        tabHeader = Ext.get(config.tab.id + '.header');
				        grid.setHeight(config.tab.getInnerHeight() - tabHeader.getBox().height - msgPanelHeight - 10);       
	                }
	            }
	        });
	        
	        
	        
	        // clean-up on tab-close
//	        config.tab.deleteObjects = [gridStoreRecord,gridCm,gridSm,pageSizeBox,pagingToolBar,gridStore,grid];
        
        }
        
        // init grid
        gridStore.load({
            params:{
                start: 0, 
                limit: 10
            }
        });                    
		
		return grid;
	},
	
	/**
	 * @param {Boolean} bActive
	 */
	getUserActiveField: function(bActive) {

		iconCls = '';
    	if (true === bActive) {
    		iconCls = 'isSelectedIconCls_14_big';
    	}

		html = '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" border="0" ';
		html += 'class="' + iconCls + '" style="vertical-align:middle;text-align:center;" ';

	    if (true === bActive) {
	    	html += 'ext:qtip="' + VIEWPORT_PROPERTIES.ACTIVE + '"';
	    } else {
	    	html += 'ext:qtip="' + VIEWPORT_PROPERTIES.INACTIVE + '"';
	    }

		html += '/>';

		return html;
		
	},
	
	/**
	 * @param {Boolean} bSuperuser
	 */
	getSuperuserField: function(bSuperuser) {

		iconCls = '';
    	if (true === bSuperuser) {
    		iconCls = 'isSelectedIconCls_14_big';
    	}

		html = '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" border="0" ';
		html += 'class="' + iconCls + '" style="vertical-align:middle;text-align:center;" ';

	    if (true === bSuperuser) {
	    	html += 'ext:qtip="superuser: ' + bSuperuser + '"';
	    } else {
	    	html += 'ext:qtip="superuser: ' + bSuperuser + '"';
	    }

		html += '/>';

		return html;
		
	},
	
	/**
	 * @param {Object} webdavRole
	 */
	getWebDAVField: function(webdavEnabled) {

		if (typeof(webdavEnabled) == 'undefined' || webdavEnabled == false) {
			return '';
		}
    	iconCls = 'isSelectedIconCls_14_big';

		html = '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" border="0" ';
		html += 'class="' + iconCls + '" style="vertical-align:middle;text-align:center;" />';

		return html;
		
	},
	
	/**
	 * @param {String} string
	 */
	getQtipField: function(string) {
		if (typeof(string) == 'undefined') {
			return '';
		}
		html = '<div ';
	    html += 'ext:qtip="' + string + '"';
		html += '>' + string + '</div>';

		return html;
		
	},
	
	/**
	 * @param {String} editUserURL
	 * @param {String}/{Number} userid
	 * @param {String} clazz
	 */
	editUser: function(editURL, userid, clazz) {
		// PulseError.Throw({e:'DBG',p:[{n:'editURL',o:editURL},{n:'id',o:userid}]},'UserOverviewEditor','editUser()');
		
		if (typeof(clazz) == 'undefined') {
			record = null;
			store = Ext.getCmp('UserOverViewGrid.grid').getStore();
			if (store !== null && typeof(store) != 'undefined') {
				store.each(function(r) {
		    		if (r.get('id') == userid) {
		    			record = r;
		    			return false;
		    		}
		    	});
			}
			
			if (record === null) {
				return;
			}
			clazz = record.get('clazz');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: clazz + '.' + userid + '.editor',
            title: '...loading: ' + userid,
            tabTip: '(id:' + userid + ')',
            iconCls: 'userMaleIconCls',
            loadParams: {
                url: editURL,
                params: { id: userid }
            }
        });
	},
	
	/**
	 * 
	 */
	reload: function() {
		// reload overview-grid
		grid = Ext.getCmp('UserOverViewGrid.grid');
		if (grid !== null && typeof(grid) != 'undefined') {
			grid.getStore().reload();
		}
	},
	
	/**
	 * @param {Array} mapping
	 */
	toggleActiveForOpenUserEditors: function(mapping) {
//		p = [];
		for (i = 0; i < mapping.length; i++) {
			id = mapping[i].clazz + '.' + mapping[i].id + '.editor';
//			p.push({n:'id',o:''+id});
			userEditorTab = Ext.getCmp(id);
			if (typeof(userEditorTab) != 'undefined' && userEditorTab !== null) {
				userEditorTab.tabEditor.toggleActive();
			}
		}
//		PulseError.Throw({e:'DBG',p:p});
	},
	
	/**
	 * @param {String} createURL
	 */
	 createUser: function(createURL, editURL) {
	 	
	 	try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('UserOverviewEditor.changeUserPassword() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
			nameField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.USERNAME, 
	            name: 'name', 
	            width: 400,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
	            allowBlank: false
	        });
	        
			emailField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.EMAIL, 
	            name: 'email', 
	            width: 400,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_EMAIL, 
	            allowBlank: false
	        });
		
			pwdField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.PASSWORD, 
	            name: 'pwd', 
	            width: 400,
//	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_PASSWORD, 
	            allowBlank: false,
	            enableKeyEvents: true,
	            inputType: 'password'
	        });
	        
	        pwdConfirmField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.PASSWORDCONFIRM, 
	            name: 'cnf', 
	            width: 400,
//	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_PASSWORDCONFIRM, 
	            allowBlank: false,
	            inputType: 'password',
	            validator: function(value) {
	            	if (value.trim() === pwdField.getValue().trim()) {
	            		return true;
	            	} else {
	            		return 'pwds don\'t match!';
	            	}
	            }
	        });
	        
	        pwdField.on('keyup',function(){
	        	pwdConfirmField.validate();
	        },this);
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'createUserForm',
	            name: 'createUserForm',
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield',
	            autoHeight: true,
	            labelWidth: 100, 
	            items: [nameField,emailField,pwdField,pwdConfirmField] 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            scope: this,
	            handler: function() {
	                // check values
	                if (nameField.getValue().trim() === '') {	                	 
	                    return false;
	                }
	                if (emailField.getValue().trim() === '') {	                	 
	                    return false;
	                }
	                if (pwdField.getValue().trim() !== pwdConfirmField.getValue().trim()) {	                	 
	                    return false;
	                } 
	                // checks passed : create
	                
	                Ext.Ajax.request({
	                	url: createURL,
	                	method: 'POST',
	                	scope: this,
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		if (true === decodedResponse.status) {
	                			
	                			this.win.close();
	                			
	                			// reload overview-grid
	                			this.reload();
	                			
	                			// edit user
	                			user = decodedResponse.user;
	                			this.editUser(editURL, user.id, user.clazz);
									
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'UserOverviewEditor','createUser()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'UserOverviewEditor','createUser()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'UserOverviewEditor','createUser()');
					        }
	                	},
	                	params: {
	                		name: nameField.getValue().trim(),
	                		email: emailField.getValue().trim(), 
	                		pwd: pwdField.getValue().trim(),
	                		cnf: pwdConfirmField.getValue().trim() 
	                	}
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'createUser.win.el'
			    });
	        
	        }
	            
		    this.msgPanel = new Ext.Panel({
	    		id: 'createUser.win.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'createUser.win',
	        	iconCls: 'addUserIconCls',
	            title: VIEWPORT_PROPERTIES.NEW,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 200,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        // clean-up on close
	        this.win.on('close',function(){
	        	delete this.win;
	        	delete this.el;
	        	delete this.msgPanel;
	        	this.win = null;
	        	this.el = null;
	        	this.msgPanel = null;
	        },this);
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){this.win.doLayout(true);},this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
	        nameField.validate();
	        emailField.validate();                       
	        pwdField.validate();
	        pwdConfirmField.validate();		
		
		} catch (windowInitError) {
			FATAL(windowInitError,this,'creaetUser');
			
		}
	 	
	 }
	
}; // END :: UserOverviewEditor


/**
 * 
 */
DBG.VFSPermissionEditor = DBG.apply(DBG.Editor, {
			initComponent : false,
			tree : {
				selectionchange : false
			},
			previewPanel : {
				onLoad : false
			},
			settingsPanel : {
				beforeupdate : false
			},
			buildSettingsPanel : false,
			updateDetailsPanel : false,
			initFolderPreviewGrid : false,
			MSG : false
		});
/**
 * builds a new VFSPermissionEditor from given config
 */
VFSPermissionEditor = {

	// type
	type : 'VFSPermissionEditor',

	// DBG
	DBG : false/* DBG.VFSPermissionEditor */,

	// properties
	minWidth : 400,
	minHeight : 400,
	tab : null,
	grid : null,
	// tile or list for previewPanel
	previewPanelView : 'tile',

	/**
	 * 
	 */
	onRender : function() {

		folderUpButtonCFG = {
			// text: '^^',
			iconCls : 'folderUpIconCls',
			scope : this,
			handler : function() {

				if (true === this.hasChanges()) {
					// check
					return;
				}

				if (typeof(this.selectedNode) == 'undefined'
						|| this.selectedNode === null
						|| this.selectedNode.id == this.tree.getRootNode().id) {
					this.selectedNode = this.tree.getRootNode();
					return;
				}

				// determine private/public
				if (true === this.tree.getLoader().baseParams.priv) {
					priv = true;
				} else {
					priv = false;
				}

				if (this.selectedNode.parentNode.id == this.tree.getRootNode().id) {
					// we have to select root
					this.selectedNode.unselect();
					this.selectedNode = this.tree.getRootNode();
					this.previewPanel.load({
								url : this.previewURL,
								method : 'POST',
								scripts : true,
								callback : LPCB,
								params : {
									previewNode : '',
									view : this.previewPanelView,
									priv : priv
								},
								text : 'loading...',
								discardUrl : true,
								nocache : true,
								timeout : 30
							});

					this.settingsPanel.body
							.update('<div style="padding:5px;">please select a file or folder...</div>');

					this.updateDetailsPanel(this.selectedNode);
					return;
				}
				this.selectedNode.parentNode.select();
			}
		};

		tileViewButtonCFG = {
			iconCls : 'tileViewIconCls',
			scope : this,
			handler : function() {

				// check for folder
				if (typeof(this.selectedNode.attributes.type) == 'undefined'
						|| this.selectedNode.attributes.type != 'dir') {
					return;
				}

				if (this.previewPanelView == 'tile') {
					return;
				} else {
					this.previewPanelView = 'tile';
				}

				// determine private/public
				if (true === this.tree.getLoader().baseParams.priv) {
					priv = true;
				} else {
					priv = false;
				}

				// check for root
				if (this.selectedNode.id == this.tree.getRootNode().id) {
					// load tile-view for root-folder
					this.previewPanel.load({
								url : this.previewURL,
								method : 'POST',
								scripts : true,
								callback : LPCB,
								params : {
									previewNode : '',
									view : this.previewPanelView,
									priv : priv
								},
								text : 'loading...',
								discardUrl : true,
								nocache : true,
								timeout : 30
							});
					return;
				} else {
					// load tile-view for folder
					this.previewPanel.load({
								url : this.previewURL,
								method : 'POST',
								scripts : true,
								callback : LPCB,
								params : {
									previewNode : this.selectedNode.id,
									view : this.previewPanelView,
									priv : priv
								},
								text : 'loading...',
								discardUrl : true,
								nocache : true,
								timeout : 30
							});
					return;
				}

			}
		};

		listViewButtonCFG = {
			iconCls : 'listViewIconCls',
			scope : this,
			handler : function() {

				// check for folder
				if (typeof(this.selectedNode.attributes.type) == 'undefined'
						|| this.selectedNode.attributes.type != 'dir') {
					return;
				}

				if (this.previewPanelView == 'list') {
					return;
				} else {
					this.previewPanelView = 'list';
				}

				// determine private/public
				if (true === this.tree.getLoader().baseParams.priv) {
					priv = true;
				} else {
					priv = false;
				}

				// check for root
				if (this.selectedNode.id == this.tree.getRootNode().id) {
					// load tile-view for root-folder
					this.previewPanel.load({
								url : this.previewURL,
								method : 'POST',
								scripts : true,
								callback : LPCB,
								params : {
									previewNode : '',
									view : this.previewPanelView,
									priv : priv
								},
								text : 'loading...',
								discardUrl : true,
								nocache : true,
								timeout : 30
							});
					return;
				} else {
					// load tile-view for folder
					this.previewPanel.load({
								url : this.previewURL,
								method : 'POST',
								scripts : true,
								callback : LPCB,
								params : {
									previewNode : this.selectedNode.id,
									view : this.previewPanelView,
									priv : priv
								},
								text : 'loading...',
								discardUrl : true,
								nocache : true,
								timeout : 30
							});
					return;
				}

			}
		};

		previewPanelCFG = {
			iconCls : 'foldersIconCls',
			id : this.id + '.preview.panel',
			title : VIEWPORT_PROPERTIES.FILEBROWSER_TITLE/*
															 * this.id +
															 * '.preview.panel'
															 */,
			autoScroll : true,
			autoLoad : {
				url : this.previewURL,
				method : 'POST',
				scripts : true,
				callback : LPCB,
				params : {
					previewNode : '',
					view : this.previewPanelView
				},
				text : 'loading...',
				discardUrl : true,
				nocache : true,
				timeout : 30
			},
			tbar : [folderUpButtonCFG, '-', tileViewButtonCFG, '-',
					listViewButtonCFG]
		};

		tabPanelCFG = {
			id : this.id + '.center-region',
			region : 'center',
			enableTabScroll : true,
			resizeTabs : false,
			margins : '0 5 5 0',
			deferredRender : false,
			defaults : {
				autoScroll : true
			},
			activeTab : 0,
			items : [previewPanelCFG, {
				id : this.id + '.settings.panel',
				iconCls : 'vfsPermissionIconCls',
				title : VIEWPORT_PROPERTIES.VFSPERMISSIONS/*
															 * this.id +
															 * '.settings.panel'
															 */,
				autoScroll : true,
				html : '<div style="padding:5px;">please select a file or folder...</div>'
			}]
		};
		this.tabPanel = new Ext.TabPanel(tabPanelCFG);

		// build filebrowser-tree-panel
		this.tree = new Ext.tree.TreePanel({
			title : VIEWPORT_PROPERTIES.FILEBROWSER_TITLE,
			iconCls : 'foldersIconCls',
			split : true,
			width : 250,
			minSize : 150,
			maxSize : 600,
			margins : '0 0 5 5',
			region : 'west',
			animate : true,
			creatingNewNode : false,
			enableDD : false,
			autoScroll : true,
			containerScroll : true,
			rootVisible : false,
			border : true,
			loader : new Ext.tree.TreeLoader({
						dataUrl : this.treeURL,
						uiProviders : {
							'FileTreeNodeUI' : PULSE.FileTreeNodeUI
						}
					}),
			tbar : [{
				// pulic-vfs-button
				text : 'pub',
				scope : this,
				handler : function() {
					if (true === this.hasChanges()) {
						// check
						return;
					}
					if (typeof(this.tree) == 'undefined' || this.tree === null) {
						THROW({
									args : arguments
								}, this, 'tree.tbarReloadHandler');
						return;
					}

					this.tree.getLoader().on("beforeload",
							function(treeLoader, node) {
								treeLoader.baseParams.priv = false;
							}, this);

					this.tree.getRootNode().reload(function(node) {
								if (true === node.isSelected()) {
									// so reloed of preview-panel will be
									// triggered
									// on selection of node
									node.unselect();
								}
								node.select();
							});
				},
				iconCls : ''
			}, '-', {
				// private-vfs-button
				text : 'priv',
				scope : this,
				handler : function() {
					if (true === this.hasChanges()) {
						// check
						return;
					}
					if (typeof(this.tree) == 'undefined' || this.tree === null) {
						THROW({
									args : arguments
								}, this, 'tree.tbarReloadHandler');
						return;
					}

					this.tree.getLoader().on("beforeload",
							function(treeLoader, node) {
								treeLoader.baseParams.priv = true;
							}, this);

					this.tree.getRootNode().reload(function(node) {
								if (true === node.isSelected()) {
									// so reloed of preview-panel will be
									// triggered
									// on selection of node
									node.unselect();
								}
								node.select();
							});
				},
				iconCls : ''
			}, '-', '->', {
				// reload-button
				text : VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
				scope : this,
				handler : function() {
					if (true === this.hasChanges()) {
						// check
						return;
					}
					if (typeof(this.tree) == 'undefined' || this.tree === null) {
						THROW({
									args : arguments
								}, this, 'tree.tbarReloadHandler');
						return;
					}
					this.tree.getRootNode().reload(function(node) {
								if (true === node.isSelected()) {
									// so reloed of preview-panel will be
									// triggered
									// on selection of node
									node.unselect();
								}
								node.select();
							});
				},
				iconCls : 'reloadIconCls'
			}]
		});

		this.detailsPanel = new Ext.Panel({
					id : this.id + '.details.panel',
					region : 'north',
					split : true,
					autoScroll : true,
					minSize : 50,
					height : 120,
					maxSize : 600,
					margins : '5 5 0 5',
					html : 'details here...'
				});

		// build root
		this.root = new Ext.tree.AsyncTreeNode({
					text : 'root',
					type : 'dir',
					draggable : false,
					id : 'source.' + Ext.id()
				});

		// root listener
		// sets root-path for root
		this.root.on('load', function(root) {
			if (typeof(root.attributes.rootPath) == 'undefined') {
				// initial load
				if (root.firstChild !== null) {
					root.attributes.rootPath = root.firstChild.attributes.rootPath;
				} else {
					root.attributes.rootPath = '???///';
				}
				this.updateDetailsPanel(root);
			}
		}, this);

		// set root-node
		this.tree.setRootNode(this.root);

		// set height for main-split-panel of tab
		height = this.getAvailableHeight();
		this.mainPanel = new Ext.Panel({
					layout : 'border',
					height : height,
					renderTo : this.renderTo,
					items : [this.detailsPanel, this.tree, this.tabPanel]
				});

		// setup listener: resize-monitor for tab
		this.tab.on('resize', function() {

					// height
					msgPanelHeight = '0';
					msgPanel = Ext.getCmp(this.tab.id + '.msgPanel');
					if (msgPanel.isVisible()) {
						msgPanelHeight = msgPanel.getSize().height;
					}

					this.mainPanel.setHeight(this.getAvailableHeight()
							- msgPanelHeight);
					// width
					if (this.tab.getInnerWidth() - 10 < this.minWidth) {
						this.mainPanel.setWidth(this.minWidth);
					} else {
						this.mainPanel.setWidth(this.tab.getInnerWidth() - 10);
					}
					this.tabPanel.setWidth(this.mainPanel.getSize().width - 17
							- this.tree.getSize().width);

				}, this);

		// setup listener: for tree-selectionmodel
		this.tree.getSelectionModel().on('selectionchange',
				function(selMode, node) {

					// re-enable tree always if necessary
					if (true === this.tree.disabled) {
						this.tree.enable();
					}

					// checks whether there is a node AND if it's selected
					if (typeof(node) == 'undefined' || node === null
							|| false === node.isSelected()) {
						return;
					}

					// remove grid if view != list
					if (this.previewPanelView != 'list'
							&& typeof(this.grid) != 'undefined'
							&& this.grid !== null) {
						delete this.grid;
						this.grid = null;
					}

					tb = this.tabPanel.getActiveTab();
					THROW({
								args : arguments,
								propsObj : tb,
								props : ['id', 'title']
							}, this, 'tree.selectionchange');

					// determine private/public
					if (true === this.tree.getLoader().baseParams.priv) {
						priv = true;
					} else {
						priv = false;
					}

					this.selectedNode = node;
					this.previewPanel.load({
								url : this.previewURL,
								method : 'POST',
								scripts : true,
								callback : LPCB,
								params : {
									previewNode : node.id,
									view : this.previewPanelView,
									priv : priv
								},
								text : 'loading...',
								discardUrl : true,
								nocache : true,
								timeout : 30
							});

					if (tb.id == this.settingsPanel.id) {
						if (node.id == this.tree.getRootNode().id) {
							this.settingsPanel.body
									.update('<div style="padding:5px;">please select a file or folder...</div>');
						} else {
							this.settingsPanel.load({
								url : this.permissionsURL,
								method : 'POST',
								scripts : true,
								callback : LPCB,
								params : {
									previewNode : (typeof(node.attributes.vfsid) != 'undefined')
											? node.attributes.vfsid
											: node.id,
									view : this.previewPanelView,
									priv : priv
								},
								text : 'loading...',
								discardUrl : true,
								nocache : true,
								timeout : 30
							});
						}
					}

					if (true === this.tabPanel.disabled) {
						this.tabPanel.enable();
					}

					this.updateDetailsPanel(node);

				}, this);

		// 
		this.tree.getSelectionModel().on('beforeselect',
				function(selMode, newnode, prevnode) {

					// no chgs -> select node
					if (false === this.hasChanges()) {
						return true;
					}

					Ext.Msg.confirm(VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
							VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />'
									+ VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE,
							function(response) {
								// reset permissions & select new node
								if ('yes' === response) {
									this.reset();
									newnode.select();
								} else {
									this.settingsPanel.show();
								}
							}, this);
					return false;

				}, this);

		// store panels
		this.previewPanel = Ext.getCmp(this.id + '.preview.panel');
		this.settingsPanel = Ext.getCmp(this.id + '.settings.panel');
		this.selectedNode = this.tree.getRootNode();

		PULSE_VIEWPORT_CONTROLLER.insertHasChangesIcon(this.settingsPanel,
				this.tabPanel);

		// listeners for panels
		this.previewPanel.getUpdater().on('update',
				function(panelEl, response) {

					// this.settingsPanel.toggleHasChangesIcon();
					// this.settingsPanel.hasChanges = true;

					pnlTabEl = this.tabPanel.getTabEl(this.previewPanel);

					THROW({
								args : arguments,
								o : {
									props : ['className'],
									propsObj : pnlTabEl
								},
								props : ['selectedNode', 'selectedNode.id',
										'selectedNode.text',
										'selectedNode.iconCls',
										'selectedNode.ui',
										'selectedNode.ui.iconCls']
							}, this, 'previewPanel.onLoad');

					if (typeof(this.selectedNode) == 'undefined'
							|| this.selectedNode === null) {
						return;
					}

					// retrieve tab-dom
					extPnlTabElTitleDom = Ext.DomQuery.selectNode(
							"*[@class*='x-tab-strip-text']", pnlTabEl);

					// set title
					if (this.selectedNode.id == this.tree.getRootNode().id) {
						this.previewPanel
								.setTitle(VIEWPORT_PROPERTIES.FILEBROWSER_TITLE);
						// set icon for root
						extPnlTabElTitleDom.getAttributeNode('class').nodeValue = 'x-tab-strip-text foldersIconCls';
						return;
					} else {
						this.previewPanel.setTitle(this.selectedNode.text);
					}

					// set icon
					if (typeof(this.selectedNode.ui.iconCls) == 'undefined') {
						// folder
						extPnlTabElTitleDom.getAttributeNode('class').nodeValue = 'x-tab-strip-text folderIconCls';
					} else {
						// file
						extPnlTabElTitleDom.getAttributeNode('class').nodeValue = 'x-tab-strip-text '
								+ this.selectedNode.ui.iconCls;
					}

					return;
				}, this);

		this.settingsPanel.on('show', function() {

			if (this.selectedNode.id == this.tree.getRootNode().id) {
				return;
			}
			if (true === this.hasChanges()) {
				return;
			}

			this.settingsPanel.load({
				url : this.permissionsURL,
				method : 'POST',
				scripts : true,
				callback : LPCB,
				params : {
					previewNode : (typeof(this.selectedNode.attributes.vfsid) != 'undefined')
							? this.selectedNode.attributes.vfsid
							: this.selectedNode.id,
					view : this.previewPanelView
				},
				text : 'loading...',
				discardUrl : true,
				nocache : true,
				timeout : 30
			});

		}, this);

	},

	/**
	 * 
	 */
	getAvailableHeight : function() {
		height = this.minHeight;
		if (typeof(this.tab) != 'undefined'
				&& typeof(this.tab.getAvailableInnerHeight) == 'function') {
			height = this.tab.getAvailableInnerHeight();
		}
		if (height < this.minHeight) {
			height = this.minHeight;
		}
		return height;
	},

	/**
	 * @param {String}
	 *            name the name of the file or folder to use for search in tree
	 */
	onTileClick : function(name, el, singleClick) {

		if (true === this.hasChanges()) {
			return;
		}

		try {
			this.tree.disable();
			this.tabPanel.disable();

			if (typeof(this.selectedNode) == 'undefined'
					|| this.selectedNode === null) {
				// try to find matching node within this.tree.root
				node = this.tree.getRootNode();
				for (i = 0; i < node.childNodes.length; i++) {
					if (node.childNodes[i].text == name) {
						node.childNodes[i].select();
						break;
					}
				}
				return;
			}

			if (false === this.selectedNode.isExpanded()) {
				this.selectedNode.expand(false, true, function(node) {

							for (i = 0; i < node.childNodes.length; i++) {
								if (node.childNodes[i].text == name) {
									node.childNodes[i].select();
									break;
								}
							}

						});
			} else {
				for (i = 0; i < this.selectedNode.childNodes.length; i++) {
					node = this.selectedNode.childNodes[i];
					if (node.text == name) {
						node.select();
						break;
					}
				}

			}

		} catch (e) {
			this.tree.enable();
			this.tabPanel.enable();
			THROW({
						e : '' + e,
						args : arguments,
						props : ['id', 'tab', 'tree', 'mainPanel', 'tabPanel',
								'selectedNode', 'selectedNode.text']
					}, this, 'onTileClick');
		}

	},

	/**
	 * @param {String}
	 *            fileName
	 */
	folderDblClick : function(fileName, el) {
		this.onTileClick(fileName, el, false);
	},

	/**
	 * @param {String}
	 *            fileName
	 */
	folderClick : function(fileName, el) {
		this.onTileClick(fileName, el, true);
	},

	/**
	 * @param {String}
	 *            fileName
	 */
	fileDblClick : function(fileName, el) {
		this.onTileClick(fileName, el, false);
	},

	/**
	 * @param {String}
	 *            fileName
	 */
	fileClick : function(fileName, el) {
		this.onTileClick(fileName, el, true);
	},

	detailsTemplate : new Ext.Template(
			'<div style="font-weight:bold;padding:5px;font-size:12px;">{path}</div>',
			'<hr class="adminHr" style="margin:0px;"/>',
			'<div style="width:100px;height:100%;float:left;overflow:auto;text-align:center;" class="adminBorder_right">',
			// display icon
			'<div style="height:5px;"> </div>',
			'<b>{type}</b><br/>',
			// '<div style="padding:9px 9px 9px 9px;width:50px;">',
			'<img src="' + Ext.BLANK_IMAGE_URL + '" width="32" heigth="32" '
					+ 'border="0" alt="{type}" class="{icoCls}_32" />',
			// '</div>',

			'</div>',
			'<div>',
			'<div style="height:5px;"> </div>',
			// '<div><b style="margin-left:5px;">name:</b>&#160;{name}</div>',
			// '<div><b style="margin-left:5px;">type:</b>&#160;{type}</div>',
			// '<hr class="adminHrLight"/>',

			'<div><span style="margin-left:5px;">id:</span>&#160;<b>{fileId}</b></div>',
			'<div><span style="margin-left:5px;">file-extension:</span>&#160;<b>{extension}</b></div>',
			'<div><span style="margin-left:5px;">file-name:</span>&#160;<b>{fileName}</b></div>',
			'<div><span style="margin-left:5px;">file-http-URI:</span>&#160;<b><a href="{httpURI}?download">{httpURI}</a></b></div>',
			'</div>'
	// ,
	// '<div><b>http-URI-String:</b>&#160;{httpURIString}</div>',
	// '</div>'
	),

	/**
	 * 
	 */
	updateDetailsPanel : function(node) {

		THROW({
					args : arguments,
					propsObj : node,
					props : ['id', 'text', 'ui.iconCls']
				}, this, 'updateDetailsPanel');

		if (typeof(node.parentNode) == 'undefined' || node.parentNode === null) {
			// root
			path = node.attributes.rootPath;
			icoCls = 'folderIconCls';
		} else if (node.attributes.type == 'dir') {
			// dir
			path = node.id;
			icoCls = 'folderIconCls';
		} else {
			// file
			path = node.parentNode.id + '/' + node.attributes.fileName;
			icoCls = 'file' + node.attributes.extension + 'IconCls';
		}

		this.detailsTemplate.overwrite(this.detailsPanel.body, {
					path : path,
					name : node.text,
					type : node.attributes.type,
					extension : node.attributes.extension,
					fileId : (typeof(node.attributes.vfsid) != 'undefined')
							? node.attributes.vfsid
							: node.attributes.fileId,
					fileName : node.attributes.fileName,
					httpURI : node.attributes.httpURI,
					// httpURIString: node.attributes.httpURIString,
					icoCls : icoCls
				});

	},

	/**
	 * 
	 */
	buildSettingsPanel : function(config) {

		THROW({
					propsObj : config,
					props : ['id', 'clazz', 'editPermissionURL',
							'loadReadPermissionsURL', 'loadWritePermissionsURL']
				}, this, 'buildSettingsPanel');

		if (true === config.isDirectory) {
			this.initApplyChildrenMonitor(config);
		}

		// show read-roles-assorter
		this.readRolesEditor = new Pulse.AssorterPanel({
					preLoad : false,
					title : VIEWPORT_PROPERTIES.VFSREADROLES,
					renderTo : config.clazz + '.' + config.id + '.roles.read',
					loadURL : config.loadReadPermissionsURL + '?id='
							+ config.id,
					editURL : config.editPermissionURL,
					editHandler : function(node) {
						PermissionOverviewEditor.editPermission(this.editURL,
								node.attributes.id, node.attributes.clazz);
					},
					uiProviders : {
						'AccessControlTreeNodeUI' : PULSE.AccessControlTreeNodeUI
					}
				});
		this.readRolesEditor.on('MSG', function(msgString, editor) {
					THROW({
								args : arguments
							}, this, 'MSG');
					if (msgString == 'change') {
						if (true === this.hasChanges()) {
							this.settingsPanel.toggleHasChangesIcon(true);
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : this.tab.id
												}, {
													n : 'msg',
													o : 'change'
												}]
									});
						} else {
							this.settingsPanel.toggleHasChangesIcon(false);
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : this.tab.id
												}, {
													n : 'msg',
													o : 'reset'
												}]
									});
						}
						return;
					}
					PulseError.Throw({
								e : 'HANDLE',
								p : [{
											n : 'handle',
											o : 'panel'
										}, {
											n : 'id',
											o : this.tab.id
										}, {
											n : 'msg',
											o : msgString
										}]
							});

				}, this);
		this.readRolesEditor.on('reset', function(eObj) {
					if (true === eObj.success && false === this.hasChanges()) {
						this.settingsPanel.toggleHasChangesIcon(false);
						PulseError.Throw({
									e : 'HANDLE',
									p : [{
												n : 'handle',
												o : 'panel'
											}, {
												n : 'id',
												o : this.tab.id
											}, {
												n : 'msg',
												o : 'reset'
											}]
								});
					}
				}, this);

		// show write-roles-assorter
		this.writeRolesEditor = new Pulse.AssorterPanel({
					preLoad : false,
					title : VIEWPORT_PROPERTIES.VFSWRITEROLES,
					renderTo : config.clazz + '.' + config.id + '.roles.write',
					loadURL : config.loadWritePermissionsURL + '?id='
							+ config.id,
					editURL : config.editPermissionURL,
					editHandler : function(node) {
						PermissionOverviewEditor.editPermission(this.editURL,
								node.attributes.id, node.attributes.clazz);
					},
					uiProviders : {
						'AccessControlTreeNodeUI' : PULSE.AccessControlTreeNodeUI
					}
				});
		this.writeRolesEditor.on('MSG', function(msgString, editor) {
					THROW({
								args : arguments
							}, this, 'MSG');
					if (msgString == 'change') {
						if (true === this.hasChanges()) {
							this.settingsPanel.toggleHasChangesIcon(true);
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : this.tab.id
												}, {
													n : 'msg',
													o : 'change'
												}]
									});
						} else {
							this.settingsPanel.toggleHasChangesIcon(false);
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : this.tab.id
												}, {
													n : 'msg',
													o : 'reset'
												}]
									});
						}
						return;
					}
					PulseError.Throw({
								e : 'HANDLE',
								p : [{
											n : 'handle',
											o : 'panel'
										}, {
											n : 'id',
											o : this.tab.id
										}, {
											n : 'msg',
											o : msgString
										}]
							});
				}, this);
		this.writeRolesEditor.on('reset', function(eObj) {
					if (true === eObj.success && false === this.hasChanges()) {
						this.settingsPanel.toggleHasChangesIcon(false);
						PulseError.Throw({
									e : 'HANDLE',
									p : [{
												n : 'handle',
												o : 'panel'
											}, {
												n : 'id',
												o : this.tab.id
											}, {
												n : 'msg',
												o : 'reset'
											}]
								});
					}
				}, this);

	},

	/**
	 * @param {Object}
	 *            config, the config
	 */
	initApplyChildrenMonitor : function(config) {

		try {

			// retrieve required fields
			this.applyForChildrenEl = Ext.get(config.clazz + '.' + config.id
					+ '.applyForChildren');

			if (typeof(this.applyForChildrenEl) == 'undefined'
					&& this.applyForChildrenEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED', this, 'initApplyChildrenMonitor');
				}
				return;
			}

			// builds monitor
			applyForChildrenMonitorCFG = {
				id : this.id + '.applyForChildrenEditor',
				el : this.applyForChildrenEl,
				fieldType : 'checkbox'
			};

			this.applyForChildrenMonitor = new Pulse.FieldMonitor(applyForChildrenMonitorCFG);

			this.applyForChildrenMonitor.on('MSG', function(msgString) {
						if (true === this.hasChanges()) {
							this.settingsPanel.toggleHasChangesIcon(true);
						} else {
							this.settingsPanel.toggleHasChangesIcon(false);
						}
					}, this);

			this.addSubEditor(this.applyForChildrenMonitor);

			// initial hide of msg-el
			try {
				Ext
						.get(config.clazz + '.' + config.id
								+ '.applyForChildrenMSG')
						.setVisibilityMode(Ext.Element.DISPLAY).hide();
			} catch (e) {/* ignore */
			}

			// hide/show listener
			this.applyForChildrenMonitor.on('MSG', function(msgString) {
						try {
							if (msgString == 'change') {
								Ext.get(this.clazz + '.' + this.id
										+ '.applyForChildrenMSG').show(true);
							} else if (msgString == 'reset') {
								Ext.get(this.clazz + '.' + this.id
										+ '.applyForChildrenMSG').hide(true);
							}
						} catch (e) {/* ignore */
						}
					}, config);

		} catch (e) {
			if (this.DBG) {
				FATAL(e, this, 'initApplyChildrenMonitor');
			}
		}
	},

	/**
	 * returns if this editor has changes
	 * 
	 * @return {Boolean}
	 */
	hasChanges : function() {

		superBool = Pulse.VFSPermissionEditor.superclass.hasChanges.call(this);

		if (typeof(this.readRolesEditor) == 'undefined'
				&& typeof(this.writeRolesEditor) == 'undefined') {
			return superBool;
		}

		return (superBool || this.tab.isDirty
				|| this.readRolesEditor.hasChanges() || this.writeRolesEditor
				.hasChanges());
	},

	/**
	 * returns the values of the permission-assorters
	 * 
	 * @return {Object} values = { id: {Number}, addreadroles: {Array}ids, if
	 *         changed remreadroles: {Array}ids, if changed addwriteroles:
	 *         {Array}ids, if changed remwriteroles: {Array}ids, if changed };
	 */
	getChanges : function(v) {

		try {

			v = Pulse.VFSPermissionEditor.superclass.getChanges.call(this, v);

			if (typeof(v) == 'undefined' || v === null) {
				v = {};
			}

			// add read-roles if changed
			if (typeof(this.readRolesEditor) != 'undefined'
					&& this.readRolesEditor !== null) {
				if (true === this.readRolesEditor.hasChanges()) {
					chgs = this.readRolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addreadroles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remreadroles = chgs.unasoc;
					}
				}
			}

			// add write-roles if changed
			if (typeof(this.writeRolesEditor) != 'undefined'
					&& this.writeRolesEditor !== null) {
				if (true === this.writeRolesEditor.hasChanges()) {
					chgs = this.writeRolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addwriteroles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remwriteroles = chgs.unasoc;
					}
				}
			}

			return v;

		} catch (e) {
			THROW({
						e : 'FATAL',
						o : e
					}, this, 'getChanges');
		}
	},

	/**
	 * "Commits" field values and restets changed state. Use after successfull
	 * save.
	 */
	commit : function() {

		Pulse.VFSPermissionEditor.superclass.commit.call(this);

		// read-roles-editor
		if (typeof(this.readRolesEditor) != 'undefined'
				&& this.readRolesEditor !== null) {
			if (true === this.readRolesEditor.hasChanges()) {
				this.readRolesEditor.commit();
			}
		}
		// write-roles-editor
		if (typeof(this.writeRolesEditor) != 'undefined'
				&& this.writeRolesEditor !== null) {
			if (true === this.writeRolesEditor.hasChanges()) {
				this.writeRolesEditor.commit();
			}
		}

		this.settingsPanel.toggleHasChangesIcon(false);
	},

	/**
	 * resets read/write-roles-assorters.
	 * 
	 * !!! does not update ui !!!
	 */
	resetPermissions : function() {

		// read-roles-editor
		if (typeof(this.readRolesEditor) != 'undefined'
				&& this.readRolesEditor !== null) {
			this.readRolesEditor.reset();
		}

		// write-roles-editor
		if (typeof(this.writeRolesEditor) != 'undefined'
				&& this.writeRolesEditor !== null) {
			this.writeRolesEditor.reset();
		}
	},

	/**
	 * resets the editor.
	 * 
	 * !!! does not update ui (of AssorterPanels) !!!
	 */
	reset : function() {

		Pulse.VFSPermissionEditor.superclass.reset.call(this);

		this.settingsPanel.toggleHasChangesIcon(false);
		PulseError.Throw({
					e : 'HANDLE',
					p : [{
								n : 'handle',
								o : 'panel'
							}, {
								n : 'id',
								o : this.tab.id
							}, {
								n : 'msg',
								o : 'reset'
							}]
				});
		this.resetPermissions();
	},

	/**
	 * initializes the tab
	 */
	initTab : function() {
		if (typeof(this.tab) != 'undefined') {

			// initialize tab if !tab.isInitialized
			if (true !== this.tab.isInitialized) {

				// add buttons to bar

				// save-button-config
				saveButtonConfig = {
					text : VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope : this,
					handler : function() {
						if (false === this.hasChanges()) {
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : this.tab.id
												}, {
													n : 'msg',
													o : 'savesuccess'
												}]
									});
							return;
						}

						id = this.selectedNode.id;
						if (typeof(this.selectedNode.attributes.vfsid) != 'undefined') {
							id = this.selectedNode.attributes.vfsid;
						}

						// retrieve basic fields values
						v = this.getChanges({
									id : id
								});

						if (typeof(this.applyForChildrenMonitor) != 'undefined'
								&& true === this.applyForChildrenMonitor
										.hasChanges()) {
							this.applyForChildrenMonitor.reset();
							try {
								Ext.get(this.sitemapNode.clazz + '.'
										+ this.sitemapNode.id
										+ '.applyRolesForChildrenMSG').hide();
							} catch (e) {/* ignore */
							}
						}

						this.tab.disable();

						Ext.Ajax.request({
							url : this.saveURL,
							method : 'POST',
							scope : this,
							success : function(response, options) {
								this.tab.enable();
								decodedResponse = Ext
										.decode(response.responseText);
								if (true === decodedResponse.status) {

									// commit changes
									this.commit();

						// save success message
								(function() {
										this.fireEvent('MSG', 'savesuccess',
												this);
									}).defer(250, this);
									// PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});

								} else {
									PulseError.Throw({
												e : 'SERVER.ERROR',
												o : decodedResponse.error
											}, this.type,
											'tbar.savePermissions');
								}
							},
							failure : function(response, options) {
								this.tab.enable();
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({
												e : 'REQUEST.FAILED'
											}, this.type,
											'tbar.savePermissions');
								} else {
									PulseError.Throw({
												e : 'REQUEST.ERROR',
												o : {
													e : response.responseText
												}
											}, this.type,
											'tbar.savePermissions');
								}
							},
							params : v
						});

					},
					iconCls : 'saveIconCls'
				};

				// add buttons
				tabTbar = this.tab.getTopToolbar().insertButton(0,
						[saveButtonConfig, new Ext.Toolbar.Separator()]);

				// used to retrieve change-state in vp-controller
				this.tab.pEditor = this;

				// set initialized-flag
				this.tab.isInitialized = true;

			}
		}
	},

	/**
	 * 
	 */
	initFolderPreviewGrid : function(/* config */) {
		THROW({
					props : ['treeURL', 'selectedNode.id']
				}, this, 'initFolderPreviewGrid');

		// build overview grid

		gridStoreRecord = new Ext.data.Record.create([{
					name : 'id'
				}, {
					name : 'vfsid'
				}, {
					name : 'rootPath'
				}, {
					name : 'text'
				}, {
					name : 'type'
				}, {
					name : 'leaf'
				}, {
					name : 'fileId'
				}, {
					name : 'fileName'
				}, {
					name : 'httpURI'
				}, {
					name : 'httpURIString'
				}, {
					name : 'extension'
				}]);

		// determine private/public
		if (true === this.tree.getLoader().baseParams.priv) {
			priv = true;
		} else {
			priv = false;
		}

		storeCFG = {
			fields : gridStoreRecord,
			root : 'data',
			url : this.treeURL,
			baseParams : {
				forGrid : true,
				priv : priv
			}
		};
		gridStore = new Ext.data.JsonStore(storeCFG);

		// build column-model
		columns = [{
			header : '',
			dataIndex : 'extension',
			renderer : function(v) {
				if (typeof(v) != 'string' || v === '') {
					iconCls = 'folderIconCls';
				} else {
					iconCls = 'file' + v + 'IconCls';
				}
				return '<img src="' + Ext.BLANK_IMAGE_URL + '" '
						+ 'width="18" height="18" border="0" ' + 'class="'
						+ iconCls + '" />';
			},
			sortable : true,
			width : 30,
			fixed : true
		}, {
			header : VIEWPORT_PROPERTIES.NAME + ':',
			dataIndex : 'text',
			sortable : true
		}, {
			header : VIEWPORT_PROPERTIES.FILETYPE + ':',
			dataIndex : 'type',
			sortable : true
		}, {
			header : 'vfsid:',
			dataIndex : 'vfsid',
			sortable : true,
			width : 50,
			fixed : true
		}];
		gridCm = new Ext.grid.ColumnModel(columns);

		gridCFG = {
			store : gridStore,
			height : this.previewPanel.getInnerHeight(),
			height : this.previewPanel.getInnerWidth(),
			cm : gridCm,
			renderTo : 'vfsPermissionEditor.overview.grid.el',
			autoExpandColumn : 'id',
			loadMask : true,
			viewConfig : {
				forceFit : true
			},
			frame : false,
			border : false
		};
		this.grid = new Ext.grid.GridPanel(gridCFG);

		this.grid.on('rowclick', function(grid, rowIndex, evt) {
					this.folderDblClick(grid.getStore().getAt(rowIndex)
							.get('text'));
				}, this);
		this.grid.on('rowdblclick', function(grid, rowIndex, evt) {
					this.folderDblClick(grid.getStore().getAt(rowIndex)
							.get('text'));
				}, this);

		this.previewPanel.on('resize', function() {
					if (typeof(this.grid) == 'undefined' || this.grid === null) {
						return;
					}
					this.grid.setHeight(this.previewPanel.getInnerHeight());
					this.grid.setWidth(this.previewPanel.getInnerWidth());
				}, this);

		// init grid
		gridStore.on('beforeLoad', function(store, options) {
					store.baseParams.node = this.selectedNode.id;
				}, this);

		gridStore.load(/*
						 * { node: this.selectedNode.id }
						 */);

		return this.grid;

	},

	/**
	 * 
	 */
	initComponent : function() {

		Pulse.VFSPermissionEditor.superclass.initComponent.call(this);

		if (typeof(this.id) == 'undefined' || this.id === null) {
			this.id = Ext.id();
		}

		this.initTab();

		// DBG >>
		THROW({
			args : arguments,
			props : ['id', 'renderTo', 'treeURL', 'previewURL', 'tab', 'tab.id']
		}, this, 'initComponent');

	}

};
Pulse.VFSPermissionEditor = Ext.extend(Pulse.Editor, VFSPermissionEditor); // END
																			// ::
																			// Pulse.VFSPermissionEditor

// Create namespace (PULSE)
// Ext.namespace('PULSE');
 
/**
 * definition of the user-interface for an access-control-tree-node
 */
PULSE.AccessControlTreeNodeUI = function() {
	
    // call parent constructor    
    PULSE.AccessControlTreeNodeUI.superclass.constructor.apply(this, arguments);
};
 
// extend
Ext.extend(PULSE.AccessControlTreeNodeUI, Ext.tree.TreeNodeUI, {

type: 'AccessControlTreeNodeUI',

DBG : false/*{
	setChanged: false
}*/,

functionsIconSize: 14,

/**
 * @Override
 */
renderElements : function(n, a, targetNode, bulkRender) {
		
		// retrieve total for the tree's paging-toolbar
		// set total for root-node
		if (typeof(a.total) != 'undefined') {
			n.parentNode.attributes.total = a.total;
		}
		
		//set icon
		if (typeof(a.clazz) != 'undefined' && (a.clazz !== null) 
			&& (a.clazz !== '')) {
			clazzArray = a.clazz.split('.');
			a.iconCls = clazzArray.join('');
		}
	
        // add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

		// edit-btn
		editBtn = '';
		styleString = 'margin-bottom: 2px; padding: 0px; border: 0px; vertical-align: middle;';
		id = Ext.id();
		edit = false;
		ownerTreeEditor = n.getOwnerTree().treeEditor;
		if (typeof(ownerTreeEditor.editHandler) == 'function' 
			&& typeof(ownerTreeEditor.editURL) == 'string' 
			&& ownerTreeEditor.editURL !== '') {
			
			edit = true;
			editBtn = '&#160;<a href="#" style="font-weight: bold" id="edtEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="editIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT + '" />' + 
			'</a>&#160;';
		}
		
        href = a.href ? a.href : Ext.isGecko ? "" : "#";
        buf = [
        	'<li class="x-tree-node">',
        	'<div ext:tree-node-id="', n.id, '" class="x-tree-node-el x-tree-node-leaf ', a.cls, '">',
        		'<span class="tabHasChangesIconHidden">*</span>',
            	'<img src="', a.icon || this.emptyIcon, 
            		'" class="x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : ""),
            		(a.iconCls ? " "+a.iconCls : ""),'" unselectable="on" style="width:18px"/>',
            	'<a hidefocus="on" class="x-tree-node-anchor" href="',href,'" tabIndex="1" ',
             	a.hrefTarget ? ' target="'+a.hrefTarget+'"' : '', ' dir="LTR">',
             	'<span unselectable="on" ext:qtip="id: ' + n.id + '">',n.text,'</span></a>',
             	editBtn,
             "</div>",
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>"
        ].join('');

        if (bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()) {
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf);
        } else {
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
        }
        
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        cs = this.elNode.childNodes;
        
        this.hasChangesNode = cs[0];
        this.iconNode = cs[1];
        this.anchor = cs[2];
        this.textNode = cs[2].firstChild;
        
        // edit
		if (true === edit) {
	        var editEl = Ext.get('edtEl_' + n.id + '.' + id);
	        if (typeof(editEl) != 'undefined' && editEl !== null) {
	        	editEl.on('click', this.editNode, this);
	        }
		}
		
		// build quicktip with description if given
		if (typeof(a.description) != 'undefined' && a.description !== '') {
			this.buildQTip(this, a);
		}
        
    },
    
    /**
     * 
     */
    editNode: function(event) {
		event.handle = 'edit';
    },
    
    /**
     * @Override
     */
    updateExpandIcon : function(){
    	/* does nothing */
    },
    
    /**
     * @Override
     */
    getChildIndent : function(){
    	/* does nothing */
    },
    
    /**
     * @Override
     */
    renderIndent : function(){
    	/* does nothing */
    },
    
   	/**
     * builds ext-qtip for node from passed {attributes}
     * 
     * @param ui : PULSE.AccessControlTreeNodeUI
     * @param a : node.attributes
     * 		{
     * 			node.id
     * 			node.description
     * 		} 
     */
    buildQTip: function(ui, a) {
    	if (typeof(ui) == 'undefined' || typeof(a) == 'undefined' || ui === null) {
    		return;
    	}
    	Ext.QuickTips.register({
        	target: ui.textNode,
//        	title: '' + a.text,
        	text: 'id: ' + a.id + '<br />' +
				  '<hr /><span style="font-weight:bold;font-style:italic;">description:</span><br />' +
				  a.description
        });	
    },
    
    /**
     * 
     */
    setChanged: function(bool) {
    	THROW({o:bool},this,'setChanged');
    	if (true === bool) {
    		Ext.fly(this.hasChangesNode).removeClass("tabHasChangesIconHidden");
    		return;
    	}
    	Ext.fly(this.hasChangesNode).replaceClass("","tabHasChangesIconHidden");
    }
    	    	
}); // end of extend


/**
 * @Override
 */ 
PULSE.AccessControlRootTreeNodeUI = function(){
    PULSE.AccessControlRootTreeNodeUI.superclass.constructor.apply(this, arguments);
};
Ext.extend(PULSE.AccessControlRootTreeNodeUI, PULSE.AccessControlTreeNodeUI, {
    render : function(){
        if(!this.rendered){
            /*var */targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    collapse : function(){
    },
    expand : function(){
    }
}); 
// end of file

/**
 * 
 */
Ext.grid.AjaxRowExpander = function(config){
	
    Ext.apply(this, config);

    this.addEvents({
        beforeexpand : true,
        expand: true,
        beforecollapse: true,
        collapse: true
    });

    Ext.grid.AjaxRowExpander.superclass.constructor.call(this);

//    if(this.tpl){
//        if(typeof this.tpl == 'string'){
//            this.tpl = new Ext.Template(this.tpl);
//        }
//        this.tpl.compile();
//    }
//    
//    if(config.spanRows){
//    	this.spanRows = config.spanRows;
//    }
//    
//    if(config.cbIdRecord){
//    	this.cbIdRecord = config.cbIdRecord;
//    }

    this.state = {};
    this.loaded = {};
    this.bodyContent = {};
};

Ext.extend(Ext.grid.AjaxRowExpander, Ext.util.Observable, {
	
//	cbIdRecord: null,
    spanRows: '',
    header: '',
    width: 30,
    sortable: false,
    fixed: true,
//    dataIndex: '',
//    id: 'expander',
    lazyRender : true,
    enableCaching: true,

    getRowClass : function(record, rowIndex, p, ds){
// changed 20.11.2007
//        p.cols = p.cols-1;
        var content = this.bodyContent[record.id];
        if(!content && !this.lazyRender){
            content = this.getBodyContent(record, rowIndex);
        }
        if(content){
            p.body = content;
        }
        return this.state[record.id] ? 'x-grid3-row-expanded' : 'x-grid3-row-collapsed';
    },

    init : function(grid){
        this.grid = grid;

        var view = grid.getView();
        view.getRowClass = this.getRowClass.createDelegate(this);

        view.enableRowBody = true;

        grid.on('render', function(){
            view.mainBody.on('mousedown', this.onMouseDown, this);
        }, this);
    },

    getBodyContent : function(record, index){
        if(!this.enableCaching){
        	
        	return 'test 123 (no-cache)';
        	
//// changed 10.12.2007
//        	if (this.cbIdRecord == null) {
//            	c = this.tpl.apply(record.data);
//            } else {
//            	for (i = 1; i != 0 ;i++) {
//            		cbId = 'cbId' + i;
//            		val = this.cbIdRecord.get(cbId);
//            		// alert('val: ' + val);
//            		if (typeof(val) == 'undefined') {
//            			break;
//            		}
//            		if (val == '') {
//            			val = '\'\'';
//            		}
//            		evalString = 'record.data.' + cbId + '=' + val + ';';
//            		// alert(evalString);
//            		eval(evalString);
//            	}
//            	c = this.tpl.apply(record.data);
//            }
//            return c;
//        	
//            // return this.tpl.apply(record.data);
//// changed 10.12.2007             
        }
        var content = this.bodyContent[record.id];
        if(!content){
        	content = 'test 123 (cache)';
        	
//// changed 10.12.2007 
//            // content = this.tpl.apply(record.data);          
//            if (this.cbIdRecord == null) {
//            	content = this.tpl.apply(record.data);
//            } else {            	
//            	for (i = 1; i != 0 ;i++) {
//            		cbId = 'cbId' + i;
//            		val = this.cbIdRecord.get(cbId);
//            		// alert('val: ' + val);
//            		if (typeof(val) == 'undefined') {
//            			break;
//            		}
//            		if (val == '') {
//            			val = '\'\'';
//            		}
//            		evalString = 'record.data.' + cbId + '=' + val + ';';
//            		// alert(evalString);
//            		eval(evalString);
//            	}
//            	content = this.tpl.apply(record.data);
//            }
//// changed 10.12.2007     
            this.bodyContent[record.id] = content;
        }
        return content;
    },

    onMouseDown : function(e, t){
        if(t.className == 'x-grid3-row-expander'){
            e.stopEvent();
            /*var */row = e.getTarget('.x-grid3-row');
            this.toggleRow(row);
        }
    },

    renderer : function(v, p, record){
    	if (this.spanRows !== '') {
    		p.cellAttr = 'rowspan="' + this.spanRows + '"';
    	} else {
        	p.cellAttr = 'rowspan="2"';
    	}
        return '<div class="x-grid3-row-expander">&#160;</div>';
    },

    beforeExpand : function(record, body, rowIndex){
        if(this.fireEvent('beforexpand', this, record, body, rowIndex) !== false){
            if(/*this.tpl && */this.lazyRender){
//                body.innerHTML = this.getBodyContent(record, rowIndex);
                
                if (typeof(this.params) != 'undefined') {
                	this.params.rid = record.get('id');
                } else {
                	this.params = {
                		rid: record.get('id')
                	};
                }
                if (true === this.enableCaching && true === this.loaded[record.id]) {
                	return true;
                }
                this.loaded[record.id] = true;
                Ext.get(body).load({
                	url: this.url,
                	method: 'POST',
                	scripts: true,
                	callback: LPCB,
                	params: this.params,
                    text: 'loading...',
                    discardUrl: true,
                    nocache: true,
                    timeout: 30
                });

            }
            return true;
        }else{
            return false;
        }
    },

    toggleRow : function(row){
        if(typeof row == 'number'){
            row = this.grid.view.getRow(row);
        }
        this[Ext.fly(row).hasClass('x-grid3-row-collapsed') ? 'expandRow' : 'collapseRow'](row);
    },

    expandRow : function(row){
        if(typeof row == 'number'){
            row = this.grid.view.getRow(row);
        }
        var record = this.grid.store.getAt(row.rowIndex);
        var body = Ext.DomQuery.selectNode('tr:nth(2) div.x-grid3-row-body', row);
        if(this.beforeExpand(record, body, row.rowIndex)){
            this.state[record.id] = true;
            Ext.fly(row).replaceClass('x-grid3-row-collapsed', 'x-grid3-row-expanded');
//            if (typeof(this.tpl.expandListener) == 'function') {
//            	this.tpl.expandListener(this, record, body, row.rowIndex);
//            }
            this.fireEvent('expand', this, record, body, row.rowIndex);
        }
    },

    collapseRow : function(row){
        if(typeof row == 'number'){
            row = this.grid.view.getRow(row);
        }
        var record = this.grid.store.getAt(row.rowIndex);
        var body = Ext.fly(row).child('tr:nth(1) div.x-grid3-row-body', true);
        if(this.fireEvent('beforcollapse', this, record, body, row.rowIndex) !== false){
            this.state[record.id] = false;
            Ext.fly(row).replaceClass('x-grid3-row-expanded', 'x-grid3-row-collapsed');
            this.fireEvent('collapse', this, record, body, row.rowIndex);
        }
    }
    
//    ,
//
//// added 10.12.2007     
//    setCbIdRecord : function(rec) {
//    	if (typeof(rec) == 'undefined' || typeof(rec) != 'undefined') {
//    		return;
//    	}
//    	this.cbIdRecord = rec;
//    }

});


/**
 * 
 */
AssorterPanelStore =  {
	
	type: 'AssorterPanelStore',
	
	DBG: false/*{
		push: false,
		updateArrays: false,
		updateNodeUi: false
	}*/,
	
	id: null,
	asoc: null,
	unasoc: null,
	
	/**
	 * 
	 */
	push: function(boolAsocUnasoc, node) {
		if (boolAsocUnasoc !== node.attributes.initialAsoc) {
			if (true === boolAsocUnasoc) {
				this.asoc.push(node);
			} else if (false === boolAsocUnasoc) {
				this.unasoc.push(node);
			}
		}		
		// updates node-ui
		this.updateNodeUi(boolAsocUnasoc, node);	
		this.updateArrays(boolAsocUnasoc, node);
		this.fireEvent('MSG', 'change', this);
		
		// DBG
		THROW({args:arguments,p:[
			{n:'node.initialAsoc',o:''+node.attributes.initialAsoc},
			{n:'this.hasChanges()',o:''+this.hasChanges()}
		]},this,'push');
	},
	
	/**
	 * 
	 */
	updateArrays: function(boolAsocUnasoc, node) {			
		if (true === boolAsocUnasoc){
			for (i = 0; i < this.unasoc.length; i++) {
				chkNode = this.unasoc[i];
				if (typeof(chkNode) != 'undefined' && chkNode.id == node.id) {
					this.unasoc.splice(i,1);
					break;
				}
			}
		} else if (false === boolAsocUnasoc) {
			for (i = 0; i < this.asoc.length; i++) {
				chkNode = this.asoc[i];
				if (typeof(chkNode) != 'undefined' && chkNode.id == node.id) {
					this.asoc.splice(i,1);
					break;
				}
			}
		}
		
		// DBG
		THROW({args:arguments,p:[
			{n:'node.initialAsoc',o:''+node.attributes.initialAsoc},
			{n:'this.hasChanges()',o:''+this.hasChanges()}
		]},this,'updateArrays');
	},
	
	/**
	 * 
	 */
	getIds: function(boolAsocUnasoc) {
		ids = [];
		if (true === boolAsocUnasoc) {
			for (i = 0; i < this.asoc.length; i++) {
				node = this.asoc[i];
				if (typeof(node) != 'undefined') {
					ids.push(node.id);
				}
			}
		} else if (false === boolAsocUnasoc) {
			for (i = 0; i < this.unasoc.length; i++) {
				node = this.unasoc[i];
				if (typeof(node) != 'undefined') {
					ids.push(node.id);
				}
			}
		}
		return ids;
	},
	
	/**
	 * 
	 */
	getChanges: function() {
		chgs = {};
		
		ids = this.getIds(true);
		if (ids.length > 0) {
			chgs.asoc = ids;
		}
		
		ids = this.getIds(false);
		if (ids.length > 0) {
			chgs.unasoc = this.getIds(false);
		}
		
		return chgs;
	},
	
	
	/**
	 * 
	 */
	hasChanges: function() {
		return (this.asoc.length !== 0 || this.unasoc.length !== 0);
	},
	
	/**
	 * 
	 */
	commit: function() {
		for (i = 0; i < this.asoc.length; i++) {
			node = this.asoc[i];
			if (typeof(node) != 'undefined') {
				node.attributes.initialAsoc = true;
				if (typeof(node.ui.setChanged) == 'function') {
					node.ui.setChanged(false);
				}
			}
		}
		this.asoc = [];
		for (i = 0; i < this.unasoc.length; i++) {
			node = this.unasoc[i];
			if (typeof(node) != 'undefined') {
				node.attributes.initialAsoc = false;
				if (typeof(node.ui.setChanged) == 'function') {
					node.ui.setChanged(false);
				}
			}
		}
		this.unasoc = [];
		return !this.hasChanges();
	},
	
	/**
	 * does not reset node-ui's
	 */
	clear: function() {
		this.asoc = [];
		this.unasoc = [];
		return !this.hasChanges();
	},
	
	/**
	 * 
	 */
	updateNodeUi: function(boolAsocUnasoc, node) {
		THROW({args:arguments,propsObj:node,props:['ui','ui.hasChanges']},this,'updateNodeUi');
		if (typeof(node.ui.setChanged) == 'function') {
			if (boolAsocUnasoc == node.attributes.initialAsoc) {
				node.ui.setChanged(false);
			} else {
				node.ui.setChanged(true);
			}
		}
	},
	
	/**
	 * 
	 */
	initComponent: function() {
		this.addEvents('MSG');
		this.asoc = [];
		this.unasoc = [];	
		if (typeof(this.initialConfig.id) == 'undefined') {
			this.id = Ext.id(null, this.type + '.');
		}				
	}
};
Pulse.AssorterPanelStore = Ext.extend(Ext.Component,AssorterPanelStore); // END :: Pulse.AssorterPanel.Store


/**
 * builds a new UserEditorAssorter from given config
 * 
 * @requires Core/xsl/WEST.editor.basics.xsl
 * 			template: Pulse.Assorter
 * 			with-param: {
 * 				identifier: this.renderTo
 * 			}
 * 
 * @param {Object} config.tab
 * @param {String} config.renderTo
 * @param {String} config.loadURL
 * 
 * @param {String} config.title [optional]
 * @param {Number} config.height [optional]
 */
AssorterPanel = {
	
	// type
	type: 'AssorterPanel',
	// DBG
	DBG: false/*{
		addTreeListeners: false,
		reset: false,
		hasChanges: true
	}*/,
	
	// id
	id: null,
	
	// default on init
	height: 200,
	
	// the panel
	renderTo: null,
	panel: null,
	
	// trees
	leftTree: null,
	rightTree: null,
	
	// properties
	tab: null,
	
	// stores the changes
	store: null,
	
	/**
	 * 
	 */
	onRender: function() {
				
		// build panel
		this.panel = new Ext.Panel({
			id: this.renderTo + '.panel',
			header: (typeof(this.header) == 'boolean') ? this.header : true,
			title: (this.title) ? this.title + ':' : '&#160;',
			iconCls: this.iconCls,
			collapsible: (typeof(this.collapsible) == 'boolean') ? this.collapsible : true,
			collapsed: (typeof(this.collapsed) == 'boolean') ? this.collapsed : true,
			border: (typeof(this.border) == 'boolean') ? this.border : true,
            renderTo: this.renderTo,
            contentEl: this.renderTo + '.contentEl'
		});
		
		//
		if (false !== this.header) {
			Pulse.insertHasChangesIcon(this.panel);
		}
		
		// build trees

		// tree-loaders
		this.leftLoader = new Ext.tree.TreeLoader({
	        dataUrl: this.loadURL,
	        uiProviders: this.uiProviders
	    });
	    
	    this.rightLoader = new Ext.tree.TreeLoader({
	        dataUrl: this.loadURL,
	        baseParams: {
	        	unasoc: true
	        },
	        uiProviders: this.uiProviders
	    });
		
		// tree-paging-bars
		leftBbar = new Pulse.TreePagingToolbar({
    		displayInfo: true,
    		treeLoader: this.leftLoader,
    		editor: this,
    		onBeforeRefresh: function() {
    			this.editor.leftFilter.setValue('');
    			this.editor.leftLoader.baseParams.filter = null;
	    		delete this.editor.leftLoader.baseParams.filter;
    		}
    	});
    	
    	rightBbar = new Pulse.TreePagingToolbar({
    		displayInfo: true,
    		treeLoader: this.rightLoader,
    		editor: this,
    		onBeforeRefresh: function() {
    			this.editor.rightFilter.setValue('');
	    		this.editor.rightLoader.baseParams.filter = null;
	    		delete this.editor.rightLoader.baseParams.filter;
    		}
    	});
    	
    	// tree-name-filter-fields
    	this.leftFilter = new Ext.form.TextField({
            width: 150,
            enableKeyEvents: true,
            emptyText: VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND
    	});
    	
    	this.rightFilter = new Ext.form.TextField({
            width: 150,
            enableKeyEvents: true,
            emptyText: VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND
    	});
    	
    	// tree-root-nodes
    	this.leftRoot = new Ext.tree.AsyncTreeNode({
	        text: this.renderTo + '.source.left',
	        draggable: false,
	        id: this.renderTo + '.source.left'
	    });
	    
	    this.rightRoot = new Ext.tree.AsyncTreeNode({
	        text: this.renderTo + '.source.right',
	        draggable: false,
	        id: this.renderTo + '.source.right'
	    });    	
    	
    	// trees
    	
    	// associated objects
		this.leftTree = new Ext.tree.TreePanel({
			/*selModel: new Ext.tree.MultiSelectionModel(),*/
			title: VIEWPORT_PROPERTIES.ASSIGNED + ':',
			iconCls: 'isSelectedIconCls',
			treeEditor: this,
			el: this.renderTo + '.asoc',
			rootVisible: false,
			height: this.height - 33, // -33 : minus padding (10), minus panel.header (23)
			loader: this.leftLoader,
		    autoScroll: true,
            containerScroll: true,
			enableDD: true,
			ddAppendOnly: false,
            dropConfig: {
            allowContainerDrop: true,
            allowParentInsert: true,
	            ddGroup: this.renderTo + '.dd',
	            onContainerOver: function(ddSrc, evt, data) {
	                return this.dropAllowed;
	            },
	            onContainerDrop: function(ddSrc, evt, data) {
	                if (data.node.getOwnerTree().id == this.tree.id) {
	                    return false;
	                }
	                this.tree.root.appendChild(data.node);
	                this.tree.treeEditor.store.push(true, data.node);
	                return true;
	            }
	        },
        	ddGroup: this.renderTo + '.dd',
        	tbar:[
        		this.leftFilter,
        		'&#160;',
        		{
	        		tooltip: VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
	        		scope: this,
	        		handler: function() {
	        			if (true === this.hasChanges()) {
	        				Ext.Msg.alert(VIEWPORT_PROPERTIES.TEXT_FUNCTIONDISABLED,VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES);
	        				return;
	        			}
						this.leftRoot.reload();
	        		},
	        		iconCls: 'findIconCls'
	        	}
        	],
        	bbar: leftBbar
		});

		// !associated objects
		this.rightTree = new Ext.tree.TreePanel({
			/*selModel: new Ext.tree.MultiSelectionModel(),*/
			title: VIEWPORT_PROPERTIES.NOTASSIGNED + ':',
			iconCls: 'isSelectedDisabledIconCls',
			treeEditor: this,
			el: this.renderTo + '.unasoc',
			rootVisible: false,
			autoScroll: true,
            containerScroll: true,
			height: this.height - 33, // -33 : minus padding (10), minus panel.header (23)
			loader: this.rightLoader,
			enableDD: true,
            ddAppendOnly: false,
            dropConfig: {
	            allowContainerDrop: true,
	            allowParentInsert: true,
	            ddGroup: this.renderTo + '.dd',
	            onContainerOver: function(ddSrc, evt, data) {
	                return this.dropAllowed;
	            },
	            onContainerDrop: function(ddSrc, evt, data) {
	                if (data.node.getOwnerTree().id == this.tree.id) {
	                    return false;
	                }
	                this.tree.root.appendChild(data.node);
	                this.tree.treeEditor.store.push(false, data.node);
	                return true;
	            }
	        },
        	ddGroup: this.renderTo + '.dd',
        	tbar:[
        		this.rightFilter,
        		'&#160;',
        		{
	        		tooltip: VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
	        		scope: this,
	        		handler: function() {
	        			if (true === this.hasChanges()) {
	        				Ext.Msg.alert(VIEWPORT_PROPERTIES.TEXT_FUNCTIONDISABLED,VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES);
	        				return;
	        			}
						this.rightRoot.reload();
	        		},
	        		iconCls: 'findIconCls'
	        	}
        	],
        	bbar: rightBbar
		});

		// set root-nodes for trees
		this.leftTree.setRootNode(this.leftRoot);
		this.rightTree.setRootNode(this.rightRoot);
	    
	    // set root-nodes for paging-toolbars
	    leftBbar.setNode(this.leftRoot);
	    rightBbar.setNode(this.rightRoot);
	    
	    // listeners for trees
	    this.addTreeListeners(this.leftTree, true);
	    this.addTreeListeners(this.rightTree, false);
	    
	    // listeners for tree-name-filter-fields
	    this.addNameFilterFieldListeners(this.leftFilter, this.leftTree);
	    this.addNameFilterFieldListeners(this.rightFilter, this.rightTree);

		// show trees
		if (false !== this.preLoad) {
			this.leftTree.render();
			this.leftTree.getRootNode().expand();	
		}
		if (false !== this.preLoad) {
			this.rightTree.render();
			this.rightTree.getRootNode().expand();
		}
				
		// enlarge drop-zones
		this.panel.on('expand',function(){
			if (false === this.preLoad && true !== this.initialLoad) {
				this.leftTree.render();
				this.leftTree.getRootNode().expand();
				this.rightTree.render();
				this.rightTree.getRootNode().expand();	
				this.initialLoad = true;
			}
			this.leftTree.dropZone.setPadding(0,0,this.leftTree.getInnerHeight(),0);
			this.rightTree.dropZone.setPadding(0,0,this.rightTree.getInnerHeight(),0);
		}, this);
		
		if (false === this.collapsible) {
			this.leftTree.dropZone.setPadding(0,0,this.leftTree.getInnerHeight(),0);
			this.rightTree.dropZone.setPadding(0,0,this.rightTree.getInnerHeight(),0);
		}

	},
	
	/**
	 * 
	 */
	addTreeListeners: function(tree, boolAsocUnasoc) {
		
		tree.on('beforenodedrop', function(evt) {
	    	if (evt.dropNode.getOwnerTree().id == evt.tree.id) {
	    		return false;
	    	}
	    },this);
	    
	    // nodedrop-listener
	    if (true === boolAsocUnasoc) {
	    	tree.on('nodedrop', function(evt) {
                this.store.push(true,evt.dropNode);
            },this);
	    } else {	    
		    tree.on('nodedrop', function(evt) {
		    	this.store.push(false,evt.dropNode);
		    },this);
	    }
	    
	    // double-click-listener
	    if (true === boolAsocUnasoc) {
		    tree.on('dblclick',function(node, evt){
		    	this.rightTree.root.appendChild(node);
                this.store.push(false, node);
                return true;
		    },this);
	    } else {
	    	tree.on('dblclick',function(node, evt){
	    		this.leftTree.root.appendChild(node);
                this.store.push(true, node);
                return true;
	    	},this);
	    }
	    
	    // click-listener
	    tree.on('click', function(node, evt) {
	    	if (typeof(evt.handle) != 'undefined') {
		    	
		    	// DBG >>
		    	if (this.DBG) {
			    	THROW({
			    		args:arguments,
			    		propsObj:node,
			    		props:['text','id'],
			    		p:[{n:'evt.handle',o:evt.handle}]
					},this,'addTreeListeners');
		    	}
		    	
				switch(evt.handle) {
					
					case 'edit':
						evt.handle = null;
						delete evt.handle;
						if (typeof(this.editHandler) == 'function') {
							this.editHandler(node);
						}
						break;
						
					default: 
						THROW({e:'ERROR',args:arguments,p:[
				    		{n:'node',o:node.text},
				    		{n:'id',o:node.id},
				    		{n:'UNKNOWN HANDLE:',o:evt.handle}
			    		]},this,'addTreeListeners');	
						evt.handle = null;
						delete evt.handle;
					
				}
	    	}
	    },this);
	},
	
	/**
	 * 
	 */
	addNameFilterFieldListeners: function(field, tree) {
		
		field.on('keyup',function(field, evt){
	    	if (field.getRawValue().trim() === '') {
	    		this.baseParams.filter = null;
	    		delete this.baseParams.filter;
	    		return;
	    	}
			
			if (!this.baseParams) {
	    		this.baseParams = {};
	    	}
	    	this.baseParams.filter = field.getRawValue().trim();
    	},tree.getLoader());
    	
    	field.on('specialkey',function(field, evt){
    		if (evt.getKey() != Ext.EventObject.ENTER) {
				return;
			}
			if (true === this.treeEditor.hasChanges()) {
				Ext.Msg.alert(VIEWPORT_PROPERTIES.TEXT_FUNCTIONDISABLED,VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES);
				return;
			}
			if (field.getRawValue().trim() === '') {
				field.blur();
			}
			this.getRootNode().reload();
    	},tree);
    	
	},
	
	/**
	 * 
	 */
	getStore: function() {
		return this.store;
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		// DBG >>
		if (this.DBG) {
			THROW({o:''+this.store.hasChanges()},this,'hasChanges');
		}
		return this.store.hasChanges();
	},

	/**
	 * 
	 */
	getChanges: function() {
		return this.store.getChanges();
	},
	
	/**
	 * 
	 */
	commit: function() {
		success = this.store.commit();
		if (true === success && false !== this.header) {
			this.panel.toggleHasChangesIcon(false);
		}
		return success;
	},
	
	/**
	 * 
	 */
	reload: function(boolReset) {
		if(false === this.fireEvent('beforeload',this)) {
			return false;
		} else {
			if (true === boolReset) {
				if (false === this.reset()) {
					return;
				}
			}
			this.leftTree.getBottomToolbar().onClick('refresh');
			this.rightTree.getBottomToolbar().onClick('refresh');
			if (false !== this.header) {
				this.panel.toggleHasChangesIcon(false);
			}
			this.fireEvent('load',this);
		}
	},
	
	/**
	 * 
	 */
	reset: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({p:[
				{n:'beforereset',o:''+this.fireEvent('beforereset',{assorter: this})}
			]},this,'reset');		
		}
		
		if(false === this.fireEvent('beforereset',{assorter: this})) {
			return false;
		} else {
			success = this.store.clear();
			if (true === success && false !== this.header) {
				this.panel.toggleHasChangesIcon(false);
			}
			this.fireEvent('reset',{ assorter: this, success: success });
			return success;
		}
	},
	
	/**
	 * @param {String} paging-bar-id
	 * 		the id of the paging-bar to refresh
	 * @param {Boolean} boolUseOtherBar
	 * 		if true the refresh will be called on the other paging-bar of this assorter
	 */
	 refreshPagingBar: function(pagingBarId, boolUseOtherBar) {
	 	// reloads the other panel
	 	if (true === boolUseOtherBar) {
	 		if (this.rightTree.getBottomToolbar().id == pagingBarId) {
	 			// executes refresh of paging-bar
	 			this.leftTree.getBottomToolbar().onClick('refresh');
	 		} else {
	 			// executes refresh of paging-bar
	 			this.rightTree.getBottomToolbar().onClick('refresh');
	 		}
	 		return;
	 	}
	 	// executes refresh of paging-bar
	 	Ext.getCmp(pagingBarId).onClick('refresh');
	 	if (false !== this.header) {
	 		this.panel.toggleHasChangesIcon(false);
	 	}
	 },
	
	/**
	 * initialize the editor
	 */
	initComponent: function() {
		try {			
			
			this.addEvents({
				'MSG': true,
				'beforereset': true,
				'reset': true,
				'beforeload': true,
				'load': true
			});
			
			if (typeof(this.initialConfig.id) == 'undefined') {
				this.id = Ext.id(null, this.type + '.');
			}
			
			// build assorter-store			
			this.store = new Pulse.AssorterPanelStore();
			//setup change-listener for store
			this.store.on('MSG', function(msgString, store) {
				if (msgString == 'change') {
					if (false !== this.header) {	
						if (true === this.hasChanges()) {
							this.panel.toggleHasChangesIcon(true);
						} else {
							this.panel.toggleHasChangesIcon(false);
						}
					}
				}
				this.fireEvent('MSG', msgString, this);
			}, this);

						
		} catch(e) {
			THROW({e:'FATAL',o:e}, this, 'initComponent');
		}
	}
	 	
};
Pulse.AssorterPanel = Ext.extend(Ext.Component, AssorterPanel); // END :: Pulse.AssorterPanel


// Create namespace (PULSE)
// Ext.namespace('PULSE');
 
/**
 * definition of the user-interface for an access-control-tree-node
 */
PULSE.AttachmentTreeNodeUI = function() {
	
    // call parent constructor    
    PULSE.AttachmentTreeNodeUI.superclass.constructor.apply(this, arguments);
};
 
// extend
Ext.extend(PULSE.AttachmentTreeNodeUI, Ext.tree.TreeNodeUI, {

	type: 'AttachmentTreeNodeUI',
	
	DBG: false/*{
		setChanged: false,
		editNode: false,
		deleteNode: false
	}*/,
	
	functionsIconSize: 14,
	
	/**
	 * @Override
	 */
	renderElements : function(n, a, targetNode, bulkRender) {
		
		// retrieve total for the tree's paging-toolbar
		// set total for root-node
		if (typeof(a.total) != 'undefined') {
			n.parentNode.attributes.total = a.total;
		}
		
		//set icon
		if (typeof(a.clazz) != 'undefined' && (a.clazz !== null) 
			&& (a.clazz !== '')) {
			clazzArray = a.clazz.split('.');
			a.iconCls = clazzArray.join('');
		}
	
        // add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

		
		styleString = 'margin-bottom: 2px; padding: 0px; border: 0px; vertical-align: middle;';
		id = Ext.id();
		
		// edit-btn
		editBtn = '';
		editHandler = false;
		if (typeof(n.getOwnerTree().treeEditor) != 'undefined' 
			&& typeof(n.getOwnerTree().treeEditor.editHandler) == 'function') {
			editHandler = true;
			editBtn = '&#160;<a href="#" style="font-weight: bold" id="edtEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="editIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT + '" />' + 
			'</a>&#160;';
		}
		
		// delete-btn
		deleteBtn = '';
		deleteHandler = false;
		if (typeof(n.getOwnerTree().treeEditor) != 'undefined' 
			&& typeof(n.getOwnerTree().treeEditor.deleteHandler) == 'function') {
			deleteHandler = true;
			deleteBtn = '&#160;<a href="#" style="font-weight: bold" id="delEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="deleteIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_REMOVE + '" />' + 
			'</a>&#160;';
		}
		
        href = a.href ? a.href : Ext.isGecko ? "" : "#";
        buf = [
        	'<li class="x-tree-node">',
        	'<div ext:tree-node-id="', n.id, '" class="x-tree-node-el x-tree-node-leaf ', a.cls, '">',
        		'<span class="tabHasChangesIconHidden">*</span>',
            	'<img src="', a.icon || this.emptyIcon, 
            		'" class="x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : ""),
            		(a.iconCls ? " "+a.iconCls : ""),'" unselectable="on" style="width:18px"/>',
            	'<a hidefocus="on" class="x-tree-node-anchor" href="',href,'" tabIndex="1" ',
             	a.hrefTarget ? ' target="'+a.hrefTarget+'"' : '', ' dir="LTR">',
             	'<span unselectable="on" ext:qtip="id: ' + n.id + '">',n.text,'</span></a>',
             	editBtn,deleteBtn,
             "</div>",
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>"
        ].join('');

        if (bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()) {
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf);
        } else {
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
        }
        
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        cs = this.elNode.childNodes;
        
        this.hasChangesNode = cs[0];
        this.iconNode = cs[1];
        this.anchor = cs[2];
        this.textNode = cs[2].firstChild;
        
        // edit
		if (true === editHandler) {
	        var editEl = Ext.get('edtEl_' + n.id + '.' + id);
	        if (typeof(editEl) != 'undefined' && editEl !== null) {
	        	editEl.on('click', this.editNode, this);
	        }
		}
		
		// delete
		if (true === deleteHandler) {
	        var deleteEl = Ext.get('delEl_' + n.id + '.' + id);
	        if (typeof(deleteEl) != 'undefined' && deleteEl !== null) {
	        	deleteEl.on('click', this.deleteNode, this);
	        }
		}
		
		// build quicktip with description if given
		if (typeof(a.description) != 'undefined' && a.description !== '') {
			this.buildQTip(this, a);
		}
        
    },
    
    /**
     * 
     */
    editNode: function(event) {
    	THROW({
    		args: arguments, 
    		props:['id','type','node','node.id','node.text']
		}, this, 'editNode');
		event.handle = 'edit';
    },
    
    /**
     * 
     */
    deleteNode: function(event) {
    	THROW({
    		args: arguments, 
    		props:['id','type','node','node.id','node.text']
		}, this, 'deleteNode');
		event.handle = 'delete';
    },
    
    /**
     * @Override
     */
    updateExpandIcon : function(){
    	/* does nothing */
    },
    
    /**
     * @Override
     */
    getChildIndent : function(){
    	/* does nothing */
    },
    
    /**
     * @Override
     */
    renderIndent : function(){
    	/* does nothing */
    },
    
   	/**
     * builds ext-qtip for node from passed {attributes}
     * 
     * @param ui : PULSE.AttachmentTreeNodeUI
     * @param a : node.attributes
     * 		{
     * 			node.id
     * 			node.description
     * 		} 
     */
    buildQTip: function(ui, a) {
    	if (typeof(ui) == 'undefined' || typeof(a) == 'undefined' || ui === null) {
    		return;
    	}
    	Ext.QuickTips.register({
        	target: ui.textNode,
//        	title: '' + a.text,
        	text: 'id: ' + a.id + '<br />' +
				  '<hr /><span style="font-weight:bold;font-style:italic;">description:</span><br />' +
				  a.description
        });	
    },
    
    /**
     * 
     */
    setChanged: function(bool) {
    	THROW({o:bool},this,'setChanged');
    	if (true === bool) {
    		Ext.fly(this.hasChangesNode).removeClass("tabHasChangesIconHidden");
    		return;
    	}
    	Ext.fly(this.hasChangesNode).replaceClass("","tabHasChangesIconHidden");
    }
    	    	
}); // end of extend


/**
 * @Override
 */ 
PULSE.AttachmentRootTreeNodeUI = function(){
    PULSE.AttachmentRootTreeNodeUI.superclass.constructor.apply(this, arguments);
};
Ext.extend(PULSE.AttachmentRootTreeNodeUI, PULSE.AttachmentTreeNodeUI, {
    render : function(){
        if(!this.rendered){
            /*var */targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    collapse : function(){
    },
    expand : function(){
    }
}); 
// end of file

/**
 * 
 */
DBG.AttachmentsEditor = DBG.apply(DBG.Editor,{
	initComponent: false,
	onRender: false,
	mainPanelExpand: false,
	loadFileBrowserPanel: false,
	initFileBrowserPanel: false,
	MSG: false,
	click: {
		treeReload: false,
		fileBrowserButton: false,
		createButton: false
	},
	addAttachment: false,
	addTreeListeners: false,
	editHandler: false,
	deleteHandler: false,
	initAttachmentEditorPanel: false,
	refreshTree: false,
	fileBrowserTreeRootReload: false
});

/**
 * creates a new attachments-editor from given config.
 */
AttachmentsEditor = {
	
	type: 'AttachmentsEditor',
	
	// defaults
	height: 400,
	
	DBG: false/*DBG.AttachmentsEditor*/,
	
	/**
	 * 
	 */
	onRender: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['renderTo'],args:arguments},this,'onRender');
		}
		
		try {
		
			// the tree's loader
			this.treeLoader = new Ext.tree.TreeLoader({
				dataUrl: this.loadAttachmentsURL,
	            uiProviders: {
	            	'AttachmentTreeNodeUI': PULSE.AttachmentTreeNodeUI
            	},
            	baseParams: {
            		id: this.content.id
            	}
			});
		
			// west-panel - tree (assorted attachments)
			treeCfg = {
				treeEditor: this,
				id: this.id + '.tree',
	    		region: 'west',
	    		loader: this.treeLoader,
				split: true, 
	            width: 250, 
	            minSize: 150, 
	            maxSize: 600,
	            margins: '5 0 5 5',
		        animate: true,
		        creatingNewNode: false,
		        enableDD: true,
				ddAppendOnly: false,
	            dropConfig: {
	            	editorId: this.id,
		            allowContainerDrop: true,
		            allowParentInsert: true,
		            ddGroup: this.id + '.tree.dropGroup',
		            onContainerOver: function(ddSrc, evt, data) {
		            	if (typeof(data.node) != 'object' || data.node === null 
		            		|| typeof(data.node.attributes.type) != 'string'
		            		|| typeof(data.node.attributes.type) === null) {
		            		return this.dropNotAllowed;
		            	}
		            	if (data.node.attributes.type == 'dir') {
		            		return this.dropNotAllowed;
		            	}
		                return this.dropAllowed;
		            },
		            onContainerDrop: function(ddSrc, evt, data) {
		            	if (typeof(data.node) != 'object' || data.node === null 
		            		|| typeof(data.node.attributes.type) != 'string'
		            		|| typeof(data.node.attributes.type) === null) {
		            		return false;
		            	}
		                if (data.node.getOwnerTree().id == this.tree.id || 
		                	data.node.attributes.type == 'dir') {
		                    return false;
		                }
		                Ext.getCmp(this.editorId).addAttachment(data.node);
		            },
		            onNodeOver: function(nodeData, source, evt, data) {
		            	if (typeof(data.node) != 'object' || data.node === null 
		            		|| typeof(data.node.attributes.type) != 'string'
		            		|| typeof(data.node.attributes.type) === null) {
		            		return this.dropNotAllowed;
		            	}
		            	if (data.node.attributes.type == 'dir') {
		            		return this.dropNotAllowed;
		            	}
		                return this.dropAllowed;
		            },
		            onNodeDrop: function(nodeData, source, evt, data) {
		            	if (typeof(data.node) != 'object' || data.node === null 
		            		|| typeof(data.node.attributes.type) != 'string'
		            		|| typeof(data.node.attributes.type) === null) {
		            		return false;
		            	}
		            	if (data.node.getOwnerTree().id == this.tree.id || 
		                	data.node.attributes.type == 'dir') {
		                    return false;
		                }
		                Ext.getCmp(this.editorId).addAttachment(data.node);
		            }
		        },
	        	ddGroup: this.id + '.tree.dropGroup',
		        autoScroll: true, 
		        containerScroll: true, 
		        rootVisible: false,
		        border: true,
				tbar: [
					'->','-',{
						id: this.id + '.tree.reloadButton',
						text: '' + VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
						scope: this,
						handler: function() {
							THROW({args:arguments},this,'click.treeReload');
							if (true === this.hasChanges()) {
								// check
								return;
							}
							this.refreshTree(this.tree);
						},
						iconCls: 'reloadIconCls'
					}
				]
			};
			this.tree = new Ext.tree.TreePanel(treeCfg);
			
			// reload-listener
			this.tree.on('beforeload',function(node){
				if (node.isLoading()) {
					return false;
				}
			});
			
			// click-listener
		    this.tree.on('click', function(node, evt) {
		    	if (typeof(evt.handle) != 'undefined') {
			    	
			    	// DBG >>
			    	if (this.DBG) {
				    	THROW({
				    		args:arguments,
				    		propsObj:node,
				    		props:['text','id'],
				    		p:[{n:'evt.handle',o:evt.handle}]
						},this,'addTreeListeners');
			    	}
			    	
					switch(evt.handle) {
						
						case 'edit':
							evt.handle = null;
							delete evt.handle;
							if (typeof(this.editHandler) == 'function') {
								this.editHandler(node);
							}
							break;
							
						case 'delete':
							evt.handle = null;
							delete evt.handle;
							if (typeof(this.deleteHandler) == 'function') {
								this.deleteHandler(node);
							}
							break;
							
						default: 
							THROW({e:'ERROR',args:arguments,p:[
					    		{n:'node',o:node.text},
					    		{n:'id',o:node.id},
					    		{n:'UNKNOWN HANDLE:',o:evt.handle}
				    		]},this,'addTreeListeners');	
							evt.handle = null;
							delete evt.handle;
						
					}
		    	}
		    },this);
			
			// tree-root
			this.rootNode = new Ext.tree.AsyncTreeNode({
				text: 'root: assigned attachments',
		        type: 'dir',
		        draggable: false, 
		        id: 'source.' + Ext.id()
			});
			
			// set root for tree
			this.tree.setRootNode(this.rootNode);
		
			// center-panel (editors - file-browser)
			this.centerPanel = new Ext.Panel({
				id: this.id + '.center',
				region: 'center',
				margins: '5 5 5 0',
				html: ' <b style="color:red;">TODO</b> ',
				autoScroll: true
			});
		
			// main-panel of the editor
			panelCfg = {
				title: '' + VIEWPORT_PROPERTIES.ATTACHMENTSDOWNLOADS,
				iconCls: 'downloadIconCls',
				id: this.id + '.panel',
				renderTo: this.renderTo,
				collapsible: true, collapsed: true,
				layout: 'border',
				height: this.height, // default 400
				items: [this.tree, this.centerPanel],
				tbar: [{
					id: this.id + '.panel.fileBrowserButton',
					disabled: true,
					text: VIEWPORT_PROPERTIES.FILEBROWSER_TITLE,
					scope: this,
					iconCls: 'foldersIconCls',
					handler: function() {						
						THROW({
							args: arguments
						}, this, 'click.fileBrowserButton');						
						this.loadFileBrowserPanel();						
//						if (true === this.hasChanges()) {
//							// check
//							THROW({
//								e: 'TODO',
//								o: 'confirm for reset chgs and continue',
//								args: arguments
//							}, this, 'click.fileBrowserButton');
//							return;
//						}
						
						// load file-browser for file-select into center-panel
//						this.centerPanel.load({
//							url: this.initFileBrowserURL,
//							method: 'POST',
//							scripts: true,
//							callback: LPCB,
//			                text: 'loading...',
//			                discardUrl: true,
//			                nocache: true,
//			                timeout: 30,
//			                params: {
//			                	id: this.content.id
//			                }
//						});
						
					}
				}, 
				'-']
			};
			this.panel = new Ext.Panel(panelCfg);
		
			// set-up panel for displaying changes
			Pulse.insertHasChangesIcon(this.panel);
			
			// listeners
			this.panel.on('expand',function(){
				
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments,props:['tree']},this,'mainPanelExpand');
				}
				
				if (true === this.panel.isInitialized) {
					return;
				}
				
				try {
					// build tree
					this.tree.render();
					this.tree.getRootNode().expand();
					// enlarge tree-drop-zone
					this.tree.dropZone.setPadding(0,0,this.tree.getInnerHeight(),0);
					
					// enable file-browser-button and load file browser
					if (typeof(this.initFileBrowserURL) == 'string' && this.initFileBrowserURL !== '') {
						Ext.getCmp(this.id + '.panel.fileBrowserButton').enable();
						this.loadFileBrowserPanel();
					}
				} catch (e) {
					description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 					THROW({e:'FATAL',o:{e:e,o:description}}, this, 'onInitialExpand');
				}
				
				this.panel.isInitialized = true;
								
			},this);
		
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'onRender');
		}
	},
	
	/**
	 * @param {Object} node : Ext.tree.AsyncTreeNode
	 */
	addAttachment: function(node) {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				args:arguments,
				o: {
					propsObj: node,
					props: [
						'id','text','attributes.vfsid',
						'attributes.type','attributes.extension',
						'attributes.fileId','attributes.fileName',
						'attributes.httpURI']
				}
			},this,'addAttachment');
		}
		
		try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	THROW({e:'CANNOT CREATE WINDOW EL'},this,'addAttachment');
	        	return;
	        }
		
			this.attNameField = new Ext.form.TextField({
	            fieldLabel: VIEWPORT_PROPERTIES.NAME,
	            id: this.id + '.newAttachmentName', 
	            name: this.id + '.newAttachmentName', 
	            width: 450,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
	            allowBlank: false,
	            fieldClass: 'editorInputField',
	            invalidClass: 'editorInputFieldRed',
	            value: node.attributes.fileName
	        }); 
	        
	        textPanel = new Ext.Panel({
	        	bodyStyle: 'text-align: center;padding-bottom:10px;',
	        	border: false,
	        	html: '' + VIEWPORT_PROPERTIES.TEXT_ADD_ATTACHMENT
	        });
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: this.id + '.newAttachmentForm',
	            name: this.id + '.newAttachmentForm', 
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield', 
	            autoHeight: true, 
	            items: [textPanel,this.attNameField]
	        }); 
	        
	        
	        
	        buttonCfg = { 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_ADD,
	            scope: this,
	            handler: function() {
	            	
	                THROW({args:arguments,props:['addAttachmentURL']},this,'click.createButton');
	                
	                // check
	                if (this.attNameField.getValue() === '' || !this.attNameField.isValid()) {
	                	return;
	                }
	                
	                Ext.Ajax.request({
	                	scope: this,
                    	url: this.addAttachmentURL,
                    	method: 'POST',
                    	success: function(response, options) {
                    		decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								// reload attachments
								this.win.close();
								this.refreshTree(this.tree);
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'ContentRegistryEditor','editNode()');
							}
                    	},
                    	failure: function(response, options) {
                    		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'ContentRegistryEditor','editNode()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ContentRegistryEditor','editNode()');
					        }
                    	},
                    	params: { id: this.content.id, vfsid: node.attributes.vfsid, name: this.attNameField.getValue() }
                    });
                    
	            } 
	        };
	        
	        if (typeof(this.addAttachmentURL) != 'string' || this.addAttachmentURL === '') {
	        	buttonCfg.disabled = true;
	        	buttonCfg.iconCls = 'editDisabledIconCls';
	        }
	        
	        formPanel.addButton(buttonCfg);
	        
	        formPanel.addButton({
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        if (this.el === null) {	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'imageGroupEditorWindow.el'
			    });	        
	        }
        
	        this.win = new Ext.Window({
	        	id: this.id + '.newAttachment.win',
	            title: node.attributes.fileName,
	            iconCls: 'downloadIconCls',
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 130,
	            layout: 'border',
	            items: [ formPanel ],
	            width: 600
	        });
	        
	        this.win.on({
	        	'close': {
	        		scope: this,
	        		fn : function() {
	        			// clean
	        			delete this.attNameField;
	        			delete this.el;
	        			delete this.win;
	        		}	
	        	}
	        });
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
	                      
	        this.attNameField.validate();		
		
		} catch (e) {
			
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? e.description : ''; 			
 			THROW({e:'WINDOW INIT ERROR',o:{e:e,o:description}}, this, 'addAttachment');
		
		} finally {			
			return;			
		}
		
	},
	
	/**
	 * 
	 */
	hasChangesConfirmHandler: function(handler,object) {
		// confirm delete
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
    		VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE + '<br />' +
			VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES, 
    		function(response) {
    			if ('yes' === response) {
    				this.reset();
    				this[handler](object);
    			}
			},
		this);
	},
	
	/**
	 * @param {Object} node : Ext.tree.AsyncTreeNode
	 */
	editHandler: function(node) {

		// DBG >>
		if (this.DBG) {
			THROW({
				args:arguments,
				o: {
					propsObj: node,
					props: [
						'id','text','attributes.file.vfsid',
						'attributes.file.type','attributes.file.extension',
						'attributes.file.fileId','attributes.file.fileName',
						'attributes.file.httpURI']
				}
			},this,'editHandler');
		}
		
		if (true === this.hasChanges()) {
			this.hasChangesConfirmHandler('editHandler',node);
			return;
		}
		
		try {
			if (typeof(this.editAttachmentURL) == 'string' && this.editAttachmentURL !== '') {
				this.centerPanel.load({
					url: this.editAttachmentURL,
					method: 'POST',
					scripts: true,
					callback: LPCB,
	                text: 'loading...',
	                discardUrl: true,
	                nocache: true,
	                timeout: 30,
	                params: {
	                	id: this.content.id,
	                	attachmentid: node.id 
	                }
				});
			}
		} catch (e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'editHandler');
		}
	},
	
	/**
	 * @param {Object} node : Ext.tree.AsyncTreeNode
	 */
	deleteHandler: function(node) {
		
		// DBG >>
		if (this.DBG){
			THROW({
				args:arguments,
				o: {
					propsObj: node,
					props: [
						'id','text','attributes.file.vfsid',
						'attributes.file.type','attributes.file.extension',
						'attributes.file.fileId','attributes.file.fileName',
						'attributes.file.httpURI','deleteAttachmentURL']
				}
			},this,'deleteHandler');
		}
		
		if (true === this.hasChanges()) {
			if ((typeof(this.content.attachment) != 'undefined') 
				&& (node.id == this.content.attachment.id)) {
				this.hasChangesConfirmHandler('deleteHandler',node);
				return;
			}
		}
		
		try {
			if (typeof(this.deleteAttachmentURL) == 'string' && this.deleteAttachmentURL !== '') {
				
				// confirm delete
				Ext.Msg.confirm(
					VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
	        		VIEWPORT_PROPERTIES.MSG_REALLYREMOVE + '<br />' +
					node.text + ' (' + node.id + ')', 
	        		function(response) {
	        			if ('yes' === response) {
	        				Ext.Ajax.request({
			                	scope: this,
			                	url: this.deleteAttachmentURL,
			                	method: 'POST',
			                	success: function(response, options) {
			                		decodedResponse = Ext.decode(response.responseText);
									if (true === decodedResponse.status) {
										// reload attachments
										this.refreshTree(this.tree);
										if ((typeof(this.content.attachment) != 'undefined') 
											&& (options.params.attachmentid == this.content.attachment.id)) {
											this.cleanUpFileBrowser();
											this.loadFileBrowserPanel();
										}
									} else {
										PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'ContentRegistryEditor','editNode()');
									}
			                	},
			                	failure: function(response, options) {
			                		if (typeof(response.responseText) == 'undefined') {
				   						PulseError.Throw({e:'REQUEST.FAILED'},'ContentRegistryEditor','editNode()');
							        } else {
							        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ContentRegistryEditor','editNode()');
							        }
			                	},
			                	params: { id: this.content.id, attachmentid: node.id }
			                });
	        			}
					},
				this);
                
			}
		} catch (e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'deleteHandler');
		}
	},
	
	/**
	 * @param {Object} config
	 */
	initFileBrowserPanel: function(content) {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				args: arguments,
				props: ['content.id','content.clazz','fileBrowserTreeURL'],
				o: {
					o: 'RECEIVED CONTENT',
					propsObj: content, props: ['id','clazz']
				}
			},this,'initFileBrowserPanel');
		}
		
		try {
			
			// checks for changes
			if (true === this.hasChanges()) {
				return;
			}
		
			// check if contents match
			// produces error-panel if check fails
			if (false === this.checkContentMatch(content)) {
				return;
			} else {
				this.content = content;
			}
			
			// checks for existing file-browser/-root and deletes it
			this.cleanUpFileBrowser();
			
			// config for fileBrowserTree
			treeCfg = {
	    		id: this.id + '.fileBrowserTree',	        		
				renderTo: this.content.clazz + '.' + this.content.id + '.fileBrowser',
		        animate: true,
		        creatingNewNode: false, 
		        enableDrag: true,
		        enableDrop: false,
	        	ddGroup: this.id + '.tree.dropGroup',
		        autoScroll: true, 
		        containerScroll: true, 
		        rootVisible: true,
		        border: false,
	            loader: new Ext.tree.TreeLoader({ 
		            dataUrl: this.fileBrowserTreeURL,
		            uiProviders: { 
		            	'FileTreeNodeUI': PULSE.FileTreeNodeUI
	            	}
		        }),
		        tbar: [{
		        	// pulic-vfs-button
		        	text: 'pub',
	                scope: this,
	                handler: function() {
	                	if (true === this.hasChanges()) {
							// check
							return;
						}
						this.refreshTree(this.fileBrowserTree,[{n:'priv',v:false}]);
	                },
	                iconCls: ''
		        },'-',{
		        	// private-vfs-button
		        	text: 'priv',
	                scope: this,
	                handler: function() {
	                	if (true === this.hasChanges()) {
							// check
							return;
						}					    
					    this.refreshTree(this.fileBrowserTree,[{n:'priv',v:true}]);
	                },
	                iconCls: ''
		        },'-','->',{
		        	// reload-button
	                text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	                scope: this,
	                handler: function() {
	                	if (true === this.hasChanges()) {
							// check
							return;
						}
						this.refreshTree(this.fileBrowserTree);
	                },
	                iconCls: 'reloadIconCls'
	            }],
	            root: new Ext.tree.AsyncTreeNode({
			        text: 'FileBrowser for attachments', 
			        draggable: false, 
			        id: 'source.' + Ext.id(),
			        iconCls: 'foldersIconCls'
			    })
	    	};
	    	
	    	// build fileBrowserTree
		    this.fileBrowserTree = new Ext.tree.TreePanel(treeCfg);
		    
		    // reload-listener
			this.fileBrowserTree.on('beforeload',function(node){
				if (node.isLoading()) {
					return false;
				}
			});
		    
		    // dbl-click-handler -> adds attachment
		    this.fileBrowserTree.on('dblclick',function(node, evt){
		    	if (node.attributes.type == 'dir') {
		    		return;
		    	}
		    	if (node.id == this.fileBrowserTree.root.id) {
		    		return;
		    	}
	    		this.addAttachment(node);
		    },this);
		    
			// set this.fileBrowserTreeRoot
			this.fileBrowserTreeRoot = this.fileBrowserTree.getRootNode();
			this.fileBrowserTreeRoot.on('load',function(node){
				loader = node.getOwnerTree().getLoader();
				if (true === loader.baseParams.priv) {
					node.setText('priv');
				} else {
					node.setText('pub');
				}
				
				// DBG >>
				if (this.DBG) {
					THROW({propsObj:loader,props:['baseParams','baseParams.priv']},this,'fileBrowserTreeRootReload');
				}
				
			},this);
			
			// show tree
			this.fileBrowserTree.getRootNode().expand();
			
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'initFileBrowserPanel');
		} finally {
			return;
		}
		
	},
	
	/**
	 * 
	 */
	loadFileBrowserPanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				args: arguments,
				props: ['content.id','content.clazz','initFileBrowserURL']
			},this,'loadFileBrowserPanel');		
		}
		
		try {
			
			// check
			if (true === this.hasChanges()) {
				this.hasChangesConfirmHandler('loadFileBrowserPanel',null);
				return;
			}

			// load file-browser for file-select into center-panel
			this.centerPanel.load({
				url: this.initFileBrowserURL,
				method: 'POST',
				scripts: true,
				callback: LPCB,
	            text: 'loading...',
	            discardUrl: true,
	            nocache: true,
	            timeout: 30,
	            params: {
	            	id: this.content.id
	            }
			}); 
		
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'loadFileBrowserPanel');
		} finally {
			return;
		}
	},
	
	/**
	 * @param {Object} content
	 */
	initAttachmentEditorPanel: function(content) {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				args: arguments,
				props: [
					'content.id','content.clazz','fileBrowserPreviewURL',
					'initAttachmentDescriptionEditorURL','saveAttachmentDescriptionEditorURL'
				],
				o:{
					o: 'RECEIVED CONTENT',
					propsObj: content,
					props: [
						'id','clazz','attachment.id','attachment.clazz',
						'attachment.file.id','attachment.file.clazz'
					]
				}
			},this,'initAttachmentEditorPanel');
		}
		
		try {
			
			// checks for changes
			if (true === this.hasChanges()) {
				return;
			}
		
			// check if contents match
			// produces error-panel if check fails
			if (false === this.checkContentMatch(content)) {
				return;
			} else {
				this.content = content;
			}
			
			// checks for existing file-browser/-root and deletes it
			this.cleanUpFileBrowser();			
			
			// description-panel-cfg
			panelCfg = {
				id: content.attachment.clazz + '.' + content.attachment.id + '.description.panel',
				renderTo: content.attachment.clazz + '.' + content.attachment.id + '.description',
				contentEl: content.attachment.clazz + '.' + content.attachment.id + '.description.content',
				title: VIEWPORT_PROPERTIES.DESCRIPTION,
				collapsible: true, collapsed: true,
				bodyStyle: 'padding:5px;',
				autoScroll: true
			};
			// add edit-button
			if ((typeof(this.initAttachmentDescriptionEditorURL) == 'string' 
					&& this.initAttachmentDescriptionEditorURL !== '') 
				&& (typeof(this.saveAttachmentDescriptionEditorURL) == 'string' 
					&& this.saveAttachmentDescriptionEditorURL !== '')) {
				
				panelCfg.tbar = [
	                {
	                    text: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT,
	                    scope: this,
	                    handler: function() {
	                        AbstractBasicContentEditor.getFCKEditorWindow({
	                            loadURL: this.initAttachmentDescriptionEditorURL,
	                            loadParams: { id: content.id, attachmentid: content.attachment.id },
	                            saveURL: this.saveAttachmentDescriptionEditorURL,
	                            saveParams: { id: content.id, attachmentid:  content.attachment.id },
	                            onSaveSuccess: function() {
	                                thisPanel = Ext.getCmp(content.attachment.clazz + '.' + content.attachment.id + '.description.panel');
	                                thisPanel.reloadContentAction.execute();
	                            }
	                        });                               
	                    },
	                    iconCls: 'editIconCls'
	                },'-'
	            ];
	            
	            panelCfg.reloadContentAction = new Ext.Action({
	                text: 'reloads the content.div',
	                scope: this,
	                handler: function() {
	                    contentEl = Ext.get(content.attachment.clazz + '.' + content.attachment.id + '.description.content');
	                    updateCfg = {
	                        url: this.loadAttachmentDescriptionURL,
	                        method: 'POST',
	                        callback: LPCB,
	                        params: { attachmentid: content.attachment.id }
	                    }; 
	                    contentEl.getUpdater().update(updateCfg);
	                }
	            });
	            
			}
			// build description-panel
			this.attachmentDescriptionPanel = new Ext.Panel(panelCfg);
			
        
	        // disable description-panels' content on expand
	        this.attachmentDescriptionPanel.on('expand',function(p){
	            el = p.getEl().last().child('.x-panel-body');
	            if (true !== el.pulseMask) {
	                Ext.DomHelper.append(el.dom, {cls:"pulseTransparentMask"}, true);
	                el.pulseMask = true;
	            }
	        });			
			
			// builds file-preview-panel
			if (typeof(this.fileBrowserPreviewURL) == 'string' && this.fileBrowserPreviewURL !== '') {
				this.filePreviewPanel = new Ext.Panel({
					renderTo: content.attachment.clazz + '.' + content.attachment.id + '.previewPanel',
					border: false,
					autoLoad: {
						url: this.fileBrowserPreviewURL,
	                    method: 'POST',
	                    callback: LPCB,
	                    scripts: true,
	                    text: 'loading...',
	                    discardUrl: true,
	                    nocache: true,
	                    timeout: 30,
						params: {
							previewNode: content.attachment.file.id
						}
					}
				});
			}
			
			// initialize monitoring for name-text-field
			this.attachmentNameFieldEl = Ext.get(content.attachment.clazz + '.' + content.attachment.id + '.name');
			Pulse.initTextFieldMonitor(this.attachmentNameFieldEl,this,'attachmentNameFieldEl',false);
			
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'initAttachmentEditorPanel');
		} finally {
			return;
		}
	},
	
	/**
	 * @param {Object} content
	 */
	checkContentMatch: function(content) {
		if (content.id != this.content.id) {
			THROW({
				e:'CONTENTS DON\'T MATCH',
				props:['content.id','content.clazz'],
				o:{
					o: 'RECEIVED CONTENT',
					propsObj: content,
					props: ['id','clazz']
				}
			},this,'checkContentMatch');
			return false;
		}		
		return true;
	},
	
	/**
	 * 
	 * checks for existing fileBrowserTree & fileBrowserTreeRoot and deletes it
	 * 
	 * checks for existing attachmentNameFieldEl & filePreviewPanel and deletes it
	 * 
	 */
	 cleanUpFileBrowser: function() {
	 	if (typeof(this.fileBrowserTree) != 'undefined' && this.fileBrowserTree !== null) {
			// cleanup former tree
			delete this.fileBrowserTree;
			delete this.fileBrowserTreeRoot;
		}
		if (typeof(this.filePreviewPanel) != 'undefined' && this.filePreviewPanel !== null) {
			delete this.attachmentNameFieldEl;
			delete this.filePreviewPanel;
		}
	 },
	
	/**
	 * 
	 */
	hasChanges: function() {
		
		if (typeof(this.attachmentNameFieldEl) == 'undefined' || this.attachmentNameFieldEl === null) {
			return false;
		}
		
		return this.attachmentNameFieldEl.changed;
		
	},
	 
	 /**
	  * @param {Object} v (can be null)
	  */
	getChanges: function(v) {
		
		initialV = v;
		if (typeof(v) != 'object' || v === null) {
			v = {};
		} 
		
		if (true === this.hasChanges()) {
			
			if (true === this.attachmentNameFieldEl.changed) {
				v['attachment_' + this.content.attachment.id + '_name'] = this.attachmentNameFieldEl.getValue().trim();
			}
		} else {
			return initialV;
		}
			
		return v;
		
	},
	
	/**
	 * 
	 */
	commit: function() {
		if (false === this.fireEvent('MSG','beforecommit',this)) {
			return false;
		}
		
		try {
		
			this.panel.toggleHasChangesIcon(false);
			if (typeof(this.attachmentNameFieldEl) != 'undefined' && this.attachmentNameFieldEl !== null 
				&& true === this.attachmentNameFieldEl.changed) {			
				this.attachmentNameFieldEl.commit();
				this.refreshTree(this.tree);
			}
			
			this.fireEvent('MSG','commit',this);
			
			return true;
		
		} catch (e) {
			this.fireEvent('MSG','commitFailure',this);
			THROW({e:'commitFailure',o: '' + e},this,'commit');
			return false;
		}
	},
	
	/**
	 * refreshes a given tree
	 * 
	 * @param {Object}/{String} tree, 
	 * 		an Ext.tree.TreePanel 
	 * 		or 
	 * 		id of the Ext.tree.TreePanel
	 * 		or
	 * 		name of the property of this
	 * 		or
	 *  	name of the property of the given scope
	 * 
	 * @param [Array {Object}] baseParamArray [optional], 
	 * 		an array of parameter-objects to be applied to 
	 * 		the baseparams of the tree's tree-loader on the 
	 * 		"on('beforeload').handler"
	 * 
	 * 		{Object} parameter = {
	 * 			n: {String} the name of the parameter
	 * 			v: {Object} the value of ther parameter
	 * 		}
	 * 
	 * @param {Object} scope [optional],
	 * 		if given && typeof(tree) == 'string'
	 * 		tree will be tried to retrieve as property of scope
	 */
	 refreshTree: function(tree, baseParamArray, scope) {
	 	
 		// DBG >>
 		if (this.DBG) {
		 	THROW({
				args: arguments,
				propsObj: tree,
				props: ['id']
			}, ((typeof(scope) != 'object' || scope === null) ? this : scope), 'refreshTree');
 		}
 		
	 	try {
	 		
	 		if (typeof(tree) == 'string') {
	 			tree = this.findTree(tree, scope);
	 		}
	 		
	 		if (typeof(tree) == 'undefined' || tree === null) {
		 		throw('TREE UNDEFINED');
	 		}
	 		
	 		if (typeof(baseParamArray) == 'object' && typeof(baseParamArray.length) == 'number') {
	 			this.fileBrowserTree.getLoader().on('beforeload', function(treeLoader, node) {
			        for (i = 0; i < this.length; i++) {
			        	parameter = this[i];
			        	if (typeof(parameter) == 'object' && parameter !== null) {
			        		treeLoader.baseParams[parameter.n] = parameter.v;
			        	}
			        }
			    },baseParamArray);
	 		}

			tree.getRootNode().reload(function(node){
				if (true === node.isSelected()) {
					node.unselect();
				}
				node.select();
			});

	 	} catch(e) {
	 		
	 		description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			
 			THROW({
 				e: 'FATAL',
 				o:{e:e,o:description},
 				args: arguments,
 				propsObj: tree,
    			props: ['id']
			}, ((typeof(scope) != 'object' || scope === null) ? this : scope), 'refreshTree');
	 		
	 	} finally {
	 		return;
	 	}
	 	
	 },
	 
	 /**
	  * 
	  */
	 findTree: function(treeIdentifierString, scope) {
	 	
 		// DBG >>
 		if (this.DBG) {
	 		THROW({
				args: arguments
			}, ((typeof(scope) != 'object' || scope === null) ? this : scope), 'findTree');
 		}
 		
	 	try {
	 		
	 		tree = Ext.getCmp(treeIdentifierString);
	 		if (typeof(tree) == 'object' && tree !== null
	 			&& typeof(tree.getXType) == 'function' && tree.getXType() == 'treepanel') {
	 			return tree;
	 		}
	 		
	 		if (typeof(scope) == 'object' && scope !== null) {
	 			tree = scope[treeIdentifierString];
	 		} else {
	 			tree = this[treeIdentifierString];
	 		}
	 		
	 		if (typeof(tree) == 'object' && tree !== null
	 			&& typeof(tree.getXType) == 'function' && tree.getXType() == 'treepanel') {
	 			return tree;
	 		}
	 		
	 	} catch(e) {
	 		description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({
 				e: 'FATAL',
 				o:{e:e,o:description},
 				args: arguments
			}, ((typeof(scope) != 'object' || scope === null) ? this : scope), 'findTree');
	 	} finally {
	 		return;
	 	}
	 	
	 },
	
	/**
	 * 
	 */
	reset: function() {
		if (false === this.fireEvent('MSG','beforereset',this)) {
			return false;	
		}
		
		try {
		
			this.panel.toggleHasChangesIcon(false);
			if (typeof(this.attachmentNameFieldEl) != 'undefined' && this.attachmentNameFieldEl !== null) {
				this.attachmentNameFieldEl.reset();
			}			
			
			this.fireEvent('MSG','reset',this);
			
			return true;
		
		} catch (e) {
			this.fireEvent('MSG','resetFailure',this);
			THROW({e:'RESETFAILURE',o: '' + e},this,'reset');
			return false;
		}
	},
	
	/**
	 * initializes this componenet with a given config.
	 */
	initComponent: function() {
		
		try {
			
			// call super
			Pulse.AttachmentsEditor.superclass.initComponent.call(this);
			
			if (typeof(this.id) == 'undefined' || this.id === null) {
				this.id = this.type + '.' + Ext.id();
			}
		
			// add common events
			this.addEvents({
				
				
			   /**
				* 	
				* 	msgs:
				* 
				* 	beforereset
				* 	reset
				* 	beforecommit
				* 	commit
				* 
				*/
				
				'MSG': true
				
			});
		
		
			if ((typeof(this.renderTo) == 'undefined' || this.renderTo === null)
				&& (typeof(this.content) != 'undefined' && typeof(this.content.clazz) != 'undefined' 
					&& typeof(this.content.id) != 'undefined')) {
				this.id = this.content.clazz + '.' + this.content.id + '.attachments.editor';
				this.renderTo = this.content.clazz + '.' + this.content.id + '.attachments';
			}
			
			
		
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'initComponent');
		}
		
		// DBG >>
		if (this.DBG) {	
			THROW({
				args:arguments,
				props:[
					'id','renderTo','content.clazz','content.id',
					'loadAttachmentsURL','initFileBrowserURL',
					'fileBrowserTreeURL','addAttachmentURL',
					'editAttachmentURL','fileBrowserPreviewURL',
					'initAttachmentDescriptionEditorURL','saveAttachmentDescriptionEditorURL'
				]
			},this,'initComponent');
		}
	}
	
};
Pulse.AttachmentsEditor = Ext.extend(Pulse.Editor,AttachmentsEditor);
/**
 * builds a new AttributeCheckOrValueEditor from given config
 */
AttributeCheckOrValueEditor = {
	
	type: 'AttributeCheckOrValueEditor',
	
	// used for internal storage
	fieldNamePrefix: 'field_',
	
	DBG: {
		initComponent: false,
		initFieldMonitoring: false,
		initFieldMonitoringSwitch: true,
		initFieldMonitoringSwitch_Input: true,
		
		hasChanges: false
	},
	
	/**
	 * 
	 */
	initFieldMonitoring: function() {
		THROW({props:['id','check.clazz','check.parameterNames','pEditor']},this,'initFieldMonitoring');
		
		for (i = 0; i < this.check.parameterNames.length; i++) {
			pName = this.check.parameterNames[i];
			
			unifier = '';
			if (typeof(this.check.parameterFieldUnifier) == 'string') {
				unifier = this.check.parameterFieldUnifier;
			}
			
			el = Ext.get(pName + '.id' + unifier);
			
			if (el !== null) {
				
				fieldName = this.fieldNamePrefix  + pName;
				nodeName = el.dom.nodeName.toUpperCase();
				
				switch(nodeName) {
					
					case 'INPUT':
						
						switch(el.dom.type.toUpperCase()) {
							
							case 'TEXT':
								Pulse.initTextFieldMonitor(el, this, fieldName, true);
								break;
								
							case 'CHECKBOX':
                                Pulse.initCheckBoxMonitor(el, this, fieldName);
                                break;
							
							default: 
								THROW({e:'TODO',o:'create case'},this,'initFieldMonitoringSwitch_Input');
								return;
						}
						
						break;
					
					case 'SELECT':
						Pulse.initSelectBoxMonitor(el, this, fieldName);
						break;
					
					default: 
						THROW({e:'TODO',o:'create case for: ' + nodeName},this,'initFieldMonitoringSwitch');
						return;
				}
				
				
				// store field internally
				this[fieldName] = el;
				
			}
			
		}
		
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		try {
			bool = false;
			
//			FATAL({check:this.check,pN:this.check.parameterNames,pl:this.check.parameterNames.length},this,'hasChanges','preFor');
			
//			params=[];			
			
			for (i = 0; i < this.check.parameterNames.length; i++) {
				pName = this.check.parameterNames[i];
				fieldName = this.fieldNamePrefix + pName;
				if (this[fieldName]) {
					bool = bool || this[fieldName].changed;
				}
				/*
				params.push({n:i,o:bool});
				params.push({n:1,o:fieldName});
				params.push({n:1,o:this[fieldName]});
				*/
				if (true === bool) {
					break;
				}
			}
//			THROW({p:params},this,'hasChanges');				
			
			if (this.DBG) {
				THROW({o:bool},this,'hasChanges');
			}
			
			return bool;
		} catch(e) {
			FATAL(e,this,'hasChanges','FATAL');
		}
	},
	
	/**
	 * @param v, a values object to apply the changes to
	 * 
	 * @return	[Array of {Object}]
	 * 
	 * 			with: object = {
	 * 				name: {String} parameter-name
	 * 				value: {String} parameter-value
	 * 			} 			
	 * 
	 */
	getChanges: function(v) {
		
		changes = [];
		
		for (i = 0; i < this.check.parameterNames.length; i++) {
			pName = this.check.parameterNames[i];
			fieldName = this.fieldNamePrefix + pName;
//			alert('fieldName: ' + fieldName);			
			if (this[fieldName]) {
				if (typeof(this[fieldName].getValue) == 'function') {
					changes.push({name:pName,value:this[fieldName].getValue()});
				} else {
					THROW({e:'TODO',o:'implement .getValue()'},this,fieldName);
				}
			}
		}
		
		if (typeof(v) == 'object' && v !== null) {
			for (i = 0; i < changes.length; i++) {
				v[changes[i].name] = changes[i].value;
			}
			return v;
		}
		
		return changes;
		
	},
	
	/**
	 * 
	 */
	commit: function() {
		if (false === this.fireEvent('beforecommit',this)) {
			return;
		}
		
		for (i = 0; i < this.check.parameterNames.length; i++) {
			pName = this.check.parameterNames[i];
			fieldName = this.fieldNamePrefix + pName;
			
			if (this[fieldName]) {
				if (typeof(this[fieldName].commit) == 'function') {
					this[fieldName].commit();
				} else {
					THROW({e:'TODO',o:'implement .commit()'},this,fieldName);
				}
			}
			
		}
		
		this.fireEvent('commit',this);
	},
	
	/**
	 * 
	 */
	fieldReset: function() {
		if (false === this.hasChanges()) {
			this.fireEvent('MSG','reset',this);
		}
	},
	
	/**
	 * 
	 */
	reset: function() {
//		alert('reset: ' + this + ', ' + this.id);
		if (false === this.fireEvent('beforereset',this)) {
			return;
		}
		
		if (false === this.hasChanges()) {
//			alert('abort');
			return;
		}
		
		for (i = 0; i < this.check.parameterNames.length; i++) {
			pName = this.check.parameterNames[i];
			fieldName = this.fieldNamePrefix + pName;
						
			if (this[fieldName] && true === this[fieldName].changed) {
				if (typeof(this[fieldName].reset) == 'function') {
					this[fieldName].reset();
				} else {
					THROW({e:'TODO',o:'implement .reset()'},this,fieldName);
				}
			}
		}
		
		this.fireEvent('reset',this);
	},
	
	/**
	 * 
	 */
	initComponent: function() {
		
		THROW({props:['id','check.clazz','check.parameterNames','pEditor']},this,'initComponent');
		
		try {			
			
			this.addEvents({
				'MSG': true,
				'beforereset': true,
				'reset': true,
				'beforecommit': true,
				'commit': true
			});
			
			if (typeof(this.initialConfig.id) == 'undefined') {
				this.id = Ext.id(null, this.type + '.');
			}
			
			this.tab = this.pEditor.tab;
			this.panel = this.pEditor.panel;
			
			this.initFieldMonitoring();

						
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:'' + e + description}, this, 'initComponent');
		}
		
	}
};
Pulse.AttributeCheckOrValueEditor = Ext.extend(Ext.Component,AttributeCheckOrValueEditor);


/**
 * builds a new AttributeEditor from given config
 */
AttributeEditor = {
	
	// type
	type: 'AttributeEditor',
	
	// props
	tab: null,
	
	// basic fields
	isRequiredEl: null, // checkbox
	
	// DBG
	DBG: false/*{
		initComponent: false,
		initTab: false,
		loadChecksEditorPanel: false,
		initCheckEditor: false,
		buildAssorters: false,
		setAttributeCheck: false,
		initSubEditor: false,
		loadSubeditor: false,
		registerEditorMSG: false,
		editorMSG: false,
		MSG: false
	}*/,
	
	/**
	 * 
	 */
	onRender: function() {
		THROW({
			e:'renderTo: unused',
			args:arguments
		},this,'onRender');
	},
	
//	/**
//	 * 
//	 */
//	registerEditorMSG: function(editor) {
//		
//		// DBG >>
//		if (this.DBG) {
//			THROW({
//				args:arguments,
//				propsObj:editor,
//				props:['id']
//			},this,'registerEditorForMsg');
//		}
//		
//		try {
//			
//			editor.on('MSG',function(msgString, _editor){
//				
//				// DBG >>
//				if (this.DBG) {
//					THROW({
//						args:arguments
//					},this,'MSG');
//				}
//				
//				this.editorMSG(msgString,_editor);				
//				
//			},this);
//			
//		} catch(e) {
//			if (this.DBG) {
//				FATAL(e,this,'initOrderCodeMonitor');
//			}
//		}
//	},
//	
//	/**
//	 * 
//	 */
//	editorMSG: function(msgString, editor) {
//		
//		// DBG >>
//		if (this.DBG) {
//			THROW({
//				args: arguments,
//				propsObj: editor,
//				props:['id']
//			},this,'editorMSG');
//		}
//		
//		if ( (msgString == 'reset' && true === this.hasChanges()) 
//			|| msgString == 'commit' ) {
//			return;
//		}
//		this.fireEvent('MSG',msgString,this);
//	},
	
	/**
	 * 
	 */
	initTab: function() {
		THROW({props:['tab','tab.id','tab.pEditor']},this,'initTab');
		
		if (typeof(this.tab) != 'undefined') {
			
			// initialize tab if !tab.isInitialized
			if (true !== this.tab.isInitialized) {			
				
				// add buttons to bar
				
				// save-button-config
				saveButtonConfig = {
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope: this,
					handler: function() {
						if (false === this.tab.isDirty) {
							return;
						}
						if (false === this.hasChanges()) {
							PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
							return;
						}
						
						// retrieve basic fields values
						v = this.getChanges();
						
						Ext.Ajax.request({
							url: this.saveURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									
									// commit changes
									this.commit();
									
									// save success message
									PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'savesuccess'}]});
				            		
				        		} else {
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.savePermissions');
								}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.savePermissions');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.savePermissions');
						        }
							},
							params: v
						});
						
					},
					iconCls: 'saveIconCls'
				};				
				
				// add buttons
				tabTbar = this.tab.getTopToolbar().insertButton(0, [
					saveButtonConfig,
					new Ext.Toolbar.Separator()
				]);
				
				// used to retrieve change-state in vp-controller
//				this.tab.pEditor = this;
//				
//				// insert hasChangesIcon for tab
//				PULSE_VIEWPORT_CONTROLLER.insertHasChangesIcon(this.tab);
				
				this.tab.setEditor(this);
				
				// set initialized-flag	
				this.tab.isInitialized = true;
			
			}
		}
	},
	
	/**
	 * sets up change-monitoring for basic fields
	 * 
	 * 		- isRequired
	 * 
	 */
	initFieldMonitoring: function() {
		// isRequired
		this.isRequiredEl = Ext.get(this.clazz + '.' + this.attributeId + '.isRequired');
		Pulse.initCheckBoxMonitor(this.isRequiredEl, this, 'isRequiredEl');
	},
	
	/**
	 * 
	 */
	initChecksEditorPanel: function() {
		
		if (typeof(this.loadChecksURL) == 'string' && this.loadChecksURL !== '') {
				
				removeButtonCfg = {
					id: this.id + '.remove.check.button',
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_REMOVE,
					scope: this,
					disabled: true,
					handler: function() {
						
						// proceed with confirm
						Ext.Msg.confirm(
							VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
				    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
				    		function(response) {
				    			if ('yes' === response) {
				    				this.setAttributeCheck('');
			    				}
				    		},
				    	this);					
						
					},
					iconCls: 'deleteIconCls'
				};
				
				this.checksEditorPanel = new Ext.Panel({
					title: VIEWPORT_PROPERTIES.ATTRIBUTECHECKS,
					iconCls: 'attributeCheckIconCls',
					renderTo: this.clazz + '.' + this.attributeId + '.checks',
					autoScroll: true, collapsed:true, collapsible:true,
					html: '...',
            		tbar: [removeButtonCfg,'-']
				});
				this.checksEditorPanel.on('expand', function() {
					if (true !== this.checksEditorPanel.initialLoad) {
						this.checksEditorPanel.initialLoad = true;
						this.loadChecksEditorPanel();
					}
				}, this);
				
				Pulse.insertHasChangesIcon(this.checksEditorPanel);
			}
		
	},
	
	/**
	 * 
	 */
	loadChecksEditorPanel: function() {
		
		THROW({props:['tab','tab.id','tab.pEditor','loadChecksURL']},this,'loadChecksEditorPanel');
		
		this.checksEditorPanel.load({
			url: this.loadChecksURL,
			method: 'POST',
			scripts: true,
			callback: LPCB,
			params: { id: this.attributeId },
            text: 'loading...',
            discardUrl: true,
            nocache: true,
            timeout: 30
		});
		
	},
	
	/**
	 * 
	 */
	initSubEditor: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['loadSubEditorURL','clazz','attributeId']},this,'initSubEditor');
		}
		
		try {
		
			if (typeof(this.loadSubEditorURL) != 'string' || this.loadSubEditorURL === '') {
				if (this.DBG) {
					FATAL({e:'URL UNDEFINED',props:['loadSubEditorURL']},this,'initSubEditor');
				}
				return;
			}
			
			subEditorPanel = new Pulse.SubEditorPanel({
				height: 250,
				id: this.clazz + '.' + this.attributeId + '.subEditor',
				masterEditor: this,
				url: this.loadSubEditorURL,
				params: { id: this.attributeId },
				renderTo: this.clazz + '.' + this.attributeId + '.subEditorDiv'
			});
			
			subEditorPanel.on('expand',function(){
				this.initializePanel();
			});
			
			this.addSubEditor(subEditorPanel);
		
		} catch(e) {
			FATAL(e,this,'initSubEditor');
		}
		
	},	
	
	/**
	 * 
	 */
	initCheckEditor: function(config) {
		
		THROW({propsObj:config,props:['clazz','parameterNames']},this,'initCheckEditor');
		
		Ext.getCmp(this.id + '.remove.check.button').enable();
		
		this.checksEditor = new Pulse.AttributeCheckOrValueEditor({
			check: config,
			pEditor: this
		});
		
		this.checksEditor.on('MSG',function(msgString,editor) {
			THROW({args:arguments},this,'MSG');
			if (msgString == 'reset') {
				this.tab.toggleHasChangesIcon(false);
				this.checksEditorPanel.toggleHasChangesIcon(false);
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				return;
			} else if (msgString == 'change') {
				if (true === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(true);
					this.checksEditorPanel.toggleHasChangesIcon(true);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
				} else {
					this.tab.toggleHasChangesIcon(false);
					this.checksEditorPanel.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}
				return;
			}
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
			
		},this);
		
	},
	
	/**
	 * 
	 */
	buildAssorters: function() {
		THROW({props:[
			'id','clazz','editRoleURL',
			'loadAdminEditRolesURL','loadAdminViewRolesURL',
			'loadSelfEditRolesURL','loadSelfViewRolesURL',
			'loadTriggeredRolesURL'
		]},this,'buildAssorters');
//		return;
		
		// show admin-edit-roles-assorter
		if (typeof(this.loadAdminEditRolesURL) == 'string' && this.loadAdminEditRolesURL !== '') {
			this.adminEditRolesEditor = new Pulse.AssorterPanel({
				preLoad: false,
				title: '' + VIEWPORT_PROPERTIES.EDITATTRIBUTE,
				iconCls: 'editAttributeIconCls',
				renderTo: this.clazz + '.' + this.attributeId + '.admin.edit.roles',
				loadURL: this.loadAdminEditRolesURL + '?id=' + this.attributeId,
				editURL: this.editRoleURL,
				editHandler: function(node) {
					RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.adminEditRolesEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (true === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
					} else {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					}
					return;
				}
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});	
			},this);
			this.adminEditRolesEditor.on('reset',function(obj){
//				THROW({args:arguments,propsObj:obj,props:['success','assorter']},this,'...');
				if (true === obj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}				
			},this);
		}
		
		// show admin-view-roles-assorter
		if (typeof(this.loadAdminViewRolesURL) == 'string' && this.loadAdminViewRolesURL !== '') {
			this.adminViewRolesEditor = new Pulse.AssorterPanel({
				preLoad: false,
				title: '' + VIEWPORT_PROPERTIES.VIEWATTRIBUTE,
				iconCls: 'viewAttributeIconCls',
				renderTo: this.clazz + '.' + this.attributeId + '.admin.view.roles',
				loadURL: this.loadAdminViewRolesURL + '?id=' + this.attributeId,
				editURL: this.editRoleURL,
				editHandler: function(node) {
					RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.adminViewRolesEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (true === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
					} else {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					}
					return;
				}
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});	
			},this);
			this.adminViewRolesEditor.on('reset',function(obj){
//				THROW({args:arguments,propsObj:obj,props:['success','assorter']},this,'...');
				if (true === obj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}				
			},this);
		}
		
		
		// show self-edit-roles-assorter
		if (typeof(this.loadSelfEditRolesURL) == 'string' && this.loadSelfEditRolesURL !== '') {
			this.selfEditRolesEditor = new Pulse.AssorterPanel({
				preLoad: false,
				title: '' + VIEWPORT_PROPERTIES.EDITATTRIBUTE,
				iconCls: 'editAttributeIconCls',
				renderTo: this.clazz + '.' + this.attributeId + '.self.edit.roles',
				loadURL: this.loadSelfEditRolesURL + '?id=' + this.attributeId,
				editURL: this.editRoleURL,
				editHandler: function(node) {
					RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.selfEditRolesEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (true === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
					} else {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					}
					return;
				}
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
			},this);
			this.selfEditRolesEditor.on('reset',function(obj){
//				THROW({args:arguments,propsObj:obj,props:['success','assorter']},this,'...');
				if (true === obj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}				
			},this);
		}
		
		// show self-view-roles-assorter
		if (typeof(this.loadSelfViewRolesURL) == 'string' && this.loadSelfViewRolesURL !== '') {
			this.selfViewRolesEditor = new Pulse.AssorterPanel({
				preLoad: false,
				title: '' + VIEWPORT_PROPERTIES.VIEWATTRIBUTE,
				iconCls: 'viewAttributeIconCls',
				renderTo: this.clazz + '.' + this.attributeId + '.self.view.roles',
				loadURL: this.loadSelfViewRolesURL + '?id=' + this.attributeId,
				editURL: this.editRoleURL,
				editHandler: function(node) {
					RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.selfViewRolesEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (true === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
					} else {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					}
					return;
				}
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
			},this);
			this.selfViewRolesEditor.on('reset',function(obj){
//				THROW({args:arguments,propsObj:obj,props:['success','assorter']},this,'...');
				if (true === obj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}				
			},this);
		}
		
		// show triggered-roles-assorter
		if (typeof(this.loadTriggeredRolesURL) == 'string' && this.loadTriggeredRolesURL !== '') {
			this.triggeredRolesEditor = new Pulse.AssorterPanel({
				preLoad: false,
				title: '' + VIEWPORT_PROPERTIES.TRIGGEREDROLES,
				iconCls: 'roleIconCls',
				renderTo: this.clazz + '.' + this.attributeId + '.triggered.roles',
				loadURL: this.loadTriggeredRolesURL + '?id=' + this.attributeId,
				editURL: this.editRoleURL,
				editHandler: function(node) {
					RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.triggeredRolesEditor.on('MSG',function(msgString,editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (true === this.hasChanges()) {
						this.tab.toggleHasChangesIcon(true);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'change'}]});
					} else {
						this.tab.toggleHasChangesIcon(false);
						PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
					}
					return;
				}
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
			},this);
			this.triggeredRolesEditor.on('reset',function(obj){
//				THROW({args:arguments,propsObj:obj,props:['success','assorter']},this,'...');
				if (true === obj.success && false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				}				
			},this);
		}
		
		
	},
	
	/**
	 * 
	 */
	 setAttributeCheck: function(clazz) {
	 	THROW({args:arguments,props:['setCheckURL']},this,'setAttributeCheck');
	 	if (typeof(this.setCheckURL) != 'string' || this.setCheckURL === '') {
	 		return;
	 	}
	 	
	 	Ext.Ajax.request({
			url: this.setCheckURL,
			method: 'POST',
			scope: this,
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					
					// cleanup
					if (options.params.clazz === '') {
						// reset panel
						this.checksEditorPanel.toggleHasChangesIcon(false);
						// delete former checks-editor
						delete this.checksEditor;
						// disable button
						Ext.getCmp(this.id + '.remove.check.button').disable();
						// reset editor
						if (false === this.hasChanges()) {
							this.tab.toggleHasChangesIcon(false);
							PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
						}
					}
					
					// re-initialize checksPanel
					this.loadChecksEditorPanel();

        		} else {
					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'setAttributeCheck');
				}
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({e:'REQUEST.FAILED'},this.type,'setAttributeCheck');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'setAttributeCheck');
		        }
			},
			params: { id: this.attributeId, clazz: clazz }
		});
	 	
	 },
	
	/**
	 * returns if this editor has changes
	 * 
	 * @return {Boolean}
	 */
	hasChanges: function() {

		// call super
		superBool = Pulse.AttributeEditor.superclass.hasChanges.call(this);
		
		return ((typeof(this.adminEditRolesEditor) != 'undefined' && this.adminEditRolesEditor.hasChanges())
			|| (typeof(this.adminViewRolesEditor) != 'undefined' && this.adminViewRolesEditor.hasChanges())
			|| (typeof(this.selfEditRolesEditor) != 'undefined' && this.selfEditRolesEditor.hasChanges())
			|| (typeof(this.selfViewRolesEditor) != 'undefined' && this.selfViewRolesEditor.hasChanges())
			|| (typeof(this.triggeredRolesEditor) != 'undefined' && this.triggeredRolesEditor.hasChanges())
			|| (typeof(this.checksEditor) != 'undefined' && this.checksEditor.hasChanges())
			|| superBool
			|| (typeof(this.isRequiredEl) !== null && this.isRequiredEl.changed));
	},
	
	/**
	 * returns the values of the roles-assorters
	 * 
	 * @return {Object} values = {
	 * 				id: {Number},
	 * 
	 * 				isRequired: {Boolean}					if changed
	 * 
	 * 				addAdminEditRoles: {Array}ids,			if changed
	 * 				remAdminEditRoles: {Array}ids,			if changed
	 * 
 	 *				addAdminViewRoles: {Array}ids,			if changed
  	 *				remAdminViewRoles: {Array}ids,			if changed
  	 * 
  	 * 				addSelfEditRoles: {Array}ids,			if changed
	 * 				remSelfEditRoles: {Array}ids,			if changed
	 * 
  	 * 				addSelfViewRoles: {Array}ids,			if changed
  	 *				remSelfViewRoles: {Array}ids,			if changed
  	 * 
  	 * 				addTriggeredRoles: {Array}ids,			if changed
  	 *				remTriggeredRoles: {Array}ids,			if changed
  	 * 
  	 * 				the values of the changed checks...
	 * 			};
	 */
	getChanges: function() {
		
		try {
		
			v = { 
				id: this.attributeId
			};
			
			// add isRequired if changed
			if (true === this.isRequiredEl.changed) {
				v.isRequired = this.isRequiredEl.dom.checked;
			}
			
			// add admin-edit-roles if changed
			if (typeof(this.adminEditRolesEditor) != 'undefined' && this.adminEditRolesEditor !== null) {
				if (true === this.adminEditRolesEditor.hasChanges()) {
					chgs = this.adminEditRolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addAdminEditRoles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remAdminEditRoles = chgs.unasoc;
					}
				}
			}
			
			// add admin-view-roles if changed
			if (typeof(this.adminViewRolesEditor) != 'undefined' && this.adminViewRolesEditor !== null) {
				if (true === this.adminViewRolesEditor.hasChanges()) {
					chgs = this.adminViewRolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addAdminViewRoles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remAdminViewRoles = chgs.unasoc;
					}
				}
			}
			
			// add self-edit-roles if changed
			if (typeof(this.selfEditRolesEditor) != 'undefined' && this.selfEditRolesEditor !== null) {
				if (true === this.selfEditRolesEditor.hasChanges()) {
					chgs = this.selfEditRolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addSelfEditRoles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remSelfEditRoles = chgs.unasoc;
					}
				}
			}
			
			// add self-view-roles if changed
			if (typeof(this.selfViewRolesEditor) != 'undefined' && this.selfViewRolesEditor !== null) {
				if (true === this.selfViewRolesEditor.hasChanges()) {
					chgs = this.selfViewRolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addSelfViewRoles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remSelfViewRoles = chgs.unasoc;
					}
				}
			}
			
			// add triggered-roles if changed
			if (typeof(this.triggeredRolesEditor) != 'undefined' && this.triggeredRolesEditor !== null) {
				if (true === this.triggeredRolesEditor.hasChanges()) {
					chgs = this.triggeredRolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addTriggeredRoles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remTriggeredRoles = chgs.unasoc;
					}
				}
			}
			
			// add checks-changes
			if (typeof(this.checksEditor) != 'undefined' && this.checksEditor !== null) {
				if (true === this.checksEditor.hasChanges()) {
					chgs = this.checksEditor.getChanges();
					for (i = 0; i < chgs.length; i++) {
						v[chgs[i].name] = chgs[i].value;
					}
				}
			}
			
			// call super
			v = Pulse.AttributeEditor.superclass.getChanges.call(this, v);
			
			return v;
		
		} catch (e) {
			THROW({e:'FATAL',o:e}, this, 'getChanges');
		}
	},
	
	/**
	 * "Commits" field values and restets changed state. Use after successfull save.
	 */
	commit: function() {
		
		this.tab.toggleHasChangesIcon(false);
		
		// isRequired
		if (typeof(this.isRequiredEl) != 'undefined' && this.isRequiredEl !== null) {
		if (this.isRequiredEl.changed === true) {
			this.isRequiredEl.commit();
		}
		}
		
		// admin-edit-roles-editor
		if (typeof(this.adminEditRolesEditor) != 'undefined' && this.adminEditRolesEditor !== null) {
			this.adminEditRolesEditor.commit();
		}
		
		// admin-view-roles-editor
		if (typeof(this.adminViewRolesEditor) != 'undefined' && this.adminViewRolesEditor !== null) {
			this.adminViewRolesEditor.commit();
		}
		
		// self-edit-roles-editor
		if (typeof(this.selfEditRolesEditor) != 'undefined' && this.selfEditRolesEditor !== null) {
			this.selfEditRolesEditor.commit();
		}
		
		// self-view-roles-editor
		if (typeof(this.selfViewRolesEditor) != 'undefined' && this.selfViewRolesEditor !== null) {
			this.selfViewRolesEditor.commit();
		}
		
		// triggered-roles-editor
		if (typeof(this.triggeredRolesEditor) != 'undefined' && this.triggeredRolesEditor !== null) {
			this.triggeredRolesEditor.commit();
		}
		
		// chekEditor
		if (typeof(this.checksEditor) != 'undefined' && this.checksEditor !== null) {
			this.checksEditorPanel.toggleHasChangesIcon(false);
			this.checksEditor.commit();
		}
		
		// call super
		Pulse.AttributeEditor.superclass.commit.call(this);
		
	},
	
	/**
	 * resets editors.
	 * 
	 * !!! does not update ui !!!
	 */
	resetEditors: function() {
		
		// isRequired-checkBox
		if (typeof(this.isRequiredEl) != 'undefined' && this.isRequiredEl !== null) {
			this.isRequiredEl.reset();
		}
		
		// admin-edit-roles-editor
		if (typeof(this.adminEditRolesEditor) != 'undefined' && this.adminEditRolesEditor !== null) {
			this.adminEditRolesEditor.reset();
		}
		
		// admin-view-roles-editor
		if (typeof(this.adminViewRolesEditor) != 'undefined' && this.adminViewRolesEditor !== null) {
			this.adminViewRolesEditor.reset();
		}
		
		// self-edit-roles-editor
		if (typeof(this.selfEditRolesEditor) != 'undefined' && this.selfEditRolesEditor !== null) {
			this.selfEditRolesEditor.reset();
		}
		
		// self-view-roles-editor
		if (typeof(this.selfViewRolesEditor) != 'undefined' && this.selfViewRolesEditor !== null) {
			this.selfViewRolesEditor.reset();
		}
		
		// triggered-roles-editor
		if (typeof(this.triggeredRolesEditor) != 'undefined' && this.triggeredRolesEditor !== null) {
			this.triggeredRolesEditor.reset();
		}
		
		// chekEditor
		if (typeof(this.checksEditor) != 'undefined' && this.checksEditor !== null) {
			this.checksEditorPanel.toggleHasChangesIcon(false);
			this.checksEditor.reset();
		}
		
	},
	
	/**
	 * resets the editor.
	 * 
	 *  !!! does not update ui (of AssorterPanels) !!!
	 */
	reset: function() {
		
		// call super
		Pulse.AttributeEditor.superclass.reset.call(this);
				
		this.tab.toggleHasChangesIcon(false);
		PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
		this.resetEditors();
	},
	
	/**
	 * 
	 */
	initComponent: function() {
		
		// call super
		Pulse.AttributeEditor.superclass.initComponent.call(this);
		
		this.tab = Ext.getCmp(this.clazz + '.' + this.attributeId + '.editor');
		
		// DBG >>
		if (this.DBG) {	
			THROW({
				args:arguments,
				props:[
					'id','clazz','attributeId','tab','tab.id','saveURL','editRoleURL',
					'loadAdminEditRolesURL','loadAdminViewRolesURL',
					'loadSelfEditRolesURL','loadSelfViewRolesURL',
					'loadTriggeredRolesURL',
					'loadChecksURL','setCheckURL',
					'loadSubEditorURL'
				]
			},this,'initComponent');
		}
		
		try {
		
			this.initTab();
			
			this.initFieldMonitoring();
			
			this.initChecksEditorPanel();
			
			this.initSubEditor();
			
			this.buildAssorters();
		
		} catch(e) {
			FATAL(e, this, 'initComponent');
		}
				
	}
	 	
}; 
Pulse.AttributeEditor = Ext.extend(Pulse.Editor,AttributeEditor);



/**
 * 
 */
var AttributeRegistryEditor = {
	
	win: null,
	msgPanel: null,
	centerPanel: null,
	contentNameField: null,
	createNameField: null,
	selectedNode: null,
	el: null,
	tel: null,
	tree: null,
	
//	/**
//	 * @param {Object} config
//	 */
//	getSelectWindow: function(config) {
//		
//		try {
//			
//			pel = VIEWPORT.getEl();
//	        if (typeof(pel) == 'undefined') {
//	        	throw('19 :: AttributeRegistryEditor.getSelectWindow() :: ' + 
//	        	'CHECK for element failed...');
//	        }
//	        
//	        namePanel = new Ext.Panel({
//	        	region: 'south', 
//	            margins: '3 3 3 3',
//	            bodyStyle: 'padding: 5px',
//	            autoHeight: true, 
//	       		html: '<table cellpadding="0" cellspacing="0" border="0" style="width:90%" align="center"><tr>' + 
//	       				'<td>' + VIEWPORT_PROPERTIES.NAME + ':&#160;</td>' + 
//	       				'<td style="width:100%"><div id="AttributeRegistryEditorWindow.nameField"> </div></td>' + 
//	       				'</tr></table>'
//	        });  
//	        
//	        if (this.el === null) {
//	                
//				this.el = pel.createChild({
//			        tag: 'div', 
//			        id: 'AttributeRegistryEditorWindow.el'
//			    });
//	        
//	        }
//	            
//		    this.msgPanel = new Ext.Panel({
//	    		id: 'AttributeRegistryEditorWindow.msgPanel',
//	    		region: 'north',
//	    		html: 'msgs go here',
//	    		border: false,
//	    		autoHeight: true
//    		});
//    		
//    		if (this.tel === null) {
//	                
//				this.tel = pel.createChild({
//			        tag: 'div', 
//			        id: 'AttributeRegistryEditorWindow.tel'
//			    });
//	        
//	        }
//    		
//    		tree = this.getTree({
//    			renderTo: this.tel,
//                getChildrenURL: config.getChildrenURL,
//                onSelectNodeClick: function(crTreeNode) {
//                    AttributeRegistryEditor.selectedNode = crTreeNode;
//                    AttributeRegistryEditor.contentNameField.setValue(crTreeNode.text);
//                }
//    		});
//    		
//    		this.centerPanel = new Ext.Panel({
//        		region: 'center',
//        		margins: '3 3 0 3',
//        		bodyStyle: 'padding:5px;overflow:scroll;',
//        		items: [tree]
//        	});
//        
//	        this.win = new Ext.Window({
//	        	id: 'AttributeRegistryEditorWindow.Win',
//	            title: VIEWPORT_PROPERTIES.CONTENTREGISTRY + ':',
//	            iconCls: 'contentRegistryIconCls',
//	            modal: true,
//	            plain: true,
//	            renderTo: this.el,
//	            height: 500,
//	            layout: 'border',	            
//	            items: [ 
//	            	this.msgPanel, 
//	            	this.centerPanel, 
//	            	namePanel 
//				],
//	            width: 400,
//	            buttonAlign: 'center',
//	            buttons: [
//	            	{ 
//			            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE, 
//			            handler: function() {
//			                // check values			                
//			                if (AttributeRegistryEditor.selectedNode === null) {
//			                    return false; 
//			                }
////			                PulseError.Throw({e:'chk_1',p:[
////			                	{n:'field',o:'"' + AttributeRegistryEditor.contentNameField.getValue() + '"'},
////			                	{n:'node',o:'"' + AttributeRegistryEditor.selectedNode.text + '"'}]
////		                	});
////		                	
////		                	splitArrayOne = AttributeRegistryEditor.contentNameField.getValue().split('');
////		                	splitArrayTwo = AttributeRegistryEditor.selectedNode.text.split('');
////		                	
////		                	p = [
////		                		{n:'splitArrayOne.length', o:splitArrayOne.length},
////		                		{n:'splitArrayTwo.length', o:splitArrayTwo.length}
////	                		];
////		                	
////		                	for (i = 0; i < splitArrayOne.length; i++) {
////		                		p.push({n:'' + splitArrayOne[i] + ' : ' + splitArrayTwo[i], o:'' + (splitArrayOne[i] == splitArrayTwo[i])});
////		                	}
////		                	PulseError.Throw({e:'chk_2',p:p});
//			                if (AttributeRegistryEditor.contentNameField.getRawValue().trim() != AttributeRegistryEditor.selectedNode.text.trim()) { 
//			                    return false; 
//			                }
////			                PulseError.Throw({e:'chk_3'}); 
//			                // checks passed : create
////			                PulseError.Throw({e:'DBG',p:[
////			                	{n:'text',o:AttributeRegistryEditor.selectedNode.text},
////			                	{n:'id',o:AttributeRegistryEditor.selectedNode.id}
////			                	]},'FilterEditor','createFilter()');
//			                
//			                if (typeof(config.selectCallback) == 'function') {	
//			                	config.selectCallback(AttributeRegistryEditor.selectedNode);
//			                }
//			                
//			                AttributeRegistryEditor.win.close();
//
//			            } 
//			        },{ 
//			            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
//			            handler: function() {
//			                AttributeRegistryEditor.win.close();
//			            } 
//			        }
//	            ]
//	        });
//	        
//	        this.win.on('close',function(){
//	        	// clean
//	        	delete this.centerPanel;
//	        	delete this.tel;
//	        	delete this.tree;
//	        	//re-init
//	        	this.centerPanel = null;
//	        	this.tel = null;
//	        	this.tree = null;
//	        	
//	        },this);
//	        
//	        this.win.on('show',function(){
//	        	this.contentNameField = new Ext.form.TextField({ 
//		            name: 'AttributeRegistryEditorWindow.nameField.name', 
//		            renderTo: 'AttributeRegistryEditorWindow.nameField',
//		            style: 'width:100%',
//		            emptyText: (typeof(config.emptyText) != 'undefined') ? config.emptyText : VIEWPORT_PROPERTIES.TEXT_CHOOSE_CONTENT, 
//		            allowBlank: false,
//		            readOnly: true
//		        });
//		        this.win.doLayout(true); 
//	        },this);
//	        
//	        // initial hide of msgPanel
//	    	this.msgPanel.hide();
//			this.msgPanel.collapse();
//			this.msgPanel.on('hide',function(){AttributeRegistryEditor.win.doLayout(true);});
//	                                      
//	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 200, 50); 
//	        this.win.show(this);
//	        
//	        tree.render();
//            tree.getRootNode().expand();
//                                   
//	        this.contentNameField.validate();		
//		
//		} catch (windowInitError) {
//			alert('windowInitError: \n' + windowInitError);
//		}
//		
//	},
	
	/**
	 * @param {Object} config
	 */
	getTree: function(config) {
		
		loaderConf = {
	    	dataUrl: config.getChildrenURL,
	        uiProviders: {
	     		'RegistryTreeNodeUI': PULSE.RegistryTreeNodeUI
	 		}
	    };
		
		if (typeof(config.baseParams) != 'undefined') {
			loaderConf.baseParams = config.baseParams;		
		}
		
		loader = new Ext.tree.TreeLoader(loaderConf);
		
		id = config.id;
		if (typeof(id) == 'undefined' || id === null) {
			id = Ext.id();
		}
		
		tree = new Ext.tree.TreePanel({
			id: id,    	
	    	// ext-cfg
	        el: config.renderTo,
	        region: (typeof(config.region) == 'undefined') ? '' : config.region,
	        autoScroll: true,
	        autoHeight: (typeof(config.height) != 'undefined') ? false : true,
	        animate: true,                
	        enableDD: (typeof(config.enableDD) != 'boolean') ? false : config.enableDD,
	        containerScroll: true,
	        rootVisible: false,        
	        border: false,
	        loader: loader,	        
	        // pulse-cfg
	        onSelectNodeClick: null,
	        editor: this		
        });
        
        if (typeof(config.iconRenderer) == 'function') {
        	tree.iconRenderer = config.iconRenderer;
        }
        
        if (typeof(config.height) != 'undefined') { 
			tree.setHeight(config.height);
		}
        
       if (config.enableDD === true) {
       		tree.on({
       			/**
				 * moves a node within the tree after exectuing an Ajax-server-call and processing
				 * it's response.
				 * 
				 * @Override 
				 * 
				 * @param {Object} e :   
				 * 		e.tree - The TreePanel
			     * 		e.target - The node being targeted for the drop
			     * 		e.data - The drag data from the drag source
			     * 		e.point - The point of the drop - append, above or below
			     * 		e.source - The drag source
			     * 		e.rawEvent - Raw mouse event
			     * 		e.dropNode - Drop node(s) provided by the source OR you can supply node(s) to be inserted by setting them on this object.
			     * 		e.cancel - Set this to true to cancel the drop.
			     * 
			     * @return {Boolean} false 
			     * 		always to cancel default Ext.tree-operation drop, drop is performed after AJAX-call
			     * 
				 */
				'beforenodedrop': {
					scope: tree, 
					fn: function(e) {
		
						Ext.Ajax.request({
							url: e.dropNode.attributes.moveURL,
				    		method: 'POST', 
				    		success: function(response, options) {
				    			decodedResponse = Ext.decode(response.responseText);
				    			targetNode = options.e.target;
								movenode = options.e.dropNode;
								oldParent = movenode.parentNode;
				    			if (true === decodedResponse.status)  {
				    				switch (options.e.point) {						
										case 'append':						
											if(!targetNode.isExpanded()){
												try {
													if (true === targetNode.isLoaded()) {
											            targetNode.expand(false, null, function(){
										            		targetNode.appendChild(movenode);
											            }.createDelegate(this));							            		
									            	} else {
									            		oldParent.removeChild(movenode);
									            		targetNode.expand();		                							                	
									            	}
								            	} catch (err) {
										            targetNode.expand();
									            	targetNode.appendChild(movenode);
								            	}
									        } else {
									        	targetNode.appendChild(movenode);
									        }
										break;
										
										case 'above':
											targetNode.parentNode.insertBefore(movenode, targetNode);
										break;
										
										case 'below':
											targetNode.parentNode.insertBefore(movenode, targetNode.nextSibling);
										break;
									}
				    			} else {
				    				PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'AttributeRegistryEditor','onbeforenodedrop(' + options.e.dropNode + ')');
				    			}
				    		},	    		 
				    		failure: function(response, options) {
				    			if (typeof(response.responseText) == 'undefined') {
						   			PulseError.Throw({e:'REQUEST.FAILED'},'AttributeRegistryEditor','onbeforenodedrop(' + options.e.dropNode + ')');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'AttributeRegistryEditor','onbeforenodedrop(' + options.e.dropNode + ')');
						        }
				    		}, 
				    		e: e,
				    		params: {
				    			targetnodeid: e.target.id,
								insertpoint: e.point,
								movenodeid: e.dropNode.id
				    		}					
						});
						return false;
					}
				}
       		});
       }
        
        if (typeof(config.onSelectNodeClick) == 'function') {
        	tree.onSelectNodeClick = config.onSelectNodeClick;
        }
        
        id = Ext.id();
        root = new Ext.tree.AsyncTreeNode({
	        text: '',
	        draggable: false,
	        allowDrop: false,
	        id: 'source.' + id,
	        iconCls: 'attributeRegistryIconCls'
	    });
	    
	    if (typeof(config.westAnimate) == 'object') {
	    	loader.on('beforeload', function(loader, node, callback) {
	    		if (node.id === Ext.getCmp(config.id).getRootNode().id) {
	    			try {
						Ext.get(config.westAnimate.id).replaceClass(config.westAnimate.replaceCls, 'loadingIconCls');
	    			} catch (e) {/* ignore */}
	    		}
			});	    	
	    	loader.on('load', function(loader, node, response) {
				if (node.id === Ext.getCmp(config.id).getRootNode().id) {
					try {
						Ext.get(config.westAnimate.id).replaceClass('loadingIconCls', config.westAnimate.replaceCls);
					} catch (e) {/* ignore */}
				}
			});
	    }
	    
	    tree.setRootNode(root);
	    
	    
        return tree;
	},
	
	/**
	 * @param {Object} node
	 */
	createNode: function(node) {
		
		this.selectedNode = node;
		
		// show create window
		try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('276 :: AttributeRegistryEditor.createNode() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
	        if (this.el === null) {	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'AttributeRegistryEditorWindow.el'
			    });	        
	        }
    		
    		this.centerPanel = new Ext.Panel({
        		margins: '3 3 0 3',
        		html: 'center'
        	});
        
	        this.win = new Ext.Window({
	        	id: 'AttributeRegistryEditorWindow.Win',
	            title: VIEWPORT_PROPERTIES.ATTRIBUTEREGISTRY + ':',
	            iconCls: 'attributeRegistryIconCls',
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            autoHeight: true,      
	            items: [ 
	            	this.centerPanel
				],
	            width: 400,
	            buttonAlign: 'center',
	            buttons: [{ 
		            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
		            handler: function() {
		                AttributeRegistryEditor.win.close();
		            },
		            iconCls: 'cancelIconCls' 
		        }]
	        });
	        
			this.win.on('close',function(){
	        	// clean
	        	delete this.centerPanel;
	        	delete this.createNameField;
				//re-init
				this.centerPanel = null;
				this.createNameField = null;
	        },this);
	        
	        this.win.on('show',function(){		        
		        this.centerPanel.load({
        			url: node.attributes.createURL,
        			method: 'POST',
        			scripts: true,
        			callback: LPCB,
                    text: 'loading...',
                    discardUrl: true,
                    nocache: true,
                    timeout: 30
        		});
	        },this);
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 200, 50); 
	        this.win.show(this);	
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
		
	},
	
	/**
	 * @param {String} saveURL
	 */
	save: function(saveURL) {
		
		if (this.createNameField === null 
			|| this.createNameField.getValue().trim() === '') {
			return;
		}
		
		// server-call
		Ext.Ajax.request({
			url: saveURL,
    		method: 'POST',
    		success: function(response, options) {
    			decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					AttributeRegistryEditor.responseId = parseInt(decodedResponse.id, 10);
					AttributeRegistryEditor.selectedNode.reload(function(node) {
						n = node.findChild('id', AttributeRegistryEditor.responseId);

						delete AttributeRegistryEditor.responseId;
						AttributeRegistryEditor.win.close();
						n.select();
						if (typeof(n) != 'undefined' && n !== null) {
							AttributeRegistryEditor.editNode(n);
						}
					});
    			} else {
    				PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'AttributeRegistryEditor','save');
    			}
    			
    		},
    		failure: function(response, options) {
    			if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({e:'REQUEST.FAILED'},'AttributeRegistryEditor','save');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'AttributeRegistryEditor','save');
		        }
    		},
			params: {
				name: this.createNameField.getValue().trim()
			}
		});
					
		
	},
	
	/**
	 * @param {Object} node
	 */
	editNode: function(node) {	
		
		// edit content
		if (typeof(node) != 'undefined' && node !== null) {
			PULSE_VIEWPORT_CONTROLLER.openTab({
	            id: node.attributes.clazz + '.' + node.attributes.id + '.editor',
	            title: node.text,
	            tabTip: node.text + ' (id: ' + node.attributes.id + ')',
	            iconCls: node.attributes.clazz.split('.').join(''),
	            registeredObject: {
	                node: node
	            },
	            loadParams: {
	                url: node.attributes.editURL
	            }
	        });
	        return;
		}
		THROW({e:'node undefined'},this,'editNode');
		
	},
	
	/**
	 * @param {Object} node
	 */
	deleteNode: function(node) {
		// display delete confirm-dialogue
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + node.text + '"',
			VIEWPORT_PROPERTIES.MSG_REALLYDELETE, 
        	function(response) {
        		// do nothing if answer is not yes
	        	if('yes' === response) {
	        		
	        		// show node busy
	        		node.ui.setBusy(true);
	        		
	        		// server-call
	        		Ext.Ajax.request({
	        			url: node.attributes.deleteURL, 
		        		method: 'POST', 
		        		success: function(response, options) {
		        			decodedResponse = Ext.decode(response.responseText);
		        			node = options.node;
							parentNode = node.parentNode;
							if (true === decodedResponse.status) {
								
								// try close editor if open
								tabId = node.attributes.clazz + '.' + node.id + '.editor';
								PULSE_VIEWPORT_CONTROLLER.closeTab(tabId, true);
																
								// delete
								parentNode.removeChild(node);

							} else {
								node.ui.setBusy();
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'AttributeRegistryEditor','deleteNode(' + options.node + ')');
							}
		        		},
		        		failure: function(response, options) {
	        				options.node.ui.setBusy();
    						if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'AttributeRegistryEditor','deleteNode(' + options.node + ')');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'AttributeRegistryEditor','deleteNode(' + options.node + ')');
					        }
		        		},
		        		node: node
	        		});
	        		
	        	} 
        	}, 
        	this
    	);				
	},
	
		
	/**
	 * @param {String} elId
	 */
	initCreateInputField: function(elId) {
    	this.createNameField = new Ext.form.TextField({ 
            name: 'AttributeRegistryEditorWindow.nameField.name', 
            renderTo: elId,
            style: 'width:100%;',
            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
            allowBlank: false 
        });
        this.createNameField.validate();
	},
	
	/**
	 * call to rename a node
	 * renames only if node is loaded
	 * 
	 * @param {String}/{Number} contentid
	 * @param {String} newName
	 */
	renameNodeByContentId: function(contentid, newName) {
		n = this.findChildByContentId(AttributeRegistryTree.getRootNode(), contentid);
		if (typeof(n) != 'undefined') {
			n.setText(newName);
			n.ui.buildQTip(n.ui, n.attributes);
		}
	},
	
	/**
	 * recursively walks through the tree (loaded nodes only) and tries to find node with
	 * node.attributes.contentId == given contentid
	 * 
	 * @param {Object} node
	 * @param {String}/{Number} contentid
	 */
	findChildByContentId: function(node, contentid) {
		
		if (node === null) {
			return;
		}
		
		if (node.attributes === null) {
			return;
		}
		
		if (node.attributes.contentId == contentid) {
			return node;
		}
		
		if (node.firstChild !== null) {
			return this.findChildByContentId(node.firstChild, contentid);
		} else if (node.nextSibling !== null) {
			return this.findChildByContentId(node.nextSibling, contentid);
		} else {
			return this.findChildByContentId(node.parentNode.nextSibling, contentid);
		}
		
	},
	
		
	/**
	 * @param {Object} node
	 * @param {Array} arrayids, array of contentregistry-node-ids
	 * @param {Function} callback
	 */	
	expandByIds: function(node, arrayids, callback, isExpanding) {
		
		try {
		
			if (typeof(node) == 'undefined' || node === null) {
				return;
			}
			
			if (true === Ext.getCmp('AttributeRegistry.WEST').isExpanding && true !== isExpanding) {
				return;
			} 
			if (true !== isExpanding) {
				Ext.getCmp('AttributeRegistry.WEST').disable();
			}
			Ext.getCmp('AttributeRegistry.WEST').isExpanding = true;
			
			// expand-function
			exp_fn = function(){
				node.expand(false, true, function(node) {
				
					c = node.findChild('id', arrayids[0]);
					
					if (arrayids.length === 1) {
						c.select();
						Ext.getCmp('AttributeRegistry.WEST').isExpanding = false;
						Ext.getCmp('AttributeRegistry.WEST').enable();
						if (typeof(callback) == 'function') {
							callback(c);	
						}
						return;
					}
					
					arrayids.shift();
					AttributeRegistryEditor.expandByIds(c, arrayids, callback, true);
				});
			};
			
			//
			if (arrayids.length === 2) {
				if (node.isLoaded()) {
					node.reload(exp_fn);
				} else {
					exp_fn();
				}
			} else {
				exp_fn();
			}
			
					
			return;
		
		} catch(e) {
			crPanel = Ext.getCmp('AttributeRegistry.WEST');
			if (typeof(crPanel) != 'undefined' && crPanel !== null) {
				crPanel.isExpanding = false;
				crPanel.enable();
			}
		}		
	},
	
	/**
	 * @param {String} crExpandIdsURL
	 * @param {String}/{Number} contentid
	 */
	editContent: function(crExpandIdsURL, contentid) {	
		
		Ext.Ajax.request({
			url: crExpandIdsURL,
			method: 'POST',
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					// show content in contentregistrytree
            		crPanel = Ext.getCmp('AttributeRegistry.WEST');
            		crPanel.expand();
					AttributeRegistryEditor.expandByIds(AttributeRegistryTree.getRootNode(), decodedResponse.ids, function(node) {
						AttributeRegistryEditor.editNode(node);
					});
        		} else {
					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'AttributeRegistryEditor','editContent()');
				}
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},'AttributeRegistryEditor','editContent()');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'AttributeRegistryEditor','editContent()');
			        }
			},
			params: { id: contentid }
		});
		
		
	}
//	,
//	
//	/**
//	 * 
//	 */
//	loadCallback: LPCB
	
}; // END :: AttributeRegistry


/**
 * SelectionAttributeOptionEditor.
 */
SelectionAttributeOptionEditor = {
	
	type: 'SelectionAttributeOptionEditor',
	
	DBG: false/*{
		initComponent: false,
		onRender: false,
		buildGrid: false,
		MSG: false,
		button: {
			add: false,
			toggleMultiSelect: false
		},
		showCreateFormWindow: false, // Pulse.Editor
		createForm: { // Pulse.Editor
			create: false,
			close: false
		},
		createOption: false,
		removeOption: false,
		validate: {
			click: false,
			call: false
		},
		grid: { 
			beforeedit: false,
			afteredit: false
		},
		store: {
			datachanged: false,
			update: false,
			add: false,
			remove: false
		},
		isPulseEditor: false
	}*/,
	
	// defaults
	gridHeight: 500,
	
//	removedIds: [],
//	addRecords: [],
	
	/**
	 * 
	 */
	onRender: function() {
		// DBG
		THROW({props:['renderTo'],args:arguments},this,'onRender');
		
		try {
		
			// TODO
		
		
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'onRender');
		}
	},
	
	/**
	 * 
	 */
	buildGrid: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['gridEl']},this,'buildGrid');
		}
        
        try {
        
	        this.store = new Ext.data.SimpleStore({
	            pruneModifiedRecords : true,
	            fields: ['id','name','value'],
	            data: this.options
	        });
	        
	        nameEditorCfg = {
                allowBlank: false
                //,
//                pEditor: this,
//                validator: function(v) {
//			    	THROW({args:arguments,props:['pEditor']},this.pEditor,'validate.click');
//			    	return this.pEditor.validate(v);
//			    }
            };
            valueEditorCfg = {
                allowBlank: false,
                pEditor: this,
                validator: function(v) {
			    	THROW({args:arguments,props:['pEditor']},this.pEditor,'validate.click');
			    	return this.pEditor.validate(v);
			    }
            };
            
            _id = this.id;
            deleteFieldCfg = {
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'Ext.getCmp(\'' + _id + '\').removeOption(\'' + id + '\')',
			        		iconCls: 'deleteIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
			        	});
		        	} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            };
	        
	        columnModel = new Ext.grid.ColumnModel([
	            	/*gridSm,*/
	            {
	            	id: 'id',
	                header: 'id:',
	                dataIndex: 'id',
	                sortable: true,
	                width: 50,
	                fixed: true,
	                resizable: true,
	                renderer: function(id) {
	                	t = parseInt(id, 10);
	                	if ((t+'') == 'NaN') {
	                		return '*';
	                	}
	                	return id;
	                }
	            },{    
	                header: VIEWPORT_PROPERTIES.NAME + ':',
	                dataIndex: 'name',
	                sortable: false,
	                editor: new Ext.form.TextField(nameEditorCfg)
	            },{    
	                header: VIEWPORT_PROPERTIES.VALUE + ':',
	                dataIndex: 'value',
	                sortable: false,
	                editor: new Ext.form.TextField(valueEditorCfg)
	            },
	            deleteFieldCfg	            
	        ]);
			
			this.grid = new Ext.grid.EditorGridPanel({
				store: this.store,
				renderTo: this.gridEl,
				height: this.gridHeight,
				cm: columnModel,
				autoExpandColumn: 'id',
				loadMask: true,
				viewConfig: { forceFit: true },
				header: false,
	            frame: false,
	            border: false,
	            enableHdMenu: false,
	//            bodyStyle: 'border: 2px solid #8DB2E3;',
	            clicksToEdit: 1
			});
			
			// grid-listener
			this.grid.on('beforeedit',function(e){
				this.currentGridEditEvent = e;
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments,props:['currentGridEditEvent']},this,'grid.beforeedit');
				}
			},this);
			this.grid.on('afteredit',function(e){
				this.deleteCurrentGridEvent = true;
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments,props:['currentGridEditEvent']},this,'grid.afteredit');
				}
			},this);
			
			// store-listener
			this.store.on('datachanged',function(_store){
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments},this,'store.datachanged');
				}
				if (false === this.hasChanges()) {
					this.fireEvent('MSG','reset',this);
				} else {
					this.fireEvent('MSG','change',this);
				}
			},this);
			this.store.on('remove',function(store, record, index){
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments},this,'store.remove');
				}
				if (false === this.hasChanges()) {
					this.fireEvent('MSG','reset',this);
				} else {
					this.fireEvent('MSG','change',this);
				}
			},this);
			this.store.on('update',function(store, record, index){
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments},this,'store.update');
				}
				if (false === this.hasChanges()) {
					this.fireEvent('MSG','reset',this);
				} else {
					this.fireEvent('MSG','change',this);
				}
			},this);
			this.store.on('add',function(store, record, index){
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments},this,'store.add');
				}
				if (false === this.hasChanges()) {
					this.fireEvent('MSG','reset',this);
				} else {
					this.fireEvent('MSG','change',this);
				}
			},this);
		
        } catch (e) {
        	// DBG >>
        	if (this.DBG) {
        		FATAL(e,this,'buildGrid');
        	}	
        }
	},
	
	/**
	 * 
	 */
	validate: function(v, field) {
    	THROW({args:arguments,props:[
    		'currentGridEditEvent','currentGridEditEvent.grid',
    		'currentGridEditEvent.record','currentGridEditEvent.field',
    		'currentGridEditEvent.value','currentGridEditEvent.row',
    		'currentGridEditEvent.column','currentGridEditEvent.cancel'
		]},this,'validate.call');
		
//		records = this.currentGridEditEvent.grid.getStore().getRange();
		
		records = this.store.getRange();
		evt = this.currentGridEditEvent;
		if (typeof(evt) != 'undefined' && (typeof(field) == 'undefined' || field === null)) {
			field = evt.field;
		}
		
		if (true === this.deleteCurrentGridEvent) {
			delete this.deleteCurrentGridEvent;
			delete this.currentGridEditEvent;
		}
		
		for (i = 0; i < records.length; i++) {
			if (typeof(evt) != 'undefined' 
				&& evt.record.get('id') == records[i].get('id')) {
				continue;
			}
			if (v == records[i].get(field)) {
				return false;
			}
		}
    	return true;
    },
	
	/**
	 * 
	 */
	getButtons: function() {
		addButtonCfg = {
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_ADD,
			scope: this,
			handler: function() {
				// DBG
				if (this.DBG) {
					THROW({args:arguments},this,'button.add');
				}
				
				// show create-form-window    			    	
		    	this.showCreateFormWindow({
		    		fields: [{
		    			fieldLabel: VIEWPORT_PROPERTIES.NAME,
		    			name: 'name',
		    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME
		    		},{
		    			fieldLabel: VIEWPORT_PROPERTIES.VALUE,
		    			name: 'value',
		    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_VALUE,
		    			pEditor: this,
		                validator: function(v) {
					    	THROW({args:arguments,props:['pEditor']},this.pEditor,'validate.click');
					    	this.validates = this.pEditor.validate(v,'value');
					    	return this.validates;
					    }
		    		}],
		    		handler: 'createOption'
		    	});
				
				
			},
			iconCls: 'addIconCls'
		};
		
		
		toggleMultiSelectButtonCfg = {
			text:  (true === this.multiselect) ? 'ON' : 'OFF',
			scope: this,
			handler: function() {
				// DBG
				if (this.DBG) {
					THROW({args:arguments},this,'button.toggleMultiSelect');
				}
				
				if (true === this.multiselect) {
					this.multiselect = false;
					this.toggleMultiSelectButton.setIconClass('isSelectedDisabledIconCls');
					this.toggleMultiSelectButton.setText('OFF');
				} else {
					this.multiselect = true;
					this.toggleMultiSelectButton.setIconClass('isSelectedIconCls');
					this.toggleMultiSelectButton.setText('ON');					
				}
				
				if (false === this.hasChanges()) {
					this.fireEvent('MSG','reset',this);
					return;	
				}				
				this.fireEvent('MSG','change',this);
				
			},
			iconCls: (true === this.multiselect) ? 'isSelectedIconCls' : 'isSelectedDisabledIconCls'
		};
		this.toggleMultiSelectButton = new Ext.Toolbar.Button(toggleMultiSelectButtonCfg);
		
		toggleMultiSelectButtonLabel = new Ext.Toolbar.TextItem('multi-select: ');
		
		return [
			new Ext.Toolbar.Button(addButtonCfg),new Ext.Toolbar.Separator(),
			toggleMultiSelectButtonLabel,this.toggleMultiSelectButton,new Ext.Toolbar.Separator()
			];
	},
	
	/**
	 * 
	 */
	removeOption: function(id) {
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'removeOption');
		}
		
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
					this.store.each(function(rec) {
						if (id == rec.get('id')) {
							t = parseInt(id, 10);
		                	if ((t+'') != 'NaN') {
		                		this.removedIds.push(id);
		                	} else {
		                		for (i = 0; i < this.addRecords.length; i++) {
		                			if (id == this.addRecords[i].get('id')) {
		                				this.addRecords.splice(i,1);
		                			}
		                		}
		                	}
							this.store.remove(rec);
							return false;
						}
					}, this);
				}
			}, this);		
	},
	
	/**
	 * 
	 */
	createOption: function() {
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'createOption');
		}
		
		params = this.getCreateFormParams();
		
		THROW({propsObj:params,props:['name','value']},this,'createOption');
		
		
		if (this.store === null) {
			return;
		}
		
		gridStoreRecord = new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'name' },
			{ name: 'value' }
        ]);
        
        
        rc = new gridStoreRecord({
			id: Ext.id(), 
			value: params.value,
			name: params.name
		});
		this.addRecords.push(rc);
        this.store.add(rc);
		
		this.closeCreateFormWindow();
		
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		return (this.initialMultiselect != this.multiselect)
			|| (this.removedIds.length > 0)
			|| (this.addRecords.length > 0)
			|| (this.store.getModifiedRecords().length > 0);
		
	},
	 
	 /**
	  * 
	  */
	getChanges: function(v) {
		
		if (typeof(v) != 'object' || v === null) {
			v = {};
		} 
		
		if (true === this.hasChanges()) {
			v.isMultiSelect = this.multiselect;
			v.removedOptions = this.removedIds;
			modRecs = this.store.getModifiedRecords();
			for (i=0; i < modRecs.length; i++) {
	           rc = modRecs[i];
			   _id = rc.get('id');
               v['mOpt_name_' + _id] = rc.get('name');
               v['mOpt_value_' + _id] = rc.get('value'); 				
			}
			for (i=0; i < this.addRecords.length; i++) {
				rc = this.addRecords[i];
               v['aOpt_name_' + i] = rc.get('name');
               v['aOpt_value_' + i] = rc.get('value');                
            }
		}
		
		return v;
	},
	
	/**
	 * reloads masterEditor
	 */
	commit: function() {
		if (false === this.fireEvent('MSG','beforecommit',this)) {
			return false;		
		}
		
		this.store.commitChanges();
		this.removedIds = [];
		this.addRecords = [];
		this.initialMultiselect = this.multiselect;
		
		this.fireEvent('MSG','commit',this);
		
		// reloads parent-sub-editor-panel
		if (typeof(this.masterEditor) != 'undefined' 
			&& typeof(this.masterEditor.loadPanel) == 'function') {
			this.masterEditor.loadPanel();
		}
	},
	
	/**
	 * 
	 */
	reset: function() {
		if (false === this.fireEvent('MSG','beforereset',this)) {
			return false;	
		}
		
		this.removedIds = [];
		this.addRecords = [];
		
		this.store.loadData(this.initialConfig.options);
		
		if (this.multiselect != this.initialConfig.multiselect) {
			this.multiselect = this.initialConfig.multiselect;
			if (false === this.multiselect) {
				this.toggleMultiSelectButton.setIconClass('isSelectedDisabledIconCls');
				this.toggleMultiSelectButton.setText('OFF');
			} else {
				this.toggleMultiSelectButton.setIconClass('isSelectedIconCls');
				this.toggleMultiSelectButton.setText('ON');					
			}
		}
		
		
		this.fireEvent('MSG','reset',this);
	},
	
	/**
	 * initializes this componenet with a given config.
	 */
	initComponent: function() {
		
		// DBG >>	
		THROW({
			args:arguments,
			props:['id','renderTo','attribute.id','attribute.clazz','options']
		},this,'initComponent');
		
		try {
			
			this.removedIds = [];
			this.addRecords = [];
			
			// call super
			Pulse.SelectionAttributeOptionEditor.superclass.initComponent.call(this);
		
		
			this.initialMultiselect = this.multiselect;
			this.gridEl = Ext.get(this.attribute.clazz + '.' + this.attribute.id + '.options');
			this.buildGrid();
		
		} catch(e) {
			FATAL(e, this, 'initComponent');
		}
				
	}
	
};
Pulse.SelectionAttributeOptionEditor = Ext.extend(Pulse.Editor,SelectionAttributeOptionEditor);



/**
 * 
 */
DBG.ContentEditor = DBG.apply(DBG.Editor, {
			// initComponent: { ContentEditor: false }
			addSubEditor : {
				ContentEditor : false
			},
			hasChanges : {
				ContentEditor : false
			},
			getChanges : {
				ContentEditor : false
			},
			reset : {
				ContentEditor : false
			},
			commit : {
				ContentEditor : false
			},
			initSitemapNodesDisplayer : false,
			initAttachmentsPanel : false,
			initFieldMonitoring : {
				ContentEditor : false
			}
		});

/**
 * 
 * TODO : check back on attachments-editor msg-ing
 * 
 */
ContentEditor = {

	type : 'ContentEditor',

	/**
	 * uncomment below for global DBG
	 */
	DBG : false/* DBG.ContentEditor */,

	/**
	 * 
	 */
	onRender : function() {
		// DBG
		THROW({
					props : ['renderTo'],
					args : arguments
				}, this, 'onRender');

		try {

			THROW({
						e : 'TODO',
						args : arguments
					}, this, 'onRender');

		} catch (e) {
			FATAL(e, this, 'onRender');
		}
	},

	/**
	 * 
	 */
	hasChanges : function() {

		keywordsBool = (typeof(this.keywordsEl) != 'undefined' && this.keywordsEl !== null)
				? this.keywordsEl.changed
				: false;
		attachmentsBool = (typeof(this.attachmentsEditor) == 'undefined' && this.attachmentsEditor === null)
				? this.attachmentsEditor.hasChanges()
				: false;

		metakeywordsBool = (typeof(this.metakeywordsEl) != 'undefined' && this.metakeywordsEl !== null)
				? this.metakeywordsEl.changed
				: false;

		metadescriptionBool = (typeof(this.metadescriptionEl) != 'undefined' && this.metadescriptionEl !== null)
				? this.metadescriptionEl.changed
				: false;

		superBool = Pulse.ContentEditor.superclass.hasChanges.call(this);

		// DBG >>
		if (this.DBG) {
			THROW({
						args : arguments,
						props : ['id'],
						o : '(keywordsBool: '
								+ keywordsBool
								+ ' || attachmentsBool: '
								+ attachmentsBool
								+ ' || superBool: '
								+ superBool
								+ ' ) -> '
								+ (keywordsBool || attachmentsBool || superBool)
					}, this, 'hasChanges.ContentEditor');
		}

		return (keywordsBool || attachmentsBool || metakeywordsBool
				|| metadescriptionBool || superBool);
	},

	/**
	 * 
	 */
	getChanges : function(v) {

		// DBG >>
		if (this.DBG) {
			THROW({
						args : arguments,
						props : ['subEditors', 'subEditors.length']
					}, this, 'getChanges.ContentEditor');
		}

		initialV = v;
		if (typeof(v) == 'undefined' || v === null) {
			v = {};
		}

		if (true === this.hasChanges()) {

			// call super
			v = Pulse.ContentEditor.superclass.getChanges.call(this, v);

			if (typeof(this.keywordsEl) != 'undefined'
					&& this.keywordsEl !== null
					&& true === this.keywordsEl.changed) {
				v.keywords = this.keywordsEl.getValue().trim();
			}

			if (typeof(this.metakeywordsEl) != 'undefined'
					&& this.metakeywordsEl !== null
					&& true === this.metakeywordsEl.changed) {
				v.metakeywords = this.metakeywordsEl.getValue().trim();
			}

			if (typeof(this.metadescriptionEl) != 'undefined'
					&& this.metadescriptionEl !== null
					&& true === this.metadescriptionEl.changed) {
				v.metadescription = this.metadescriptionEl.getValue().trim();
			}

			if (typeof(this.attachmentsEditor) != 'undefined'
					&& this.attachmentsEditor !== null
					&& true === this.attachmentsEditor.hasChanges()) {
				v = this.attachmentsEditor.getChanges(v);
			}

		} else {
			return initialV;
		}

		return v;
	},

	/**
	 * 
	 */
	reset : function() {

		// call super
		Pulse.ContentEditor.superclass.reset.call(this);

		try {

			success = true;

			if (typeof(this.keywordsEl) != 'undefined'
					&& this.keywordsEl !== null
					&& true === this.keywordsEl.changed) {
				// reset field
				this.keywordsEl.reset();
			}

			if (typeof(this.metakeywordsEl) != 'undefined'
					&& this.metakeywordsEl !== null
					&& true === this.metakeywordsEl.changed) {
				// reset field
				this.metakeywordsEl.reset();
			}

			if (typeof(this.metadescriptionEl) != 'undefined'
					&& this.metadescriptionEl !== null
					&& true === this.metadescriptionEl.changed) {
				// reset field
				this.metadescriptionEl.reset();
			}

			if (typeof(this.attachmentsEditor) != 'undefined'
					&& this.attachmentsEditor !== null
					&& true === this.attachmentsEditor.hasChanges()) {
				success = this.attachmentsEditor.reset();
			}

			if (false === success) {
				throw ('RESETFAILURE');
			}

			return success;

		} catch (e) {
			throw (new Pulse.Error({
						e : 'RESETFAILURE',
						o : '' + e
					}, this, 'reset.ContentEditor'));
		}
	},

	/**
	 * 
	 */
	commit : function() {

		try {

			// performs the required renamings of TAB and in ContentRegistry
			this.commitNameChange();

			// call super
			Pulse.ContentEditor.superclass.commit.call(this);

			success = true;
			if (typeof(this.attachmentsEditor) != 'undefined'
					&& this.attachmentsEditor !== null
					&& true === this.attachmentsEditor.hasChanges()) {
				success = this.attachmentsEditor.commit();
			}

			if (false === success) {
				throw ('COMMITFAILURE');
			}

			if (typeof(this.keywordsEl) != 'undefined'
					&& this.keywordsEl !== null
					&& true === this.keywordsEl.changed) {
				// reset field
				this.keywordsEl.commit();
			}

			if (typeof(this.metakeywordsEl) != 'undefined'
					&& this.metakeywordsEl !== null
					&& true === this.metakeywordsEl.changed) {
				// reset field
				this.metakeywordsEl.commit();
			}

			if (typeof(this.metadescriptionEl) != 'undefined'
					&& this.metadescriptionEl !== null
					&& true === this.metadescriptionEl.changed) {
				// reset field
				this.metadescriptionEl.commit();
			}

			return success;

		} catch (e) {
			throw (new Pulse.Error({
						e : 'COMMITFAILURE',
						o : '' + e
					}, this, 'commit.ContentEditor'));
		}

	},

	/**
	 * 
	 */
	commitNameChange : function() {
		// resets tab-title if name has changes
		nameMonitor = Ext.getCmp(this.id + '.nameEditor');
		if (true === nameMonitor.hasChanges()) {
			changedName = nameMonitor.getChanges()[nameMonitor
					.getParameterName()];
			this.setTitle(changedName);
		}
	},

	/**
	 * @param {String}
	 *            title
	 */
	setTitle : function(title) {
		if (typeof(this.tab) != 'undefined' && this.tab !== null) {
			// set new tab title
			this.tab.setTitle(title);
		}
		// set the content-registry-nodes-text
		ContentRegistryEditor
				.renameNodeByContentId(this.getContent().id, title);
	},

	/**
	 * 
	 */
	initSitemapNodesDisplayer : function() {

		// DBG >>
		if (this.DBG) {
			THROW({
						args : arguments,
						props : ['loadSitemapNodesURL']
					}, this, 'initSitemapNodesDisplayer');
		}

		try {

			// store
			if (typeof(this.sitemapNodesStore) != 'undefined') {
				// remove/delete former stuff
				delete this.sitemapNodesStore;
			}
			this.sitemapNodesStore = new Ext.data.JsonStore({
						url : this.loadSitemapNodesURL,
						root : 'sitemapNodes',
						fields : ['text', 'locale', {
									name : 'visible',
									type : 'boolean'
								}, 'expandInfo', 'expandIds', 'contentName']
					});

			// panel
			this.sitemapNodePanelReloadButtonCfg = {
				text : VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
				scope : this,
				handler : function() {
					this.sitemapNodesStore.load({
						params : {
							id : this.getContent().id
						},
						scope : this,
						callback : function(records, options, success) {
							if (false === success) {
								try {
									this.sitemapNodePanel.body
											.update('<div>...load failure:</div>'
													+ '<div>...records: <b>[ '
													+ records
													+ ' ]</b> </div>'
													+ '<div>...options: <b>{ '
													+ options
													+ ' }</b> </div>'
													+ '<div>...success: <b>'
													+ success + '</b> </div>');
								} catch (e) {
									THROW({
												e : 'FATAL',
												args : arguments,
												props : ['content',
														'content.id',
														'loadSitemapNodesURL']
											}, this, 'sitemapNodePanel.reload');
								}
							}
						}
					});
				},
				iconCls : 'reloadIconCls'
			};
			if (typeof(this.sitemapNodePanel) != 'undefined') {
				// remove/delete former stuff
				delete this.sitemapNodePanel;
			}
			this.sitemapNodePanel = new Ext.Panel({
						title : VIEWPORT_PROPERTIES.SITEMAP,
						iconCls : 'sitemapIconCls',
						id : this.getContent().clazz + '.'
								+ this.getContent().id + '.sitemapNodes.panel',
						renderTo : this.getContent().clazz + '.'
								+ this.getContent().id + '.sitemapNodes',
						collapsible : true,
						collapsed : true,
						html : '',
						tbar : ['->', '-', this.sitemapNodePanelReloadButtonCfg]
					});

			this.sitemapNodePanel.buildExpandInfo = function(nodes) {

				buf = [];
				for (ii = 0; ii < nodes.length; ii++) {
					buf.unshift(' / ');

					if (true === nodes[ii].visible
							|| 'true' == nodes[ii].visible) {
						buf.unshift('>');
						buf
								.unshift('style="vertical-align:middle;" border="0"');
						buf
								.unshift('width="14" height="14" class="visibleIconCls_14_no"');
						buf.unshift('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
					} else {
						buf.unshift('>');
						buf
								.unshift('style="vertical-align:middle;" border="0"');
						buf
								.unshift('width="14" height="14" class="invisibleIconCls_14_no"');
						buf.unshift('<img src="' + Ext.BLANK_IMAGE_URL + '" ');
					}

					buf.unshift('</a> ');
					buf.unshift(nodes[ii].text + ' (id: ' + nodes[ii].id + ')');
					buf.unshift('>');
					buf.unshift(' ext:qtip="show ' + nodes[ii].text + ' (id: '
							+ nodes[ii].id + ') in sitemap"');
					buf.unshift('this.blur();return;"');
					buf.unshift('SitemapTree.expandByIds(null,['
							+ nodes[ii].expandIds + '],null,\''
							+ nodes[ii].locale + '\');');
					// buf.unshift('Ext.getCmp(\'SitemapEditor.WEST\').expand();');
					buf.unshift(' onclick="');
					buf.unshift(' style=" "');
					buf.unshift(' class=" "');
					buf.unshift('<a href="#"');

				}

				buf.unshift('> ' + nodes[nodes.length - 1].locale + ' : ');
				buf.unshift('style="vertical-align:middle;" border="0"');
				buf.unshift('width="16" height="16" class="'
						+ GETFLAG(nodes[nodes.length - 1].locale) + '"');
				buf.unshift('<img src="' + Ext.BLANK_IMAGE_URL + '" ');

				return buf;
			};

			// store-listener
			this.sitemapNodesStore.on('beforeload', function(store, options) {
						this.sitemapNodePanel.getUpdater().showLoading();
					}, this);

			// store-listener
			this.sitemapNodesStore.on('load',
					function(store, records, options) {
						try {
							htmlBuf = [
									'<div style="padding:5px;">',
									'<ul ',
									'id="' + this.getContent().clazz + '.'
											+ this.getContent().id
											+ '.sitemapNodes"',
									'style="font-weight:bold;list-style:none;"',
									'>'];

							for (i = 0; i < records.length; i++) {
								htmlBuf.push('<li style="padding:1px;">');
								htmlBuf.push('<img src="' + Ext.BLANK_IMAGE_URL
										+ '" ');
								htmlBuf
										.push('width="16" height="16" class="sitemapIconCls"');
								htmlBuf
										.push('style="vertical-align:middle;" border="0"');
								htmlBuf.push('>');
								htmlBuf.push(' // ');
								if (records[i].get('expandInfo').length > 0) {
									htmlBuf = htmlBuf
											.concat(this.sitemapNodePanel
													.buildExpandInfo(records[i]
															.get('expandInfo')));
								} else {
									htmlBuf.push('<img src="'
											+ Ext.BLANK_IMAGE_URL + '" ');
									htmlBuf
											.push('width="16" height="16" class="'
													+ GETFLAG(records[i]
															.get('locale'))
													+ '"');
									htmlBuf
											.push('style="vertical-align:middle;" border="0"');
									htmlBuf.push('> '
											+ records[i].get('locale') + ' : ');
								}

								htmlBuf.push('<a href="#"');
								htmlBuf.push(' class=" "');
								htmlBuf.push(' style=" "');
								htmlBuf.push(' ext:qtip="show '
										+ records[i].get('text') + ' (id: '
										+ records[i].id + ') in sitemap"');
								htmlBuf.push(' onclick="');
								// htmlBuf.push('Ext.getCmp(\'SitemapEditor.WEST\').expand();');
								htmlBuf.push('SitemapTree.expandByIds(null,['
										+ records[i].get('expandIds')
										+ '],null,\''
										+ records[i].get('locale') + '\');');
								htmlBuf.push('this.blur();return;">');
								htmlBuf.push(records[i].get('text') + ' (id: '
										+ records[i].id + ')');
								htmlBuf.push('</a> ');

								if (true === records[i].get('visible')) {
									htmlBuf.push('<img src="'
											+ Ext.BLANK_IMAGE_URL + '" ');
									htmlBuf
											.push('width="14" height="14" class="visibleIconCls_14_no"');
									htmlBuf
											.push('style="vertical-align:middle;" border="0"');
									htmlBuf.push('>');
								} else {
									htmlBuf.push('<img src="'
											+ Ext.BLANK_IMAGE_URL + '" ');
									htmlBuf
											.push('width="14" height="14" class="invisibleIconCls_14_no"');
									htmlBuf
											.push('style="vertical-align:middle;" border="0"');
									htmlBuf.push('>');
								}

								htmlBuf.push(' / ');
								htmlBuf.push(records[i].get('contentName'));
								htmlBuf.push('</li>');
							}

							htmlBuf.push('</ul></div>');

							this.sitemapNodePanel.body.update(htmlBuf.join(''));
						} catch (e) {
							this.sitemapNodePanel.body
									.update('panel.html.build.error:\n' + e);
						}
					}, this);

			// panel-listener
			this.sitemapNodePanel.on('expand', function() {
				this.sitemapNodesStore.load({
							params : {
								id : this.getContent().id
							},
							scope : this,
							callback : function(records, options, success) {
								if (false === success) {
									try {
										this.sitemapNodePanel.body
												.update('<div>...load failure:</div>'
														+ '<div>...records: <b>[ '
														+ records
														+ ' ]</b> </div>'
														+ '<div>...options: <b>{ '
														+ options
														+ ' }</b> </div>'
														+ '<div>...success: <b>'
														+ success
														+ '</b> </div>');
									} catch (e) {
										THROW(
												{
													e : 'FATAL',
													args : arguments,
													props : ['content',
															'content.id',
															'loadSitemapNodesURL']
												}, this,
												'sitemapNodePanel.reload');
									}
								}
							}
						});
			}, this);

		} catch (e) {
			FATAL(e, this, 'initSitemapNodesDisplayer');
		}
	},

	/**
	 * 
	 */
	initAttachmentsPanel : function() {

		// DBG >>
		if (this.DBG) {
			THROW({
						args : arguments,
						props : ['id', 'loadAttachmentsURL', 'tab', 'tab.id']
					}, this, 'initAttachmentsPanel');
		}

		try {

			// tab = Ext.getCmp(config.id);
			if (typeof(this.attachmentsEditor) != 'undefined') {
				// remove/delete former attachments editor
				delete this.attachmentsEditor;
			}

			// build editor
			_thisConf = this.initialConfig;
			_thisConf.id = this.content.clazz + '.' + this.content.id
					+ '.attachments.editor';
			_thisConf.renderTo = this.content.clazz + '.' + this.content.id
					+ '.attachments';
			this.attachmentsEditor = new Pulse.AttachmentsEditor(_thisConf/*
																			 * { //
																			 * TODO
																			 * remove
																			 * below
																			 * after
																			 * refactoring
																			 * tab:
																			 * Ext.getCmp(config.id), //
																			 * TODO
																			 * above
																			 * below
																			 * after
																			 * refactoring
																			 * content:
																			 * config.content,
																			 * id:
																			 * config.content.clazz +
																			 * '.' +
																			 * config.content.id +
																			 * '.attachments.editor',
																			 * renderTo:
																			 * config.content.clazz +
																			 * '.' +
																			 * config.content.id +
																			 * '.attachments',
																			 * loadAttachmentsURL:
																			 * config.loadAttachmentsURL,
																			 * initFileBrowserURL:
																			 * config.initFileBrowserURL,
																			 * fileBrowserTreeURL:
																			 * config.fileBrowserTreeURL,
																			 * addAttachmentURL:
																			 * config.addAttachmentURL,
																			 * editAttachmentURL:
																			 * config.editAttachmentURL,
																			 * deleteAttachmentURL:
																			 * config.deleteAttachmentURL,
																			 * fileBrowserPreviewURL:
																			 * config.fileBrowserPreviewURL,
																			 * initAttachmentDescriptionEditorURL:
																			 * config.initAttachmentDescriptionEditorURL,
																			 * saveAttachmentDescriptionEditorURL:
																			 * config.saveAttachmentDescriptionEditorURL }
																			 */);

			this.attachmentsEditor.on('MSG', function(msgString, editor) {

						// THROW({e:'TODO',args:arguments,propsObj:editor,props:['id','type']},this,'MSG');

						// TODO implement proper msg-ing after refactoring

					}, this);

			this.addSubEditor(this.attachmentsEditor);

		} catch (e) {
			FATAL(e, this, 'initAttachmentsPanel');
		}

	},

	/**
	 * @param {Object}
	 *            el, the element
	 */
	initNameMonitor : function(el) {

		try {

			// retrieve required fields
			this.nameEl = (typeof(el) != 'undefined' && el !== null) ? el : Ext
					.get(this.getContent().clazz + '.' + this.getContent().id
							+ '.name');

			if (typeof(this.nameEl) == 'undefined' && this.nameEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED', this, 'initNameMonitor');
				}
				return;
			}

			// builds monitor
			nameMonitorCFG = {
				id : this.id + '.nameEditor',
				el : this.nameEl,
				allowBlank : false
			};

			this.nameMonitor = new Pulse.FieldMonitor(nameMonitorCFG);

			// initial validation
			this.nameMonitor.validate();

			this.addSubEditor(this.nameMonitor);

		} catch (e) {
			if (this.DBG) {
				FATAL(e, this, 'initNameMonitor');
			}
		}
	},

	/**
	 * @param {Object}
	 *            el, the element
	 */
	initSuffixMonitor : function(el) {

		try {

			// retrieve required fields
			this.suffixEl = (typeof(el) != 'undefined' && el !== null)
					? el
					: Ext.get(this.getContent().clazz + '.'
							+ this.getContent().id + '.suffix');

			if (typeof(this.suffixEl) == 'undefined' && this.suffixEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED', this, 'initSuffixMonitor');
				}
				return;
			}

			// builds monitor
			suffixMonitorCFG = {
				allowBlank : false,
				id : this.id + '.suffixEditor',
				el : this.suffixEl
			};
			this.suffixMonitor = new Pulse.FieldMonitor(suffixMonitorCFG);

			// initial validation
			this.suffixMonitor.validate();

			this.addSubEditor(this.suffixMonitor);

		} catch (e) {
			if (this.DBG) {
				FATAL(e, this, 'initSuffixMonitor');
			}
		}
	},

	/**
	 * title monitor.
	 */
	initTitleMonitor : function(el) {

		try {

			// retrieve required fields
			this.titleEl = (typeof(el) != 'undefined' && el !== null)
					? el
					: Ext.get(this.getContent().clazz + '.'
							+ this.getContent().id + '.title');

			if (typeof(this.titleEl) == 'undefined' && this.titleEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED', this, 'initTitleMonitor');
				}
				return;
			}

			// builds monitor
			titleMonitorCFG = {
				allowBlank : true,
				id : this.id + '.titleEditor',
				el : this.titleEl
			};
			this.titleMonitor = new Pulse.FieldMonitor(titleMonitorCFG);

			// initial validation
			this.titleMonitor.validate();

			this.addSubEditor(this.titleMonitor);

		} catch (e) {
			if (this.DBG) {
				FATAL(e, this, 'initTitleMonitor');
			}
		}
	},

	/**
	 * 
	 */
	initFieldMonitoring : function() {

		// retrieve required fields
		this.keywordsEl = Ext.get(this.getContent().clazz + '.'
				+ this.getContent().id + '.keywords');

		// DBG >>
		if (this.DBG) {
			THROW({
						args : arguments,
						props : ['keywordsEl']
					}, this, 'initFieldMonitoring.ContentEditor');
		}

		try {

			// headline
			headlineEl = Ext.get(this.getContent().clazz + '.'
					+ this.getContent().id + '.name');
			if (typeof(headlineEl) != 'undefined' && headlineEl !== null) {
				this.initNameMonitor(headlineEl);
			}

			// suffix
			suffixEl = Ext.get(this.getContent().clazz + '.'
					+ this.getContent().id + '.suffix');
			if (typeof(suffixEl) != 'undefined' && suffixEl !== null) {
				this.initSuffixMonitor(suffixEl);
			}

			// keywords
			if (typeof(this.keywordsEl) != 'undefined'
					&& this.keywordsEl !== null) {
				Pulse.initTextAreaMonitor(this.keywordsEl, this, 'keywordsEl');
			}

			// title
			titleEl = Ext.get(this.getContent().clazz + '.'
					+ this.getContent().id + '.title');
			if (typeof(titleEl) != 'undefined' && titleEl !== null) {
				this.initTitleMonitor(titleEl);
			}

			// meta-keywords
			this.metakeywordsEl = Ext.get(this.getContent().clazz + '.'
					+ this.getContent().id + '.metakeywords');
			if (typeof(this.metakeywordsEl) != 'undefined'
					&& this.metakeywordsEl !== null) {
				Pulse.initTextAreaMonitor(this.metakeywordsEl, this,
						'metakeywordsEl');
			}

			// meta-description
			this.metadescriptionEl = Ext.get(this.getContent().clazz + '.'
					+ this.getContent().id + '.metadescription');
			if (typeof(this.metadescriptionEl) != 'undefined'
					&& this.metadescriptionEl !== null) {
				Pulse.initTextAreaMonitor(this.metadescriptionEl, this,
						'metadescriptionEl');
			}

		} catch (e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined')
					? ', ' + e.description
					: '';
			THROW({
						e : 'FATAL',
						o : {
							e : e,
							o : description
						}
					}, this, 'initFieldMonitoring.ContentEditor');
		}
	},

	/**
	 * 
	 */
	initReferenceDurationEditorPanel : function() {

		// DBG >>
		if (this.DBG) {
			THROW({
						args : arguments,
						props : ['initReferenceDurationEditorURL']
					}, this, 'initReferenceDurationEditorPanel');
		}

		try {

			if (typeof(this.initReferenceDurationEditorURL) != 'string'
					|| this.initReferenceDurationEditorURL === '') {
				if (this.DBG) {
					FATAL({
								e : 'URL UNDEFINED',
								props : ['initReferenceDurationEditorURL']
							}, this, 'initReferenceDurationEditorPanel');
				}
				return;
			}

			subEditorPanelCFG = {
				/* height: 250, */
				id : this.getContent().clazz + '.' + this.getContent().id
						+ '.durationEditorPanel',
				masterEditor : this,
				url : this.initReferenceDurationEditorURL,
				params : {
					id : this.getContent().id
				},
				renderTo : this.getContent().clazz + '.' + this.getContent().id
						+ '.durationEditorDiv',
				bodyStyle : 'padding: 5px 5px 5px 5px;'
			};

			if (typeof(this.referenceDurationEditorTitle) == 'string'
					&& this.referenceDurationEditorTitle !== '') {
				subEditorPanelCFG.title = this.referenceDurationEditorTitle;
			}

			subEditorPanel = new Pulse.SubEditorPanel(subEditorPanelCFG);

			subEditorPanel.on('expand', function() {
						this.initializePanel();
					});

			this.addSubEditor(subEditorPanel);

		} catch (e) {
			FATAL(e, this, 'initReferenceDurationEditorPanel');
		}

	},

	/**
	 * initializes this componenet with a given config.
	 */
	initComponent : function() {

		// call super
		Pulse.ContentEditor.superclass.initComponent.call(this);

		// // DBG >>
		// if (this.DBG) {
		// props = ['id','type'];
		// props = props.concat(DBG.getPropertyArray(this.initialConfig));
		// THROW({args:arguments,props:props},this,'initComponent.ContentEditor');
		// }

		try {

			if (typeof(this.initContentLocalizationMapURL) == 'string'
					&& this.initContentLocalizationMapURL !== '') {
				ContentLocalizationMapEditor.init(this);
			}

			if (typeof(this.loadSitemapNodesURL) == 'string'
					&& this.loadSitemapNodesURL !== '') {
				this.initSitemapNodesDisplayer();
			}

			if (typeof(this.loadAttachmentsURL) == 'string'
					&& this.loadAttachmentsURL !== '') {
				this.initAttachmentsPanel();
			}

			if (typeof(this.initReferenceDurationEditorURL) == 'string'
					&& this.initReferenceDurationEditorURL !== '') {
				this.initReferenceDurationEditorPanel();
			}

			this.seoPanel = new Ext.Panel({
						title : 'SEO',
						contentEl : this.getContent().clazz + '.'
								+ this.getContent().id + '.SEOfields',
						collapsed : true,
						collapsible : true,
						renderTo : this.getContent().clazz + '.'
								+ this.getContent().id + '.SEOpanel'
					});

			/**
			 * * // setup field-monitoring * this.initFieldMonitoring(); !! has
			 * to be called by extending sub-class !!
			 * 
			 * 
			 * 
			 */

		} catch (e) {
			FATAL(e, this, 'initComponent.ContentEditor');
		}

	},

	/**
	 * 
	 */
	getId : function() {

		if (typeof(this.id) == 'undefined'
				&& (typeof(this.initialConfig.id) == 'undefined' || this.initialConfig.id === null)) {

			// builds id from content
			// --> "{content.clazz}.{content.id}.contentEditor"
			if (typeof(this.getContent()) != 'undefined') {
				this.id = this.getContent().clazz + '.' + this.getContent().id
						+ '.contentEditor';
			} else {
				this.id = this.type + '.' + Ext.id();
			}
		}

		return this.id;
	}

};
Pulse.ContentEditor = Ext.extend(Pulse.Editor, ContentEditor); // END ::
// Pulse.ContentEditor


/**
 * 
 */
var ContentLocalizationMapEditor = {
	
	/**
	 * @param {Object} config
	 */
	init: function(config) {
		
		// builds contentlocalizationmap-editor
		panel = new Ext.Panel({
			id: config.content.clazz + '.' + config.content.id + '.contentLocalizationMap.panel',
            html: '', title: VIEWPORT_PROPERTIES.LOCALIZATIONS+':', collapsible:true, collapsed:true,
            renderTo: config.content.clazz + '.' + config.content.id + '.contentLocalizationMap',
            tbar: [
	            new Ext.Action({
	            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_ADD,
	            	handler: function() {

	            		ContentRegistryEditor.getSelectWindow({
	            			getChildrenURL: config.browseContentRegistryURL,
	            			selectCallback: function(node) {

	            				Ext.Ajax.request({
	            					url: config.contentLocalizationMapAddURL,
	            					method: 'POST',
	            					success: function(response, options) {
	            						decodedResponse = Ext.decode(response.responseText);
										if (true === decodedResponse.status) {
											panel = Ext.getCmp(config.content.clazz + '.' + config.content.id + '.contentLocalizationMap.panel');
						            		panel.lastLoadConfig.callback = LPCB;
						            		panel.lastLoadConfig.timeout = 30;
						            		panel.load(panel.lastLoadConfig);
					            		} else {
											PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'ContentLocalizationMapEditor','tbar.add.execute()');
										}
	            					},
	            					failure: function(response, options) {
	            						if (typeof(response.responseText) == 'undefined') {
						   						PulseError.Throw({e:'REQUEST.FAILED'},'ContentLocalizationMapEditor','tbar.add.execute()');
									        } else {
									        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ContentLocalizationMapEditor','tbar.add.execute()');
									        }
	            					},
	            					params: { id: config.content.id, addid: node.attributes.contentId }
	            				});
	            			}
	            		});
	            	},
	            	iconCls: 'addIconCls'
	            }),'-','->','-',
	            new Ext.Action({
	            	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	            	handler: function() {
	            		panel = Ext.getCmp(config.content.clazz + '.' + config.content.id + '.contentLocalizationMap.panel');
	            		panel.lastLoadConfig.callback = LPCB;
	            		panel.lastLoadConfig.timeout = 30;
	            		panel.load(panel.lastLoadConfig);
	            	},
	            	iconCls: 'reloadIconCls'
	            })
            ]
		});
		
		loadConfig = {
			url: config.initContentLocalizationMapURL,
        	scripts: true,
        	callback: LPCB,
        	params: { id: config.content.id },
            text: 'loading...',
            discardUrl: true,
            nocache: true,
            timeout: 30
		};
		
		// store lastloadconfig in panel for reload-button
		panel.lastLoadConfig = loadConfig;
		
		panel.load(loadConfig);
		
		return panel;
	},
	
//	/**
//	 * @param {Object} panel
//	 * @param {Boolean} success
//	 * @param {Object} response
//	 * @param {Object} options
//	 */
//	loadCallback: function(panel, success, response, options) {
//		
//		params = [{n:'callback.arguments.length',o:arguments.length}];
//		for (i = 0; i < arguments.length; i++) {
//			params.push({n:'arg'+i,o:arguments[i]});
//			//params.push({n:'typeof(arg'+i+')',o:typeof(arguments[i])});
//		}
//
//		if (true === success) {
//			// display any server-side errors
////			var decodedResponse;
//			try {
//				decodedResponse = Ext.decode(response.responseText);
//				if (typeof(decodedResponse) != 'undefined' && typeof(decodedResponse.error) != 'undefined') {
//					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'ContentLocalizationMapEditor','loadCallback');
//					panel.update('...load failed');
//				}
//			} catch (decodingError) {
//				params.push({n:'response.responseText != JSON',o:decodingError});	
//			}
//			if (response.status != 200) {
//				/* check if this is necessary */
//				params.push({n:'response.status',o:response.status});
//				params.push({n:'CHECK BACK ON THIS...'});
//				PulseError.Throw({e:'REQUEST.ERROR.CHECK',o:response.responseText,p:params},'ContentLocalizationMapEditor','loadCallback');
//				panel.update('<div>...load failed:\n' + response.responseText + '</div>');
//			}			
//		} else {
//			if (typeof(response) == 'undefined') {
//				PulseError.Throw({e:'REQUEST.FAILED'},'ContentLocalizationMapEditor','loadCallback');
//				panel.update('...load failed');
//			} else {
//				params.push({n:'response.status',o:response.status});
//				PulseError.Throw({e:'REQUEST.ERROR',o:response.responseText,p:params},'ContentLocalizationMapEditor','loadCallback');
//				panel.update('<div>...load failed:\n' + response.responseText + '</div>');
//			}
//		}	
//	},
	
	/**
	 * @param {String} removeURL
	 * @param {String} contentclass
	 * @param {String}/{Number} contentid
	 * @param {String}/{Number} removeid
	 */
	removeContent: function(removeURL, contentclass, contentid, removeid) {
		
		// display delete confirm-dialogue
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':',
			VIEWPORT_PROPERTIES.MSG_REALLYDELETE, 
        	function(response) {
        		// do nothing if answer is not yes
	        	if('yes' === response) {
		
					Ext.Ajax.request({
						url: removeURL,
						method: 'POST',
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								panel = Ext.getCmp(contentclass + '.' + contentid + '.contentLocalizationMap.panel');
			            		panel.lastLoadConfig.callback = LPCB;
			            		panel.lastLoadConfig.timeout = 30;
			            		panel.load(panel.lastLoadConfig);
			        		} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'ContentLocalizationMapEditor','removeContent()');
							}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},'ContentLocalizationMapEditor','removeContent()');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ContentLocalizationMapEditor','removeContent()');
						        }
						},
						params: { id: contentid, removeid: removeid }
					});
		
				} 
        	}, 
        	this
    	);
		
	}
	
}; // END :: ContentLocalizationMapEditor


/**
 * 
 */
var ContentRegistryEditor = {

	type : 'ContentRegistryEditor',
	DBG : true,

	win : null,
	msgPanel : null,
	centerPanel : null,
	contentNameField : null,
	createNameField : null,
	selectedNode : null,
	el : null,
	tel : null,
	tree : null,

	/**
	 * @param {Object}
	 *            config
	 */
	getSelectWindow : function(config) {

		try {

			pel = VIEWPORT.getEl();
			if (typeof(pel) == 'undefined') {
				throw ('19 :: ContentRegistryEditor.getSelectWindow() :: ' + 'CHECK for element failed...');
			}

			namePanel = new Ext.Panel({
				region : 'south',
				margins : '3 3 3 3',
				bodyStyle : 'padding: 5px',
				autoHeight : true,
				html : '<table cellpadding="0" cellspacing="0" border="0" style="width:90%" align="center"><tr>'
						+ '<td>'
						+ VIEWPORT_PROPERTIES.NAME
						+ ':&#160;</td>'
						+ '<td style="width:100%"><div id="ContentRegistryEditorWindow.nameField"> </div></td>'
						+ '</tr></table>'
			});

			if (this.el === null) {

				this.el = pel.createChild({
							tag : 'div',
							id : 'ContentRegistryEditorWindow.el'
						});

			}

			this.msgPanel = new Ext.Panel({
						id : 'ContentRegistryEditorWindow.msgPanel',
						region : 'north',
						html : 'msgs go here',
						border : false,
						autoHeight : true
					});

			if (this.tel === null) {

				this.tel = pel.createChild({
							tag : 'div',
							id : 'ContentRegistryEditorWindow.tel'
						});

			}

			tree = this.getTree({
						renderTo : this.tel,
						getChildrenURL : config.getChildrenURL,
						onSelectNodeClick : function(crTreeNode) {
							ContentRegistryEditor.selectedNode = crTreeNode;
							ContentRegistryEditor.contentNameField
									.setValue(crTreeNode.text);
						}
					});

			this.centerPanel = new Ext.Panel({
						region : 'center',
						margins : '3 3 0 3',
						bodyStyle : 'padding:5px;overflow:scroll;',
						items : [tree]
					});

			this.win = new Ext.Window({
				id : 'ContentRegistryEditorWindow.Win',
				title : VIEWPORT_PROPERTIES.CONTENTREGISTRY + ':',
				iconCls : 'contentRegistryIconCls',
				modal : true,
				plain : true,
				renderTo : this.el,
				height : 500,
				layout : 'border',
				items : [this.msgPanel, this.centerPanel, namePanel],
				width : 400,
				buttonAlign : 'center',
				buttons : [{
					text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
					handler : function() {
						// check values
						if (ContentRegistryEditor.selectedNode === null) {
							return false;
						}
						// PulseError.Throw({e:'chk_1',p:[
						// {n:'field',o:'"' +
						// ContentRegistryEditor.contentNameField.getValue() +
						// '"'},
						// {n:'node',o:'"' +
						// ContentRegistryEditor.selectedNode.text + '"'}]
						// });
						//		                	
						// splitArrayOne =
						// ContentRegistryEditor.contentNameField.getValue().split('');
						// splitArrayTwo =
						// ContentRegistryEditor.selectedNode.text.split('');
						//		                	
						// p = [
						// {n:'splitArrayOne.length', o:splitArrayOne.length},
						// {n:'splitArrayTwo.length', o:splitArrayTwo.length}
						// ];
						//		                	
						// for (i = 0; i < splitArrayOne.length; i++) {
						// p.push({n:'' + splitArrayOne[i] + ' : ' +
						// splitArrayTwo[i], o:'' + (splitArrayOne[i] ==
						// splitArrayTwo[i])});
						// }
						// PulseError.Throw({e:'chk_2',p:p});
						if (ContentRegistryEditor.contentNameField
								.getRawValue().trim() != ContentRegistryEditor.selectedNode.text
								.trim()) {
							return false;
						}
						// PulseError.Throw({e:'chk_3'});
						// checks passed : create
						// PulseError.Throw({e:'DBG',p:[
						// {n:'text',o:ContentRegistryEditor.selectedNode.text},
						// {n:'id',o:ContentRegistryEditor.selectedNode.id}
						// ]},'FilterEditor','createFilter()');

						if (typeof(config.selectCallback) == 'function') {
							config
									.selectCallback(ContentRegistryEditor.selectedNode);
						} else if (typeof(config.scope) == 'object'
								&& config.scope !== null
								&& typeof(config.selectCallback) == 'string'
								&& typeof(config.scope[config.selectCallback]) == 'function') {
							config.scope[config.selectCallback](ContentRegistryEditor.selectedNode);
						}

						ContentRegistryEditor.win.close();

					}
				}, {
					text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
					handler : function() {
						ContentRegistryEditor.win.close();
					}
				}]
			});

			this.win.on('close', function() {
						// clean
						delete this.centerPanel;
						delete this.tel;
						delete this.tree;
						// re-init
						this.centerPanel = null;
						this.tel = null;
						this.tree = null;

					}, this);

			this.win.on('show', function() {
				this.contentNameField = new Ext.form.TextField({
							name : 'ContentRegistryEditorWindow.nameField.name',
							renderTo : 'ContentRegistryEditorWindow.nameField',
							style : 'width:100%',
							emptyText : (typeof(config.emptyText) != 'undefined')
									? config.emptyText
									: VIEWPORT_PROPERTIES.TEXT_CHOOSE_CONTENT,
							allowBlank : false,
							readOnly : true
						});
				this.win.doLayout(true);
			}, this);

			// initial hide of msgPanel
			this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide', function() {
						ContentRegistryEditor.win.doLayout(true);
					});

			this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 200, 50);
			this.win.show(this);

			tree.render();
			tree.getRootNode().expand();

			this.contentNameField.validate();

		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}

	},

	/**
	 * @param {Object}
	 *            config
	 */
	getTree : function(config) {

		loaderConf = {
			dataUrl : config.getChildrenURL,
			uiProviders : {
				'RegistryTreeNodeUI' : PULSE.RegistryTreeNodeUI
			}
		};

		if (typeof(config.baseParams) != 'undefined') {
			loaderConf.baseParams = config.baseParams;
		}

		loader = new Ext.tree.TreeLoader(loaderConf);

		id = config.id;
		if (typeof(id) == 'undefined' || id === null) {
			id = Ext.id();
		}

		tree = new Ext.tree.TreePanel({
					id : id,
					// ext-cfg
					el : config.renderTo,
					region : (typeof(config.region) == 'undefined')
							? ''
							: config.region,
					autoScroll : true,
					autoHeight : (typeof(config.height) != 'undefined')
							? false
							: true,
					animate : true,
					enableDD : (typeof(config.enableDD) != 'boolean')
							? false
							: config.enableDD,
					containerScroll : true,
					rootVisible : false,
					border : false,
					loader : loader,
					// pulse-cfg
					onSelectNodeClick : null,
					editor : this
				});

		if (typeof(config.iconRenderer) == 'function') {
			tree.iconRenderer = config.iconRenderer;
		}

		if (typeof(config.height) != 'undefined') {
			tree.setHeight(config.height);
		}

		if (config.enableDD === true) {
			tree.on({
				/**
				 * moves a node within the tree after exectuing an
				 * Ajax-server-call and processing it's response.
				 * 
				 * @Override
				 * 
				 * @param {Object}
				 *            e : e.tree - The TreePanel e.target - The node
				 *            being targeted for the drop e.data - The drag data
				 *            from the drag source e.point - The point of the
				 *            drop - append, above or below e.source - The drag
				 *            source e.rawEvent - Raw mouse event e.dropNode -
				 *            Drop node(s) provided by the source OR you can
				 *            supply node(s) to be inserted by setting them on
				 *            this object. e.cancel - Set this to true to cancel
				 *            the drop.
				 * 
				 * @return {Boolean} false always to cancel default
				 *         Ext.tree-operation drop, drop is performed after
				 *         AJAX-call
				 * 
				 */
				'beforenodedrop' : {
					scope : tree,
					fn : function(e) {

						Ext.Ajax.request({
							url : e.dropNode.attributes.moveURL,
							method : 'POST',
							success : function(response, options) {
								decodedResponse = Ext
										.decode(response.responseText);
								targetNode = options.e.target;
								movenode = options.e.dropNode;
								oldParent = movenode.parentNode;
								if (true === decodedResponse.status) {
									switch (options.e.point) {
										case 'append' :
											if (!targetNode.isExpanded()) {
												try {
													if (true === targetNode
															.isLoaded()) {
														targetNode.expand(
																false, null,
																function() {
																	targetNode
																			.appendChild(movenode);
																}
																		.createDelegate(this));
													} else {
														oldParent
																.removeChild(movenode);
														targetNode.expand();
													}
												} catch (err) {
													targetNode.expand();
													targetNode
															.appendChild(movenode);
												}
											} else {
												targetNode
														.appendChild(movenode);
											}
											break;

										case 'above' :
											targetNode.parentNode.insertBefore(
													movenode, targetNode);
											break;

										case 'below' :
											targetNode.parentNode.insertBefore(
													movenode,
													targetNode.nextSibling);
											break;
									}

									if (true === decodedResponse.refreshSitemap) {
										SitemapTree.getRootNode().reload();
									}

								} else {
									PulseError.Throw({
												e : 'SERVER.ERROR',
												o : decodedResponse.error
											}, 'ContentRegistryEditor',
											'onbeforenodedrop('
													+ options.e.dropNode + ')');
								}
							},
							failure : function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({
												e : 'REQUEST.FAILED'
											}, 'ContentRegistryEditor',
											'onbeforenodedrop('
													+ options.e.dropNode + ')');
								} else {
									PulseError.Throw({
												e : 'REQUEST.ERROR',
												o : {
													e : response.responseText
												}
											}, 'ContentRegistryEditor',
											'onbeforenodedrop('
													+ options.e.dropNode + ')');
								}
							},
							e : e,
							params : {
								targetnodeid : e.target.id,
								insertpoint : e.point,
								movenodeid : e.dropNode.id
							}
						});
						return false;
					}
				}
			});
		}

		if (typeof(config.onSelectNodeClick) == 'function') {
			tree.onSelectNodeClick = config.onSelectNodeClick;
		}

		rootCFG = {
			text : '',
			draggable : false,
			allowDrop : false,
			id : 'source.' + Ext.id(),
			iconCls : 'contentRegistryIconCls'
		};
		if (typeof(config.mode) == 'string' && config.mode == 'edit') {
			rootCFG.expandEditURL = config.getChildrenURL;
		}
		root = new Ext.tree.AsyncTreeNode(rootCFG);

		// tree-loader-listeners
		loader.on('beforeload', function(loader, node, callback) {

					// props = DBG.getPropertyArray(node.attributes);
					// FATAL({args:arguments,props:props,propsObj:node.attributes},this,'beforeload');
					if (typeof(this.mode) == 'string' && this.mode == 'edit') {
						loader.dataUrl = node.attributes.expandEditURL;
					} else if (typeof(node.attributes.expandURL) == 'string'
							&& node.attributes.expandURL != '') {
						loader.dataUrl = node.attributes.expandURL;
					}

					if (typeof(this.westAnimate) == 'object') {
						if (node.id === Ext.getCmp(this.id).getRootNode().id) {
							try {
								Ext.get(this.westAnimate.id).replaceClass(
										this.westAnimate.replaceCls,
										'loadingIconCls');
							} catch (e) {/* ignore */
							}
						}
					}
				}, config);

		loader.on('load', function(loader, node, response) {
					if (typeof(this.westAnimate) == 'object') {
						if (node.id === Ext.getCmp(this.id).getRootNode().id) {
							try {
								Ext.get(this.westAnimate.id).replaceClass(
										'loadingIconCls',
										this.westAnimate.replaceCls);
							} catch (e) {/* ignore */
							}
						}
					}
				}, config);

		loader.on('loadexception', function(loader, node, response) {

					/* FATAL(response,this,'browseTree'); */
					if (typeof(response.status) != 'undefined'
							&& response.status == 403) {
						PulseError.Throw({
									e : 'SERVER.ERROR',
									o : {
										e : response.statusText
									}
								}, this.type, 'browseTree');
					} else if (typeof(response.responseText) == 'undefined') {
						PulseError.Throw({
									e : 'REQUEST.FAILED'
								}, this.type, 'browseTree');
					} else {
						PulseError.Throw({
									e : 'REQUEST.ERROR',
									o : {
										e : response.responseText
									}
								}, this.type, 'browseTree');
					}

				}, this);

		tree.setRootNode(root);

		return tree;
	},

	/**
	 * @param {Object}
	 *            node
	 */
	createNode : function(node) {

		this.selectedNode = node;

		// show create window
		try {

			pel = VIEWPORT.getEl();
			if (typeof(pel) == 'undefined') {
				throw ('276 :: ContentRegistryEditor.createNode() :: ' + 'CHECK for element failed...');
			}

			if (this.el === null) {
				this.el = pel.createChild({
							tag : 'div',
							id : 'ContentRegistryEditorWindow.el'
						});
			}

			this.centerPanel = new Ext.Panel({
						margins : '3 3 0 3',
						html : 'center'
					});

			this.win = new Ext.Window({
						id : 'ContentRegistryEditorWindow.Win',
						title : VIEWPORT_PROPERTIES.CONTENTREGISTRY + ':',
						iconCls : 'contentRegistryIconCls',
						modal : true,
						plain : true,
						renderTo : this.el,
						autoHeight : true,
						items : [this.centerPanel],
						width : 400,
						buttonAlign : 'center',
						buttons : [{
									text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
									handler : function() {
										ContentRegistryEditor.win.close();
									},
									iconCls : 'cancelIconCls'
								}]
					});

			this.win.on('close', function() {
						// clean
						delete this.centerPanel;
						delete this.createNameField;
						// re-init
						this.centerPanel = null;
						this.createNameField = null;
					}, this);

			this.win.on('show', function() {
						this.centerPanel.load({
									url : node.attributes.createURL,
									method : 'POST',
									scripts : true,
									callback : LPCB,
									text : 'loading...',
									discardUrl : true,
									nocache : true,
									timeout : 30
								});
					}, this);

			this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 200, 50);
			this.win.show(this);

		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}

	},

	/**
	 * @param {String}
	 *            saveURL
	 */
	save : function(saveURL) {

		if (this.createNameField === null
				|| this.createNameField.getValue().trim() === '') {
			return;
		}

		// server-call
		Ext.Ajax.request({
			url : saveURL,
			method : 'POST',
			success : function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					ContentRegistryEditor.responseId = parseInt(
							decodedResponse.id, 10);
					ContentRegistryEditor.selectedNode.reload(function(node) {
								n = node.findChild('id',
										ContentRegistryEditor.responseId);

								delete ContentRegistryEditor.responseId;
								ContentRegistryEditor.win.close();
								n.select();
								if (typeof(n.attributes.contentId) != 'undefined') {
									ContentRegistryEditor.editNode(n);
								}
							});

					if (true === decodedResponse.refreshSitemap) {
						SitemapTree.getRootNode().reload();
					}

				} else {
					PulseError.Throw({
								e : 'SERVER.ERROR',
								o : decodedResponse.error
							}, 'ContentRegistryEditor', 'save');
				}

			},
			failure : function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({
								e : 'REQUEST.FAILED'
							}, 'ContentRegistryEditor', 'save');
				} else {
					PulseError.Throw({
								e : 'REQUEST.ERROR',
								o : {
									e : response.responseText
								}
							}, 'ContentRegistryEditor', 'save');
				}
			},
			params : {
				name : this.createNameField.getValue().trim()
			}
		});

	},

	/**
	 * @param {Object}
	 *            node
	 */
	editNode : function(node) {

		// edit content
		if (typeof(node.attributes.contentId) != 'undefined') {
			PULSE_VIEWPORT_CONTROLLER.openTab({
				id : node.attributes.contentType + '.'
						+ node.attributes.contentId + '.editor',
				title : node.text /*
									 * + ' (id: ' + node.attributes.contentId +
									 * ')'
									 */,
				tabTip : node.text + ' (id: ' + node.attributes.contentId + ')',
				iconCls : node.attributes.contentType.split('.').join(''),
				registeredObject : {
					node : node
				},
				loadParams : {
					url : node.attributes.editURL
				}
			});
			return;
		}

		// rename folder
		Ext.Msg.prompt(VIEWPORT_PROPERTIES.NAME,
				VIEWPORT_PROPERTIES.TEXT_ENTER_NAME + ':', function(btn, text) {
					if (btn === 'ok') {
						if (text.trim() === '') {
							return;
						}
						node.ui.setBusy(true);
						Ext.Ajax.request({
							url : node.attributes.editURL,
							method : 'POST',
							success : function(response, options) {
								decodedResponse = Ext
										.decode(response.responseText);
								options.node.ui.setBusy();
								if (true === decodedResponse.status) {
									// rename node
									options.node.setText(options.params.name);
								} else {
									PulseError.Throw({
												e : 'SERVER.ERROR',
												o : decodedResponse.error
											}, 'ContentRegistryEditor',
											'editNode()');
								}
							},
							failure : function(response, options) {
								options.node.ui.setBusy();
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({
												e : 'REQUEST.FAILED'
											}, 'ContentRegistryEditor',
											'editNode()');
								} else {
									PulseError.Throw({
												e : 'REQUEST.ERROR',
												o : {
													e : response.responseText
												}
											}, 'ContentRegistryEditor',
											'editNode()');
								}
							},
							node : node,
							params : {
								id : node.id,
								name : text
							}
						});

					}
				}, this, false, node.text);

	},

	/**
	 * @param {Object}
	 *            node
	 */
	deleteNode : function(node) {
		// display delete confirm-dialogue
		Ext.Msg.confirm(VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"'
						+ node.text + '"',
				VIEWPORT_PROPERTIES.MSG_REALLYDELETE, function(response) {
					// do nothing if answer is not yes
					if ('yes' === response) {

						// show node busy
						node.ui.setBusy(true);

						// server-call
						Ext.Ajax.request({
							url : node.attributes.deleteURL,
							method : 'POST',
							success : function(response, options) {
								decodedResponse = Ext
										.decode(response.responseText);
								node = options.node;
								parentNode = node.parentNode;
								if (true === decodedResponse.status) {

									// try close editor if open
									if (typeof(node.attributes.contentId) != 'undefined') {

										tabId = node.attributes.contentType
												+ '.'
												+ node.attributes.contentId
												+ '.editor';
										PULSE_VIEWPORT_CONTROLLER.closeTab(
												tabId, true);

										if (node.childNodes.length > 0) {
											for (var i = 0; i < node.childNodes.length; i++) {
												if (typeof(node.childNodes[i].attributes.contentId) != 'undefined') {
													tabId = node.childNodes[i].attributes.contentType
															+ '.'
															+ node.childNodes[i].attributes.contentId
															+ '.editor';
													PULSE_VIEWPORT_CONTROLLER
															.closeTab(tabId,
																	true);
												}
											}
										}

									}

									// delete
									parentNode.removeChild(node);

									if (true === decodedResponse.refreshSitemap) {
										SitemapTree.getRootNode().reload();
									}

								} else {
									node.ui.setBusy();
									PulseError.Throw({
												e : 'SERVER.ERROR',
												o : decodedResponse.error
											}, 'ContentRegistryEditor',
											'deleteNode(' + options.node + ')');
								}
							},
							failure : function(response, options) {
								options.node.ui.setBusy();
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({
												e : 'REQUEST.FAILED'
											}, 'ContentRegistryEditor',
											'deleteNode(' + options.node + ')');
								} else {
									PulseError.Throw({
												e : 'REQUEST.ERROR',
												o : {
													e : response.responseText
												}
											}, 'ContentRegistryEditor',
											'deleteNode(' + options.node + ')');
								}
							},
							node : node
						});

					}
				}, this);
	},

	/**
	 * @param {String}
	 *            elId
	 */
	initCreateInputField : function(elId) {
		this.createNameField = new Ext.form.TextField({
					name : 'ContentRegistryEditorWindow.nameField.name',
					renderTo : elId,
					style : 'width:100%;',
					emptyText : VIEWPORT_PROPERTIES.TEXT_ENTER_NAME,
					allowBlank : false
				});
		this.createNameField.validate();
	},

	/**
	 * call to rename a node renames only if node is loaded
	 * 
	 * @param {String}/{Number}
	 *            contentid
	 * @param {String}
	 *            newName
	 */
	renameNodeByContentId : function(contentid, newName) {
		n = this.findChildByContentId(ContentRegistryTree.getRootNode(),
				contentid);
		if (typeof(n) != 'undefined') {
			n.setText(newName);
			n.ui.buildQTip(n.ui, n.attributes);
		}
	},

	/**
	 * recursively walks through the tree (loaded nodes only) and tries to find
	 * node with node.attributes.contentId == given contentid
	 * 
	 * @param {Object}
	 *            node
	 * @param {String}/{Number}
	 *            contentid
	 */
	findChildByContentId : function(node, contentid) {

		if (node === null) {
			return;
		}

		if (node.attributes === null) {
			return;
		}

		if (node.attributes.contentId == contentid) {
			return node;
		}

		if (node.firstChild !== null) {
			return this.findChildByContentId(node.firstChild, contentid);
		} else if (node.nextSibling !== null) {
			return this.findChildByContentId(node.nextSibling, contentid);
		} else {
			return this.findChildByContentId(node.parentNode.nextSibling,
					contentid);
		}

	},

	/**
	 * @param {Object}
	 *            node
	 * @param {Array}
	 *            arrayids, array of contentregistry-node-ids
	 * @param {Function}
	 *            callback
	 */
	expandByIds : function(node, arrayids, callback, isExpanding) {

		try {

			if (typeof(node) == 'undefined' || node === null) {
				return;
			}

			if (true === Ext.getCmp('ContentRegistry.WEST').isExpanding
					&& true !== isExpanding) {
				return;
			}
			if (true !== isExpanding) {
				Ext.getCmp('ContentRegistry.WEST').disable();
			}
			Ext.getCmp('ContentRegistry.WEST').isExpanding = true;

			// expand-function
			exp_fn = function() {
				node.expand(false, true, function(node) {

							c = node.findChild('id', arrayids[0]);

							if (arrayids.length === 1) {
								c.select();
								Ext.getCmp('ContentRegistry.WEST').isExpanding = false;
								Ext.getCmp('ContentRegistry.WEST').enable();
								if (typeof(callback) == 'function') {
									callback(c);
								}
								return;
							}

							arrayids.shift();
							ContentRegistryEditor.expandByIds(c, arrayids,
									callback, true);
						});
			};

			//
			if (arrayids.length === 2) {
				if (node.isLoaded()) {
					node.reload(exp_fn);
				} else {
					exp_fn();
				}
			} else {
				exp_fn();
			}

			return;

		} catch (e) {
			crPanel = Ext.getCmp('ContentRegistry.WEST');
			if (typeof(crPanel) != 'undefined' && crPanel !== null) {
				crPanel.isExpanding = false;
				crPanel.enable();
			}
		}
	},

	/**
	 * @param {String}
	 *            crExpandIdsURL
	 * @param {String}/{Number}
	 *            contentid
	 */
	editContent : function(crExpandIdsURL, contentid) {

		Ext.Ajax.request({
					url : crExpandIdsURL,
					method : 'POST',
					success : function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// show content in contentregistrytree
							crPanel = Ext.getCmp('ContentRegistry.WEST');
							crPanel.expand();
							ContentRegistryEditor.expandByIds(
									ContentRegistryTree.getRootNode(),
									decodedResponse.ids, function(node) {
										ContentRegistryEditor.editNode(node);
									});
						} else {
							PulseError
									.Throw({
												e : 'SERVER.ERROR',
												o : decodedResponse.error
											}, 'ContentRegistryEditor',
											'editContent()');
						}
					},
					failure : function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
							PulseError
									.Throw({
												e : 'REQUEST.FAILED'
											}, 'ContentRegistryEditor',
											'editContent()');
						} else {
							PulseError
									.Throw({
												e : 'REQUEST.ERROR',
												o : {
													e : response.responseText
												}
											}, 'ContentRegistryEditor',
											'editContent()');
						}
					},
					params : {
						id : contentid
					}
				});

	}
	// ,
	//	
	// /**
	// *
	// */
	// loadCallback: LPCB

};

/**
 * 
 */
DBG.ContentGroupEditor = DBG.apply(DBG.ContentEditor,{
		
//	initComponent:  { ContentGroupEditor: false },
	initFieldMonitoring: { ContentGroupEditor: false },
	addSubEditor: { ContentGroupEditor: false },
	hasChanges: { ContentGroupEditor: false },
	
	initTab: false,
	
	MSG: false // checked also in PULSE_VIEWPORT_CONTROLLER

});

/**
 * 
 */
ContentGroupEditor = {
	
	type: 'ContentGroupEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ContentGroupEditor*/,
	
	// defaults
	
	// copy-content-button
	getCreateCopyButtonConfig: function() {
		return {
			text: VIEWPORT_PROPERTIES.COPYCONTENT,
			disabled: true,
			scope: this,
			handler: function() {
	
				this.selectCopyCallback = function(node) {
					Ext.Ajax.request({
						url: this.copyContentURL,
						scope: this,
						method: 'POST',
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								// reloads ContentLocalizationMap
								panel = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentLocalizationMap.panel');
			            		panel.lastLoadConfig.callback = LPCB;
			            		panel.lastLoadConfig.timeout = 30;
			            		panel.load(panel.lastLoadConfig);
			            		// shows copy in contentregistrytree
			            		crPanel = Ext.getCmp('ContentRegistry.WEST');
			            		crPanel.expand();
			            		path = decodedResponse.expandPath;
			            		ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), path, function(node) {
			            			ContentRegistryEditor.editNode(node);
			            		});
		            		} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'tbar.copy');
							}
							delete this.selectCopyCallback;
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'tbar.copy');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'tbar.copy');
					        }
					        delete this.selectCopyCallback;
						},
						params: { id: this.getContent().id, toid: node.attributes.id }
					});
					
				};
	
				windowCfg = {
	    			getChildrenURL: this.browseContentRegistryURL + '?mode=folder&bundle=' + this.getContent().bundle,
	    			emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FOLDER,
	    			scope: this,
	    			selectCallback: 'selectCopyCallback'
	    		};
	    		ContentRegistryEditor.getSelectWindow(windowCfg);
			},
			iconCls: 'copyIconCls'
		};
	},
	
	// save-content-button
	getSaveContentButtonConfig: function() {
		return {
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
			disabled: true,
			scope: this,
			handler: function() {
				
				if (false === this.hasChanges()) {
					this.reset();
					return;
				}
				
				saveValues = this.getChanges({id:this.getContent().id});
				
				if (typeof(saveValues) == 'undefined' || saveValues === null) {
					if (this.DBG) {
						THROW({
							e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
							args:[this.hasChanges(),saveValues]
						},this,'saveContentButton');
					}
					return;
				}
				
				this.tab.disable();
				
				Ext.Ajax.request({
					url: this.saveContentURL,
					method: 'POST',
					scope: this,
					success: function(response, options) {
						this.tab.enable();
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {								
							this.commit();
							(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
						} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
						}
					},
					failure: function(response, options) {
						this.tab.enable();
						if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
				        }
					},
					params: saveValues
				});
			},
			iconCls: 'saveIconCls'
		};
	},
	
	// find-content-in-content-registry-button
	getFindButtonConfig: function() {
		return {
			text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
			disabled: true,
			scope: this,
			handler: function() {					
				Ext.Ajax.request({
					url: this.contentExpandPathURL,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// show content in contentregistrytree
		            		crPanel = Ext.getCmp('ContentRegistry.WEST');
		            		if (typeof(crPanel) == 'undefined' || crPanel === null) {
		            			PULSE_TOOLBAR.openPanel({
		            				id: 'ContentRegistry.WEST',
		            				callback: function() {
			            				ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
			            			}
		            			});
		            			return;
		            		}
		            		crPanel.expand();
							ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
		        		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.find');
						}
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.find');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.find');
					        }
					},
					params: { id: this.getContent().id }
				});
			},
			iconCls: 'findIconCls'
		};
	},
	
	// description-button-config for description-panel
	getEditDescriptionButtonConfig: function() {
		return {
	        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT,
	        disabled: true,
	        scope: this,
	        handler: function() {
	            fckWinCfg = {
	                loadURL: this.initDescriptionEditorURL,
	                loadParams: { id: this.getContent().id },
	                saveURL: this.saveDescriptionURL,
	                saveParams: { id: this.getContent().id },
	                scope: this,
	        		onSaveSuccess: 'loadDescription'
	            };
	            
	            // DBG >>
	            if (this.DBG) {
		        	THROW({
		        		propsObj: fckWinCfg, 
		        		props:[
		        			'loadURL','loadParams',
		        			'saveURL','saveParams',
		        			'scope','onSaveSuccess']
	    			},this,'editDescription.click');
	            }
	            
	            AbstractBasicContentEditor.getFCKEditorWindow(fckWinCfg);                               
	        },
	        iconCls: 'editIconCls'
	    };
    
    },
    getReloadDescriptionButtonConfig: function() {
    	return {
	        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	        disabled: true,
	        scope: this,
	        handler: function() {
	            this.loadDescription();
	        },
	        iconCls: 'reloadIconCls'
	    };
    },
	
	initTab: function() {
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
			
				buttons = [];
				
				// enables save-content-button if URL
				saveContentButtonConfig = this.getSaveContentButtonConfig();
				if (typeof(this.saveContentURL) == 'string' && this.saveContentURL !== '') {
					saveContentButtonConfig.disabled = false;
					saveContentButtonConfig.scope = this;
				}
				buttons.push(saveContentButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
			
				// enables copy-content-button if URL
				createCopyButtonConfig = this.getCreateCopyButtonConfig();
				if (typeof(this.copyContentURL) == 'string' && this.copyContentURL !== '') {
					createCopyButtonConfig.disabled = false;
					createCopyButtonConfig.scope = this;
				}
				buttons.push(createCopyButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// enables find-button if URL
				findButtonConfig = this.getFindButtonConfig();
				if (typeof(this.contentExpandPathURL) == 'string' && this.contentExpandPathURL !== '') {
					findButtonConfig.disabled = false;
					findButtonConfig.scope = this;
				}
				buttons.push(findButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());			
				
				// insert buttons
				this.tab.getTopToolbar().insertButton(0, buttons);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
	},
	
	/**
	 * 
	 */
	initDescriptionPanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['initDescriptionEditorURL','saveDescriptionURL']},this,'initDescriptionPanel');
		}
		
		try {
			
			buttons = [];
			
			// enable edit-desceiption-button if URL
			editDescriptionButtonConfig = this.getEditDescriptionButtonConfig();
	        if (typeof(this.initDescriptionEditorURL) == 'string' && this.initDescriptionEditorURL !== '' 
	        	&& typeof(this.saveDescriptionURL) == 'string' && this.saveDescriptionURL !== '') {
	        	editDescriptionButtonConfig.disabled = false;
	        	editDescriptionButtonConfig.scope = this;
	        }
	        
	        reloadDescriptionButtonConfig = this.getReloadDescriptionButtonConfig();
	        if (typeof(this.loadDescriptionURL) == 'string' && this.loadDescriptionURL !== '') {
	        	reloadDescriptionButtonConfig.disabled = false;
	        	reloadDescriptionButtonConfig.scope = this;
	        }
			
			// builds description panel
			tbar = [editDescriptionButtonConfig,'-','->','-',reloadDescriptionButtonConfig];
			panelCfg = {
	            id: this.getContent().clazz + '.' + this.getContent().id + '.description.panel',
	            title: VIEWPORT_PROPERTIES.DESCRIPTION + ':',
	            collapsible:true, collapsed:true,
	            renderTo: this.getContent().clazz + '.' + this.getContent().id + '.description',
	            html: '...',
	            bodyStyle: 'padding:5px;',
	            tbar: tbar
	        };
	        this.descriptionPanel = new Ext.Panel(panelCfg);
	        
	        // disable summary-panels' content on expand
	        this.descriptionPanel.on('expand',function(p){	        	
	        	if (true !== this.descriptionPanel.initialExpand) {	        		
		            this.loadDescription();
		            this.descriptionPanel.initialExpand = true;
	            }
	        },this);
	        	
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initDescriptionPanel');
			}
		}		
		
	},
	
	/**
	 * loads the description-panel
	 */
	loadDescription: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['loadDescriptionURL','content.id']},this,'loadDescripton');
		}
		
		try {
			
	        loadCfg = {
	            url: this.loadDescriptionURL,
	            method: 'POST',
	            callback: LPCB_DISABLE,
	            params: { id: this.getContent().id },
	            text: 'loading...',
	            discardUrl: true,
	            nocache: true,
	            timeout: 30
	        };
	        this.descriptionPanel.load(loadCfg);
	        
		} catch(e) {
			FATAL(e, this, 'loadDescripton');
		}
	},
	
	/**
	 * initializes the field-monitoring
	 * (calls super-class-method)
	 */
	initFieldMonitoring: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initFieldMonitoring');
		}
		
		try {
					
			// inititialize field-monitoring for abstract-basic-content-editor-part
			Pulse.ContentGroupEditor.superclass.initFieldMonitoring.call(this);

			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initFieldMonitoring');
			}
		}
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function(boolInitTab) {
		
			
		// call super
		Pulse.ContentGroupEditor.superclass.initComponent.call(this,boolInitTab);
			
//		// DBG >>
//		if (this.DBG) {
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.CMSContentEditor');
//		}
	
		try {
		
			// call inits
			this.initFieldMonitoring();
			this.initDescriptionPanel(); // builds descritpion-editor
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}			
		
		} catch(e) {
			FATAL(e, this, 'initComponent.ContentGroupEditor');
		}
				
	}
	
}; 
Pulse.ContentGroupEditor = Ext.extend(Pulse.ContentEditor, ContentGroupEditor); // END :: Pulse.ContentGroupEditor


/**
 * 
 */
DBG.FileContentEditor = DBG.apply(DBG.ContentEditor,{
		
//	initComponent:  { FileContentEditor: false },
	initFieldMonitoring: { FileContentEditor: false },
	addSubEditor: { FileContentEditor: false },
	hasChanges: { FileContentEditor: false },
	
	initTab: false,
	
	initFileEditor: false,
	
	MSG: false // checked also in PULSE_VIEWPORT_CONTROLLER

});

/**
 * 
 */
FileContentEditor = {
	
	type: 'FileContentEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.FileContentEditor*/,
	
	// defaults
	
	// copy-content-button
	getCreateCopyButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.COPYCONTENT,
		disabled: true,
		scope: this,
		handler: function() {

			this.selectCopyCallback = function(node) {
				Ext.Ajax.request({
					url: this.copyContentURL,
					scope: this,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// reloads ContentLocalizationMap
							panel = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentLocalizationMap.panel');
		            		panel.lastLoadConfig.callback = LPCB;
		            		panel.lastLoadConfig.timeout = 30;
		            		panel.load(panel.lastLoadConfig);
		            		// shows copy in contentregistrytree
		            		crPanel = Ext.getCmp('ContentRegistry.WEST');
		            		crPanel.expand();
		            		path = decodedResponse.expandPath;
		            		ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), path, function(node) {
		            			ContentRegistryEditor.editNode(node);
		            		});
	            		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'tbar.copy');
						}
						delete this.selectCopyCallback;
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this,'tbar.copy');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'tbar.copy');
				        }
				        delete this.selectCopyCallback;
					},
					params: { id: this.getContent().id, toid: node.attributes.id }
				});
				
			};

			windowCfg = {
    			getChildrenURL: this.browseContentRegistryURL + '?mode=folder&bundle=' + this.getContent().bundle,
    			emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FOLDER,
    			scope: this,
    			selectCallback: 'selectCopyCallback'
    		};
    		ContentRegistryEditor.getSelectWindow(windowCfg);
		},
		iconCls: 'copyIconCls'
	};
	},
	
	// save-content-button
	getSaveContentButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
		disabled: true,
		scope: this,
		handler: function() {
			
			if (false === this.hasChanges()) {
				this.reset();
				return;
			}
			
			saveValues = this.getChanges({id:this.getContent().id});
			
			if (typeof(saveValues) == 'undefined' || saveValues === null) {
				if (this.DBG) {
					THROW({
						e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
						args:[this.hasChanges(),saveValues]
					},this,'saveContentButton');
				}
				return;
			}
			
			this.tab.disable();
			
			Ext.Ajax.request({
				url: this.saveContentURL,
				method: 'POST',
				scope: this,
				success: function(response, options) {
					this.tab.enable();
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {								
						this.commit();
						if (typeof(this.fileEditorPanel) != 'undefined') {
							this.fileEditorPanel.loadPanel();
						}
						(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
					} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
					}
				},
				failure: function(response, options) {
					this.tab.enable();
					if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
			        }
				},
				params: saveValues
			});
		},
		iconCls: 'saveIconCls'
	};
	},
	
	// find-content-in-content-registry-button
	getFindButtonConfig: function() {
		return {
			text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
			disabled: true,
			scope: this,
			handler: function() {					
				Ext.Ajax.request({
					url: this.contentExpandPathURL,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// show content in contentregistrytree
		            		crPanel = Ext.getCmp('ContentRegistry.WEST');
		            		if (typeof(crPanel) == 'undefined' || crPanel === null) {
		            			PULSE_TOOLBAR.openPanel({
		            				id: 'ContentRegistry.WEST',
		            				callback: function() {
			            				ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
			            			}
		            			});
		            			return;
		            		}
		            		crPanel.expand();
							ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
		        		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.find');
						}
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.find');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.find');
					        }
					},
					params: { id: this.getContent().id }
				});
			},
			iconCls: 'findIconCls'
		};
	},
	
	initTab: function() {
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
			
				buttons = [];
				
				// enables save-content-button if URL
				saveContentButtonConfig = this.getSaveContentButtonConfig();
				if (typeof(this.saveContentURL) == 'string' && this.saveContentURL !== '') {
					saveContentButtonConfig.disabled = false;
					saveContentButtonConfig.scope = this;
				}
				buttons.push(saveContentButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
			
				// enables copy-content-button if URL
				createCopyButtonConfig = this.getCreateCopyButtonConfig();
				if (typeof(this.copyContentURL) == 'string' && this.copyContentURL !== '') {
					createCopyButtonConfig.disabled = false;
					createCopyButtonConfig.scope = this;
				}
				buttons.push(createCopyButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// enables find-button if URL
				findButtonConfig = this.getFindButtonConfig();
				if (typeof(this.contentExpandPathURL) == 'string' && this.contentExpandPathURL !== '') {
					findButtonConfig.disabled = false;
					findButtonConfig.scope = this;
				}
				buttons.push(findButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// insert buttons
				this.tab.getTopToolbar().insertButton(0, buttons);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
	},
	
	/**
	 * initializes the field-monitoring
	 * (calls super-class-method)
	 */
	initFieldMonitoring: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initFieldMonitoring');
		}
		
		try {
					
			// inititialize field-monitoring for abstract-basic-content-editor-part
			Pulse.FileContentEditor.superclass.initFieldMonitoring.call(this);

			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initFieldMonitoring');
			}
		}
	},
	
	/**
	 * 
	 */
	initFileEditor: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['initFileEditorURL']},this,'initFileEditor');
		}
		
		try {
			
			idPrefix = this.getContent().clazz + '.' + this.getContent().id;	
			el = Ext.get(idPrefix + '.file.container');		
			div = el.insertHtml('afterBegin','<div id="' + idPrefix + '.file"> </div>');
		
			if (typeof(this.initFileEditorURL) != 'string' || this.initFileEditorURL === '') {
				if (this.DBG) {
					FATAL({e:'URL UNDEFINED',props:['initFileEditorURL']},this,'initFileEditor');
				}
				return;
			}
			
			subEditorPanelCFG = {
				/*height: 250,*/
				id: this.id + '.fileSelectorPanel',
				masterEditor: this,
				url: this.initFileEditorURL,
				params: { id: this.getContent().id },
				renderTo: div,
				bodyStyle: 'padding: 5px 5px 5px 5px;'
			};
			if (typeof(this.fileEditorTitle) == 'string' 
				&& this.fileEditorTitle !== '') {
				subEditorPanelCFG.title = this.fileEditorTitle;
			}
			this.fileEditorPanel = new Pulse.SubEditorPanel(subEditorPanelCFG);
			
			this.fileEditorPanel.on('expand',function(){
				this.initializePanel();
			});
			
			
			this.addSubEditor(this.fileEditorPanel);
		
		} catch(e) {
			FATAL(e,this,'initFileEditor');
		}

	},
	
	/**
	 * 
	 */
	initIndexFileMonitor: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initIndexFileMonitor');
		}
		
		try {
			
			checked = '';
			if (true === this.getContent().indexFile) {
				checked = 'checked="checked"';	
			}
			
			html = [
				'<div style="padding:0 0 5px 0;">',
				'<table border="0" cellpadding="0" cellspacing="5"><tr><td>',
				// hasChangesIcon
				'<img src="',Ext.BLANK_IMAGE_URL,'" id="',idPrefix,'.hasChangesIcon"',
				' class="tabHasChangesIconHidden"/>',
				// searchDocumentIcon
				'<img src="',Ext.BLANK_IMAGE_URL,
				'" class="searchDocumentIconCls" width="16" height="16" border="0"/>',
				'</td><td>',
				// checkbox
				'<input type="checkbox" id="',idPrefix,'.indexFile" name="indexFile"',
				checked,'/>',
				'</td><td>',
				// label
				':&#160;',VIEWPORT_PROPERTIES.TEXT_INDEX_FILECONTENT_FOR_SEARCH,
				'</td></tr></table>',
				'</div>'
			].join('');
			
			
			idPrefix = this.getContent().clazz + '.' + this.getContent().id;
			el = Ext.get(idPrefix + '.file.container');		
			el.insertHtml('afterBegin',html);
			
			box = Ext.get(idPrefix + '.indexFile');
			
			indexFileMonitorCFG = {
				id: idPrefix + '.indexFileMonitor',
				el: box,
				fieldType: 'checkbox'
			};
			this.indexFileMonitor = new Pulse.FieldMonitor(indexFileMonitorCFG);
			this.addSubEditor(this.indexFileMonitor);
			
			this.indexFileMonitor.on('MSG',function(msgString,monitor){
				if (msgString == 'change') {
					this.replaceClass('tabHasChangesIconHidden','tabHasChangesIcon');
				} else if (msgString == 'reset') {
					this.replaceClass('tabHasChangesIcon','tabHasChangesIconHidden');
				}				
				// FATAL({e:msgString,o:monitor.hasChanges(),args:arguments},monitor,'test');				
			},Ext.get(idPrefix + '.hasChangesIcon'));
		
		} catch(e) {
			FATAL(e,this,'initIndexFileMonitor');
		}
		
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function(boolInitTab) {
		
			
		// call super
		Pulse.FileContentEditor.superclass.initComponent.call(this,boolInitTab);
			
//		// DBG >>
//		if (this.DBG) {
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.CMSContentEditor');
//		}
	
		try {
		
			// call inits
			this.initFieldMonitoring();
			
			// initialise file-editor
			this.initFileEditor();
			
			// initialise the checkbox for indexFile
			this.initIndexFileMonitor();
			
			// initialise tab
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}			
		
		} catch(e) {
			FATAL(e, this, 'initComponent.FileContentEditor');
		}
				
	}
	
}; 
Pulse.FileContentEditor = Ext.extend(Pulse.ContentEditor, FileContentEditor); // END :: Pulse.FileContentEditor


/**
 * 
 */
var FilterEditor = {

	el : null,
	win : null,
	msgPanel : null,

	/**
	 * @param {String}
	 *            editFiltersURL the URL to use for the editing of existing
	 *            filters
	 */
	editFilters : function(initOverViewTabURL) {

		// PulseError.Throw(
		// {
		// e:'DBG',
		// p:[{n:'initOverViewTabURL',o:initOverViewTabURL}]
		// },
		// 'FilterEditor','editFilters');

		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'FilterEditor.OverView',
					title : '...loading',
					iconCls : 'contentFilterIconCls',
					loadParams : {
						url : initOverViewTabURL
					}
				});
	},

	/**
	 * @param {String}
	 *            editURL
	 * @param {String}/{Number}
	 *            id
	 */
	editFilter : function(editURL, id) {
		// PulseError.Throw({e:'DBG',p:[{n:'editURL',o:editURL},{n:'id',o:id}]},'FilterEditor','editFilter()');

		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'FilterEditor.' + id,
					title : '...loading: ' + id,
					tabTip : '(id:' + id + ')',
					iconCls : 'contentFilterIconCls',
					loadParams : {
						url : editURL,
						params : {
							id : id
						}
					}
				});

	},

	/**
	 * @param {String}/{Number}
	 *            id the id of the filter
	 */
	reloadRules : function(id) {
		store = Ext.getCmp('grid.' + id + '.rules.grid').getStore();
		store.reload();
	},

	/**
	 * 
	 */
	reloadOverviewGrid : function() {
		try {
			store = Ext.getCmp('FilterOverViewGrid.grid').getStore();
			store.reload();
		} catch (e) { /* ignore */
		}
	},

	/**
	 * @param {Object}
	 *            config the config (URLs) to use for the creation of a new
	 *            filter
	 * @param {String}/{Number}
	 *            copyId [optional] if given will create copy of filter
	 */
	createFilter : function(config, copyId) {

		try {

			pel = VIEWPORT.getEl();
			if (typeof(pel) == 'undefined') {
				throw ('76 :: FilterEditor.createFilter() :: ' + 'CHECK for element failed...');
			}

			filterNameFieldCfg = {
				fieldLabel : VIEWPORT_PROPERTIES.NAME,
				name : 'name',
				width : 400,
				emptyText : VIEWPORT_PROPERTIES.TEXT_ENTER_NAME,
				allowBlank : false
			};
			if (typeof(config.name) != 'undefined' && config.name !== '') {
				filterNameFieldCfg.value = config.name + ' copy';
			}
			filterNameField = new Ext.form.TextField(filterNameFieldCfg);

			formPanel = new Ext.form.FormPanel({
						id : 'newFilterForm',
						name : 'newFilterForm',
						region : 'center',
						margins : '3 3 3 3',
						bodyStyle : 'padding: 5px',
						defaultType : 'textfield',
						autoHeight : true,
						items : [filterNameField]
					});

			formPanel.addButton({
				text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
				handler : function() {
					// check values
					if (filterNameField.getValue().trim() === '') {
						return false;
					}
					// checks passed : create
					// PulseError.Throw({e:'DBG',p:[{n:'createURL',o:createURL}]},'FilterEditor','createFilter()');

					params = {
						name : filterNameField.getValue()
					};
					if (typeof(copyId) == 'number'
							|| typeof(parseInt(copyId, 10)) == 'number') {
						params.copyId = copyId;
					}

					Ext.Ajax.request({
						url : config.createURL,
						method : 'POST',
						success : function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {

								FilterEditor.win.close();

								// reload filter-overview
								FilterEditor.reloadOverviewGrid();

								FilterEditor.editFilter(
										options.config.editFilterURL,
										decodedResponse.id);
							} else {
								PulseError.Throw({
											e : 'SERVER.ERROR',
											o : decodedResponse.error
										}, 'FilterEditor', 'createFilter()');
							}
						},
						failure : function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({
											e : 'REQUEST.FAILED'
										}, 'FilterEditor', 'createFilter()');
							} else {
								PulseError.Throw({
											e : 'REQUEST.ERROR',
											o : {
												e : response.responseText
											}
										}, 'FilterEditor', 'createFilter()');
							}
						},
						config : config,
						params : params
					});
				}
			});

			formPanel.addButton({
						text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
						handler : function() {
							FilterEditor.win.close();
						}
					});

			if (this.el === null) {

				this.el = pel.createChild({
							tag : 'div',
							id : 'FilterEditorWindow.el'
						});

			}

			this.msgPanel = new Ext.Panel({
						id : 'FilterEditor.msgPanel',
						region : 'north',
						html : 'msgs go here',
						border : false,
						autoHeight : true
					});

			this.win = new Ext.Window({
						id : 'FilterEditor.Win',
						iconCls : 'contentFilterIconCls',
						title : FilterLocalizations.createFilter,
						modal : true,
						plain : true,
						renderTo : this.el,
						height : 130,
						layout : 'border',
						items : [this.msgPanel, formPanel],
						width : 600
					});

			// initial hide of msgPanel
			this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide', function() {
						FilterEditor.win.doLayout(true);
					});

			this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100);
			this.win.show(this);
			filterNameField.validate();

		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}

	},

	removeFilter : function(removeFilterURL, id) {

		// PulseError.Throw({e:'DBG',p:[{n:'removeFilterURL',o:removeFilterURL},{n:'id',o:id}]},'FilterEditor','removeFilter()');

		Ext.Msg.confirm(VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + id
						+ '"', VIEWPORT_PROPERTIES.MSG_REALLYDELETE, function(
						response) {
					if ('yes' === response) {

						Ext.Ajax.request({
							url : removeFilterURL,
							method : 'POST',
							success : function(response, options) {
								decodedResponse = Ext
										.decode(response.responseText);
								if (true === decodedResponse.status) {
									// remove record
									grid = Ext
											.getCmp('FilterOverViewGrid.grid');
									gridStore = grid.getStore();
									for (i = 0; i < gridStore.getCount(); i++) {
										delRec = gridStore.getAt(i);
										if (delRec.get('id') == options.params.id) {
											break;
										}
									}
									gridStore.remove(delRec);
									// close editor-tab if open
									PULSE_VIEWPORT_CONTROLLER
											.closeTab(
													'FilterEditor.'
															+ options.params.id,
													true);
									// show delete-success msg
									PulseError.Throw({
												e : 'HANDLE',
												p : [{
															n : 'handle',
															o : 'panel'
														}, {
															n : 'id',
															o : 'FilterEditor.OverView'
														}, {
															n : 'msg',
															o : 'DELETESUCCESS'
														}]
											});
								} else {
									PulseError
											.Throw(
													{
														e : 'SERVER.ERROR',
														o : decodedResponse.error
													}, 'FilterEditor',
													'removeFilter()');
								}
							},
							failure : function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
									PulseError
											.Throw({
														e : 'REQUEST.FAILED'
													}, 'FilterEditor',
													'removeFilter()');
								} else {
									PulseError
											.Throw(
													{
														e : 'REQUEST.ERROR',
														o : {
															e : response.responseText
														}
													}, 'FilterEditor',
													'removeFilter()');
								}
							},
							params : {
								id : id
							}
						});

					}
				}, this);

	},

	/**
	 * @param {String}
	 *            removeURL
	 * @param {String}/{Number}
	 *            ruleId
	 */
	removeFilterRule : function(removeURL, ruleId, gridId, tabId) {

		// PulseError.Throw({e:'DBG',p:[
		// {n:'removeURL',o:removeURL},
		// {n:'ruleId',o:ruleId},
		// {n:'gridId',o:gridId},
		// {n:'tabId',o:tabId}
		// ]},'FilterEditor','removeFilterRule');

		Ext.Msg.confirm(VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"'
						+ ruleId + '"', VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
				function(response) {
					if ('yes' === response) {

						Ext.Ajax.request({
							url : removeURL,
							method : 'POST',
							success : function(response, options) {
								decodedResponse = Ext
										.decode(response.responseText);
								if (true === decodedResponse.status) {
									// reload rules-grid
									Ext.getCmp(options.gridId).getStore()
											.reload();
									// show delete-success msg
									PulseError.Throw({
												e : 'HANDLE',
												p : [{
															n : 'handle',
															o : 'panel'
														}, {
															n : 'id',
															o : options.tabId
														}, {
															n : 'msg',
															o : 'DELETESUCCESS'
														}]
											});
								} else {
									PulseError.Throw({
												e : 'SERVER.ERROR',
												o : decodedResponse.error
											}, 'FilterEditor',
											'removeFilterRule()');
								}
							},
							failure : function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({
												e : 'REQUEST.FAILED'
											}, 'FilterEditor',
											'removeFilterRule()');
								} else {
									PulseError.Throw({
												e : 'REQUEST.ERROR',
												o : {
													e : response.responseText
												}
											}, 'FilterEditor',
											'removeFilterRule()');
								}
							},
							gridId : gridId,
							tabId : tabId,
							params : {
								id : ruleId
							}
						});

					}
				}, this);

	},

	/**
	 * @param {Object}
	 *            config
	 */
	initOverViewEditor : function(config) {
		// PulseError.Throw({e:
		// 'DBG',p:[{n:'tab',o:config.tab.id},{n:'loadFiltersURL',o:config.loadFiltersURL}]},'FilterEditor','initOverViewEditor()');

		if (typeof(config.tab) != 'undefined') {
			// fetch the tab that has to be initialized
			tab = config.tab;
			if (true !== tab.isInitialized) {
				//
				tabTbar = tab.getTopToolbar().insertButton(0, [new Ext.Action({
											text : VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW,
											handler : function() {
												FilterEditor
														.createFilter(config);
											},
											iconCls : 'addIconCls'
										}), new Ext.Toolbar.Separator()]);

				tab.isInitialized = true;

			}
		}

		// build overview grid

		gridStoreRecord = new Ext.data.Record.create([{
					name : 'id'
				}, {
					name : 'name'
				}]);

		gridStore = new Ext.data.JsonStore({
					// id: 'id',
					pruneModifiedRecords : true,
					fields : gridStoreRecord,
					root : 'data',
					remoteSort : true,
					sortInfo : {
						field : 'name',
						direction : 'ASC'
					},
					totalProperty : 'total',
					url : config.loadFiltersURL
				});

		// buld paging-tool with combobox to set page-size
		pageSizeBox = new Ext.form.ComboBox({
					store : new Ext.data.SimpleStore({
								fields : ['size'],
								sortInfo : {
									field : 'size',
									direction : "ASC"
								},
								data : [[10], [20], [50], [100]]
							}),
					displayField : 'size',
					valueField : 'size',
					selectOnFocus : true,
					mode : 'local',
					triggerAction : 'all',
					// editable: false,
					width : 60,
					blankText : '10',
					emptyText : '10'
				});

		pagingToolBar = new Ext.PagingToolbar({
					// id: 'toolbar',
					displayInfo : true,
					pageSize : 10,
					store : gridStore,
					items : ['-', pageSizeBox]
				});

		// add gridStore-listener for paging-toolbar
		gridStore.on('beforeLoad', function(store, options) {
					if (pageSizeBox.getRawValue() !== '') {
						try {
							limit = parseInt(pageSizeBox.getRawValue().trim(),
									10);
							pagingToolBar.pageSize = limit;
							options.params.limit = limit;
						} catch (e) { /* ignore */
						}
					} else {
						pagingToolBar.pageSize = 10;
						options.params.limit = 10;
					}
				});

		// gridSm = new Ext.grid.CheckboxSelectionModel();

		// build column-model
		columns = [
				/* gridSm, */
				{
			id : 'id',
			header : 'id:',
			dataIndex : 'id',
			sortable : true,
			width : 30,
			fixed : true
		}, {
			header : FilterLocalizations.Filter + ':',
			dataIndex : 'name',
			sortable : true
				/*
				 * , editor: new Ext.form.TextField({ allowBlank: false })
				 */
			}];

		// add edit button to rows
		if (typeof(config.editFilterURL) != 'undefined') {
			columns.push({
						header : '',
						dataIndex : 'id',
						width : 25,
						fixed : true,
						sortable : false,
						renderer : function(id) {
							return FilterEditor.getGridImageField({
										functionString : 'FilterEditor.editFilter(\''
												+ config.editFilterURL
												+ '\','
												+ id + ')',
										iconCls : 'editIconCls_14',
										qtip : VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
									});
						}
					});
		}

		// add remove button to rows
		if (typeof(config.removeFilterURL) != 'undefined') {
			columns.push({
						header : '',
						dataIndex : 'id',
						width : 25,
						fixed : true,
						sortable : false,
						renderer : function(id) {
							return FilterEditor.getGridImageField({
										functionString : 'FilterEditor.removeFilter(\''
												+ config.removeFilterURL
												+ '\',' + id + ')',
										iconCls : 'deleteIconCls_14',
										qtip : VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
									});
						}
					});
		}

		gridCm = new Ext.grid.ColumnModel(columns);

		// grid = new Ext.grid.EditorGridPanel({
		grid = new Ext.grid.GridPanel({
					id : (typeof(config.gridId) == 'undefined')
							? 'FilterOverViewGrid.grid'
							: config.gridId,
					store : gridStore,
					cm : gridCm,
					// sm: gridSm,
					renderTo : (typeof(config.gridId) == 'undefined')
							? 'FilterOverViewGrid'
							: config.gridId + '.el',
					autoExpandColumn : 'id',
					// height: 400,
					// width: 725,
					loadMask : true,
					viewConfig : {
						forceFit : true
					},
					// title: FilterLocalizations.Filter,
					frame : false,
					style : 'border: 1px solid #8DB2E3;',
					enableHdMenu : false,
					// clicksToEdit: 1,
					/*
					 * tbar: TODO..., buttons: [{ text:
					 * VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE, iconCls:
					 * 'saveIconCls', handler: <xsl:value-of
					 * select="$editorIdentifier"/>SaveGrid }], buttonAlign:
					 * 'center',
					 */
					bbar : pagingToolBar
				});

		// grid.on({
		// 'afteredit': {
		// fn: function() {
		// // show tab-changed msg
		// PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:'FilterEditor.OverView'},{n:'msg',o:'CHANGE'}]});
		// }
		// }
		// });

		// grid: resize
		if (typeof(config.tab) != 'undefined') {
			// w
			grid.setWidth(config.tab.getInnerWidth() - 10);
			// h
			tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
			msgPanelHeight = 0;
			if (tabMsgPanel.isVisible()) {
				msgPanelHeight = tabMsgPanel.getSize().height;
			}
			tabHeader = Ext.get(config.tab.id + '.header');
			grid.setHeight(config.tab.getInnerHeight()
					- tabHeader.getBox().height - msgPanelHeight - 10);

			// config.tab: listeners for grid: resize
			config.tab.on({
				'resize' : {
					fn : function(tab, adjWidth, adjHeight, rawWidth, rawHeight) {
						grid = Ext.getCmp('FilterOverViewGrid.grid');
						// w
						tabContentPanel = Ext.getCmp(config.tab.id
								+ '.contentPanel');
						grid.setWidth(config.tab.getInnerWidth() - 10);
						// h
						tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
						msgPanelHeight = 0;
						if (tabMsgPanel.isVisible()) {
							msgPanelHeight = tabMsgPanel.getSize().height;
						}
						tabHeader = Ext.get(config.tab.id + '.header');
						grid.setHeight(config.tab.getInnerHeight()
								- tabHeader.getBox().height - msgPanelHeight
								- 10);
					}
				}
			});

		}

		// init grid
		gridStore.load({
					params : {
						start : 0,
						limit : 10
					}
				});

		return grid;
	},

	/**
	 * @param {Object}
	 *            config
	 */
	initFilterEditor : function(config) {

		// init monitoring of filter-name field
		nameEl = Ext.get(config.filterclass + '.' + config.id + '.name');
		nameEl.initialValue = nameEl.getValue();
		nameEl.hasChanged = function() {
			return (this.initialValue != this.getValue().trim());
		}
		nameEl.on('keyup', function() {
					if (this.nameEl.dom.value === '') {
						this.nameEl.replaceClass('editorInputField',
								'editorInputFieldRed');
						this.nameEl.replaceClass('editorInputFieldYellow',
								'editorInputFieldRed');
					} else {
						this.nameEl.replaceClass('editorInputField',
								'editorInputFieldYellow');
						this.nameEl.replaceClass('editorInputFieldRed',
								'editorInputFieldYellow');
					}
					if (true === this.nameEl.hasChanged()) {
						PulseError.Throw({
									e : 'HANDLE',
									p : [{
												n : 'handle',
												o : 'panel'
											}, {
												n : 'id',
												o : config.tab.id
											}, {
												n : 'msg',
												o : 'change'
											}]
								});
					} else {
						if (true === Ext.get(this.config.filterclass + '.'
								+ this.config.id + '.referenceDuration')
								.hasChanged()) {
							return;
						}
						this.nameEl.replaceClass('editorInputFieldYellow',
								'editorInputField');
						this.nameEl.replaceClass('editorInputFieldRed',
								'editorInputField');
						PulseError.Throw({
									e : 'HANDLE',
									p : [{
												n : 'handle',
												o : 'panel'
											}, {
												n : 'id',
												o : config.tab.id
											}, {
												n : 'msg',
												o : 'reset'
											}]
								});
					}
				}, {
					nameEl : nameEl,
					config : config
				});

		// init monitoring of reference duration field
		referenceDurationEl = Ext.get(config.filterclass + '.' + config.id
				+ '.referenceDuration');
		referenceDurationEl.initialValue = referenceDurationEl.getValue();
		referenceDurationEl.hasChanged = function() {
			return (this.initialValue != this.getValue());
		}
		referenceDurationEl.on('click', function() {
					if (true === this.referenceDurationEl.dom.checked) {
						this.referenceDurationEl.set({
									value : true
								});
					} else {
						this.referenceDurationEl.set({
									value : false
								});
					}
					if (true === this.referenceDurationEl.hasChanged()) {
						PulseError.Throw({
									e : 'HANDLE',
									p : [{
												n : 'handle',
												o : 'panel'
											}, {
												n : 'id',
												o : config.tab.id
											}, {
												n : 'msg',
												o : 'change'
											}]
								});
					} else {
						if (true === Ext.get(this.config.filterclass + '.'
								+ this.config.id + '.name').hasChanged()) {
							return;
						}
						PulseError.Throw({
									e : 'HANDLE',
									p : [{
												n : 'handle',
												o : 'panel'
											}, {
												n : 'id',
												o : config.tab.id
											}, {
												n : 'msg',
												o : 'reset'
											}]
								});
					}
				}, {
					referenceDurationEl : referenceDurationEl,
					config : config
				});

		// add save-button to tab
		buttonArray = [
				/* new Ext.Toolbar.Button(new Ext.Action( */{
			text : VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
			scope : config.tab,
			handler : function() {
				if (true !== this.isDirty) {
					return;
				}

				// retrieve editable fields
				nameEl = Ext
						.get(config.filterclass + '.' + config.id + '.name');
				referenceDurationEl = Ext.get(config.filterclass + '.'
						+ config.id + '.referenceDuration');

				if ((false === nameEl.hasChanged())
						&& (false === referenceDurationEl.hasChanged())) {
					return;
				}

				// retrieve the values the are to be saved
				name = nameEl.getValue().trim();
				if (name === '') {
					return;
				}

				params = {
					id : config.id,
					name : name
				};

				if (true === referenceDurationEl.hasChanged()) {
					params[referenceDurationEl.dom.name] = referenceDurationEl
							.getValue();
				}

				Ext.Ajax.request({
					url : config.saveFilterURL,
					method : 'POST',
					success : function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// set tab.isDirty to false
							options.tab.isDirty = false;
							options.tab.setTitle(options.params.name);
							// reset nameEl
							options.nameEl.replaceClass('editorInputFieldRed',
									'editorInputField');
							options.nameEl.replaceClass(
									'editorInputFieldYellow',
									'editorInputField');

							if (true === options.nameEl.hasChanged()) {
								options.nameEl.initialValue = options.nameEl
										.getValue();
							}
							if (true === options.referenceDurationEl
									.hasChanged()) {
								options.referenceDurationEl.initialValue = options.referenceDurationEl
										.getValue();
							}

							// reload filter-overview
							FilterEditor.reloadOverviewGrid();

							// show save-success msg
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : options.tab.id
												}, {
													n : 'msg',
													o : 'SAVESUCCESS'
												}]
									});
						} else {
							PulseError.Throw({
										e : 'SERVER.ERROR',
										o : decodedResponse.error
									}, 'FilterEditor', 'saveChangesButton');
						}
					},
					failure : function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
							PulseError.Throw({
										e : 'REQUEST.FAILED'
									}, 'FilterEditor', 'saveChangesButton');
						} else {
							PulseError.Throw({
										e : 'REQUEST.ERROR',
										o : {
											e : response.responseText
										}
									}, 'FilterEditor', 'saveChangesButton');
						}
					},
					nameEl : nameEl,
					referenceDurationEl : referenceDurationEl,
					tab : this,
					params : params
				});

			},
			iconCls : 'saveIconCls'
		}/* )) */, new Ext.Toolbar.Separator()];

		if (typeof(config.createURL) != 'undefined' && config.createURL !== '') {
			buttonArray.push({
						text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATECOPY,
						scope : this,
						handler : function() {
							this.createFilter(config, config.id);
						},
						iconCls : 'copyFilterIconCls'
					});
			buttonArray.push(new Ext.Toolbar.Separator());
		}
		config.tab.getTopToolbar().insertButton(0, buttonArray);

		// build filter-rules-grid
		this.buildGrid({
					id : config.id,
					tab : config.tab,
					gridId : 'grid.' + config.id + '.rules',
					gridTitle : FilterLocalizations.FilterRule,
					url : config.loadFilterRulesURL,
					createFunction : function() {
						FilterRulesEditor.createFilterRule({
									filterId : config.id,
									createURL : config.createFilterRuleURL,
									editURL : config.editFilterRuleURL
								});
					},
					moveURL : config.moveFilterRuleURL,
					editURL : config.editFilterRuleURL,
					editFnString : 'FilterRulesEditor.editFilterRule',
					removeURL : config.removeFilterRuleURL,
					removeFnString : 'FilterEditor.removeFilterRule'
				});

		// build filter-matches-grid
		this.buildGrid({
			id : config.id,
			tab : config.tab,
			contentTypeField : true,
			gridId : 'grid.' + config.id + '.matches',
			gridTitle : FilterLocalizations.FilterMatch,
			url : config.loadFilterMatchesURL,
			createFunction : function() {
				FilterMatchesEditor.addFilterMatch({
							filterId : config.id,
							createURL : config.createFilterMatchURL,
							editURL : config.editFilterMatchURL,
							browseContentRegistryURL : config.browseContentRegistryURL
						});
			},
			moveURL : config.moveFilterMatchURL,
			editURL : config.editFilterMatchURL,
			editFnString : 'FilterMatchesEditor.editFilterMatch',
			removeURL : config.removeFilterMatchURL,
			removeFnString : 'FilterMatchesEditor.removeFilterMatch',
			localeSelector : true
		});

	},

	/**
	 * @param {Object}
	 *            config
	 */
	buildGrid : function(config) {

		gridStoreRecord = new Ext.data.Record.create([{
					name : 'id'
				}, {
					name : 'name'
				}, {
					name : 'contentType'
				}, {
					name : 'content'
				}]);

		gridStore = new Ext.data.JsonStore({
					// id: config.gridId + '.store',
					pruneModifiedRecords : true,
					fields : gridStoreRecord,
					root : 'data',
					// remoteSort: true,
					// sortInfo: {
					// field: 'name',
					// direction: 'ASC'
					// },
					// totalProperty: 'total',
					url : config.url
				});

		editFieldRenderer = function(id) {
			return FilterEditor.getGridImageField({
						functionString : config.editFnString + '(\''
								+ config.editURL + '\',' + id + ')',
						iconCls : 'editIconCls_14',
						qtip : VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
					});
		};

		removeFieldRenderer = function(id) {
			return FilterEditor.getGridImageField({
				functionString : config.removeFnString + '(\''
						+ config.removeURL + '\',' + id + ', \''
						+ config.gridId + '.grid\', \'' + config.tab.id + '\')',
				iconCls : 'deleteIconCls_14',
				qtip : VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
			});
		};

		// build cm
		columns = [{
					id : 'id',
					header : 'id:',
					dataIndex : 'id',
					width : 30,
					fixed : true,
					sortable : false
				}];

		// if (true === config.contentTypeField) {
		// contentTypeFieldRenderer = function(contentType) {
		// /*if (typeof(contentType) == 'undefined') {
		// return '<img src="' + Ext.BLANK_IMAGE_URL + '" '
		// + 'width="16" height="16" border="0" '
		// + 'style="padding: 0px; margin: 0px;" '
		// + 'class="na" ext:qtip="n.a."/>';
		// }*/
		// return FilterEditor.getContentTypeImageField({
		// contentType: contentType,
		// qtip: contentType
		// });
		//	        	
		// };
		// columns.push({
		// header: '',
		// dataIndex: 'contentType',
		// width: 25,
		// fixed: true,
		// sortable: false,
		// renderer: contentTypeFieldRenderer
		// });
		// }

		if (true === config.contentTypeField) {
			contentFieldRenderer = function(content) {
				return FilterEditor.getContentField(content);

			};
			columns.push({
						header : config.gridTitle + ':',
						dataIndex : 'content',
						sortable : false,
						renderer : contentFieldRenderer
					});
		} else {
			columns.push({
				header : config.gridTitle + ':',
				dataIndex : 'name',
				sortable : false
					/*
					 * , editor: new Ext.form.TextField({ allowBlank: false })
					 */
				});
		}
		columns.push({
					header : '',
					dataIndex : 'id',
					width : 25,
					fixed : true,
					sortable : false,
					renderer : editFieldRenderer
				});
		columns.push({
					header : '',
					dataIndex : 'id',
					width : 25,
					fixed : true,
					sortable : false,
					renderer : removeFieldRenderer
				});

		if (typeof(config.moveURL) != 'undefined') {
			upFieldRenderer = function(id) {
				return FilterEditor.getGridImageField({
							functionString : 'FilterEditor.moveRecUp(\''
									+ config.moveURL + '\',' + id + ', \''
									+ config.gridId + '.grid\', \''
									+ config.tab.id + '\')',
							iconCls : 'upIconCls_14',
							qtip : VIEWPORT_PROPERTIES.UP
						});
			};
			columns.push({
						header : '',
						dataIndex : 'id',
						width : 25,
						fixed : true,
						sortable : false,
						renderer : upFieldRenderer
					});
			downFieldRenderer = function(id) {
				return FilterEditor.getGridImageField({
							functionString : 'FilterEditor.moveRecDown(\''
									+ config.moveURL + '\',' + id + ', \''
									+ config.gridId + '.grid\', \''
									+ config.tab.id + '\')',
							iconCls : 'downIconCls_14',
							qtip : VIEWPORT_PROPERTIES.DOWN
						});
			};
			columns.push({
						header : '',
						dataIndex : 'id',
						width : 25,
						fixed : true,
						sortable : false,
						renderer : downFieldRenderer
					});
		}

		gridCm = new Ext.grid.ColumnModel(columns);

		// build toobar wtih create-button
		tbar = [new Ext.Action({
							text : VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW,
							handler : function() {
								config.createFunction();
							},
							iconCls : 'addIconCls'
						}), '-'];

		// add locale selector
		if (true === config.localeSelector) {
			localeSelector = new Pulse.LocaleSelector({
						store : gridStore
					});
			tbar = tbar.concat(localeSelector.items);
			tbar.push('-');
		}

		// add seperators
		tbar.push('->');
		tbar.push('-');

		// add reload button
		tbar.push(new Ext.Action({
					text : VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
					handler : function() {
						if (true === config.localeSelector) {
							// reset locale-selector
							Ext.getCmp(config.gridId + '.grid').localeSelector
									.reset();
						}
						Ext.getCmp(config.gridId + '.grid').getStore().reload();
					},
					iconCls : 'reloadIconCls'
				}));

		// grid = new Ext.grid.EditorGridPanel({
		grid = new Ext.grid.GridPanel({
			id : config.gridId + '.grid',
			store : gridStore,
			cm : gridCm,
			// sm: gridSm,
			renderTo : config.gridId,
			autoExpandColumn : 'id',
			// height: 400,
			// width: 725,
			loadMask : true,
			viewConfig : {
				forceFit : true
			},
			title : config.gridTitle,
			frame : false,
			enableHdMenu : false,
			// clicksToEdit: 1,
			tbar : tbar,
			localeSelector : (typeof(localeSelector) != 'undefined')
					? localeSelector
					: null
				/*
				 * , buttons: [{ text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
				 * iconCls: 'saveIconCls', handler: <xsl:value-of
				 * select="$editorIdentifier"/>SaveGrid }], buttonAlign:
				 * 'center', bbar: pagingToolBar
				 */
			});

		// grid: resize
		// w
		grid.setWidth(config.tab.getInnerWidth() / 2 - 6);
		// h
		maxHeight = config.tab.getInnerHeight() - 12;
		tabMsgPanel = Ext.getCmp(config.tab.id + '.msgPanel');
		if (tabMsgPanel.hidden !== true) {
			maxHeight = maxHeight - tabMsgPanel.getSize().height;
		}
		tabHeader = Ext.get(config.tab.id + '.header');
		grid.setHeight(maxHeight - tabHeader.getBox().height);

		// config.tab: listeners for grid: resize
		config.tab.on({
					'resize' : {
						fn : function(tab, adjWidth, adjHeight, rawWidth,
								rawHeight) {
							grid = Ext.getCmp(config.gridId + '.grid');
							// w
							grid.setWidth(config.tab.getInnerWidth() / 2 - 6);
							// h
							maxHeight = config.tab.getInnerHeight() - 12;
							tabMsgPanel = Ext.getCmp(config.tab.id
									+ '.msgPanel');
							if (tabMsgPanel.hidden !== true) {
								maxHeight = maxHeight
										- tabMsgPanel.getSize().height;
							}
							tabHeader = Ext.get(config.tab.id + '.header');
							grid.setHeight(maxHeight
									- tabHeader.getBox().height);
						}
					}
				});

		// init grid
		gridStore.load({
					params : {
						id : config.id
						/*
						 * , start: 0, limit: 10
						 */
					}
				});

	},

	/**
	 * @param {String}
	 *            moveURL
	 * @param {String}/{Number}
	 *            id
	 * @param {String}
	 *            gridId
	 */
	moveRecUp : function(moveURL, id, gridId, tabId) {

		// PulseError.Throw({e:'DBG',p:[
		// {n:'moveURL',o:moveURL},
		// {n:'id',o:id},
		// {n:'gridId',o:gridId},
		// {n:'tabId',o:tabId}
		// ]},'','moveRecUp');

		// avoid unnecessary request
		store = Ext.getCmp(gridId).getStore();
		rec = store.getAt(0);
		if (rec.get('id') == id) {
			return;
		}

		Ext.Ajax.request({
					url : moveURL,
					method : 'POST',
					success : function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// reload grid
							Ext.getCmp(options.gridId).getStore().reload();
							// show move-success msg
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : options.tabId
												}, {
													n : 'msg',
													o : 'SAVESUCCESS'
												}]
									});
						} else {
							PulseError.Throw({
										e : 'SERVER.ERROR',
										o : decodedResponse.error
									}, 'FilterEditor', 'moveRecUp()');
						}
					},
					failure : function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
							PulseError.Throw({
										e : 'REQUEST.FAILED'
									}, 'FilterEditor', 'moveRecUp()');
						} else {
							PulseError.Throw({
										e : 'REQUEST.ERROR',
										o : {
											e : response.responseText
										}
									}, 'FilterEditor', 'moveRecUp()');
						}
					},
					tabId : tabId,
					gridId : gridId,
					params : {
						id : id,
						dir : 'up'
					}
				});

	},

	/**
	 * @param {String}
	 *            moveURL
	 * @param {String}/{Number}
	 *            id
	 * @param {String}
	 *            gridId
	 */
	moveRecDown : function(moveURL, id, gridId, tabId) {

		// PulseError.Throw({e:'DBG',p:[
		// {n:'moveURL',o:moveURL},
		// {n:'id',o:id},
		// {n:'gridId',o:gridId},
		// {n:'tabId',o:tabId}
		// ]},'','moveRecDown');

		// avoid unnecessary request
		store = Ext.getCmp(gridId).getStore();
		rec = store.getAt(store.getCount() - 1);
		if (rec.get('id') == id) {
			return;
		}

		Ext.Ajax.request({
					url : moveURL,
					method : 'POST',
					success : function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// reload grid
							Ext.getCmp(options.gridId).getStore().reload();
							// show move-success msg
							PulseError.Throw({
										e : 'HANDLE',
										p : [{
													n : 'handle',
													o : 'panel'
												}, {
													n : 'id',
													o : options.tabId
												}, {
													n : 'msg',
													o : 'SAVESUCCESS'
												}]
									});
						} else {
							PulseError.Throw({
										e : 'SERVER.ERROR',
										o : decodedResponse.error
									}, 'FilterEditor', 'moveRecDown()');
						}
					},
					failure : function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
							PulseError.Throw({
										e : 'REQUEST.FAILED'
									}, 'FilterEditor', 'moveRecDown()');
						} else {
							PulseError.Throw({
										e : 'REQUEST.ERROR',
										o : {
											e : response.responseText
										}
									}, 'FilterEditor', 'moveRecDown()');
						}
					},
					tabId : tabId,
					gridId : gridId,
					params : {
						id : id,
						dir : 'down'
					}
				});

	},

	/**
	 * @param {Object}
	 *            config
	 */
	getGridImageField : function(config) {

		html = '<a href="#" onclick="'
				+ config.functionString
				+ ';this.blur();return;" '
				+ 'style="display:block;width:14px;height:14px;margin:0px;padding:0px;border:0px;vertical-align:middle;" '
				+ 'class="' + config.iconCls + '"';

		if (config.qtip) {
			html += 'ext:qtip="' + config.qtip + '"';
		}

		html += '/><img src="' + Ext.BLANK_IMAGE_URL
				+ '" width="1" height="1" border="0"/></a>';

		return html;

	},

	/**
	 * @param {Object}
	 *            config
	 */
	getContentTypeImageField : function(config) {

		// build contentType-class
		if (typeof(config.contentType) != 'undefined') {
			contentTypeArray = config.contentType.split('.');
			iconCls = contentTypeArray.join('');
		} else {
			iconCls = 'na';
		}
		html = '<img src="' + Ext.BLANK_IMAGE_URL + '" ';
		html += 'width="16" height="16" border="0" style="padding: 0px; margin: 0px;" ';
		html += 'class="' + iconCls + '" ';
		// if (config.qtip) {
		// html += 'ext:qtip="' + config.qtip + '"';
		// }
		html += 'ext:qtip="<img src=\''
				+ Ext.BLANK_IMAGE_URL
				+ '\' '
				+ 'width=\'16\' height=\'16\' border=\'0\' style=\'padding: 0px; margin: 0px;\' '
				+ 'class=\'' + iconCls + '\'/>"';
		html += '/>';

		return html;

	},

	/**
	 * @param {Object}
	 *            content
	 */
	getContentField : function(content) {

		// build contentType-class
		if (typeof(content.contentType) != 'undefined') {
			contentTypeArray = content.contentType.split('.');
			iconCls = contentTypeArray.join('') + '_14';
		} else {
			iconCls = 'na_14';
		}

		html = '<div ';

		html += 'ext:qtip="<img src=\''
				+ Ext.BLANK_IMAGE_URL
				+ '\' '
				+ 'width=\'14\' height=\'14\' border=\'0\' style=\'padding:0px; margin:0px;margin-right:5px;vertical-align:middle;\' '
				+ 'class=\'' + iconCls + '\'/>' + content.contentType /* + '"' */;

		if (typeof(content.localizationMap) != 'undefined') {
			html += '<hr/><div style=\'font-weight:bold;\'>locales:</div>';
			for (i = 0; i < content.localizationMap.length; i++) {
				entry = content.localizationMap[i];
				html += '<div>locale: <b>' + entry.locale + '</b>, id: <b>'
						+ entry.id + '</b></div>';
			}
		}

		html += '"><img src="' + Ext.BLANK_IMAGE_URL + '" ';
		html += 'width="14" height="14" border="0" style="padding:0px;margin:0px;margin-right:5px;vertical-align:middle;" ';
		html += 'class="' + iconCls + '"/>' + content.name;

		html += '</div>';

		return html;

	}

}; // END :: FilterEditor


/**
 * the content-filter-properties
 * 
 * this Object is being used for localizations, 
 * and contains the non-localized defaults
 */
var FilterLocalizations = {
    Filter: 'filter',
    createFilter: 'create filter',
    FilterRule: 'filter-rule',
    createFilterRule: 'create filter-rule',
    FilterMatch: 'filter-match'// ,
//    FilterRulePropertie: 'filter-rule-property'
};


/**
 * 
 */
var FilterMatchesEditor = {
	
	el: null,
	win: null,
	msgPanel: null,
	contentPanel: null,
	lastLoadConfig: null,
	matchEditor: null,
	
	/**
	 * @param {Object} config
	 */
	addFilterMatch: function(config) {
		
//		PulseError.Throw({e:'DBG',p:[
//			{n:'filterId',o:config.filterId},
//			{n:'createURL',o:config.createURL},
//			{n:'editURL',o:config.editURL},
//			{n:'browseContentRegistryURL',o:config.browseContentRegistryURL}
//		]},'FilterMatchesEditor','addFilterMatch');
		
		ContentRegistryEditor.getSelectWindow({
			getChildrenURL: config.browseContentRegistryURL,
			selectCallback: function(node) {

				Ext.Ajax.request({
					url: config.createURL,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							Ext.getCmp('grid.' + options.params.id + '.matches.grid').getStore().reload();
							FilterMatchesEditor.editFilterMatch(config.editURL, decodedResponse.id);
	            		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterMatchesEditor','addFilterMatch()');
						}
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'FilterMatchesEditor','addFilterMatch()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'FilterMatchesEditor','addFilterMatch()');
					        }
					},
					params: { id: config.filterId, contentid: node.attributes.contentId }
				});
			}
		});
		
	},
	
	/**
	 * 
	 */
	removeFilterMatch: function(removeURL, matchId, gridId, tabId) {		

//		PulseError.Throw({e:'DBG',p:[
//			{n:'removeURL',o:removeURL},
//			{n:'matchId',o:matchId},
//			{n:'gridId',o:gridId},
//			{n:'tabId',o:tabId}
//		]},'FilterMatchesEditor','removeFilterMatch()');
		
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + matchId + '"',
    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
		
					Ext.Ajax.request({
						url: removeURL,
						method: 'POST',
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
			        		if (true === decodedResponse.status) {      				
			      				// reload rules-grid
			      				Ext.getCmp(options.gridId).getStore().reload();
			      				// show delete-success msg
			      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:options.tabId},{n:'msg',o:'DELETESUCCESS'}]});
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterMatchesEditor','removeFilterMatch()');
			        		}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},'FilterMatchesEditor','removeFilterMatch()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'FilterMatchesEditor','removeFilterMatch()');
					        }
						},
						gridId: gridId,
						tabId: tabId,
						params: { id: matchId }
					});
		
    			}    			
    		},
    	this);
		
	},
	
	/**
	 *  @param {String} editURL
	 *  @param {String}/{Number} matchId
	 */
	editFilterMatch: function(editURL, matchId) {

//		PulseError.Throw({e:'DBG',p:[
//			{n:'editURL',o:editURL},
//			{n:'matchId',o:matchId}]
//		},'FilterMatchesEditor','editFilterMatch()');

		try {
			
			if (this.el === null) {
	                
	            pel = VIEWPORT.getEl();
		        if (typeof(pel) == 'undefined') {
		        	throw('121 :: FilterMatchesEditor.editFilterMatch() :: ' + 
		        	'CHECK for element failed...');
		        }    
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'FilterMatchesEditorWindow.el'
			    });
	        
	        }
	        
	        this.msgPanel = new Ext.Panel({
	    		id: 'FilterMatchesEditor.Win.msgPanel',
//	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
				collapsed: true
//	    		autoHeight: true
    		});
    		
    		this.contentPanel = new Ext.Panel({
	    		id: 'FilterMatchesEditor.contentPanel',
//	    		region: 'center',
	    		html: 'content goes here',
	    		border: false//,
//	    		autoScroll: true,
//	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'FilterMatchesEditor.Win',
	            title: 'LOC: edit matches',
	            iconCls: 'contentFilterIconCls',
	            maximizable: false,
	            closable: true, 
		        plain: true,
		        modal: true,
		        autoScroll: true, 
		        renderTo: this.el,
		        height: 300, 
		        width: 400,
//	            layout: 'border',
	            items: [ this.msgPanel, this.contentPanel ],
	            tbar: [
	            	new Ext.Action({
						text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
						handler: function() {
							FilterMatchesEditor.win.close();
						},
						iconCls: 'cancelIconCls'
					}),
					'-',
	            	'->',
					new Ext.Action({
						text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
						handler: function() {
							
							if (true === FilterMatchesEditor.contentPanel.getUpdater().isUpdating()) {
								return;
							}
							
							if (true === FilterMatchesEditor.win.isDirty) {
								// confirm reload
								Ext.Msg.confirm(
									VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
		                    		VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
									VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
		                    		function(response) {
		                    			if ('yes' === response) {
		                    				FilterMatchesEditor.win.isDirty = false;
		                    				FilterMatchesEditor.lastLoadConfig.callback = LPCB;
		                    				FilterMatchesEditor.lastLoadConfig.timeout = 30;
											if (false === FilterMatchesEditor.msgPanel.hidden) {
												FilterMatchesEditor.msgPanel.collapse();
											}
											FilterMatchesEditor.contentPanel.load(FilterMatchesEditor.lastLoadConfig);
		                    			}
	                				},
	                			this);
	                			
							} else {
								FilterMatchesEditor.lastLoadConfig.callback = LPCB;
								FilterMatchesEditor.lastLoadConfig.timeout = 30;
								if (false === FilterMatchesEditor.msgPanel.hidden) {
									FilterMatchesEditor.msgPanel.collapse();
								}
								FilterMatchesEditor.contentPanel.load(FilterMatchesEditor.lastLoadConfig);
							}
						},
						iconCls: 'reloadIconCls'
					})
	            ]
	        });
	        
	        
	        // initial hide of msgPanel	    	
//			this.msgPanel.on('expand',function(){FilterMatchesEditor.win.doLayout(true);});
			this.msgPanel.hide();
			this.msgPanel.on('collapse',function(p) {
				p.hide();
			});			
			this.msgPanel.on('hide',function() {
				(function() {
	            	FilterMatchesEditor.win.fireEvent('resize', FilterMatchesEditor.win);
	            }).defer(500);
//				FilterMatchesEditor.win.doLayout(true);
			});
//			this.msgPanel.hide();
			
	                                      
	        this.win.setSize({width: VIEWPORT.getSize().width * 0.8, height: VIEWPORT.getSize().height * 0.8});
	    	this.win.show();
			this.win.setPosition(VIEWPORT.getSize().width * 0.1, VIEWPORT.getSize().height * 0.1);
			
			// ! close isDirty check
	    	this.win.on({
	    		'beforeclose': {
	    			fn : function(win) {
	    				if (true === win.isDirty) {
	    					// confirm reload
							Ext.Msg.confirm(
								VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
	                    		VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
								VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
	                    		function(response) {
	                    			if ('yes' === response) {
	                    				win.isDirty = false;
	    								win.close();
	                    			}
                				},
                			this);
                			return false;
	    				}
	    			}
	    		}
	    	});
	        
	        this.lastLoadConfig = {
	        	url: editURL,
	        	text: 'loading...',
	        	scripts: true,
	        	callback: LPCB,
	        	params: { id: matchId },
                text: 'loading...',
                discardUrl: true,
                nocache: true,
                timeout: 30
	        };
	        
	        this.contentPanel.load(this.lastLoadConfig);
	        
	        this.matchEditor = new FilterMatchesEditor.MatchEditor({
	        	matchId: matchId
	        });
			
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}

	},
	
	/**
	 * @param {Object} config
	 */
	initFilterMatchEditor: function(config) {
		
		// set win-title
		Ext.getCmp('FilterMatchesEditor.Win').setTitle('(' + config.id + ') '+ 
			FilterLocalizations.FilterMatch + ': ' + config.name);
		
		propertyGridRecord = new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'name' }
        ]);
		
        propertyGridStore = new Ext.data.JsonStore({
            pruneModifiedRecords : true,
            fields: propertyGridRecord,
            root: 'data',
//            remoteSort: true,                    
//            sortInfo: {
//                field: 'name',
//                direction: 'ASC'
//            },
//            totalProperty: 'total',
            url: config.loadGridURL
        });
        
        propertyGridExpander = new Ext.grid.AjaxRowExpander({
	        spanRows: '3',
	        enableCaching: true,
	        url: config.loadPropsURL,
	        params: {
	        	id: config.id
	        }
	    });
        
        propertyGridCm = new Ext.grid.ColumnModel([
            propertyGridExpander,{
            	id: 'id',
                header: 'id:',
                dataIndex: 'id',
                sortable: true,
                width: 30,
                fixed: true
            },{    
                header: FilterLocalizations.FilterRule + ':',
                dataIndex: 'name'
//                ,
//                sortable: true
            }
        ]);
        
        propertyGrid = new Ext.grid.EditorGridPanel({
        	id: 'matchesProperties.grid',
            store: propertyGridStore,
            cm: propertyGridCm,
//            sm: gridSm,
            renderTo: 'grid.' + config.id + '.props',
            autoExpandColumn: 'name',
//            height: 100,
//            width: 725,
            loadMask: true,
            viewConfig: { forceFit: true },
            plugins: propertyGridExpander,
            title: 'LOC: match-properties',
			header: false,
            frame: false,
            enableHdMenu: false,
            bodyStyle: 'border: 2px solid #8DB2E3;'/*,
            clicksToEdit: 1,            
            tbar: TODO...,
            buttons: [{
                        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
                        iconCls: 'saveIconCls', 
                        handler: <xsl:value-of select="$editorIdentifier"/>SaveGrid
                     }],
            buttonAlign: 'center',
            bbar: pagingToolBar*/
        });
        
        // grid: resize
        // w
        propertyGrid.setWidth(Ext.getCmp('FilterMatchesEditor.Win').getInnerWidth() - 12);
        // h
        propertyGrid.setHeight(Ext.getCmp('FilterMatchesEditor.Win').getInnerHeight() - 12 - 
        	Ext.get('FilterMatchEditor.' + config.id + '.header').getBox().height);
        
        // config.handleId: listeners for grid: resize              
        Ext.getCmp('FilterMatchesEditor.Win').on({
            'resize': {
                fn: function(panel, adjWidth, adjHeight, rawWidth, rawHeight) {
                	propertyGrid = Ext.getCmp('matchesProperties.grid');
                    // w
			        propertyGrid.setWidth(panel.getInnerWidth() - 12);
			        // h
        			propertyGrid.setHeight(panel.getInnerHeight() - 12 - 
        				Ext.get('FilterMatchEditor.' + config.id + '.header').getBox().height);
                }
            }
        });
        
        // init grid
        propertyGridStore.load({
            params:{
            	id: config.id
                // start: 0, 
                // limit: 10
            }
        });
        
        
        // add save-button
		winTBar = Ext.getCmp('FilterMatchesEditor.Win').getTopToolbar();
		if (true !== winTBar.isInitialized) {
			winTBar.insertButton(0,[
				new Ext.Toolbar.Button(new Ext.Action({
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope: Ext.getCmp('FilterMatchesEditor.Win'),
					handler: function() {
						if (true !== this.isDirty) {
							return;
						}
						
						if (false === FilterMatchesEditor.matchEditor.hasChanges()) {
							// no changes - show save-success msg
		      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:this.id},{n:'msg',o:'SAVESUCCESS'}]});
		      				return;
						}
						
						Ext.Ajax.request({
							url: config.saveMatchURL,
							method: 'POST',
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								
								// re-enable win
								options.win.enable();
								
				        		if (true === decodedResponse.status) {      				
				      				// set tab.isDirty to false
				      				options.win.isDirty = false;
				      				
				      				FilterMatchesEditor.matchEditor.clear();
				      				
				      				// show save-success msg
				      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:options.win.id},{n:'msg',o:'SAVESUCCESS'}]});
				        		} else {
				        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterMatchesEditor','saveChangesButton');
				        		}
							},
							failure: function(response, options) {
								// re-enable win
								options.win.enable();
								
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({e:'REQUEST.FAILED'},'FilterMatchesEditor','saveChangesButton');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'FilterMatchesEditor','saveChangesButton');
						        }
							},
							win: this,
							params: {
								data: FilterMatchesEditor.matchEditor.getChanges()					
							}
						});
						
					},
					iconCls: 'saveIconCls'
				})),
				new Ext.Toolbar.Separator()
			]);
			winTBar.isInitialized = true;
		}
        
        return propertyGrid;
		
	},
	
	/**
	 * 
	 */
	editMatch: function(domEl, ruleId) {
		// PulseError.Throw({e:Ext.get(domEl).getValue() + ' : ' + ruleId + ' : ' + this.matchEditor.getId() + ' : ' + domEl.checked});
//		bool = this.matchEditor.changeRule(ruleId, domEl);
//		PulseError.Throw(['DBG','editMatch: ' + bool + ', hasChanges: ' + this.matchEditor.hasChanges()]);
//		PulseError.Throw(['DBG','changes: ' + this.matchEditor.getChanges()]);
		if (true === this.matchEditor.changeRule(ruleId, domEl)) {
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:'FilterMatchesEditor.Win'},{n:'msg',o:'change'}]});
		}
	}
	
}; // END :: FilterMatchesEditor

/**
 * 
 */
FilterMatchesEditor.MatchEditor = function(config) {
	
	this.id = config.matchId;
	
	this.changes = {
	
		storeArray: [],
		
		push: function(ruleId){
			changesStore = new ChangesStore({
				id: ruleId	
			});
			this.storeArray.push(changesStore);
			return changesStore;
		},
		
		get: function(id) {
			for (this.i = 0; this.i < this.storeArray.length; this.i++) {
				if (this.storeArray[this.i].idv === id) {
					return this.storeArray[this.i];
				}
			}
		},
		
		remove: function(id) {
			array = [];
			chkChgObj = this.storeArray.shift();
			while (chkChgObj) {			
				if (chkChgObj.idv === id) {
					delete chkChgObj;
					this.storeArray = this.storeArray.concat(array);
					return true;
					/*break;*/
				}
				array.push(chkChgObj);
				chkChgObj = this.storeArray.shift();
			}
			this.storeArray = this.storeArray.concat(array);
			return false;
		}	
		
	};
	
	this.changeRule = function(ruleId, chkBoxDom) {
		propId = Ext.get(chkBoxDom).getValue();
		if (typeof(this.changes.get(ruleId)) == 'undefined') {
			changesStore = this.changes.push(ruleId);
//			PulseError.Throw(['DBG','new store: ' + changesStore.id]);
			return changesStore.push(new ChkBoxChange({
				id: propId,
				el: chkBoxDom
			}));
		} else {
			changesStore = this.changes.get(ruleId);
//			PulseError.Throw(['DBG','retrieved store: ' + changesStore.id]);
			bool = changesStore.push(new ChkBoxChange({
				id: propId,
				el: chkBoxDom
			}));
//			PulseError.Throw(['DBG','added change to store: ' + bool]);
			if (false === bool) {
				if (false === changesStore.hasChanges()) {
//					PulseError.Throw(['DBG','no chgs']);
					this.changes.remove(ruleId);
				}	
			}
			return bool;
		}
	};
	
	this.getId = function() {
		return this.id;
	};
	
	this.hasChanges = function() {
//		PulseError.Throw(['DBG','changes.ln: '+this.changes.storeArray.length]);
		if (this.changes.storeArray.length > 0) { return true; } else { return false; }
	};
	
	this.getChanges = function(bool) {
//		PulseError.Throw(['DBG','changes.ln: '+this.changes.storeArray.length]);
		if (false === this.hasChanges()) {
			json = '{id:' + this.id +',data:[]}';
		} else {
			json = '{id:' + this.id +',data:[';
			
			for (this.i = 0; this.i < this.changes.storeArray.length; this.i++) {
				changesStore = this.changes.storeArray[this.i];
//				PulseError.Throw(['DBG',this.i+'']);
//				appendJson = changesStore.toJson(bool);
//				PulseError.Throw(['DBG',this.i+' appendJson: '+appendJson]);
                json += changesStore.toJson(bool);
//                js += changesStore.id;
                if (typeof(this.changes.storeArray[this.i+1]) != 'undefined') {
                    json += ',';
                }
            }
			
			json += ']}';			
		}
		return json;
	};
	
	this.clear = function() {
		delete this.changes.storeArray;
		this.changes.storeArray = [];
	};
	
};

ChangesStore = function(config) {
	
	this.id = 'ChangesStore.' + config.id;
	this.idv = config.id;
	
	this.storeArray = [];
	
	this.push = function(chgObj) {
		for (this.i = 0; this.i < this.storeArray.length; this.i++) {
			if (this.storeArray[this.i].id === chgObj.id) {
				chkChgObj = this.storeArray[this.i];
				if (true === chkChgObj.compareTo(chgObj)) {
//					PulseError.Throw(['DBG','ChangesStore.remove']);
					delete chgObj;
					if (true === this.remove(chkChgObj.id)) {
						return false;
					} else {
						throw(this.id + ' remove-error');
					}
				} else {
//					PulseError.Throw(['DBG','ChangesStore.apply']);
					chkChgObj.apply(chgObj);
					delete chgObj;
					return true;
				}
			}
		}
//		PulseError.Throw(['DBG','ChangesStore.push']);
		this.storeArray.push(chgObj);
		return true;
	};
	
	this.remove = function(id) {
		array = [];
		chkChgObj = this.storeArray.shift();
		while (chkChgObj) {			
			if (chkChgObj.id === id) {
				delete chkChgObj;
				this.storeArray = this.storeArray.concat(array);
				return true;
				/*break;*/
			}
			array.push(chkChgObj);
			chkChgObj = this.storeArray.shift();
		}
		this.storeArray = this.storeArray.concat(array);
		return false;
	};
	
	this.get = function(id) {
		for (this.i = 0; this.i < this.storeArray.length; this.i++) {
			if (this.storeArray[this.i].id === id) {
				return this.storeArray[this.i];
			}
		}
	};
	
	this.hasChanges = function() {
//		PulseError.Throw(['DBG','storeArray.ln: ' + this.storeArray.length]);
		if (this.storeArray.length > 0) { return true; } else { return false; }
	};
	
	this.toJson = function(bool) {
		
		if (true === bool) {
			id = this.id;
		} else {
			id = this.idv;
		}
		
		if (false === this.hasChanges()) {
			js = '{id:' + id +',data:[]}';
		} else {
			js = '{id:' + id +',data:[';
			
			for (this.i = 0; this.i < this.storeArray.length; this.i++) {
				chgObj = this.storeArray[this.i];               
                js += chgObj.toJson(bool);
                if (typeof(this.storeArray[this.i+1]) != 'undefined') {
                    js += ',';
                }
            }
			
			js += ']}';			
		}
		return js;
	};
};

ChkBoxChange = function(config) {
	this.id = 'ChkBoxChange.' + config.id;
	this.idv = config.id;
	this.value = config.el.checked;
	this.initialValue = !config.el.checked;
	this.compareTo = function(chkBoxChange) {
		return (this.initialValue === chkBoxChange.value);
	};
	this.apply = function(chkBoxChange) {
		this.value = chkBoxChange.value;
		this.initialValue = chkBoxChange.initialValue;
	};
	this.toJson = function(bool) {
		if (true === bool) {
			id = this.id;
		} else {
			id = this.idv;
		}
		return '{id:' + id +',value:' + this.value + '}';

	};
};


/**
 * 
 */
var FilterRulesEditor = {
	
	el: null,
	win: null,
	msgPanel: null,
	contentPanel: null,
	lastLoadConfig: null,
	
	/**
	 * @param {Object} config
	 */
	createFilterRule: function(config) {
		
//		PulseError.Throw({e:'DBG',p:[
//			{n:'config.filterId',o:config.filterId},
//			{n:'config.createURL',o:config.createURL},
//			{n:'config.editURL',o:config.editURL}
//		]},'FilterRulesEditor','createFilterRule');
		
		try {
			
			 if (this.el === null) {
	                
	            pel = VIEWPORT.getEl();
		        if (typeof(pel) == 'undefined') {
		        	throw('29 :: FilterRulesEditor.createFilterRule() :: ' + 
		        	'CHECK for element failed...');
		        }    
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'FilterRulesEditorWindow.el'
			    });
	        
	        }
			
		
			ruleNameField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.NAME, 
	            name: 'name', 
	            width: 400,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
	            allowBlank: false 
	        }); 
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'newRuleForm',
	            name: 'newRuleForm', 
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield', 
	            autoHeight: true, 
	            items: [ruleNameField] 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE, 
	            handler: function() {
	                // check values 
	                if (ruleNameField.getValue().trim() === '') { 
	                    return false; 
	                } 
	                // checks passed : create
	                Ext.Ajax.request({
	                	url: config.createURL,
	                	method: 'POST',
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		if (true === decodedResponse.status) {
	                			FilterRulesEditor.win.close();
	                			FilterEditor.reloadRules(options.params.id);
	                			FilterRulesEditor.editFilterRule(config.editURL,decodedResponse.id);                			
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterRulesEditor','createFilterRule()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'FilterRulesEditor','createFilterRule()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'FilterRulesEditor','createFilterRule()');
					        }
	                	},
	                	params: { id: config.filterId, name: ruleNameField.getValue() }
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            handler: function() {
	                FilterRulesEditor.win.close();
	            } 
	        }); 
	        
	       
	            
		    this.msgPanel = new Ext.Panel({
	    		id: 'FilterRulesEditor.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'FilterRulesEditor.Win',
	            title: FilterLocalizations.createFilterRule,
	            iconCls: 'contentFilterIconCls',
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 130,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){FilterRulesEditor.win.doLayout(true);});
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);                       
	        ruleNameField.validate();		
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
		
		
	},
	
	/**
	 * @param {String} editURL
	 * @param {String}/{Number} ruleId
	 */
	editFilterRule: function(editURL, ruleId) {
		
//		PulseError.Throw({e:'DBG',p:[
//			{n:'ruleId',o:ruleId},
//			{n:'editURL',o:editURL}
//		]},'FilterRulesEditor','editFilterRule');
		
		try {
			
			if (this.el === null) {
	                
	            pel = VIEWPORT.getEl();
		        if (typeof(pel) == 'undefined') {
		        	throw('156 :: FilterRulesEditor.editFilterRule() :: ' + 
		        	'CHECK for element failed...');
		        }    
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'FilterRulesEditorWindow.el'
			    });
	        
	        }
	        
	        this.msgPanel = new Ext.Panel({
	    		id: 'FilterRulesEditor.Win.msgPanel',
//	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
				collapsed: true
//	    		autoHeight: true
    		});
    		
    		this.contentPanel = new Ext.Panel({
	    		id: 'FilterRulesEditor.contentPanel',
//	    		region: 'center',
	    		html: 'content goes here',
	    		border: false//,
//	    		autoScroll: true,
//	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'FilterRulesEditor.Win',
	            title: 'LOC: edit rule',
	            iconCls: 'contentFilterIconCls',
	            maximizable: false,
	            closable: true, 
		        plain: true,
		        modal: true,
		        autoScroll: true, 
		        renderTo: this.el,
		        height: 300, 
		        width: 400,
//	            layout: 'border',
	            items: [ this.msgPanel, this.contentPanel ],
	            tbar: [
	            	new Ext.Action({
						text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
						handler: function() {
							FilterRulesEditor.win.close();
						},
						iconCls: 'cancelIconCls'
					}),
					'-',
	            	'->',
					new Ext.Action({
						text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
						handler: function() {
							
							if (true === FilterRulesEditor.contentPanel.getUpdater().isUpdating()) {
								return;
							}
							
							if (true === FilterRulesEditor.win.isDirty) {
								// confirm reload
								Ext.Msg.confirm(
									VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
		                    		VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
									VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
		                    		function(response) {
		                    			if ('yes' === response) {
		                    				FilterRulesEditor.win.isDirty = false;
		                    				FilterRulesEditor.lastLoadConfig.callback = LPCB;
											FilterRulesEditor.lastLoadConfig.timeout = 30;
											if (false === FilterRulesEditor.msgPanel.hidden) {
												FilterRulesEditor.msgPanel.collapse();
											}
											FilterRulesEditor.contentPanel.load(FilterRulesEditor.lastLoadConfig);
		                    			}
	                				},
	                			this);
	                			
							} else {
								FilterRulesEditor.lastLoadConfig.callback = LPCB;
								FilterRulesEditor.lastLoadConfig.timeout = 30;
								if (false === FilterRulesEditor.msgPanel.hidden) {
									FilterRulesEditor.msgPanel.collapse();
								}
								FilterRulesEditor.contentPanel.load(FilterRulesEditor.lastLoadConfig);								
							}
						},
						iconCls: 'reloadIconCls'
					})
	            ]
	        });
	        
	        
	        // initial hide of msgPanel	    	
//			this.msgPanel.on('expand',function(){FilterRulesEditor.win.doLayout(true);});
			this.msgPanel.hide();
			this.msgPanel.on('collapse',function(p) {
				p.hide();
			});			
			this.msgPanel.on('hide',function() {
				(function() {
	            	FilterRulesEditor.win.fireEvent('resize', FilterRulesEditor.win);
	            }).defer(500);
//				FilterRulesEditor.win.doLayout(true);
			});
//			this.msgPanel.hide();
			
	                                      
	        this.win.setSize({width: VIEWPORT.getSize().width * 0.8, height: VIEWPORT.getSize().height * 0.8});
	    	this.win.show();
			this.win.setPosition(VIEWPORT.getSize().width * 0.1, VIEWPORT.getSize().height * 0.1);
			
			// ! close isDirty check
	    	this.win.on({
	    		'beforeclose': {
	    			fn : function(win) {
	    				if (true === win.isDirty) {
	    					// confirm reload
							Ext.Msg.confirm(
								VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
	                    		VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
								VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
	                    		function(response) {
	                    			if ('yes' === response) {
	                    				win.isDirty = false;
	    								win.close();
	                    			}
                				},
                			this);
                			return false;
	    				}
	    			}
	    		}
	    	});
	        
	        this.lastLoadConfig = {
	        	url: editURL,
	        	scripts: true,
	        	callback: LPCB,
	        	params: { id: ruleId },
                text: 'loading...',
                discardUrl: true,
                nocache: true,
                timeout: 30
	        };
	        
	        this.contentPanel.load(this.lastLoadConfig);
			
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
				
	},
	
	/**
	 * @param {Object} config
	 */
	initFilterRuleEditor: function(config) {
		
//		PulseError.Throw({e:'DBG',p:[
//			{n:'config.id',o:config.id},
//			{n:'config.name',o:config.name},
//			{n:'config.loadRuleLocsURL',o:config.loadRuleLocsURL},
//			{n:'config.saveRuleURL',o:config.saveRuleURL},
//			{n:'config.loadPropsURL',o:config.loadPropsURL},
//			{n:'config.createPropURL',o:config.createPropURL}
//		]},'FilterRulesEditor','initFilterRuleEditor');
		
		// set win-title
		Ext.getCmp('FilterRulesEditor.Win').setTitle(config.name);
		
		// monitor rule name field
		nameEl = Ext.get(config.ruleclass + '.' + config.id + '.name');
		nameEl.on('keyup', function() {			
			if (this.dom.value === '') {
				this.replaceClass('editorInputField','editorInputFieldRed');
				this.replaceClass('editorInputFieldYellow','editorInputFieldRed');
			} else {
				this.replaceClass('editorInputField','editorInputFieldYellow');
				this.replaceClass('editorInputFieldRed','editorInputFieldYellow');
			}
			PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:'FilterRulesEditor.Win'},{n:'msg',o:'change'}]});
		},nameEl);
		
		// build rule-localizations-grid
		ruleGrid = this.buildRuleLocGrid({
			id: config.id,
			url: config.loadRuleLocsURL
		});
		
		propGrid = LocalizationGrid.getGrid({
			id: 'FilterRulePropertyGrid.grid',
			renderTo: 'grid.' + config.id + '.props',
			header: false,
			frame: false,
			style: 'border: 1px solid #8DB2E3;',
			url: config.loadPropsURL,
			createURL: config.createPropURL,
			removeURL: config.removePropURL,
			moveURL: config.movePropURL,
			params: { id: config.id },
			handleId: 'FilterRulesEditor.Win',
			handleType: 'win',
			resizeHels: ['FilterRuleEditor.' + config.id + '.container']
		});
		
		
		// add save-button
		winTBar = Ext.getCmp('FilterRulesEditor.Win').getTopToolbar();
		if (true !== winTBar.isInitialized) {
			winTBar.insertButton(0,[
				new Ext.Toolbar.Button(new Ext.Action({
					text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
					scope: Ext.getCmp('FilterRulesEditor.Win'),
					handler: function() {
						if (true !== this.isDirty) {
							return;
						}
						
						// retrieve the values the are to be saved
						nameEl = Ext.get(config.ruleclass + '.' + config.id + '.name');
						name = nameEl.getValue().trim();
						if (name === '') {
							return;
						}
						
						ruleStore = ruleGrid.getStore();
						propStore = propGrid.getStore();
						
	//					PulseError.Throw({e:'DBG',
	//						p:[
	//							{n:'saveURL', o:config.saveRuleURL},
	//							{n:'id', o:config.id},
	//							{n:'name', o:name},
	//							{n:'propStore', o:propStore},
	//							{n:'propStore', o:propStore}
	//						]
	//					},'FilterRulesEditor','initFilterRuleEditor.saveAction.execute()');
									
						// disable win during save
						this.disable();
						
						// encode rules
						modifiedRules = ruleStore.getModifiedRecords();
						rules = [];
						for (i = 0; i < modifiedRules.length; i++) {
							rule = modifiedRules[i];
							rules.push(Ext.encode({
								'lang': rule.get('lang'),
								'localization': rule.get('localization')
							}));
						}
						encodedRules = '{rules:[' + rules.concat(',') + ']}';
						
						// encode props
						modifiedProps = propStore.getModifiedRecords();
						props = [];
						for (i = 0; i < modifiedProps.length; i++) {
							prop = modifiedProps[i];
							props.push(Ext.encode({
								'id': prop.get('id'),
								'name': prop.get('name'),
								'langOne': prop.get('langOne'),
								'valueOne': prop.get('valueOne'),
								'langTwo': prop.get('langTwo'),
								'valueTwo': prop.get('valueTwo')
							}));
						}
						encodedProps = '{props:[' + props.concat(',') + ']}';
						
						Ext.Ajax.request({
							url: config.saveRuleURL,
							method: 'POST',
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
								
								// re-enable win
								options.win.enable();
								
				        		if (true === decodedResponse.status) {      				
				      				// set tab.isDirty to false
				      				options.win.isDirty = false;
				      				
				      				// set new title
				      				options.win.setTitle(options.params.name);
				      				
				      				// reset nameEl
				      				options.nameEl.replaceClass('editorInputFieldRed','editorInputField');
				      				options.nameEl.replaceClass('editorInputFieldYellow','editorInputField');
				      				
				      				
				      				// commit stores
				      				options.ruleStore.commitChanges();
				      				options.propStore.commitChanges();
				      				
				      				// show save-success msg
				      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:options.win.id},{n:'msg',o:'SAVESUCCESS'}]});
				        		} else {
				        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterRulesEditor','saveChangesButton');
				        		}
							},
							failure: function(response, options) {
								// re-enable win
								options.win.enable();
								
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({e:'REQUEST.FAILED'},'FilterRulesEditor','saveChangesButton');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'FilterRulesEditor','saveChangesButton');
						        }
							},
							win: this,
							nameEl: nameEl,
							ruleStore: ruleStore,
							propStore: propStore,
							params: { 
								id: config.id,
								name: name, 
								rules: encodedRules,
								props: encodedProps						
							}
						});
						
					},
					iconCls: 'saveIconCls'
				})),
				new Ext.Toolbar.Separator()
			]);
			winTBar.isInitialized = true;
		}
	},
	
	/**
	 * @param {Object} config
	 */
	buildRuleLocGrid: function(config) {
		
		gridStoreRecord = new Ext.data.Record.create([
			{ name: 'lang' },
			{ name: 'localization' }
        ]);
        
        gridStore = new Ext.data.JsonStore({
//            id: 'id',
            pruneModifiedRecords : true,
            fields: gridStoreRecord,
            root: 'data',
//            remoteSort: true,                    
//            sortInfo: {
//                field: 'name',
//                direction: 'ASC'
//            },
//            totalProperty: 'total',
            url: config.url
        });
        
        langFieldRenderer = function(lang) {
        	return '<span style="font-weight:bold;">' + VIEWPORT_PROPERTIES.getLanguage(lang) + '</span>';
        };
        
//        removeFieldRenderer = function(locale) {
//        	return FilterEditor.getGridImageField({
//        		functionString: 'FilterEditor.removeFilter(\'' + config.removeFilterURL + '\',' + id + ')',
//        		iconCls: 'deleteIconCls_14',
//        		qtip: 'LOC: delete'
//        	});
//        };
        
        gridCm = new Ext.grid.ColumnModel([
            	/*gridSm,*/
            {
            	id: 'lang',
                header: VIEWPORT_PROPERTIES.LANGUAGE + ':',
                dataIndex: 'lang',
                sortable: true,
                width: 20,
//                fixed: true,
                renderer: langFieldRenderer
            },{    
                header: VIEWPORT_PROPERTIES.LOCALIZATIONS + ':',
                dataIndex: 'localization',
                sortable: false,
                editor: new Ext.form.TextField({
                    allowBlank: true
                })
            }/*,{
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: editFieldRenderer
            },{
            	header: '',
            	dataIndex: 'locale',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: removeFieldRenderer
            }*/
        ]);
        
        grid = new Ext.grid.EditorGridPanel({
        	id: 'FilterRuleGrid.grid',
            store: gridStore,
            cm: gridCm,
//            sm: gridSm,
            renderTo: 'grid.' + config.id + '.rule',
            autoExpandColumn: 'localization',
            height: 100,
//            width: 725,
            loadMask: true,
            viewConfig: { forceFit: true },
            title: 'LOC: rule-localizations',
			header: false,
            frame: false,
            enableHdMenu: false,
            bodyStyle: 'border: 2px solid #8DB2E3;',
            clicksToEdit: 1/*,            
            tbar: TODO...,
            buttons: [{
                        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
                        iconCls: 'saveIconCls', 
                        handler: <xsl:value-of select="$editorIdentifier"/>SaveGrid
                     }],
            buttonAlign: 'center',
            bbar: pagingToolBar*/
        });
        
        // grid: resize
        // w
        grid.setWidth(Ext.getCmp('FilterRulesEditor.Win').getInnerWidth() - 12);
        // config.handleId: listeners for grid: resize              
        Ext.getCmp('FilterRulesEditor.Win').on({
            'resize': {
                fn: function(panel, adjWidth, adjHeight, rawWidth, rawHeight) {
                	grid = Ext.getCmp('FilterRuleGrid.grid');
                    // w
			        grid.setWidth(panel.getInnerWidth() - 12);
                }
            }
        });
        
        grid.on('afteredit', function() {
            // show change-msg
            PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'win'},{n:'id',o:'FilterRulesEditor.Win'},{n:'msg',o:'CHANGE'}]});
        });
        
        // init grid
        gridStore.load({
            params:{
            	id: config.id
                // start: 0, 
                // limit: 10
            }
        });
        
        return grid;
		
	}
	
}; // END :: FilterRulesEditor


/**
 * 
 */
DBG.FilterContentEditor = DBG.apply(DBG.ContentEditor,{
		
//	initComponent:  { FilterContentEditor: false },
	initFieldMonitoring: { FilterContentEditor: false },
	addSubEditor: { FilterContentEditor: false },
	hasChanges: { FilterContentEditor: false },
	
	initTab: false,
	
	MSG: false // checked also in PULSE_VIEWPORT_CONTROLLER

});

/**
 * 
 */
FilterContentEditor = {
	
	type: 'FilterContentEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.FilterContentEditor*/,
	
	// defaults
	
	// copy-content-button
	getCreateCopyButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.COPYCONTENT,
		disabled: true,
		scope: this,
		handler: function() {

			this.selectCopyCallback = function(node) {
				Ext.Ajax.request({
					url: this.copyContentURL,
					scope: this,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// reloads ContentLocalizationMap
							panel = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentLocalizationMap.panel');
		            		panel.lastLoadConfig.callback = LPCB;
		            		panel.lastLoadConfig.timeout = 30;
		            		panel.load(panel.lastLoadConfig);
		            		// shows copy in contentregistrytree
		            		crPanel = Ext.getCmp('ContentRegistry.WEST');
		            		crPanel.expand();
		            		path = decodedResponse.expandPath;
		            		ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), path, function(node) {
		            			ContentRegistryEditor.editNode(node);
		            		});
	            		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'tbar.copy');
						}
						delete this.selectCopyCallback;
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this,'tbar.copy');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'tbar.copy');
				        }
				        delete this.selectCopyCallback;
					},
					params: { id: this.getContent().id, toid: node.attributes.id }
				});
				
			};

			windowCfg = {
    			getChildrenURL: this.browseContentRegistryURL + '?mode=folder&bundle=' + this.getContent().bundle,
    			emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FOLDER,
    			scope: this,
    			selectCallback: 'selectCopyCallback'
    		};
    		ContentRegistryEditor.getSelectWindow(windowCfg);
		},
		iconCls: 'copyIconCls'
	};
	},
	
	// save-content-button
	getSaveContentButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
		disabled: true,
		scope: this,
		handler: function() {
			
			if (false === this.hasChanges()) {
				this.reset();
				return;
			}
			
			saveValues = this.getChanges({id:this.getContent().id});
			
			if (typeof(saveValues) == 'undefined' || saveValues === null) {
				if (this.DBG) {
					THROW({
						e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
						args:[this.hasChanges(),saveValues]
					},this,'saveContentButton');
				}
				return;
			}
			
			this.tab.disable();
			
			Ext.Ajax.request({
				url: this.saveContentURL,
				method: 'POST',
				scope: this,
				success: function(response, options) {
					this.tab.enable();
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {								
						this.commit();
						(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
					} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
					}
				},
				failure: function(response, options) {
					this.tab.enable();
					if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
			        }
				},
				params: saveValues
			});
		},
		iconCls: 'saveIconCls'
	};
	},
	
	// find-content-in-content-registry-button
	getFindButtonConfig: function() {
		return {
		text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
		disabled: true,
		scope: this,
		handler: function() {					
			Ext.Ajax.request({
				url: this.contentExpandPathURL,
				method: 'POST',
				success: function(response, options) {
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {
						// show content in contentregistrytree
	            		crPanel = Ext.getCmp('ContentRegistry.WEST');
	            		if (typeof(crPanel) == 'undefined' || crPanel === null) {
	            			PULSE_TOOLBAR.openPanel({
	            				id: 'ContentRegistry.WEST',
	            				callback: function() {
		            				ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
		            			}
	            			});
	            			return;
	            		}
	            		crPanel.expand();
						ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
	        		} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.find');
					}
				},
				failure: function(response, options) {
					if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.find');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.find');
				        }
				},
				params: { id: this.getContent().id }
			});
		},
		iconCls: 'findIconCls'
	};
	},
	
	/**
	 * adds buttons to tab holding the editor.
	 */
	initTab: function() {
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
			
				buttons = [];
				
				// enables save-content-button if URL
				saveContentButtonConfig = this.getSaveContentButtonConfig();
				if (typeof(this.saveContentURL) == 'string' && this.saveContentURL !== '') {
					saveContentButtonConfig.disabled = false;
					saveContentButtonConfig.scope = this;
				}
				buttons.push(saveContentButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
			
				// enables copy-content-button if URL
				createCopyButtonConfig = this.getCreateCopyButtonConfig();
				if (typeof(this.copyContentURL) == 'string' && this.copyContentURL !== '') {
					createCopyButtonConfig.disabled = false;
					createCopyButtonConfig.scope = this;
				}
				buttons.push(createCopyButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());			
				
				// enables find-button if URL
				findButtonConfig = this.getFindButtonConfig();
				if (typeof(this.contentExpandPathURL) == 'string' && this.contentExpandPathURL !== '') {
					findButtonConfig.disabled = false;
					findButtonConfig.scope = this;
				}
				buttons.push(findButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());					
				
				// insert buttons
				this.tab.getTopToolbar().insertButton(0, buttons);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
	},
	
	/**
	 * @param {String}/{Number} id
	 * @param {String} clazz
	 */
	selectFilter: function(id, clazz) {
//		PulseErrorWindow.Throw(['DBG',
//			'' + loadFiltersURL,
//			'' + filterContentAddFilterURL,
//			'' + filterContentLoadFilterURL,
//			'' + id
// 		]);
		
		try {
			
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('172 :: FilterContentEditor.selectFilter() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
	        namePanel = new Ext.Panel({
	        	region: 'south', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px',
	            autoHeight: true, 
	       		html: '<table cellpadding="0" cellspacing="0" border="0" style="width:90%" align="center"><tr>' + 
	       				'<td>' + VIEWPORT_PROPERTIES.NAME + ':&#160;</td>' + 
	       				'<td style="width:100%"><div id="' + this.id + '.filterNameField"> </div></td>' + 
	       				'</tr></table>'
	        });  
	        
	        if (this.el === null) {
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: this.id + '.el'
			    });
	        
	        }
	        
	        this.centerPanel = new Ext.Panel({
        		region: 'center',
        		margins: '3 3 0 3',
        		html: '<div id="' + this.id + '.grid.el"> </div>'
        	});
	        
	        addButtonCfg = {
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_ASSIGN,
	            scope: this, 
	            handler: function() {
	            	
	                // check values
	                if (this.selectedRecord === null) { 
	                    return false; 
	                }
                	
                	Ext.Ajax.request({
						url: this.addFilterURL,
						scope: this,
						method: 'POST',
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
			        		if (true === decodedResponse.status) {      				
			      				// reload filter
								this.reloadFilter(id);
						
			      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:clazz+'.'+id+'.editor'},{n:'msg',o:'SAVESUCCESS'}]});
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterContentEditor','selectFilter()');
			        		}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},'FilterContentEditor','selectFilter()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'FilterContentEditor','selectFilter()');
					        }
						},
						params: { 
							id: id,
							filterid: this.selectedRecord.get('id')
						}
					});
	                
	                this.win.close();

	            } 
	        };
	        
	        cancelButtonCfg = {
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        };
	        
	        this.win = new Ext.Window({
	        	id: this.id + '.win',
	            title: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FILTER,
	            iconCls: 'contentFilterIconCls',
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 500,
	            layout: 'border',	            
	            items: [
	            	this.centerPanel,
	            	namePanel
				],
	            width: 450,
	            buttonAlign: 'center',
	            buttons: [addButtonCfg,cancelButtonCfg]
	        });
	        
	        this.win.on('close',function(){
	        	// clean
	        	delete this.centerPanel;
	        	delete this.overViewGrid;
	        	//re-init
	        	this.centerPanel = null;
	        	this.overViewGrid = null;	        	
	        },this);
	        
	        this.win.on('show',function(){
	        	
	        	this.filterNameField = new Ext.form.TextField({ 
		            name: this.id + '.filterNameField.name', 
		            renderTo: this.id + '.filterNameField',
		            style: 'width:100%',
		            emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FILTER, 
		            allowBlank: false,
		            readOnly: true
		        });                            
	        	this.filterNameField.validate();
		        overViewGridCfg = {
		        	gridId: this.id + '.grid',
		        	loadFiltersURL: this.loadFiltersURL
		        };
		        this.overViewGrid = FilterEditor.initOverViewEditor(overViewGridCfg);
		        sm = this.overViewGrid.getSelectionModel();
		        sm.on('rowSelect',function(sm, index, record){
		        	this.filterNameField.setValue(record.get('name'));
		        	this.selectedRecord = record;
		        },this);
		        
		        this.win.doLayout(true); 
		        this.overViewGrid.setHeight(this.centerPanel.getInnerHeight() - 2);
	        },this);
	        
	        this.win.on('resize',function(){
	        	if (typeof(this.overViewGrid) == 'object' && this.overViewGrid !== null) {
	        		this.overViewGrid.setHeight(this.centerPanel.getInnerHeight() - 2);
	        		this.overViewGrid.setWidth(this.centerPanel.getInnerWidth() - 2);
	        	}
	        },this);
	        
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 200, 50); 
	        this.win.show(this);	
		
		} catch (e) {
			alert('windowInitError: \n' + e);
		}
	},
	
	/**
	 * @param {String}/{Number} id
	 * @param {String} clazz
	 */
	removeFilter: function(id, clazz) {
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;' /* "'  + id + '"' */,
    		VIEWPORT_PROPERTIES.MSG_REALLYREMOVE,
    		function(response) {
    			if ('yes' === response) {
		
					Ext.Ajax.request({
						url: this.removeFilterURL,
						scope: this,
						method: 'POST',
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
			        		if (true === decodedResponse.status) {      				
			      				// reload filter
								this.reloadFilter(id);
								
			      				// show delete-success msg
			      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:clazz+'.'+id+'.editor'},{n:'msg',o:'DELETESUCCESS'}]});
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterContentEditor','removeFilter()');
			        		}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},'FilterContentEditor','removeFilter()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'FilterContentEditor','removeFilter()');
					        }
						},
						params: { id: id }
					});
		
    			}    			
    		},
    	this);
	},
	
	/**
	 * delegates to FilterEditor
	 * 
	 * @param {String}/{Number} id the id of the filter
	 */
	editFilter: function(id) {
		FilterEditor.editFilter(this.editFilterURL,id);
	},
	
	/**
	 * @param {String}/{Number} id
	 */
	reloadFilter: function(id) {
		filterEl = Ext.get('FilterContentEditor.' + id + '.filterWrapper');
		filterEl.getUpdater().update({
			url: this.loadFilterURL,
			method: 'POST',
			callback: LPCB,
			params: { id: id },
            text: 'loading...',
            discardUrl: true,
            nocache: true,
            timeout: 30
		});
	},
	
	/**
	 * initializes the field-monitoring
	 * (calls super-class-method)
	 */
	initFieldMonitoring: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initFieldMonitoring');
		}
		
		try {
					
			// inititialize field-monitoring for abstract-basic-content-editor-part
			Pulse.FilterContentEditor.superclass.initFieldMonitoring.call(this);

			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initFieldMonitoring');
			}
		}
	},
	
	
	
	/**
	 * initializes this component.
	 */
	initComponent: function(boolInitTab) {
		
			
		// call super
		Pulse.FilterContentEditor.superclass.initComponent.call(this);
			
//		// DBG >>
//		if (this.DBG) {
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.FilterContentEditor');
//		}
	
		try {
		
			// call inits
			this.initFieldMonitoring();
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}
			
		
		} catch(e) {
			FATAL(e, this, 'initComponent.FilterContentEditor');
		}
				
	}
	
	
	
}; 
Pulse.FilterContentEditor = Ext.extend(Pulse.ContentEditor, FilterContentEditor); // END :: Pulse.FilterContentEditor


/**
 * 
 */
DBG.URLContentEditor = DBG.apply(DBG.ContentEditor,{
		
//	initComponent:  { URLContentEditor: false },
	initFieldMonitoring: { URLContentEditor: true },
	addSubEditor: { URLContentEditor: false },
	hasChanges: { URLContentEditor: false },
	
	initURLMonitor: true,
	initTab: false,
	
	MSG: false // checked also in PULSE_VIEWPORT_CONTROLLER

});

/**
 * 
 */
URLContentEditor = {
	
	type: 'URLContentEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.URLContentEditor*/,
	
	// defaults
	
	// copy-content-button
	getCreateCopyButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.COPYCONTENT,
		disabled: true,
		scope: this,
		handler: function() {

			this.selectCopyCallback = function(node) {
				Ext.Ajax.request({
					url: this.copyContentURL,
					scope: this,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// reloads ContentLocalizationMap
							panel = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentLocalizationMap.panel');
		            		panel.lastLoadConfig.callback = LPCB;
		            		panel.lastLoadConfig.timeout = 30;
		            		panel.load(panel.lastLoadConfig);
		            		// shows copy in contentregistrytree
		            		crPanel = Ext.getCmp('ContentRegistry.WEST');
		            		crPanel.expand();
		            		path = decodedResponse.expandPath;
		            		ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), path, function(node) {
		            			ContentRegistryEditor.editNode(node);
		            		});
	            		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'tbar.copy');
						}
						delete this.selectCopyCallback;
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this,'tbar.copy');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'tbar.copy');
				        }
				        delete this.selectCopyCallback;
					},
					params: { id: this.getContent().id, toid: node.attributes.id }
				});
				
			};

			windowCfg = {
    			getChildrenURL: this.browseContentRegistryURL + '?mode=folder&bundle=' + this.getContent().bundle,
    			emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FOLDER,
    			scope: this,
    			selectCallback: 'selectCopyCallback'
    		};
    		ContentRegistryEditor.getSelectWindow(windowCfg);
		},
		iconCls: 'copyIconCls'
	};
	},
	
	// save-content-button
	getSaveContentButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
		disabled: true,
		scope: this,
		handler: function() {
			
			if (false === this.hasChanges()) {
				this.reset();
				return;
			}
			
			saveValues = this.getChanges({id:this.getContent().id});
			
			if (typeof(saveValues) == 'undefined' || saveValues === null) {
				if (this.DBG) {
					THROW({
						e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
						args:[this.hasChanges(),saveValues]
					},this,'saveContentButton');
				}
				return;
			}
			
			this.tab.disable();
			
			Ext.Ajax.request({
				url: this.saveContentURL,
				method: 'POST',
				scope: this,
				success: function(response, options) {
					this.tab.enable();
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {								
						this.commit();
						(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
					} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
					}
				},
				failure: function(response, options) {
					this.tab.enable();
					if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
			        }
				},
				params: saveValues
			});
		},
		iconCls: 'saveIconCls'
	};
	},
	
	// find-content-in-content-registry-button
	getFindButtonConfig: function() {
		return {
		text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
		disabled: true,
		scope: this,
		handler: function() {					
			Ext.Ajax.request({
				url: this.contentExpandPathURL,
				method: 'POST',
				success: function(response, options) {
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {
						// show content in contentregistrytree
	            		crPanel = Ext.getCmp('ContentRegistry.WEST');
	            		if (typeof(crPanel) == 'undefined' || crPanel === null) {
	            			PULSE_TOOLBAR.openPanel({
	            				id: 'ContentRegistry.WEST',
	            				callback: function() {
		            				ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
		            			}
	            			});
	            			return;
	            		}
	            		crPanel.expand();
						ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
	        		} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.find');
					}
				},
				failure: function(response, options) {
					if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.find');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.find');
				        }
				},
				params: { id: this.getContent().id }
			});
		},
		iconCls: 'findIconCls'
	};
	},
	
	initTab: function() {
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
			
				buttons = [];
				
				// enables save-content-button if URL
				saveContentButtonConfig = this.getSaveContentButtonConfig();
				if (typeof(this.saveContentURL) == 'string' && this.saveContentURL !== '') {
					saveContentButtonConfig.disabled = false;
					saveContentButtonConfig.scope = this;
				}
				buttons.push(saveContentButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
			
				// enables copy-content-button if URL
				createCopyButtonConfig = this.getCreateCopyButtonConfig();
				if (typeof(this.copyContentURL) == 'string' && this.copyContentURL !== '') {
					createCopyButtonConfig.disabled = false;
					createCopyButtonConfig.scope = this;
				}
				buttons.push(createCopyButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// enables find-button if URL
				findButtonConfig = this.getFindButtonConfig();
				if (typeof(this.contentExpandPathURL) == 'string' && this.contentExpandPathURL !== '') {
					findButtonConfig.disabled = false;
					findButtonConfig.scope = this;
				}
				buttons.push(findButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());			
				
				// insert buttons
				this.tab.getTopToolbar().insertButton(0, buttons);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
	},
	
	/**
	 * @param {Object} el, the element
	 */
	initURLMonitor: function(el) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initURLMonitor');
		}
		
		try {
			
			// retrieve required fields
			this.urlEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.url');
			
			if (typeof(this.urlEl) == 'undefined' 
				&& this.urlEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initURLMonitor');
				}
				return;
			}
			
			// builds monitor
			urlMonitorCFG = {
				id: this.id + '.urlEditor',
				el: this.urlEl
			};
			
			this.urlMonitor = new Pulse.FieldMonitor(urlMonitorCFG);

			// initial validation
			this.urlMonitor.validate();
			
			this.addSubEditor(this.urlMonitor);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initURLMonitor');
			}
		}
	},
	
	/**
	 * initialises the field-monitoring
	 * (calls super-class-method)
	 */
	initFieldMonitoring: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initFieldMonitoring');
		}
		
		try {
					
			// inititialise field-monitoring for abstract-basic-content-editor-part
			Pulse.URLContentEditor.superclass.initFieldMonitoring.call(this);
			
			// inititialise field-monitoring for URL-field
			this.initURLMonitor();

			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initFieldMonitoring');
			}
		}
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function(boolInitTab) {
		
			
		// call super
		Pulse.URLContentEditor.superclass.initComponent.call(this,boolInitTab);
			
//		// DBG >>
//		if (this.DBG) {
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.CMSContentEditor');
//		}
	
		try {
		
			// call inits
			this.initFieldMonitoring();
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}			
		
		} catch(e) {
			FATAL(e, this, 'initComponent.URLContentEditor');
		}
				
	}
	
}; 
Pulse.URLContentEditor = Ext.extend(Pulse.ContentEditor, URLContentEditor); // END :: Pulse.URLContentEditor


/**
 * 
 */
Pulse.CountrySelector = function(config) {
	
	this.type = 'CountrySelector';
	
	this.id = (typeof(config.id) == 'undefined') ? Ext.id() : config.id;
	
	if (typeof(config.store) == 'undefined') {
		props = DBG.getPropertyArray(config);
		FATAL({args:arguments,props:props},this,'constructor');		
	 }
	
	// the store
	this.store = config.store;
	
	// add store-listener
	if (false !== config.listener) {
		this.store.on('beforeload',function(store, opts) {
	        opts.params.country = this.getCountry();
	    },this);
	}
	
	this.countryStore = new Ext.data.SimpleStore({
        fields: ['country'],
        sortInfo: {field: 'country', direction: "ASC"},
        data: (typeof(config.data) != 'undefined') ? config.data : VIEWPORT_PROPERTIES.getKnownCountriesForBox()
    });
	
	// build country-box
	this.box = new Ext.form.ComboBox({
	    store: this.countryStore,	    
	    displayField: 'country',
	    valueField: 'country',
	    mode: 'local',
	    triggerAction: 'all',
	    editable: false,
	    width: 120,
	    emptyText: VIEWPORT_PROPERTIES.TEXT_SELECTCOUNTRY_BOX
	});
	
	// append change-listener
	this.handler = config.handler;
	this.scope = config.scope;
	if (typeof(this.handler != 'undefined')) {
		this.box.on('select',function() {			
			if (typeof(this.handler) == 'function') {
					this.handler(this);
			} else if (typeof(this.handler) == 'string'
				&& typeof(this.scope) == 'object') {
				this.scope[this.handler](this);
			} else {
				FATAL(this,this,'handler','EXCEPTION');
			}
		},this);
	}
	// build items
	this.items = [this.box];
	
	// build load-button
	this.loadButton = new Ext.Toolbar.Button({
        tooltip: VIEWPORT_PROPERTIES.BUTTON_TEXT_LOAD,
        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_LOAD,
        iconCls: 'reloadIconCls',
        handler: function() { this.store.reload(); },
        scope: this

    });
    
    // add spacer
    this.items.push('&#160;');
    
    // add button to items
    this.items.push(this.loadButton);
};

Pulse.CountrySelector.prototype = {
	
	// returns the selected country
	getCountry: function() {
		return this.box.getValue();
	},
	
	// resets the country-selector
	reset: function() {
		this.box.reset();
	}
};


/**
 * 
 */
DBG.DurationEditor = DBG.apply(DBG.Editor, {
			initComponent : {
				DurationEditor : false
			},
			onRender : false
		});

/**
 * 
 */
DurationEditor = {

	type : 'DurationEditor',

	/**
	 * uncomment below for global DBG
	 */
	DBG : DBG.DurationEditor,

	/**
	 * HRS
	 */
	twentyFour : [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11],
			[12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22],
			[23]],

	/**
	 * MINS/SECS
	 */
	sixty : [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11],
			[12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22],
			[23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33],
			[34], [35], [36], [37], [38], [39], [40], [41], [42], [43], [44],
			[45], [46], [47], [48], [49], [50], [51], [52], [53], [54], [55],
			[56], [57], [58], [59]],

	/**
	 * 'UTC'
	 */
	defaultTimeZone : 'UTC',

	/**
	 * Is being called by Pulse.SubEditorPanel to initialise the panel with
	 * buttons if the DurationEditor is being added to a Pulse.SubEditorPanel
	 * via Pulse.SubEditorPanel.addSubEditor(editor).
	 * 
	 * @return {Object} an Array of Ext.Toolbar.Button
	 */
	getButtons : function() {

		removeDurationButtonCFG = {
			scope : this,
			disabled : true,
			text : VIEWPORT_PROPERTIES.BUTTON_TEXT_REMOVE,
			iconCls : 'deleteIconCls',
			handler : this.removeDuration
		};

		if (typeof(this.removeDurationURL) == 'string'
				&& this.removeDurationURL !== '') {
			removeDurationButtonCFG.disabled = false;
		}

		return [new Ext.Toolbar.Button(removeDurationButtonCFG),
				new Ext.Toolbar.Separator()];

	},

	/**
	 * 
	 */
	removeDuration : function() {
		// display delete confirm-dialogue
		Ext.Msg.confirm(VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':',
				VIEWPORT_PROPERTIES.MSG_REALLYDELETE, function(response) {
					// do nothing if answer is not yes
					if ('yes' === response) {

						// disable panel
						this.masterEditor.disable();

						requestCFG = {
							url : this.removeDurationURL,
							scope : this,
							method : 'POST',
							success : function(response, options) {
								this.masterEditor.enable();
								decodedResponse = Ext
										.decode(response.responseText);
								if (true === decodedResponse.status) {

									this.masterEditor.loadPanel();
									(function() {
										this.fireEvent('MSG', 'savesuccess',
												this);
									}).defer(500, this);
								} else {
									PulseError.Throw({
												e : 'SERVER.ERROR',
												o : decodedResponse.error
											}, this, 'deleteSectionTag');
								}
							},
							failure : function(response, options) {
								this.masterEditor.enable();
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({
												e : 'REQUEST.FAILED'
											}, this, 'deleteSectionTag');
								} else {
									PulseError.Throw({
												e : 'REQUEST.ERROR',
												o : {
													e : response.responseText
												}
											}, this, 'deleteSectionTag');
								}
							},
							params : {
								id : this.entity.id
							}
						};
						// server-call
						Ext.Ajax.request(requestCFG);

					}
				}, this);
	},

	/**
	 * Returns whether the DurationEditor has changes.
	 * 
	 * @return {Boolean} true, if the editor has changes, false otherwise
	 */
	hasChanges : function() {
		if (true === this.aSelectionHasBeenMade
				&& false === this.initialDurationSet) {
			return true;
		}
		return (this.startHasChanges() || this.endHasChanges());
	},

	/**
	 * 
	 */
	startHasChanges : function() {
		return (this.startDateEditor.hasChanges(this.duration.startDateDate)
				|| this.startTimeZoneEditor
						.hasChanges(this.duration.startTimeZone)
				|| this.startTimeHRSEditor
						.hasChanges(this.duration.startTime.HRS)
				|| this.startTimeMINSEditor
						.hasChanges(this.duration.startTime.MINS) || this.startTimeSECSEditor
				.hasChanges(this.duration.startTime.SECS));
	},

	/**
	 * 
	 */
	endHasChanges : function() {
		return (this.endDateEditor.hasChanges(this.duration.endDateDate)
				|| this.endTimeZoneEditor.hasChanges(this.duration.endTimeZone)
				|| this.endTimeHRSEditor.hasChanges(this.duration.endTime.HRS)
				|| this.endTimeMINSEditor
						.hasChanges(this.duration.endTime.MINS) || this.endTimeSECSEditor
				.hasChanges(this.duration.endTime.SECS));
	},

	/**
	 * Returns an Object with the changes of the DurationEditor.
	 * 
	 * NOTE: Does not check if any changes with the same parameter-name are
	 * already applied to the changes-object.
	 * 
	 * @param {Object}
	 *            v, the object to apply the chenges to
	 * 
	 * @return {Object} the changes, either applied to given v, or a newly
	 *         created object
	 */
	getChanges : function(v) {

		if (false === this.hasChanges()) {
			return v;
		}

		if (typeof(v) == 'undefined') {
			v = {};
		}

		if (true === this.startHasChanges() || true === this.endHasChanges()
				|| true === this.aSelectionHasBeenMade) {
			startDt = this.startDateEditor.getValue();
			v.start_YYYY = 1900 + startDt.getYear();
			v.start_MM = startDt.getMonth();
			v.start_DD = startDt.getDate();
			v.start_tz = this.startTimeZoneEditor.getValue();
			v.start_hh = this.startTimeHRSEditor.getValue();
			v.start_mm = this.startTimeMINSEditor.getValue();
			v.start_ss = this.startTimeSECSEditor.getValue();

			endDt = this.endDateEditor.getValue();
			v.end_YYYY = 1900 + endDt.getYear();
			v.end_MM = endDt.getMonth();
			v.end_DD = endDt.getDate();
			v.end_tz = this.endTimeZoneEditor.getValue();
			v.end_hh = this.endTimeHRSEditor.getValue();
			v.end_mm = this.endTimeMINSEditor.getValue();
			v.end_ss = this.endTimeSECSEditor.getValue();
		}

		return v;

	},

	/**
	 * Commits the changes of the DurationEditor.
	 */
	commit : function() {

		if (false === this.fireEvent('MSG', 'beforecommit', this)) {
			// TODO
			return false;
		}

		if (true === this.startHasChanges() || true === this.endHasChanges()
				|| true === this.aSelectionHasBeenMade) {

			this.aSelectionHasBeenMade = false;

			this.duration.startDateDate = this.startDateEditor.getValue();
			this.duration.startDate.y = this.duration.startDateDate.getYear();
			this.duration.startDate.m = this.duration.startDateDate.getMonth();
			this.duration.startDate.d = this.duration.startDateDate.getDate();
			this.duration.startTimeZone = this.startTimeZoneEditor.getValue();
			this.duration.startTime.HRS = this.startTimeHRSEditor.getValue();
			this.duration.startTime.MINS = this.startTimeMINSEditor.getValue();
			this.duration.startTime.SECS = this.startTimeSECSEditor.getValue();

			this.duration.endDateDate = this.endDateEditor.getValue();
			this.duration.endDate.y = this.duration.endDateDate.getYear();
			this.duration.endDate.m = this.duration.endDateDate.getMonth();
			this.duration.endDate.d = this.duration.endDateDate.getDate();
			this.duration.endTimeZone = this.endTimeZoneEditor.getValue();
			this.duration.endTime.HRS = this.endTimeHRSEditor.getValue();
			this.duration.endTime.MINS = this.endTimeMINSEditor.getValue();
			this.duration.endTime.SECS = this.endTimeSECSEditor.getValue();

			this.masterEditor.loadPanel();
		}

		this.fireEvent('MSG', 'commit', this);

	},

	/**
	 * Resets the changes of the DurationEditor.
	 */
	reset : function() {

		if (false === this.fireEvent('MSG', 'beforereset', this)) {
			// TODO
			return false;
		}

		this.aSelectionHasBeenMade = false;

		if (this.startDateEditor.hasChanges(this.duration.startDateDate)) {
			this.startDateEditor.setValue(this.duration.startDateDate);
		}
		if (this.endDateEditor.hasChanges(this.duration.endDateDate)) {
			this.endDateEditor.setValue(this.duration.endDateDate);
		}
		if (this.startTimeZoneEditor.hasChanges(this.duration.startTimeZone)) {
			this.startTimeZoneEditor.setValue(this.duration.startTimeZone);
		}
		if (this.endTimeZoneEditor.hasChanges(this.duration.endTimeZone)) {
			this.endTimeZoneEditor.setValue(this.duration.endTimeZone);
		}
		if (this.startTimeHRSEditor.hasChanges(this.duration.startTime.HRS)) {
			this.startTimeHRSEditor.setValue(this.duration.startTime.HRS);
		}
		if (this.endTimeHRSEditor.hasChanges(this.duration.endTime.HRS)) {
			this.endTimeHRSEditor.setValue(this.duration.endTime.HRS);
		}
		if (this.startTimeMINSEditor.hasChanges(this.duration.startTime.MINS)) {
			this.startTimeMINSEditor.setValue(this.duration.startTime.MINS);
		}
		if (this.endTimeMINSEditor.hasChanges(this.duration.endTime.MINS)) {
			this.endTimeMINSEditor.setValue(this.duration.endTime.MINS);
		}
		if (this.startTimeSECSEditor.hasChanges(this.duration.startTime.SECS)) {
			this.startTimeSECSEditor.setValue(this.duration.startTime.SECS);
		}
		if (this.endTimeSECSEditor.hasChanges(this.duration.endTime.SECS)) {
			this.endTimeSECSEditor.setValue(this.duration.endTime.SECS);
		}

		this.fireEvent('MSG', 'reset', this);

	},

	/**
	 * Is being called during creation if DurationEditor.initialConfig.renderTo
	 * is being specified.
	 */
	onRender : function() {

		// DBG >>
		if (this.DBG) {
			THROW({
						props : ['renderTo'],
						args : arguments
					}, this, 'onRender');
		}

		try {

			// TODO

		} catch (e) {
			FATAL(e, this, 'onRender');
		}
	},

	/**
	 * @param {Object}
	 *            startDate -> Date
	 * @param {Object}
	 *            endDate -> Date
	 */
	buildDatePickers : function(startDate, endDate) {

		// renderTo start-part
		renderTo = this.entity.clazz + '.' + this.entity.id
				+ '.durationEditor.';

		// start date
		startDateEditorCFG = this.getDatePickerCFG(renderTo + 'startDate');
		startDateEditorCFG.durationType = 'startDate';
		if (typeof(startDate) != 'undefined' && startDate !== null) {
			startDateEditorCFG.value = startDate;
		}
		this.startDateEditor = new Ext.DatePicker(startDateEditorCFG);
		if (typeof(startDate) != 'undefined' && startDate !== null) {
			this.startDateEditor.setValue(startDate);
		}
		this.initSelectListener('startDateEditor');

		// end date
		endDateEditorCFG = this.getDatePickerCFG(renderTo + 'endDate');
		endDateEditorCFG.durationType = 'endDate';
		if (typeof(endDate) != 'undefined' && endDate !== null) {
			endDateEditorCFG.value = endDate;
		}
		this.endDateEditor = new Ext.DatePicker(endDateEditorCFG);
		if (typeof(endDate) != 'undefined' && endDate !== null) {
			this.endDateEditor.setValue(endDate);
		}
		this.initSelectListener('endDateEditor');
	},

	/**
	 * 
	 */
	getDatePickerCFG : function(renderTo) {
		return {
			renderTo : renderTo,
			hasChanges : function(value) {
				setyear = this.getValue();
				return ((value.getYear() != setyear.getYear())
						|| (value.getMonth() != setyear.getMonth()) || (value
						.getDate() != setyear.getDate()));
			}
		};
	},

	/**
	 * @param {String}
	 *            startTimeZone
	 * @param {String}
	 *            endTimeZone
	 */
	buildTimeZoneSelectors : function(startTimeZone, endTimeZone) {

		// renderTo start-part
		renderTo = this.entity.clazz + '.' + this.entity.id
				+ '.durationEditor.';

		//
		// start time zone
		//
		startTimeZoneEditorCFG = this.getTimeZoneEditorCFG(renderTo
				+ 'startTimeZone');
		startTimeZoneEditorCFG.durationType = 'startTimeZone';
		if (typeof(startTimeZone) == 'string' && startTimeZone != '') {
			startTimeZoneEditorCFG.value = startTimeZone;
		}
		this.startTimeZoneEditor = new Ext.form.ComboBox(startTimeZoneEditorCFG);
		this.initSelectListener('startTimeZoneEditor');

		//
		// end time zone
		//
		endTimeZoneEditorCFG = this.getTimeZoneEditorCFG(renderTo
				+ 'endTimeZone');
		endTimeZoneEditorCFG.durationType = 'endTimeZone';
		if (typeof(endTimeZone) == 'string' && endTimeZone != '') {
			endTimeZoneEditorCFG.value = endTimeZone;
		}
		this.endTimeZoneEditor = new Ext.form.ComboBox(endTimeZoneEditorCFG);
		this.initSelectListener('endTimeZoneEditor');

	},

	/**
	 * 
	 */
	getTimeZoneEditorCFG : function(renderTo) {
		return {
			store : new Ext.data.SimpleStore({
						fields : ['tz'],
						sortInfo : {
							field : 'tz',
							direction : "ASC"
						},
						data : this.timeZones
					}),
			displayField : 'tz',
			valueField : 'tz',
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			renderTo : renderTo,
			width : 140,
			listWidth : 220,
			hasChanges : function(value) {
				return (value != this.getValue());
			}
		};
	},

	/**
	 * timeObject = { HRS: {Number}, MINS: {Number}, SECS: {Number} };
	 * 
	 * @param {Object}
	 *            startTime -> timeObject
	 * @param {Object}
	 *            endTime -> timeObject
	 */
	buildTimeSelectors : function(startTime, endTime) {

		// renderTo start-part
		renderTo = this.entity.clazz + '.' + this.entity.id
				+ '.durationEditor.';

		//
		// start time HRS
		//
		startTimeHRSEditorCFG = this.get24EditorCFG(renderTo + 'startHRS');
		startTimeHRSEditorCFG.durationType = 'startHRS';
		if (typeof(startTime) == 'object' && startTime != null) {
			startTimeHRSEditorCFG.value = startTime.HRS;
		}
		this.startTimeHRSEditor = new Ext.form.ComboBox(startTimeHRSEditorCFG);
		this.initSelectListener('startTimeHRSEditor');

		//
		// start time MINS
		//
		startTimeMINSEditorCFG = this.get60EditorCFG(renderTo + 'startMINS');
		startTimeMINSEditorCFG.durationType = 'startMINS';
		if (typeof(startTime) == 'object' && startTime != null) {
			startTimeMINSEditorCFG.value = startTime.MINS;
		}
		this.startTimeMINSEditor = new Ext.form.ComboBox(startTimeMINSEditorCFG);
		this.initSelectListener('startTimeMINSEditor');

		//
		// start time SECS
		//
		startTimeSECSEditorCFG = this.get60EditorCFG(renderTo + 'startSECS');
		startTimeSECSEditorCFG.durationType = 'startSECS';
		if (typeof(startTime) == 'object' && startTime != null) {
			startTimeSECSEditorCFG.value = startTime.SECS;
		}
		this.startTimeSECSEditor = new Ext.form.ComboBox(startTimeSECSEditorCFG);
		this.initSelectListener('startTimeSECSEditor');

		//
		// end time HRS
		//
		endTimeHRSEditorCFG = this.get24EditorCFG(renderTo + 'endHRS');
		endTimeHRSEditorCFG.durationType = 'endHRS';
		if (typeof(endTime) == 'object' && endTime != null) {
			endTimeHRSEditorCFG.value = endTime.HRS;
		}
		this.endTimeHRSEditor = new Ext.form.ComboBox(endTimeHRSEditorCFG);
		this.initSelectListener('endTimeHRSEditor');

		//
		// end time MINS
		//
		endTimeMINSEditorCFG = this.get60EditorCFG(renderTo + 'endMINS');
		endTimeMINSEditorCFG.durationType = 'endMINS';
		if (typeof(endTime) == 'object' && endTime != null) {
			endTimeMINSEditorCFG.value = endTime.MINS;
		}
		this.endTimeMINSEditor = new Ext.form.ComboBox(endTimeMINSEditorCFG);
		this.initSelectListener('endTimeMINSEditor');

		//
		// end time SECS
		//
		endTimeSECSEditorCFG = this.get60EditorCFG(renderTo + 'endSECS');
		endTimeSECSEditorCFG.durationType = 'endSECS';
		if (typeof(endTime) == 'object' && endTime != null) {
			endTimeSECSEditorCFG.value = endTime.SECS;
		}
		this.endTimeSECSEditor = new Ext.form.ComboBox(endTimeSECSEditorCFG);
		this.initSelectListener('endTimeSECSEditor');

	},

	/**
	 * 
	 */
	get24EditorCFG : function(renderTo) {
		return {
			store : new Ext.data.SimpleStore({
						fields : ['t'],
						sortInfo : {
							field : 't',
							direction : "ASC"
						},
						data : this.twentyFour
					}),
			displayField : 't',
			valueField : 't',
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			renderTo : renderTo,
			width : 50,
			hasChanges : function(value) {
				return (value != this.getValue());
			}
		};
	},

	get60EditorCFG : function(renderTo) {
		return {
			store : new Ext.data.SimpleStore({
						fields : ['t'],
						sortInfo : {
							field : 't',
							direction : "ASC"
						},
						data : this.sixty
					}),
			displayField : 't',
			valueField : 't',
			mode : 'local',
			triggerAction : 'all',
			editable : false,
			renderTo : renderTo,
			width : 50,
			hasChanges : function(value) {
				return (value != this.getValue());
			}
		};
	},

	/**
	 * 
	 */
	initSelectListener : function(editorName) {
		this[editorName].on('select', function() {
					this.aSelectionHasBeenMade = true;
					if (true === this.hasChanges()) {
						this.fireEvent('MSG', 'change', this);
					} else {
						this.fireEvent('MSG', 'reset', this);
					}
				}, this);
	},

	/**
	 * Is being called during creation and initialises the editor.
	 */
	initComponent : function() {

		// call super
		Pulse.DurationEditor.superclass.initComponent.call(this);

		// DBG >>
		if (this.DBG) {
			props = ['id', 'type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({
						args : arguments,
						props : props
					}, this, 'initComponent.DurationEditor');
		}

		try {

			this.initialDurationSet = false;
			this.aSelectionHasBeenMade = false;

			if (typeof(this.duration) != 'object' || this.duration === null) {

				dt = new Date();

				this.duration = {
					startDateDate : dt,
					startDate : {
						y : dt.getYear(),
						m : dt.getMonth(),
						d : dt.getDate()
					},
					startTimeZone : this.defaultTimeZone,
					startTime : {
						HRS : dt.getHours(),
						MINS : dt.getMinutes(),
						SECS : dt.getSeconds()
					},
					endDateDate : dt,
					endDate : {
						y : dt.getYear(),
						m : dt.getMonth(),
						d : dt.getDate()
					},
					endTimeZone : this.defaultTimeZone,
					endTime : {
						HRS : dt.getHours(),
						MINS : dt.getMinutes(),
						SECS : dt.getSeconds()
					}
				};

				this.buildDatePickers(this.duration.startDateDate,
						this.duration.endDateDate);
				this.buildTimeZoneSelectors(this.duration.startTimeZone,
						this.duration.endTimeZone);
				this.buildTimeSelectors(this.duration.startTime,
						this.duration.endTime);

			} else {

				this.initialDurationSet = true;

				dtStart = new Date();
				dtStart.setYear(this.duration.startDate.y);
				dtStart.setMonth(this.duration.startDate.m);
				dtStart.setDate(this.duration.startDate.d);
				this.duration.startDateDate = dtStart;

				dtEnd = new Date();
				dtEnd.setYear(this.duration.endDate.y);
				dtEnd.setMonth(this.duration.endDate.m);
				dtEnd.setDate(this.duration.endDate.d);
				this.duration.endDateDate = dtEnd;

				this.buildDatePickers(dtStart, dtEnd);
				this.buildTimeZoneSelectors(this.duration.startTimeZone,
						this.duration.endTimeZone);
				this.buildTimeSelectors(this.duration.startTime,
						this.duration.endTime);

			}

		} catch (e) {
			FATAL(e, this, 'initComponent.DurationEditor');
		}
	}

};
Pulse.DurationEditor = Ext.extend(Pulse.Editor, DurationEditor); // END ::
// Pulse.DurationEditor

// new
/**
 * @param error
 * @param object
 * @param functionName
 */
Pulse.Error = function(error, object, functionName) {
	
	// type
	this.type = 'Error';
	
	// error-id
	this.id = Ext.id();
	
	this.errorprops = ['type','object','fn','id','e','o','p','args','props','propsObj','handle','handler'];
	
//	(typeof(error) != 'undefined' && typeof(error.e) == 'string') ? this.e = error.e : false;
	this.error = error;
	this.object = object;	
	this.fn = functionName;
	
	//
	if (typeof(this.error) != 'undefined') {
		if (typeof(this.error.object) == 'undefined') {
			this.error.object = this.object;
		}
		if (typeof(this.error.fn) == 'undefined') {
			this.error.fn = this.fn;
		}
	}
	
	this.get = function(prop) {
		
		if (true === this.isErrorProp(prop) && typeof(this.error) != 'undefined') {
//			if (this.error.type == this.type && prop == 'e') {
//				return this.error;
//			} else {
				return this.error[prop];
//			}
		} 
//		else {
//			return this[prop];			
//		}		
		
	};
	
	this.isErrorProp = function(string) {
		for (_iii = 0; _iii < this.errorprops.length; _iii++) {
			if (this.errorprops[_iii] == string) {
				return true;
			}
		}		
		return false;
	};
	
//	
//	
//	this.o = error;
//	if (typeof(error) == 'undefined') {
//		// error-id
//		this.id = Ext.id();
//	} else if (typeof(error.e) == 'undefined' 
//		&& typeof(object) != 'undefined' && typeof(object.type) == 'string') {
//		// receive Pulse.{Object}
//		this.id = Ext.id();
//		this.e = object.type;
//	} else {
//		// process with error	
//		// error		
//		if (typeof(error) == 'object') {
//			// error-id
//			this.id = (typeof(error.id) == 'undefined') ? Ext.id() : error.id;
//			
//			this.e = (typeof(error.getRootCause) == 'function') ? error : error.e;
//			this.handler = error.handler;
//			
//		} else {
//			// error-id
//			this.id = Ext.id();
//			this.e = error;
//		}
//			
//	}
//	
//	// object-type/object that builds new error
//	this.object = (typeof(object) == 'undefined') ? this.type : object;
//	
//	// name of the function where new error is build
//	this.functionName = functionName;
	
	/*----------- functions --------------*/
	
//	/**
//	 * 
//	 */
//	this.getRootCause = function() { return Pulse.getRootCause(this) };
//	
//	/**
//	 * 
//	 */
//	this.getHandle = function(bHandle) { return Pulse.getErrorHandle(this, bHandle); };
//	
//	/**
//	 * 
//	 */
//	this.handle = function() { return Pulse.handleError(this) };
//	
//	/**
//	 *
//	 */
//	this.getDbg = function(dbg) { return Pulse.dbgError(this, dbg); };
	
}; // END :: Pulse.Error


// new
/**
 * 
 */
Pulse.Error.Handler = {
	
	// ----------------------------------------------------
	// test stuff
	testoutput: { on: true },
	'deepTestOne' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestOne', pulseError);
	},	
	'deepTestTwo' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestTwo', pulseError);
	},	
	'deepTestThree' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestThree', pulseError);
	},	
	'deepTestFour' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestFour', pulseError);
	},	
	'deepTestFive' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestFive', pulseError);
	},	
	'deepTestSix' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestSix', pulseError);
	},	
	'deepTestSeven' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestSeven', pulseError);
	},	
	'deepTestFailed' : function(pulseError) {
		Pulse.Error.Handler.test('deepTestFailed', pulseError);
	},	
	'stringTest' : function(pulseError) {
		Pulse.Error.Handler.test('stringTest', pulseError);
	},
	'undefined' : function(pulseError) {
		Pulse.Error.Handler.outputError('undefined', pulseError);
	},
	
	//	
	test: function(string, pulseError) {
		if (true === this.testoutput.on) {
			this.outputError(string, pulseError);
		}
	},
	
	//	
	outputError: function(string, pulseError) {
		
		out = ['' + string,
			'HANDLE fn: ' + string,
			''
		];
		
		out = out.concat(Pulse.dbgError(pulseError,true));
		
		PulseErrorWindow.Throw(out);
		
//		PulseErrorWindow.Throw([
//			'e',
//			'.id: ' + pulseError.id,
//			'.e: ' + pulseError.e, 
//			'.objectName: ' + pulseError.objectName, 
//			'.functionName: ' + pulseError.functionName,
//			'rc', 
//			'.id: ' + pulseError.getRootCause().id,
//			'.e: ' + pulseError.getRootCause().e,
//			'.objectName: ' + pulseError.getRootCause().objectName,
//			'.functionName: ' + pulseError.getRootCause().functionName
//		]);

	}
	
}; // END :: Pulse.Error.Handler


/**
 * 
 */
FCKEditorWindow = {
	
	//
	type: 'FCKEditorWindow',
	
	// DBG
	DBG: {
		initComponent: true
	},
	
	
	initComponent: function() {
	
		try {			
			
			this.addEvents({
				'MSG': true,
				'beforereset': true,
				'reset': true,
				'beforeload': true,
				'load': true
			});
			
			if (typeof(this.initialConfig.id) == 'undefined') {
				this.id = Ext.id(null, this.type + '.');
			}
			
			// build assorter-store			
			this.store = new Pulse.AssorterPanelStore();
			//setup change-listener for store
			this.store.on('MSG', function(msgString, store) {
				this.fireEvent('MSG', msgString, this);
			}, this);

						
		} catch(e) {
			THROW({e:'FATAL',o:e}, this, 'initComponent');
		}
	
	}
	
};
Pulse.FCKEditorWindow = Ext.extend(Ext.Component,FCKEditorWindow); // END :: Pulse.FCKEditorWindow


/**
 * 
 */
DBG.FieldMonitor = DBG.apply(DBG.Editor,{
	validate: { 
		call: false, 
		allowBlank: false, regex: false, handler: false,
		results: false, result: false
	},
	hasChanges: { FieldMonitor: false },
	getChanges: { FieldMonitor: false },
	getParameterName: false ,
	getValue: false,
	setBoxColor: false,
	keyup: false, 
	getElName: false,
	showFlag: false,
	removeFlag: false,
	getFlagEl: false
});
/**
 * FieldMonitor-template.
 */
FieldMonitor = {
	
	type: 'FieldMonitor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.FieldMonitor*/,
	
	// defaults
	flag: {
		msg: VIEWPORT_PROPERTIES.TEXT_ENTER_VALID_VALUE,
		iconCls: 'warningIconCls',
		style: 'font-weight:bold;padding-left:18px;' 
			+ 'height:18px;vertical-align:middle;',
		errorIconCls: 'errorIconCls',
		errorStyle: 'color:#FF0000;font-weight:bold;padding-left:18px;' 
			+ 'height:18px;vertical-align:middle;'
	},
	
//	/**
//	 * 
//	 */
//	onRender: function() {
//		// DBG
//		if (this.DBG) {
//			THROW({props:['renderTo'],args:arguments},this,'onRender');
//		}
//		
//		try {
//		
//			// TODO
//		
//		
//		} catch(e) {
//			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
// 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'onRender');
//		}
//	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				o:(this.initialValue != this.getValue()),
				props:['id','type','initialValue'],
				args:[this.getValue()]
			},this,'hasChanges.FieldMonitor');
		}
		
		return (this.initialValue != this.getValue());
		
	},
	
	/**
	 * 
	 */
	getParameterName: function() {
		// dertermine parameterName					
		// el-attribute name if set
		pName = this.getElName();							
		if (typeof(pName) != 'string' || pName === '') {
			// el-attribute id if name unset
			pName = this.getElId();
		}
		
		// check
		if (typeof(pName) != 'string' || pName === '') {
			throw(new Pulse.Error({
				e:'VALIDATION FAILED',
				args: arguments,
				o: 'CHANGES: ' + this.hasChanges() + ', VALIDATE: ' + this.validate(),
				props: ['el.dom.name','el.id']
			}, this, 'getParameterName'));
		}
		
		pref = '';
		if (typeof(this.valuePrefix) == 'string') {
			pref = this.valuePrefix;
		}
		
		// DBG >>
		if (this.DBG) {
			THROW({o:pref + pName},this,'getParameterName');
		}
		
		return pref + pName;
	},
	 
	 /**
	  * 
	  */
	getChanges: function(v) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['id','type']},this,'getChanges.FieldMonitor');
		}
		
		try {
		
			initialV = v;
			if (typeof(v) != 'object' || v === null) {
				v = {};
			}
			
			proceed = this.hasChanges();			
			if (true === proceed) {				
				
				proceed = this.validate();				
				if (true === proceed) {
					
					// set parameter-name & -value for v
					v[this.getParameterName()] = this.getValue();
					
				} else {
					
					// ERROR
					throw(new Pulse.Error({
						e: 'VALIDATION FAILED',
						args: arguments,
						o: 'CHANGES: ' + this.hasChanges() + ', VALIDATE: ' + this.validate(),
						props: ['el.dom.name','el.id']
					}, this, 'getChanges.FieldMonitor'));
					
				}
				return v;
			}
			
			return initialV;
		
		} catch(e) {
			
			if (typeof(e) == 'object' && e !== null && e.type == 'Error') {
				THROW(e,this,'getChanges.FieldMonitor');
			} else {
				THROW({
					e: 'VALIDATION FAILED',
					o: e,
					args: arguments,
					props: ['el.dom.name','el.id']
				}, this, 'getChanges.FieldMonitor');
			}
		}
	},
	
	/**
	 * 
	 */
	commit: function() {
		if (false === this.fireEvent('MSG','beforecommit',this)) {
			
			// TODO
			
			return false;
			
		}
		
		try {
		
			if (true === this.hasChanges()) {
				this.initialValue = this.getValue();
				// blue: default
				this.setBoxColor();
			}
			
			this.validate();
			
			this.fireEvent('MSG','commit',this);
		
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'commit');
			}
		}
	},
	
	/**
	 * 
	 */
	reset: function() {
		
			
		if (false === this.fireEvent('MSG','beforereset',this)) {
			
			// TODO
			
			return false;
			
		}
			
		try {
			
			if (true === this.hasChanges()) {
				
				this.setValue(this.initialValue, false);
				// blue: default
				this.setBoxColor();
			}
			
			this.fireEvent('MSG','reset',this);
		
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'reset');
			}
		}
	},
	
	/**
	 * 
	 */
	getEl: function() {
		if (typeof(this.el) == 'undefined' || this.el === null) {
			if (this.DBG) {
				THROW({e:'UNDEFINED',props:['el','el.id']},this,'getEl');
			}
		} else {
			return this.el;
		}
	},
	
	/**
	 * 
	 */
	getElId: function() {
		if (typeof(this.el) == 'undefined' || this.el === null) {
			if (this.DBG) {
				THROW({e:'UNDEFINED',props:['el','el.id']},this,'getElId');
			}
		} else {
			return this.el.id;
		}
	},
	
	/**
	 * 
	 */
	getElName: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['el','el.id','el.dom','el.dom.name']},this,'getElName');
		}
		
		if (typeof(this.el) == 'undefined' || this.el === null) {
			if (this.DBG) {
				THROW({e:'UNDEFINED',props:['el','el.dom','el.dom.name']},this,'getElName');
			}
			return;
		}
		
		// return el-attribute name
		return this.el.dom.name;
		
	},
	
	/**
	 * 
	 */
	setValue: function(v, boolValidate) {
		try {			
			
			set = true;
			
			if (this.fieldType == 'checkbox') {
				
				if (typeof(v) != 'boolean') {
					throw('INVALID CHECKBOX VALUE: ' + v);
				}
				this.getEl().dom.checked = v;
				
			} else {
			
				// validate value
				if (false !== boolValidate) {					
					set = this.validate(v);
				}
				
				this.getEl().dom.value = v;
				
				this.validate();
			}
			
		} catch (e) {
			if (this.DBG) {
				FATAL(e,this,'setValue');
			}
		}
	},
	
	/**
	 * 
	 */
	getValue: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['el','el.dom.value']},this,'getValue');
		}
		
		try {
		
			el = this.getEl();
			
			if (typeof(el) == 'undefined') {
				THROW({e:'UNDEFINED',props:['el','el.getValue']},this,'getValue');
			} else {
				
				if (this.fieldType == 'checkbox') {
					return this.getValueC(el);
				} else {
					return this.getValueT(el);
				}
				
			}
		
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'getValue');
			}
		}
		
	},
	
	/**
	 * text-field-subroutine for getValue()
	 */
	getValueT: function(el) {
		if (typeof(el.getValue) == 'function') {
			v = this.el.getValue();
		} else {
			THROW({e:'UNDEFINED',props:['el','el.getValue']},this,'getValue');
			return;
		}
		v = v.trim();
		return v;
	},
	
	/**
	 * checkbox-field-subroutine for getValue()
	 */
	getValueC: function(el) {
		return el.dom.checked;
	},
	
	
	/**
	 * 
	 */
	validate: function(value) {
				
		// DBG >>
		if (this.DBG) {
			THROW({o: 'CALL',
				props: ['allowBlank','regex','invalidText',
					'allowSave','handler','scope']
			},this,'validate.call');
		}

		if (this.fieldType == 'checkbox') {
			// set box-color + fire evt
			if (true === this.hasChanges()) {
				this.setBoxColor('y');
				this.fireEvent('MSG','change',this);
			} else {
				this.setBoxColor();
				this.fireEvent('MSG','reset',this);
			}
			return true;
		}

		// msg, style & iconCls	
		flagMsg = (typeof(this.invalidText) == 'string'
			&& this.invalidText !== '') ? this.invalidText : this.flag.msg;
		flagIconCls = this.flag.iconCls;
		flagStyle = this.flag.style;
		
		
		// if false will not affect box-styling or flag
		showFlag = true;
		
		// retrieve value
		if (typeof(value) !== 'undefined') {
			v = value;
			showFlag = false;
		} else {	
			v = this.getValue();
		}		
		
		success = true;
		try {
			
			// ALLOWBLANK-CHECK
			if (false === this.allowBlank) {

				success = (v !== '');

				// DBG >>
				if (this.DBG) {
					THROW({o: 'ALLOWBLANK-CHECK: ' + success,
						args:[v],props: ['allowBlank']
					},this,'validate.allowBlank');
				}
				
			}
			
			// DBG >>
			if (this.DBG) {
				THROW({o: 'ALLOWBLANK: ' + success,
					args: [v],props: ['allowBlank']
				},this,'validate.results');
			}
			
			// --> ALLOWBLANK : fail
			if (false === success) {
				throw('ALLOWBLANK: ' + success + ' FOR ' + typeof(v) + ': "' + v + '" ');
			}
						
				
			// REGEX-CHECK
			if (typeof(this.regex) == 'object' && typeof(this.regex.test) == 'function') {
				
				success = this.regex.test(v);
				
				// DBG >>
				if (this.DBG) {
					THROW({o: 'REGEX-CHECK: ' + success,
						args: [v],props: ['regex']
					},this,'validate.regex');
				}
				
			}
			
			// DBG >>
			if (this.DBG) {
				THROW({o: 'REGEX: ' + success,
					args: [v],props: ['regex']
				},this,'validate.results');
			}
			
			// --> REGEX : fail	
			if (false === success && true !== this.allowSave) {
				throw('REGEX: ' + success + ' FOR ' + typeof(v) + ': "' + v + '" ');
			}
			
		
			// HANDLER-CHECK
			if (typeof(this.handler) != 'undefined') {
											
				if (typeof(this.handler) == 'function') {								
					success = this.handler(v);
				} else if (typeof(this.handler) == 'string'
					&& typeof(this.scope) == 'object') {
					try {
						success = this.scope[this.handler](v);
					} catch(e) {
						throw(new Pulse.Error({
							e:'HANDLER UNDEFINED',
							props:['scope','handler']
						},this,'handler'));
					}								
				}
				
				// DBG >>
				if (this.DBG) {
					THROW({o: 'HANDLER-CHECK: ' + success,
						args:[v],props: ['scope','handler']
					},this,'validate.handler');
				}
				
				if (typeof(success) != 'boolean') {
					success = true;
				}
			}
			
			// DBG >>
			if (this.DBG) {
				THROW({o: 'HANDLER: ' + success,
					args: [v],props: ['scope','handler']
				},this,'validate.results');
			}
			
			// --> HANDLER : fail
			if (false === success && true !== this.allowSave) {
				throw('HANDLER: ' + success + ' FOR ' + typeof(v) + ': "' + v + '" ');
			}
				

			// display flag / fire evt
			if (true === showFlag) {
				if (false === success) {			
					// display flag
					this.showFlag(flagMsg, flagStyle, flagIconCls);
				} else {			
					// validation passed: remove flag-element
					this.removeFlag();			
				}
				
				// set box-color + fire evt
				if (true === this.hasChanges()) {
					this.setBoxColor('y');
					this.fireEvent('MSG','change',this);
				} else {
					this.setBoxColor();
					this.fireEvent('MSG','reset',this);
				}
			}
			
			// DBG >>
			if (this.DBG) {
				THROW({o:'SUCCESS: ' + success + ' FOR ' + typeof(v) + ': "' + v + '"',
					props:['allowSave','allowBlank','regex','scope','handler']
				},this,'validate.result');
			}
			
			return true;

		} catch(e) {
			
			try {
				
				processE = true;
					
				if (typeof(e) == 'string') {
					
					// error-styling
					flagIconCls = this.flag.errorIconCls;
					flagStyle = this.flag.errorStyle;
						
					processE = ((e.indexOf('ALLOWBLANK') + e.indexOf('REGEX') + e.indexOf('HANDLER')) !== -2);
					
					/*
					switch(e) {
						case (e.indexOf('ALLOWBLANK') == 1):
							processE = false;
							break;
						case (e.indexOf('REGEX' == 1)):
							processE = false;
							break;
						case (e.indexOf('HANDLER') == 1):
							processE = false;
							break;
					}
					*/
					
					// display flag / fire evt
					if (true === showFlag && false === processE) {
						this.showFlag(flagMsg, flagStyle, flagIconCls);
						this.setBoxColor('r');
						this.fireEvent('MSG','changeNotSaveable',this);
					}
					
				}
				
				if (true === processE) {
					FATAL(e,this,'validate','VALIDATIONFAILURE');
				}
			
			} catch(ee) {
				if (this.DBG) {
					FATAL(ee,this,'validate','VALIDATIONFAILURE');
				}
			}
			
			
				
			// DBG >>
			if (this.DBG) {
				THROW({o:'SUCCESS: ' + false + ' FOR ' + typeof(v) + ': "' + v + '"',
					props:['allowSave','allowBlank','regex','scope','handler']
				},this,'validate.result');
			}
			
			return false;

		}
		
		
	},
	
	/**
	 * 
	 */
	setFlagEl: function(el) {
		if (typeof(el) == 'undefined' || el === null) {
			if (this.DBG) {
				THROW({e:'ELEMENT UNDEFINED',args:arguments},this,'setFlagEl');
			}
			return;
		}
		this.flagMsgEl = el;
	},
	
	/**
	 * 
	 */
	getFlagEl: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				args: arguments,
				props: ['el','flagMsgEl']
			},this,'getFlagEl');
		}
		
		try {
			el = this.flagMsgEl;
			if (typeof(el) != 'undefined' && el !== null) {
				return el;
			}
			
			el = Ext.get(this.id + '.flagMsgEl');
			if (typeof(el) != 'undefined' && el !== null) {
				this.setFlagEl(el);
				return el;
			}
			
			el = this.el.prev();
			if (typeof(el) != 'undefined' && el !== null 
				&& (el.id.indexOf('.flagMsgEl') > -1)) {
				this.setFlagEl(el);
				return el;
			}
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'getFlagEl');
			}
		}
	},
	
	/**
	 * 
	 */
	// showFlag: function(flagMsg, flagStyle, flagIconCls) { 
	showFlag: function(fMsg, fSty, fIco) {
		
		
		
//		(function(fMsg, fSty, fIco) {
			 
		// DBG >>
		if (this.DBG) {
			THROW({args: arguments,props: ['flagMsgEl','showFlagMSG']},this,'showFlag');
		}
			
		if (false === this.showMsgFlag) {
			return;
		}
			
		try {
		
			el = this.getFlagEl();
			if (typeof(el) != 'undefined') {
				// update error-message-div
				el.update(fMsg);								
				// update icon-class
				el.dom.className = fIco;
				// update style
				el.set({ style: fSty });
			} else {
												
				// show flag
				fDiv = '<div ' + 
					'class="' + fIco + '" ' + 
					'style="' + fSty + '" ' + 
					'id="' + this.id + '.flagMsgEl">' + 
					fMsg + 
					'</div>';
															
				el = Ext.DomHelper.insertBefore(this.el,fDiv,true);
				this.setFlagEl(el);
			}
	
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'showFlag');
			}
		}
		
//		}).defer(100,this,[flagMsg, flagStyle, flagIconCls]);
	},
	
	/**
	 * 
	 */
	 removeFlag: function() {
	 	
	 	// DBG >>
		if (this.DBG) {
			THROW({args: arguments},this,'removeFlag');
		}
		
		el = this.getFlagEl();
		if (typeof(el) != 'undefined') {
			el.remove();
			delete this.flagMsgEl;
		}
		
	 },
	
	/**
	 * @param {String} color: 
	 * 		'r' or 'R'					=> red 
	 * 		'y' or 'Y' 					=> yellow
	 * 		'' or null or undefined 	=> blue, default
	 */
	setBoxColor: function(color) {
		
		// DBG >>
		THROW({o:'COLOR',args:arguments},this,'setBoxColor');
		
		if (typeof(color) != 'string') {
			// blue : default
			this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
			this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls);
			return;
		}
		
		_color = color.toUpperCase();
		switch(_color) {
			
			// red
			case 'R':
				this.el.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Red');
				this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls + 'Red');
				break;
			
			// yellow
			case 'Y':
				this.el.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
				this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls + 'Yellow');
				break;
			
			// blue
			default:
				this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls);
				break;
			
		}
		
		return;
		
		if (typeof(color) == 'string' && color.toUpperCase() == 'R') {
			// red
			this.el.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Red');
			this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls + 'Red');
		} else if (typeof(color) == 'string' && color.toUpperCase() == 'Y') {
			// yellow
			this.el.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
			this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls + 'Yellow');
		} else {
			// blue
			this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
			this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls);
		}
	},
	
	/**
	 * initializes this componenet with a given config.
	 */
	initComponent: function() {
		
		// call super
		Pulse.FieldMonitor.superclass.initComponent.call(this);
		
		try {
			
			evtString = 'keyup';
			if (this.fieldType == 'checkbox') {
				evtString = 'click';
			}
			
			this.el.on(evtString, function() {
				
				success = this.validate();
				
				THROW({props:['el','el.dom.value'],args:[success,this.getValue()]},this,'keyup');
				
				return;
				
				if (false === success) {
					// red
					this.setBoxColor('r');
					this.fireEvent('MSG','changeNotSaveable',this);
					return;
				}
				
				if (true === this.hasChanges()) {
					// yellow
					this.setBoxColor('y');
					this.fireEvent('MSG','change',this);
					return;
				}
				
				// blue
				this.setBoxColor();
				this.fireEvent('MSG','reset',this);
				return;
				
			},this);
		
			// store initial value
			this.initialValue = this.getValue();
		
		
			// initial validation
			if (true === this.validateOnInit && true !== this.initialValidation) {
				this.validate();
				this.initialValidation = true;
			}
			
			// TODO more ?			
		
		} catch(e) {	
 			FATAL(e, this, 'initComponent');
		}
				
	},
	
	/**
	 * 
	 */
	destroy: function() {
		
		this.removeFlag();
		this.el.remove();
		
		props = ['el','flagMsgEl'];
		for (i = 0; i < props.length; i++) {
			delete this[props[i]];
		}
		
		// call super.destroy()
		Pulse.FieldMonitor.superclass.destroy.call(this);
		
	}
	
};
Pulse.FieldMonitor = Ext.extend(Pulse.Editor,FieldMonitor);
/**
 * 
 */
var FileBrowser = {
	
	type:'FileBrowser',
	DBG: false,
	
	isReady: false,
	el: null,
	win: null,
	prevEl: null,
	prevWin: null,
	prev: true,
	west: null,
	tree: null,
	root: null,
	center: null,
	south: null,
	fileNameField: null,
	selectedNode: null,
	restriction: null,
	
	// modes
	
	restrictions: {
		img: ['JPG','JPEG','PNG','GIF','TIFF'],
		flash: ['SWF'],
		isRestricted: function(extension) {
			if (typeof(FileBrowser.restriction) == 'undefined' || FileBrowser.restriction === null) {
				return false;
			}
			if (typeof(FileBrowser.restrictions[FileBrowser.restriction]) != 'undefined') {
				res = FileBrowser.restrictions[FileBrowser.restriction];
				for (i = 0; i < res.length; i++) {
					if (res[i] == extension.toUpperCase()) {
						return false;
					}
				}				
			}
			return true;
		}
	},
	
	/**
	 * @param {Object} config 
	 */
	open: function(config) {
		
		// DBG >>
		if (this.DBG) {
			FATAL(config,this,'open');
			FATAL(config.params,this,'open');
		}
		
		this.restriction = config.restriction;
		this.treeSelectMode = config.treeSelectMode;
		
		try {		
		
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('22 :: PULSE.FileBrowser.js.init() :: ' + 
	        	'CHECK for element failed...');
	        }
	        
	        if (this.win === null) {
	        	
	        	// build tree
	        	
	        	this.loader = new Ext.tree.TreeLoader({ 
		            dataUrl: config.dataURL,
		            uiProviders: { 
		            	'FileTreeNodeUI': PULSE.FileTreeNodeUI
	            	}
		        });
		        
		        tbar = [];
		        privButton = {
		        	text: 'priv',
		        	scope: this,
		        	handler: function() {
		        		if (typeof(this.loader.baseParams) == 'object') {
		        			this.loader.baseParams.priv = true;
		        		} else {
		        			this.loader.baseParams = { priv: true };
		        		}
		        		this.root.setText('priv');
		        		this.root.reload(function(node) {
		        			node.getOwnerTree().fireEvent('click',node);
		        		});
		        	}, 
		        	iconCls: 'foldersIconCls'
		        };
		        tbar.push(privButton);
		        tbar.push('-');
		        
		        pubButton = {
		        	text: 'pub',
		        	scope: this,
		        	handler: function() {
		        		if (typeof(this.loader.baseParams) == 'object') {
		        			this.loader.baseParams.priv = false;
		        		} else {
		        			this.loader.baseParams = { priv: false };
		        		}
		        		this.root.setText('pub');
		        		this.root.reload(function(node) {
		        			node.getOwnerTree().fireEvent('click',node);
		        		});
		        	}, 
		        	iconCls: 'foldersIconCls'
		        };
		        tbar.push(pubButton);
		        tbar.push('-');
		        
		        uploadButton = {
                    text: VIEWPORT_PROPERTIES.BUTTON_TEXT_UPLOADFILE,
                    disabled: true,
                    scope: config,                          
                    handler: function(){
                        FileBrowser.uploadFile(this.uploadProgressURL);
                    },
                    iconCls: 'fileUploadIconCls'
                };
                if (true === config.upload && 
                	typeof(config.uploadProgressURL) == 'string' && config.uploadProgressURL != '') {
                	uploadButton.disabled = false;
                }
                tbar.push(uploadButton);
		        tbar.push('-');
	        	
	        	// build filebrowser-tree-panel
	        	this.tree = new Ext.tree.TreePanel({
	        		id: 'FileBrowserWindow.tree',	        		
	        		height: 200, 
			        animate: true,
			        creatingNewNode: false, 
			        enableDD: false,
			        autoScroll: true, 
			        containerScroll: true, 
			        rootVisible: true,
			        border: false,
                    loader: this.loader,
			        tbar: tbar
	        	});
	        	
	        	// build root
	        	this.root = new Ext.tree.AsyncTreeNode({
			        text: 'pub', 
			        draggable: false, 
			        id: 'source',
			        iconCls: 'foldersIconCls'
			    });
			    
			    // set root-node
			    this.tree.setRootNode(this.root);
			    
			    // setup tree-listeners
			    this.tree.on('click', function(node, e) {
			    	
	            	this.center.disable();
	            	// load preview-panel
	            	params = {
						previewNode: node.id, 
						priv: (typeof(this.loader.baseParams.priv) == 'boolean') ? this.loader.baseParams.priv : false 
					};
	            	
	            	loadConfig = {
						url: config.previewURL,
						method: 'POST',
						scripts: true,
						callback: this.loadCallback,
						params: params,
                        text: 'loading...',
                        discardUrl: true,
                        nocache: true,
                        timeout: 30
					};
					
			        this.center.load(loadConfig);
			        
			        if (this.prevWin !== null && false === this.prevWin.hidden) {
						this.prevWin.hide();
					}
			        
			        this.selectedNode = node;
			        
			        if (typeof(this.treeSelectMode) == 'string' && this.treeSelectMode == 'selectFolder') {
			        	if (node.attributes.type != 'dir') {
			        		Ext.getCmp('FileBrowserWindow.create.button').disable();
		        			this.fileNameField.setValue('');
			        	} else {
			        		Ext.getCmp('FileBrowserWindow.create.button').enable();
		        			this.fileNameField.setValue(node.text);
			        	}
			        	this.fileNameField.validate();
				        (function(){
				        	this.prev = true;
				        }).defer(100);
			        	return;
			        }
			        
			        if (node.attributes.type != 'dir') {
			        	// check restrictions
//					        	if (FileBrowser.restriction !== null) {
			        		if (this.restrictions.isRestricted(node.attributes.extension)) {
			        			Ext.getCmp('FileBrowserWindow.create.button').disable();
			        			this.fileNameField.setValue('');
			        		} else {
			        			Ext.getCmp('FileBrowserWindow.create.button').enable();
			        			this.fileNameField.setValue(node.text);
			        		}
//					        	} else {
//					        		FileBrowser.fileNameField.setValue(node.text);
//					        	}					        
			        } else {
			        	Ext.getCmp('FileBrowserWindow.create.button').disable();
			        	this.fileNameField.setValue('');
			        }
			        this.fileNameField.validate();
			        (function(){
			        	this.prev = true;
			        }).defer(100);
	            },this);
			    
	        	// build west-panel (houses tree)
	        	this.west = new Ext.Panel({
	        		region: 'west',
	        		id: 'FileBrowserWindow.west',
	        		split: true, 
                    width: 270, 
                    minSize: 250, 
                    maxSize: 600, 
                    collapsible: true, 
                    margins: '5 0 5 5',
//                    autoScroll: true,
	        		items: [ this.tree ]
	        	});
	        	
	        	this.west.on({
                    'resize' : {
                    	scope: this, 
                        fn: function() { 
                            this.tree.setHeight(this.west.getInnerHeight());
                        }                        
                    }
                });
	        	
	        	// build center-panel (file-preview)
	        	this.center = new Ext.Panel({
	        		region: 'center',
	        		id: 'FileBrowserWindow.center',
	        		html: 'preview',
	        		autoScroll: true,
	        		margins: '5 5 5 0'
	        	});
	        	
	        	// build south-panel (selected file-name-preview)
	        	this.south = new Ext.Panel({
	        		region: 'south',
	        		id: 'FileBrowserWindow.south',
//	        		html: 'fields',
	        		margins: '0 5 5 5',
//	        		bodyStyle: 'padding: 5px',
	           		autoHeight: true, 
	       			html: '<table cellpadding="0" cellspacing="0" border="0" style="width:100%;margin:5px;"><tr>' + 
	       				'<td>' + VIEWPORT_PROPERTIES.FILE + ':</td>' + 
	       				'<td style="width:90%;"><div id="FileBrowserWindow.fileName"> </div></td>' + 
	       				'</tr></table>'
	        	});
	        	
				// build window
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'FileBrowserWindow.el'
			    });
		
				windowConfig = {
					id: 'FileBrowserWindow',
					maximizable: false,
			        title: VIEWPORT_PROPERTIES.FILEBROWSER_TITLE + ':&#160;',
			        closable: true, 
			        plain: true,
			        modal: true,
//			        autoScroll: true, 
//					html: '',
			        renderTo: this.el,
			        height: 300, 
			        width: 400,
			        bodyStyle: 'background-color: #FFFFFF;',
			        layout: 'border',
			        items: [this.west, this.center, this.south],
			        buttonAlign: 'center',
			        buttons: [
			        	{ 
			        		id: 'FileBrowserWindow.create.button',
			        		disabled: true,
				            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_APPLY,
				            handler: function() {
				            	if (false === FileBrowser.isReady) {
				            		return;
				            	}
				            	if (FileBrowser.selectedNode === null) {
				            		return;
				            	}
//				            	if (FileBrowser.restriction !== null) {
					        		if (FileBrowser.restrictions.isRestricted(FileBrowser.selectedNode.attributes.extension)) {
					        			return;
					        		}
//				        		}
				            	if (FileBrowser.fileNameField.getValue().trim() 
				            		!= FileBrowser.selectedNode.text.trim()) {
				            		return;
				            	}
				            	if (typeof(config.applyCallback) == 'function') {
				            		config.applyCallback(FileBrowser.selectedNode);
				            	} else if (typeof(config.applyCallback) == 'string' && typeof(config.scope) == 'object') {
				            		try {
				            			config.scope[config.applyCallback](FileBrowser.selectedNode);
				            		} catch(e) {
				            			FATAL(e,this,'FileBrowserApplyCallback');
				            		}
				            	}
				            	
				                FileBrowser.close();
				            } 
				        },{ 
				            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
				            handler: function() {				            	
				                FileBrowser.close();
				            } 
				        }	        
			        ]//,
//			        tbar: [
//				        new Ext.Action({
//							text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
//							handler: function() {
//								ViewEditorThemes.win.close();
//							},
//							iconCls: 'cancelIconCls'
//						})
//					]	
				};
				
				this.win = new Ext.Window(windowConfig);
			
	        }
	        
	        // setup win-listeners
	        
	        // ! hide win on close
	    	this.win.on({
	    		'beforeclose': {
	    			fn: function(win) {
	    				// avoid win-close during init
	    				if (false === FileBrowser.isReady) {
		            		return false;
		            	}
//	    				win.hide();
//	    				if (FileBrowser.prevWin !== null) {
//	    					FileBrowser.prevWin.hide();
//	    				}
//	    				return false;
	    			}
	    		},
	    		'close': {
	    			fn: function(win) {
	    				if (FileBrowser.prevWin !== null) {
	    					FileBrowser.prevWin.close();
	    				}
	    				// cleanup
	    				delete FileBrowser.el;
						delete FileBrowser.win;
						delete FileBrowser.prevEl;
						delete FileBrowser.prevWin;
						delete FileBrowser.prev;
						delete FileBrowser.west;
						delete FileBrowser.tree;
						delete FileBrowser.root;
						delete FileBrowser.center;
						delete FileBrowser.south;
						delete FileBrowser.fileNameField;
						delete FileBrowser.selectedNode;
						delete FileBrowser.restriction;
	    				// re-init
	    				FileBrowser.el = null;
						FileBrowser.win = null;
						FileBrowser.prevEl = null;
						FileBrowser.prevWin = null;
						FileBrowser.prev = true;
						FileBrowser.west = null;
						FileBrowser.tree = null;
						FileBrowser.root = null;
						FileBrowser.center = null;
						FileBrowser.south = null;
						FileBrowser.fileNameField = null;
						FileBrowser.selectedNode = null;
						FileBrowser.restriction = null;
						FileBrowser.isReady = false;
	    			}
	    		}
	    	});
	    	
	    	this.win.on('show',function() {
	    		
	    		if (this.fileNameField === null) {
	    			
	    			emptyText = (typeof(this.treeSelectMode) == 'string' && this.treeSelectMode == 'selectFolder') ? 
	    				VIEWPORT_PROPERTIES.TEXT_CHOOSE_FOLDER : VIEWPORT_PROPERTIES.TEXT_CHOOSE_FILE;
	    			
		        	this.fileNameField = new Ext.form.TextField({ 
						// fieldLabel: VIEWPORT_PROPERTIES.NAME, 
			            name: 'FileBrowserWindow.fileName.name', 
			            renderTo: 'FileBrowserWindow.fileName',
			            // width: 200,
			            style: 'width:90%;',
						// labelStyle: 'width:50px;',
			            emptyText: emptyText,
			            allowBlank: false,
			            editable: false
			        });

	    		}
	    		
	    		// init
	    		
	    		this.fileNameField.setValue('');
	    		this.selectedNode = null;	    		
		        this.fileNameField.validate();
		        
		        this.win.doLayout(true);
		        
		        this.tree.setHeight(this.west.getInnerHeight());
		        		        
		        try {
			        this.tree.getRootNode().reload(function(){
			        	
			        	root = FileBrowser.tree.getRootNode();
				        root.expand(false,true,function(node) {
				        	if (typeof(config.uri) != 'undefined') {
					        	splitArray = config.uri.split('/');
					        	splitArray = splitArray.slice(3);
			//		        	alert('! ' + splitArray.concat(','));						
								FileBrowser.expandNodes(node, splitArray);
				        	} else {
				        		FileBrowser.west.enable();
				        		FileBrowser.isReady = true;
				        	}
				        });
			        
			        });
			        
		        } catch (error) {
		        	if (typeof(FileBrowser.west) != 'undefined' && 
		        		FileBrowser.west !== null) {
		        		FileBrowser.west.enable();
		        		FileBrowser.isReady = true;
		        	}
		        }
		        
		        // re-load preview-panel
            	loadConfig = {
					url: config.previewURL,
					method: 'POST',
					scripts: true,
					callback: FileBrowser.loadCallback,
					params: { previewNode: config.id },
                    text: 'loading...',
                    discardUrl: true,
                    nocache: true,
                    timeout: 30
				};				
		        FileBrowser.center.load(loadConfig);
		    
//		    	this.center.enable();
//		    	this.west.enable();
	        },this);
	        
	    	
	    	// show win
	    	this.win.setSize({width: VIEWPORT.getSize().width * 0.8, height: VIEWPORT.getSize().height * 0.8});
	    	this.center.disable();
	    	this.west.disable();	    	
			this.win.setPosition(VIEWPORT.getSize().width * 0.1, VIEWPORT.getSize().height * 0.1);
			this.win.show();
			
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
		
		
	},
	
	/**
	 * 
	 */
	close: function() {
		this.win.close();
	},
	
	expandNodes: function(node, pathArray) {
		
//		PulseError.Throw({e:'DBG',p:[
//			{n:'pathArray.length',o:pathArray.length},
//			{n:'pathArray.concat(,)',o:pathArray.concat(',')}
//		]});
		
		try {
			if (false === node.isExpanded()) {
				node.expand(false,true,function(node){
				
					string = pathArray.shift();
					
					if (typeof(pathArray[0]) == 'undefined' || pathArray[0] === '') {
						sNode = node.findChild('text', string);
						sNode.select();
						FileBrowser.selectedNode = sNode;
						FileBrowser.west.enable();
						FileBrowser.isReady = true;
						return;
					}
					
					FileBrowser.expandNodes(node.findChild('text', string),pathArray);
				
				});
			} else {
				string = pathArray.shift();
					
				if (typeof(pathArray[0]) == 'undefined' || pathArray[0] === '') {
					sNode = node.findChild('text', string);
					sNode.select();
					FileBrowser.selectedNode = sNode;
					FileBrowser.west.enable();
					FileBrowser.isReady = true;
					return;
				}
				
				FileBrowser.expandNodes(node.findChild('text', string),pathArray);
			}
		} catch (error) {
			// still re-enable tree
			FileBrowser.west.enable();
			FileBrowser.isReady = true;
		}
		
	},
	
	/**
	 * 
	 */
	loadCallback: function(el, success, response, options) {
		
		try {
			FileBrowser.center.enable();
		} catch (e1) {
			try {
				Ext.getCmp('popup.VIEWPORT').center.enable();
			} catch (e2) {
				/* ignore */
				PulseError.Throw({e: 'DBG', o: e2},'FileBrowser','loadCallback');
			}
		}
		LPCB(el, success, response, options);
	},
	
	/**
	 * @param {Object} config
	 */
	init: function(config) {
        
//        PulseError.Throw({
//        	e:'DBG',
//        	p:[{n:'httpURI',o:config.httpURI},{n:'extension',o:config.extension}]
//        });
        
        // set nameField
        try {
        	if (typeof(this.treeSelectMode) == 'string' && this.treeSelectMode == 'selectFolder') {
	        	return;
	        }
        	if (FileBrowser.restrictions.isRestricted(config.extension)) {
    			this.fileNameField.setValue('');
    		} else {
        		this.fileNameField.setValue(config.name);
    		}
        } catch (e1) {
        	popup = Ext.getCmp('popup.VIEWPORT');
        	if (typeof(popup) == 'undefined' || popup === null) {
        		return;
        	}
        	try {
        		if (FileBrowser.restrictions.isRestricted(config.extension)) {
	    			popup.fileNameField.setValue('');
	    		} else {
	        		popup.fileNameField.setValue(config.name);
	    		}
			} catch (e2) {
				/* ignore */
				PulseError.Throw({e: 'DBG', o: e2},'FileBrowser','init');
        	}
        }
	},
	
	/**
	 * @param {String} folderName
	 */
	folderDblClick: function(folderName) {
		
		this.prev = false;
		
		try {				
			FileBrowser.west.disable();
			FileBrowser.center.disable();
			
			// FileBrowser has been opened with no file
			if (typeof(this.selectedNode) != 'object' || this.selectedNode === null) {
				n = this.tree.getSelectionModel().getSelectedNode();
				if (typeof(n) == 'object' && n !== null) {
					this.selectedNode = n;
				} else {
					this.selectedNode = this.tree.getRootNode();
				}
			}
			if (false === this.selectedNode.isExpanded()) {
				this.selectedNode.expand(false, true, function(node) {
					chNodeFound = false;
					for (var i = 0; i < node.childNodes.length; i++) {
						if (node.childNodes[i].text == folderName) {
							node.childNodes[i].select();
							FileBrowser.west.enable();
							FileBrowser.tree.fireEvent('click',node.childNodes[i]);
							chNodeFound = true;
							break;
						}
					}
					if (false == chNodeFound) {
						FileBrowser.west.enable();
						FileBrowser.tree.fireEvent('click',node);
					}
	
				});
			} else {
	//			p = [{n:'folderName',o:folderName}];
				chNodeFound = false;
				for (var i = 0; i < this.selectedNode.childNodes.length; i++) {
					if (this.selectedNode.childNodes[i].text == folderName) {
	//					p.push({n:'"this.selectedNode.childNodes[' + i + '].text"',o:this.selectedNode.childNodes[i].text});
						this.selectedNode.childNodes[i].select();
						FileBrowser.west.enable();
						FileBrowser.tree.fireEvent('click',this.selectedNode.childNodes[i]);
	//					PulseError.Throw({e:'DBG',p:p});					
						chNodeFound = true;
						break;
					}
				}
				if (false == chNodeFound) {
					FileBrowser.west.enable();
					FileBrowser.tree.fireEvent('click',this.selectedNode);
				}
			}
		} catch (e1) {
			try {
				_vp = Ext.getCmp('popup.VIEWPORT');
				_vp.west.disable();
				_vp.center.disable();
				
				// FileBrowser has been opened with no file
				if (typeof(_vp.selectedNode) != 'object' || _vp.selectedNode === null) {
					n = _vp.tree.getSelectionModel().getSelectedNode();
					if (typeof(n) == 'object' && n !== null) {
						_vp.selectedNode = n;
					} else {
						_vp.selectedNode = _vp.tree.getRootNode();
					}
				}
				
				if (false === _vp.selectedNode.isExpanded()) {
					_vp.selectedNode.expand(false, true, function(node) {
						chNodeFound = false;
						for (var i = 0; i < node.childNodes.length; i++) {
							if (node.childNodes[i].text == folderName) {
								node.childNodes[i].select();
								_vp = Ext.getCmp('popup.VIEWPORT');
								_vp.west.enable();
								_vp.tree.fireEvent('click',node.childNodes[i]);
								chNodeFound = true;
								break;
							}
						}
						if (false == chNodeFound) {
							_vp = Ext.getCmp('popup.VIEWPORT');
							_vp.west.enable();
							_vp.tree.fireEvent('click',node);
						}
					});
					
				} else {
		//			p = [{n:'folderName',o:folderName}];
					chNodeFound = false;
					for (var i = 0; i < _vp.selectedNode.childNodes.length; i++) {						
						if (_vp.selectedNode.childNodes[i].text == folderName) {
		//					p.push({n:'"_vp.selectedNode.childNodes[' + i + '].text"',o:_vp.selectedNode.childNodes[i].text});
							_vp = Ext.getCmp('popup.VIEWPORT');
							_vp.selectedNode.childNodes[i].select();
							_vp.west.enable();
							_vp.tree.fireEvent('click',_vp.selectedNode.childNodes[i]);
		//					PulseError.Throw({e:'DBG',p:p});
		 					chNodeFound = true;					
							break;
						}
					}
					if (false == chNodeFound) {
						_vp = Ext.getCmp('popup.VIEWPORT');
						_vp.west.enable();
						_vp.tree.fireEvent('click',_vp.selectedNode);
					}
				}
				
			} catch (e2) {
				/* ignore */
				PulseError.Throw({e: 'DBG', o: e2},'FileBrowser','folderDblClick');
			}
		}
		
		
		
//		this.center.enable();
	},
	
	/**
	 * @param {String} fileName
	 */
	fileClick: function(fileName) {
		this.folderDblClick(fileName);   
	},
	
	/**
	 * 
	 */
	selectTreeNode: function(nodeId, fileUri, boolIsFolder) {
		_vp = Ext.getCmp('popup.VIEWPORT');
		tree = this.tree;
		if (typeof(_vp) == 'object' && _vp !== null) {
			tree = _vp.tree;
		}
		
		if (true === boolIsFolder) {
			n = tree.getNodeById(fileUri);
		} else {
			n = tree.getNodeById(nodeId);
		}
		
		if (typeof(n) == 'object' && n !== null) {
			n.select();
		}
		
		if (typeof(_vp) == 'object' && _vp !== null) {
			_vp.selectedNode = n;
		} else {
			this.selectedNode = n;
		}
		
	},
	
	/**
	 * 
	 */
	showPreviewImage: function(url, name, el) {

		if (this.prevWin !== null) { 
			this.prevWin.getUpdater().getEl().update(
				'<div style="border:1px solid #8DB2E3;text-align:center;padding:2px;">' +
		      		'<a href="#" onclick="FileBrowser.hidePreviewImage();" ' + 
		      			'style="display:block;text-decoration:none;font-weight:bold;color:#000000;">' + 
		      			'<img src="' + url + '" /><br/>' + name + 
		      		'</a>' + 
	      		'</div>'
			);
			
//			margins = Ext.get(el).getMargins();
//			this.prevWin.setPagePosition(margins.r - 15, margins.b - 15);
			(function(){
				if (true === FileBrowser.prev) {	
					FileBrowser.prevWin.show();
				}
			}).defer(100);
			return;
		}

//		(function() {
			
			try {
				
				pel = Ext.get(document.body);
		        if (typeof(pel) == 'undefined') {
		        	throw('344 :: PULSE.FileBrowser.js.showPreviewImage() :: ' + 
		        	'CHECK for element failed...');
		        }
		        
		        // build window
		        if (this.prevEl === null) {
			        this.prevEl = pel.createChild({
				        tag: 'div', 
				        id: 'FileBrowserPrevWindow.el'
				    });
		        }
		       
				windowConfig = {
					maximizable: false,
			        closable: false, 
			        plain: false,
			        modal: false,
			        renderTo: this.prevEl,
			        frame: false,
			        border: false,
			        bodyBorder: true,
			        header: false,
			        bodyStyle: 'background-color: #FFFFFF;',
			        autoHeight: true,
			        autoWidth: true,
			      	html: '<div style="border:1px solid #8DB2E3;text-align:center;padding:2px;">' +
				      		'<a href="#" onclick="FileBrowser.hidePreviewImage();" ' + 
				      			'style="display:block;text-decoration:none;font-weight:bold;color:#000000;">' + 
				      			'<img src="' + url + '"/><br/>' + name + 
				      		'</a>' + 
			      		'</div>'
				};
				
				this.prevWin = new Ext.Window(windowConfig);
				
				this.prevWin.on('show',function(win){
					(function(){
						win = FileBrowser.prevWin;
						try {
							win.setPagePosition(
								(VIEWPORT.getSize().width * 0.5) - (win.getSize().width * 0.5), 
								(VIEWPORT.getSize().height * 0.5) - (win.getSize().height * 0.5)
							);
						} catch (e1) {
							try {
								_vp = Ext.getCmp('popup.VIEWPORT');
								win.setPagePosition(
									(_vp.getSize().width * 0.5) - (win.getSize().width * 0.5), 
									(_vp.getSize().height * 0.5) - (win.getSize().height * 0.5)
								);
							} catch (e2) {
								/* ignore */
								PulseError.Throw({e: 'DBG', o: e2},'FileBrowser','showPreviewImage');
							}
						}
						
					}).defer(100);
					
				});
				
				
//				margins = Ext.get(el).getMargins();
//				this.prevWin.setPagePosition(margins.r - 15, margins.b - 15);
				(function(){
					if (true === FileBrowser.prev) {
						FileBrowser.prevWin.show();
					}
				}).defer(100);
		        
			} catch (windowInitError) {
				alert('windowInitError: \n' + windowInitError);
			}
			
//		}).defer(1000);
	},
	
	/**
	 * 
	 */
	hidePreviewImage: function() {		
		this.prevWin.hide();				
	},
	
	/**
	 * 
	 */
	initPopupWindow: function(config) {
		
//		PulseError.Throw({e:'TODO',p:[
//			{n:'data',o:''+config.dataURL},
//			{n:'preview',o:''+config.previewURL},
//			{n:'restriction',o:''+config.restriction},
//			{n:'onSelect',o:''+config.onSelect}
//		]},'FileBrowser','initPopupWindow');
		
		this.restriction = config.restriction;
		
		tree = new Ext.tree.TreePanel({
    		id: 'popup.FileBrowserWindow.tree',	        		
    		height: 200, 
	        animate: true,
	        creatingNewNode: false, 
	        enableDD: false,
	        autoScroll: true, 
	        containerScroll: true, 
	        rootVisible: false,
	        border: false,
            loader: new Ext.tree.TreeLoader({ 
	            dataUrl: config.dataURL,
	            uiProviders: { 
	            	'FileTreeNodeUI': PULSE.FileTreeNodeUI
            	}
	        })
    	});
    	
    	// build root
    	root = new Ext.tree.AsyncTreeNode({
	        text: 'popup.FileBrowser', 
	        draggable: false, 
	        id: 'source'
	    });
	    
	    // set root-node
	    tree.setRootNode(root);
	    
	    // setup tree-listeners
	    tree.on({ 
	        'click': { 
	            fn: function(node, e) {
					
					_vp = Ext.getCmp('popup.VIEWPORT');
	            	
	            	_vp.center.disable();
	            	
	            	// load preview-panel
	            	loadConfig = {
						url: config.previewURL,
						method: 'POST',
						scripts: true,
						callback: FileBrowser.loadCallback,
						params: { previewNode: node.id },
						text: 'loading...',
                        discardUrl: true,
                        nocache: true,
                        timeout: 30
					};
					
			        _vp.center.load(loadConfig);
			        
			        if (FileBrowser.prevWin !== null && false === FileBrowser.prevWin.hidden) {
						FileBrowser.prevWin.hide();
					}
			        
			        _vp.selectedNode = node;
			        if (node.attributes.type !== 'dir') {
			        	// check restrictions
//					        	if (FileBrowser.restriction !== null) {
			        		if (FileBrowser.restrictions.isRestricted(node.attributes.extension)) {
			        			_vp.fileNameField.setValue('');
			        		} else {
			        			_vp.fileNameField.setValue(node.text);
			        		}
//					        	} else {
//					        		FileBrowser.fileNameField.setValue(node.text);
//					        	}					        
			        } else {
			        	_vp.fileNameField.setValue('');
			        }
			        _vp.fileNameField.validate();
			        (function(){
			        	FileBrowser.prev = true;
			        }).defer(100);
	            }
	        }
	    });
	    
    	// build west-panel (houses tree)
    	west = new Ext.Panel({
    		region: 'west',
    		id: 'popup.FileBrowserWindow.west',
    		split: true, 
            width: 270, 
            minSize: 250, 
            maxSize: 600, 
            collapsible: true, 
            margins: '5 0 5 5',
    		items: [ tree ]
    	});
    	
    	west.on({
            'resize' : {
            	scope: tree, 
                fn: function(_west, adjWidth, adjHeight, rawWidth, rawHeight) { 
                    this.setHeight(_west.getInnerHeight());
                }                        
            }
        });
    	
    	// build center-panel (file-preview)
    	center = new Ext.Panel({
    		region: 'center',
    		id: 'popup.FileBrowserWindow.center',
    		html: 'preview',
    		autoScroll: true,
    		margins: '5 5 5 0'
    	});
    	
    	// build south-panel (selected file-name-preview)
    	south = new Ext.Panel({
    		region: 'south',
    		id: 'popup.FileBrowserWindow.south',
//	        		html: 'fields',
    		margins: '0 5 5 5',
//	        		bodyStyle: 'padding: 5px',
       		autoHeight: true, 
   			html: '<table cellpadding="0" cellspacing="0" border="0" style="width:100%;margin:5px;"><tr>' + 
   				'<td>' + VIEWPORT_PROPERTIES.FILE + ':</td>' + 
   				'<td style="width:90%;"><div id="popup.FileBrowserWindow.fileName"> </div></td>' + 
   				'</tr></table>',
   			buttonAlign: 'center',
   			buttons: [{
   				text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SELECT,
   				handler: function() {
   					_vp = Ext.getCmp('popup.VIEWPORT');
   					if (typeof(_vp.selectedNode) == 'undefined' || _vp.selectedNode === null) {
   						return;
   					}
   					if (FileBrowser.restrictions.isRestricted(_vp.selectedNode.attributes.extension)) {
	        			return;
	        		}
   					config.onSelect(_vp.selectedNode.attributes.httpURI);
   				}
   			},{
   				text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
   				handler: function() {
   					window.close();
   				}
   			}]
    	});
    	
    	
    	// build viewport
    	vpitems = [west,center,south];
    	
    	// add toolbar to vp
    	if (typeof(config.tbar) != 'undefined') {
    		tbar = new Ext.Panel({
    			title: VIEWPORT_PROPERTIES.FILES,
    			iconCls: 'foldersIconCls',
    			region: 'north',
    			tbar: config.tbar,
    			html: '<div style="height:0px;"> </div>'
    		});
    		vpitems.push(tbar);
    	}
    	
    	vpcfg = {
    		initialized: false,
            id: 'popup.VIEWPORT', 
            layout: 'border', 
            items: vpitems,
        	tree: tree,
        	west: west,
        	center: center,
        	south: south,
            listeners: {
	            'afterlayout': {
		            fn: function(_vp) {
			    		if (true === _vp.initialized) {
			    			return;
			    		}
			    		
			    		if (typeof(_vp.fileNameField) == 'undefined' || _vp.fileNameField === null) {
				        	_vp.fileNameField = new Ext.form.TextField({ 
								// fieldLabel: VIEWPORT_PROPERTIES.NAME, 
					            name: 'popup.FileBrowserWindow.fileName.name', 
					            renderTo: 'popup.FileBrowserWindow.fileName',
					            // width: 200,
					            style: 'width:90%;',
								// labelStyle: 'width:50px;',
					            emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FILE,
					            allowBlank: false,
					            readOnly: true 
					        });					        
				        	_vp.doLayout(true);
			    		}
			    		
			    		// init			    		
			    		_vp.fileNameField.setValue('');
			    		_vp.selectedNode = null;	    		
				        _vp.fileNameField.validate();
				        _vp.tree.setHeight(_vp.west.getInnerHeight());
				        		        
				        try {
					        _vp.tree.getRootNode().reload(function(){
					        	
					        	root = _vp.tree.getRootNode();
						        root.expand(false,true,function(node) {
						        	if (typeof(config.uri) != 'undefined') {
							        	splitArray = config.uri.split('/');
							        	splitArray = splitArray.slice(3);
					//		        	alert('! ' + splitArray.concat(','));						
										FileBrowser.expandNodes(node, splitArray);
						        	} else {
						        		_vp.west.enable();
						        		_vp.isReady = true;
						        	}
						        });
					        
					        });
					        
				        } catch (error) {
				        	if (typeof(_vp.west) != 'undefined' && 
				        		_vp.west !== null) {
				        		_vp.west.enable();
				        		_vp.isReady = true;
				        	}
				        }
				        
				        // re-load preview-panel
			        	loadConfig = {
							url: config.previewURL,
							method: 'POST',
							scripts: true,
							callback: FileBrowser.loadCallback,
							params: { previewNode: config.id },
                            text: 'loading...',
                            discardUrl: true,
                            nocache: true,
                            timeout: 30
						};				
				        _vp.center.load(loadConfig);
				        
				        
				        _vp.initialized = true;
			        }
	            }
            }
        };
    	
    	
    	
    	vp = new Ext.Viewport(vpcfg);
	},
	
	/**
	 * 
	 */
	uploadFile: function(updateProgressURL) {
		
		selectedNode = this.selectedNode;
		_vp = Ext.getCmp('popup.VIEWPORT');
		if (typeof(_vp) == 'object' && _vp !== null) {
			selectedNode = _vp.selectedNode;
		}
		
		if (typeof(updateProgressURL) != 'string' || updateProgressURL === '') {
			return;
		}
		
		if (typeof(selectedNode) != 'object' || selectedNode === null 
			|| selectedNode.attributes.type !== 'dir') {
			Ext.Msg.alert('',VIEWPORT_PROPERTIES.TEXT_SELECT_A_FOLDER_FOR_UPLOAD);
			return;
		}
		
		if (typeof(_vp) == 'object' && _vp !== null) {
			FileUploader.showWin(updateProgressURL,selectedNode,_vp);
		} else {
			FileUploader.showWin(updateProgressURL,selectedNode,this);
		}
		
	}
	
}; // END :: FileBrowser

/**
 * 
 */
var FileUploader = {
	
	MAX_RETRIES: 20,
	
	/**
	 * 
	 */
	showWin: function(updateProgressURL,selectedNode,fileBrowser) {
		// alert(url + '\n' + updateProgressURL + '\n' + selectedNode);
		
		if (typeof(selectedNode) != 'object' || selectedNode === null) {
			return;
		}
		
		this.fileBrowser = fileBrowser;
		this.selectedNode = selectedNode;
		
		url = selectedNode.attributes.uploadURL;
		if (typeof(url) != 'string' || url === '') {
			Ext.Msg.alert('error','URL undefined: ' + url);
			return;
		}
		if (typeof(updateProgressURL) != 'string' || updateProgressURL === '') {
			Ext.Msg.alert('error','updateProgressURL undefined: ' + updateProgressURL);
			return;
		}
		
		progressId = this.selectedNode.attributes.progressId;
		
		// the file to be assigned to the new content
		this.fileField = new Ext.form.TextField({
			fieldLabel: 'file',
			name: 'file',
			inputType: 'file',
			allowBlank: false
		});
		
//		this.fileField.on('valid',function(_this){
//			this.nameField.setValue(_this.getValue());
//			this.nameField.validate();
//		},this);
//		
//		// name for the new content
//		this.nameField = new Ext.form.TextField({
//			grow: true,
//			fieldLabel: 'file-name',
//			name: 'fileName',
//			emptyText: 'Please enter a name!',
//			allowBlank: false
//		});
		
		// the form
		this.formPanel = new Ext.form.FormPanel({
			fileUpload: true,
			bodyStyle: 'padding: 5px;',		
			items: [this.fileField/*,this.nameField*/]
		});
		
		// the progress-bar
		this.progressBar = new Ext.ProgressBar({
			hidden: true,
			id: 'progress.bar.' + this.selectedNode.id
		});
		
		// the processing-file-bar
		this.processingBar = new Ext.ProgressBar({
			hidden: true,
			text: 'processing file...',
			style: 'margin:3px 0 0 0;',
			id: 'processing.bar.' + this.selectedNode.id
		});
		
		// add progressbar/s to form
		this.formPanel.add(this.progressBar);
		this.formPanel.add(this.processingBar);
		
		// submit-configuration for create-button
		submitCFG = {
			scope: this,
		    clientValidation: true,
			method: 'POST',
		    url: url,
		    params: {
		        id: this.selectedNode.id
		    },
		    success: this.createSuccess,
		    failure: this.createFailure
		};
		
		// create-button
		this.createButton = new Ext.Button({
			scope: this,
			text: 'create',
			handler: function() {
				try {				
					if (false === this.formPanel.getForm().isValid()) {
						if (false === this.fileField.isValid()) {
							Ext.Msg.alert("Error","Please add a file!");
						}
//						if (false === this.nameField.isValid()) {
//							Ext.Msg.alert("Error","Please enter a valid name!");
//						}
						return;
					}
					this.createButton.disable();
					this.cancelButton.disable();
					this.progressBar.show();
					this.uploadIsComplete = false;
					// this.formPanel.getForm().submit(submitCFG);
					this.formPanel.getForm().doAction('fileUploadersubmit',submitCFG);
					this.CURRENT_RETRIES = 0;
					this.STOP_UPDATE_PROGRESS = false;
					this.updateProgressBar(selectedNode.id,updateProgressURL,progressId);
				} catch(e) {
					alert('error: ' + e);
				}
			},
			iconCls: 'saveIconCls'
		});
		
		// cancel-creation-button
		this.cancelButton = new Ext.Button({
			scope: this,
			text: 'cancel',
			handler: function() {
				this.formWindow.close();
			},
			iconCls: 'cancelIconCls'
		});
		
		// confirm-creation-button
		this.confirmButton = new Ext.Button({
			scope: this,
			text: 'finish',
			hidden: true,
			handler: function() {
				this.selectedNode.reload(function(n){
					n.expand();
				});
				this.fileBrowser.tree.fireEvent('click',this.selectedNode);
				this.formWindow.close();
			},
			iconCls: 'selectIconCls'
		});
		
		// element to render the window to
		el = this.getEl();
		
		// the window holding the form
		windowCFG = {
			title: 'upload and create',
			modal: true,
			renderTo: el,
			items: this.formPanel,
			buttonAlign: 'center',
			buttons: [this.cancelButton,this.createButton,this.confirmButton]
		};
		this.formWindow = new Ext.Window(windowCFG);
		
		this.formWindow.on('close',function() {
//			if (true === this.uploadIsComplete) {
//				document.location.reload(true);
//			}
			delete this._this.uploadIsComplete;
			delete this._this.CURRENT_RETRIES;
			delete this._this.fileBrowser;
			delete this._this.selectedNode;
			
			Ext.Ajax.request({
				url: this.url,
				params: {cleanuploadprogress: true}
			});
			
		},{_this:this,url:url});
		
		
		// show window
		this.formWindow.show(this);
		if (Ext.isIE6) {
			this.formWindow.setWidth(400);
		} else {
			this.formWindow.setWidth(this.formPanel.getSize().width + 15);
		}
		// initial positioning of window
		halfWindowSize = this.formWindow.getSize().width / 2;
		this.formWindow.setPagePosition((Ext.get(document.body).getSize().width / 2) - halfWindowSize, 100); 
		
//		alert(this.formPanel.getSize().width);
		
		// initial validation
		this.fileField.validate();
//		this.nameField.validate();
	},
	
	/**
	 * 
	 */
	updateProgressBar: function(contentId,updateProgressURL,progressId) {
		if (true === this.STOP_UPDATE_PROGRESS) {
			return;
		}		
		
		requestCFG = {
			scope: this,
			method: 'POST',
		    url: updateProgressURL,
		    params: {
				id: progressId
			},
		    callback: this.updateCallBack,
		    contentId: contentId
		};
		Ext.Ajax.request(requestCFG);
		
	},
	
	/**
	 * 
	 */
	createSuccess: function(form, action) {
		
		this.uploadIsComplete = true;
		this.progressBar.updateProgress(1, '100%');
		this.processingBar.reset();
		if (this.processingBar.isVisible()) {
			(function(){
				this.processingBar.reset();
				this.processingBar.updateProgress(1, 'finished');
			}).defer(200,this);
		}
		this.cancelButton.hide();
		this.createButton.hide();
		this.fileField.disable();
//		this.nameField.disable();
		this.confirmButton.show();
		
    },
    
    /**
     * 
     */
    createFailure: function(form, action) {

    	if (this.processingBar.isVisible()) {
    		this.processingBar.reset();
    		this.processingBar.updateProgress(0, 'failed');
    		Ext.get(this.processingBar.id).first().first('.x-progress-text-back').addClass('progressBarError');
    	} else {
    		this.progressBar.updateProgress(0, '0%');
    		Ext.get(this.progressBar.id).first().first('.x-progress-text-back').addClass('progressBarError');
    	}
    	this.STOP_UPDATE_PROGRESS = true;
    	this.createButton.disable();
    	this.fileField.disable();
//    	this.nameField.disable();
    	this.cancelButton.enable();
    	
    	
	    switch (action.failureType) {
            case Ext.form.Action.CLIENT_INVALID:
                Ext.Msg.alert('error', 'Form fields may not be submitted with invalid values');
                break;
            case Ext.form.Action.CONNECT_FAILURE:
                Ext.Msg.alert('error', 'Ajax communication failed');
                break;
            case Ext.form.Action.SERVER_INVALID:
               Ext.Msg.alert('error', action.result.error.e);
            
            default:
            	if (typeof(action.result.error) != 'undefined') {
            		Ext.Msg.alert('error',action.result.error.e);
            	} else {
            		Ext.Msg.alert('error','An unknown error has occured!');
            	}
       	}
       	
    },
	
	/**
	 * 
	 */
	updateCallBack: function(options,success,response) {
		
    	if (false === success) {
    		return;
    	}

    	decodedResponse = Ext.decode(response.responseText);
    	if (true === decodedResponse.status 
    		&& typeof(decodedResponse.progress) != 'undefined') {
    		
    		progress = parseInt(decodedResponse.progress, 10);
    		this.progressBar.updateProgress((progress/100), progress + '%');
    		
			if (progress < 100) {
				if (true === this.uploadIsComplete) {
					this.progressBar.updateProgress(1, '100%');
				} else {
					(function(_id,_url, _progressId){
						this.updateProgressBar(_id, _url, _progressId);
					}).defer(500,this,[options.contentId, options.url, options.params.id]);
				}
			} else if (progress === 100) {
				this.cancelButton.disable();
				this.createButton.disable();
				this.fileField.disable();
//				this.nameField.disable();
				
				this.processingBar.show();
				if (true !== this.uploadIsComplete) {
					this.processingBar.wait({
						interval:200,
			            increment:15			
					});
				} else {
					this.processingBar.updateProgress(1, 'finished');
				}
			}
			
			return;
    	} else if (false === decodedResponse.status && 
    		typeof(decodedResponse.error) == 'object' 
			&& true !== decodedResponse.error.retry) {
    		
			if (this.processingBar.isVisible()) {
	    		this.processingBar.reset();
	    		this.processingBar.updateProgress(0, 'failed');
	    		Ext.get(this.processingBar.id).first().first('.x-progress-text-back').addClass('progressBarError');
	    	} else {
	    		this.progressBar.updateProgress(0, '0%');
	    		Ext.get(this.progressBar.id).first().first('.x-progress-text-back').addClass('progressBarError');
	    	}
	    	
	    	this.STOP_UPDATE_PROGRESS = true;
	    	this.createButton.disable();
	    	this.fileField.disable();
//	    	this.nameField.disable();
	    	this.cancelButton.enable();
	    	
	    	Ext.Msg.alert('error',decodedResponse.error.e);
	    	
			return;
    	}

    	if (true !== this.uploadIsComplete) {
   		
    		if (typeof(this.CURRENT_RETRIES) == 'number') {
    			if (this.CURRENT_RETRIES == this.MAX_RETRIES) {
    				return;
    			}
    			this.CURRENT_RETRIES += 1;
    		} else {
    			this.CURRENT_RETRIES = 1;
    		}
    		
    		(function(_id, _url, _progressId){
				this.updateProgressBar(_id, _url, _progressId);
			}).defer(500,this,[options.contentId, options.url, options.params.id]);
    	}
    },
	
	/**
	 * 
	 */
	getEl: function() {
		el = Ext.get('FileUploader.window.el');
		if (typeof(el) == 'undefined' || el === null) {
			el = Ext.get(document.body).createChild({
				tag: 'div',
				id: 'FileUploader.window.el'
			});
		}
		return el;
	}
	
}; // END :: FileUploader
FileUploader.Submit = Ext.extend(Ext.form.Action.Submit,{
	
	type: 'fileUploadersubmit',
	
	handleResponse: function(response){
		try {
			return FileUploader.Submit.superclass.handleResponse.apply(this,arguments);
		} catch (e) {
			/*
			alert('typeof(' + response + '): ' + typeof(response));
			arr = [];
			if (typeof(response)== 'object' && response !== null) {
				for (var i in response) {
					arr.push(i + ': ' + response[i] + '\n');
				}	
			}
			alert('-> ' + arr);
			*/
			error = { e: 'An unknown error has occurred.' };
			
			if (typeof(response) == 'object' && response !== null) {
				try {
					error = { e: Ext.decode(response.responseText) };
				} catch(e) {
					error = { e: /*'error: '+*/  response.responseText };					
				}
			}
			return { success: false, error: error };
		}
//		return true;
	}
	
});
Ext.form.Action.ACTION_TYPES.fileUploadersubmit = FileUploader.Submit;



/**
 * 
 */
DBG.FileSelector = DBG.apply(DBG.Editor,{
	initComponent: { FileSelector: false },
	onRender: false,
	setFile: false
});

/**
 * 
 */
FileSelector = {
	
	type: 'FileSelector',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: DBG.FileSelector,
	
	/**
	 * Is being called by Pulse.SubEditorPanel to initialise the panel with buttons 
	 * if the FileSelector is being added to a Pulse.SubEditorPanel via 
	 * Pulse.SubEditorPanel.addSubEditor(editor).
	 * 
	 * @return {Object} an Array of Ext.Toolbar.Button
	 */
	getButtons: function() {
	
		buttons = [];
			
		buttonCFG = {
			scope: this,
			disabled: true,
			handler: this.showFileBrowser,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_ADD,
			iconCls: 'addIconCls'
		};
		
		if (typeof(this.fileBrowserTreeURL) == 'string' 
			&& this.fileBrowserTreeURL !== '') {
			buttonCFG.disabled = false;
		}

		buttons.push(new Ext.Toolbar.Button(buttonCFG));
		buttons.push(new Ext.Toolbar.Separator());	
		
		removeButtonCFG = {
			scope: this,
			disabled: true,
			handler: this.removeFile,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_REMOVE,
			iconCls: 'deleteIconCls'
		};
		
		if (typeof(this.content.file) != 'undefined') {
			removeButtonCFG.disabled = false;
		}
		
		this.removeButton = new Ext.Toolbar.Button(removeButtonCFG);
		buttons.push(this.removeButton);
		buttons.push(new Ext.Toolbar.Separator());	
		
		return buttons;
		
	},
	
	/**
	 * 
	 */
	removeFile: function() {
		if (typeof(this.content.file) == 'undefined') {
			return;
		}
		
		this.monitor.setValue("remove");		
		if (typeof(this.masterEditor == 'object') 
				&& (this.masterEditor.type == 'SubEditorPanel' 
					|| this.masterEditor.type == 'SubEditorWindow')) {
			selector = '.wrapper_' + this.content.file.id;			
			el = this.masterEditor.body.child(selector);			
	        Ext.DomHelper.append(el.dom, {cls:"pulseTransparentMask"}, true);
	        this.removeButton.disable();
		}
	},
	
	/**
	 * 
	 */
	setFile: function(node) {
		if (this.DBG) {
			props = DBG.getPropertyArray(node.attributes);
			THROW({args:arguments,props:props,propsObj:node.attributes},this,'setFile');
		}
		if (typeof(this.content.file) != 'undefined' 
			&& this.content.file.id == node.attributes.vfsid) {
			return;
		}
		this.monitor.setValue(node.attributes.vfsid);
		
		zindex = 'position:absolute;z-index:1001;';
		if (typeof(this.content.file) == 'undefined') {
			zindex = '';
		}
		
		html = '<div style="' + zindex
			+ 'padding:5px;font-weight:bold;vertical-align:middle;line-height:16px;">'
			+ '<img src="' + Ext.BLANK_IMAGE_URL + '" class="tabHasChangesIcon"/>'
			+ '<img src="' + Ext.BLANK_IMAGE_URL + '" width="16" height="16" border="0" class="file'
			+ node.attributes.extension + 'IconCls" alt="' 
			+ node.attributes.extension + '" valign="middle"/>&#160;'
			+ '<span style="line-height:16px;">' + VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW + ': ' 
			+ node.attributes.text + ' (' + node.attributes.id + ')</span>' +
		'</div>';		
		
		if (typeof(this.content.file) == 'undefined') {
			if (typeof(this.masterEditor == 'object') 
				&& (this.masterEditor.type == 'SubEditorPanel' 
					|| this.masterEditor.type == 'SubEditorWindow')) {
				el = this.masterEditor.body.child('.noFileAssignedMsg');
				el.insertHtml('beforeend',html,true).replace(el.first());
			}
			return;
		}
		if (typeof(this.masterEditor == 'object') 
				&& (this.masterEditor.type == 'SubEditorPanel' 
					|| this.masterEditor.type == 'SubEditorWindow')) {
			selector = '.wrapper_' + this.content.file.id;			
			el = this.masterEditor.body.child(selector);
			if (true !== el.isMasked) {			
	        	Ext.DomHelper.append(el.dom, {cls:"pulseTransparentMask"}, true);
	        	el.isMasked = true;
			}
	        this.removeButton.disable();
		}
		
		if (typeof(this.newFilePreview) != 'undefined') {
			this.newFilePreview.remove();
		}		
		this.newFilePreview = this.masterEditor.body.insertHtml('afterbegin',html,true);
	},
	
	/**
	 * 
	 */
	showFileBrowser: function() {
		fileBrowserCFG = {
			scope: this,
			applyCallback: 'setFile',
			dataURL: this.fileBrowserTreeURL,
			previewURL: this.fileBrowserPreviewURL,
			upload: true,
			uploadProgressURL: this.fileBrowserUploadProgressURL
		};		
		FileBrowser.open(fileBrowserCFG);
	},
	
//	/**
//	 * Returns whether the FileSelector has changes.
//	 * 
//	 * @return {Boolean} true, if the editor has changes, false otherwise
//	 */
//	hasChanges: function() {
//		
//		
//		// TODO		
//		
//		return false;
//	},
//	
//	/**
//	 * Returns an Object with the changes of the FileSelector.
//	 * 
//	 * NOTE: 	Does not check if any changes with the same parameter-name 
//	 * 			are already applied to the changes-object.
//	 * 
//	 * @param {Object} v, the object to apply the chenges to
//	 * 
//	 * @return {Object} the changes, either applied to given v, or a newly created object
//	 */
//	getChanges: function(v) {
//		
//		if (false === this.hasChanges()) {
//			return v;
//		}
//		
//		if (typeof(v) == 'undefined') {
//			v = {};
//		}
//		
//		// TODO
//		
//		return v;
//		
//	},
//	
//	/**
//	 * Commits the changes of the FileSelector.
//	 */
//	commit: function() {
//		
//		if (false === this.fireEvent('MSG','beforecommit',this)) {			
//			// TODO			
//			return false;			
//		}
//		
//		// TODO
//		
//		this.fireEvent('MSG','commit',this);
//
//	},
//	
//	/**
//	 * Resets the changes of the FileSelector.
//	 */
//	reset: function() {
//		
//		if (false === this.fireEvent('MSG','beforereset',this)) {			
//			// TODO			
//			return false;
//		}
//		
//		// TODO
//
//		this.fireEvent('MSG','reset',this);
//		
//	},
	
	/**
	 * Is being called during creation if 
	 * FileSelector.initialConfig.renderTo is being specified.
	 */
	onRender: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['renderTo'],args:arguments},this,'onRender');
		}
		
		try {
		
			if (typeof(this.renderTo == 'object') 
				&& (this.renderTo.type == 'SubEditorPanel' 
					|| this.renderTo.type == 'SubEditorWindow')) {
				el = this.renderTo.body;
			} else {
				el = Ext.get(this.renderTo);
			}
			
			field = '<input type="hidden" name="vfsid" value="'; 
			if (typeof(this.content.file) != 'undefined') {
				field += this.content.file.id;
			}
			field += '"/>';
			
			// adds field to given el
			fieldEl = el.insertHtml('afterBegin', field, true);
			
			// builds monitor
			monitorCFG = {
				id: Ext.id() + '.' + 'file.id',
				el: fieldEl,
				showMsgFlag: false,
				allowBlank: true
			};
			
			this.monitor = new Pulse.FieldMonitor(monitorCFG);
			
			// add monitor as sub-editor
			this.addSubEditor(this.monitor);
			
			
		
		} catch(e) {			
 			FATAL(e,this,'onRender');
		}
	},
	
	/**
	 * Is being called during creation and initialises the editor.
	 */
	initComponent: function() {
		
		// call super
		Pulse.FileSelector.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.FileSelector');
		}
		
		try {
			
			// TODO
			
		} catch(e) {
			FATAL(e, this, 'initComponent.FileSelector');
		}
	}
		
};
Pulse.FileSelector = Ext.extend(Pulse.Editor, FileSelector); // END :: Pulse.FileSelector

// Create namespace (PULSE)
// Ext.namespace('PULSE');
 
/**
 * definition of the user-interface for a file-browsing-tree-node
 */
PULSE.FileTreeNodeUI = function() {
    // call parent constructor    
    PULSE.FileTreeNodeUI.superclass.constructor.apply(this, arguments);
};
 
// extend
Ext.extend(PULSE.FileTreeNodeUI, Ext.tree.TreeNodeUI, {


/**
 * @Override
 */
renderElements : function(n, a, targetNode, bulkRender){
		
		// pulse properties
//		Ext.log('a.type: ' + a.type);
//		Ext.log('a.bundle: ' + a.bundle);
//		Ext.log('a.viewId: ' + a.viewId);
//		Ext.log('a.contentId: ' + a.contentId);
//		Ext.log('a.contentType: ' + a.contentType);
		
		//set icon
//		var pulseIconUri = '/pulse/resources/Core/icons/file-types/';
		if (typeof(a.type) != 'undefined' && (a.type !== null) && (a.type != "dir")) {
//			a.icon = '/pulse/resources/Core/icons/file-types/' + a.type + '_18x18.png';			
			a.iconCls = 'file' + a.type + 'IconCls';
			this.iconCls = a.iconCls;
		}
		// Ext.log('pulseIconUri: ' + pulseIconUri);
		
		
//		a.qtipCfg = {
//			title: a.text,
//			text: '<span style="font-style: italic">id:</span> ' + a.id + '<br />' + 				 
//				  '<span style="font-style: italic">visible:</span> ' + a.visible + 
//				  '<hr /><span style="font-weight: bold">content</span><br />' + 
//				  '<span style="font-style: italic">id:</span> ' + a.contentId+ '<br />' +
//				  '<span style="font-style: italic">bundle:</span> ' + a.bundle + '<br />' +
//				  '<span style="font-style: italic">type:</span> ' + a.contentType
//		}
	
        // add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

        var cb = typeof a.checked == 'boolean';

        var href = a.href ? a.href : Ext.isGecko ? "" : "#";
        var buf = ['<li class="x-tree-node"><div ext:tree-node-id="',n.id,'" class="x-tree-node-el x-tree-node-leaf ', a.cls,'">',
            '<span class="x-tree-node-indent">',this.indentMarkup,"</span>",
            '<img src="', this.emptyIcon, '" class="x-tree-ec-icon x-tree-elbow" />',
            '<img src="', a.icon || this.emptyIcon, '" class="x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : ""),(a.iconCls ? " "+a.iconCls : ""),'" unselectable="on" style="width:18px"/>',
            cb ? ('<input class="x-tree-node-cb" type="checkbox" ' + (a.checked ? 'checked="checked" />' : '/>')) : '',
            '<a hidefocus="on" class="x-tree-node-anchor" href="',href,'" tabIndex="1" ',
             a.hrefTarget ? ' target="'+a.hrefTarget+'"' : "", ' dir="LTR"><span unselectable="on">',n.text,"</span></a>",
             "</div>",
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>"].join('');

        if(bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()){
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf);
        }else{
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
        }
        
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var cs = this.elNode.childNodes;
        this.indentNode = cs[0];
        this.ecNode = cs[1];
        this.iconNode = cs[2];
        var index = 3;
        if(cb){
            this.checkbox = cs[3];
            index++;
        }
        this.anchor = cs[index];
        this.textNode = cs[index].firstChild;
        

                
    }	
}); // end of extend


/**
 * @Override
 */ 
PULSE.FileRootTreeNodeUI = function(){
    PULSE.FileRootTreeNodeUI.superclass.constructor.apply(this, arguments);
};
Ext.extend(PULSE.FileRootTreeNodeUI, PULSE.FileTreeNodeUI, {
    render : function(){
        if(!this.rendered){
            /*var */targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    collapse : function(){
    },
    expand : function(){
    }
}); 
// end of file

/**
 * utility class: Pulse.MapEntry for Pulse.HashMap
 * 
 * 		tries to be as close as possible to java.util.Map.Entry
 * 
 * accepts as key/value [comparable] only
 * 
 * 		[comparable] are:
 * 			
 * 			- null
 * 			- {Boolean}
 * 			- {Number}
 * 			- {String}
 * 
 * 			- {Object} o, with
 * 				o.implementsComparable = {Boolean} true
 * 				and
 * 				o.equals(o) = {Function}
 * 				o.toString() = {Function}
 * 		
 * 		NOTE: 
 * 			- {Function} is NOT [comparable]
 * 			- undefined is NOT [comparable]
 * 
 * 
 * @param [comparable] key, the key
 * 
 * @param [comparable] value, the value
 * 
 * @throws {Object} e, MapEntry.EXCEPTION[.?]
 * 
 * 		
 * 		- MapEntry.EXCEPTION.ARGS[0]
 * 
 * 			e = {
 * 				e: 'MapEntry.EXCEPTION.ARGS[0]',
 * 				description: 'KEY IS NOT COMPARABLE',
 * 				args: arguments
 * 			};
 * 
 * 		- MapEntry.EXCEPTION.ARGS[1]
 * 
 * 			e = {
 * 				e: 'MapEntry.EXCEPTION.ARGS[1]',
 * 				description: 'VALUE IS NOT COMPARABLE',
 * 				args: arguments
 * 			};
 * 
 */
Pulse.MapEntry = function(key, value) {
	if (false === this.isComparable(arguments[0])) {
		throw({
			e: 'MapEntry.EXCEPTION.ARGS[0]',
			description: 'ARGS[0] IS NOT COMPARABLE',
			args: arguments
		});
	}
	if (false === this.isComparable(arguments[1])) {
		throw({
			e: 'MapEntry.EXCEPTION.ARGS[1]',
			description: 'ARGS[1] IS NOT COMPARABLE',
			args: arguments
		});
	}
	this.key = arguments[0];
	this.value = arguments[1];
};
/**
 * @[comparable]
 */
Pulse.MapEntry.prototype = {
	
	type: 'MapEntry',
	
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,
	
	/**
	 * @return the key
	 */
	getKey: function() {
		return this.key;
	},
	
	/**
	 * @return the value
	 */
	getValue: function() {
		return this.value;
	},
	
	/**
	 * NOT IMPLEMTED
	 */
	hashCode: function() {
		throw({e:'NOT IMPLEMTED'});
	},
	
	/**
	 * @param [comparable] value
	 * @throws {Object} e, MapEntry.EXCEPTION.ARGS[0]
	 */
	setValue: function(value) {
		if (false === this.isComparable(arguments[0])) {
			throw({
				e:'MapEntry.EXCEPTION.ARGS[0]',
				description:'ARGS[0] IS NOT COMPARABLE',
				args:arguments
			});
		}
		this.value = arguments[0];
	},
	
	/**
	 * Compares the specified object with this entry for equality (by toString).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 */
	equals: function(o) {
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null && arguments[0].type == this.type) {
			return (arguments[0] == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance 
	 * 		
	 * 		s = "[{type}@key,value]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + this.key + ',' + this.value + ']';
	},
	
	// @ private 
	isComparable: function(o) {
		// undefined
		if (typeof(arguments[0]) == 'undefined' || typeof(arguments[0]) == 'function') {
			return false;
		}
		// object
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null 
			&& true !== arguments[0].implementsComparable) {
			return false;
		}
		// primitives or null
		return true;
	}
};

/**
 * utility class: Pulse.HashMap
 * 
 * 		tries to be as close as possible to java.util.HashMap
 * 
 * @param {Object} keyValueMapping, 
 * 		@see this.putAll(keyValueMapping) for description of mapping
 * 
 * @throws {Object} e, MapEntry.EXCEPTION[.?]
 * 		on errors in keyValueMapping
 * 
 */
Pulse.HashMap = function(keyValueMapping) {
	
	this.id = Pulse.id();
	this.entries = new Pulse.HashSet();
	
	if (arguments[0]) {
		this.putAll(arguments[0]);
	}

};
/**
 * @[comparable]
 */
Pulse.HashMap.prototype = {
	
	type: 'HashMap',
	
	DBG: true,
	
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,

	
	/**
	 * adds a key/value-mapping to the entry-set of this HashMap.
	 * 
	 * NOTE:
	 * 		converts key {Number} -> {String}
	 * 		for internal storage
	 * 
	 * 		which means:
	 * 
	 * 		put('1',...) 	overrides value @ internal.key = '1'
	 * 		put(1,...) 		overrides value @ internal.key = '1'
	 * 
	 * 		get('1') 		returns value 	@ internal.key = '1'
	 * 		get(1) 			returns value 	@ internal.key = '1'
	 * 
	 * @param [comparable] key
	 * 
	 * @param [comparable] value
	 * 
	 * @see Pulse.MapEntry for description of [comparable]
	 * 
	 * @throws {Object} e, MapEntry.EXCEPTION[.?]
	 *
	 */
	put: function(key, value) {
		
			//
			//
			// convert key {Number} -> {String}
			// for internal storage
			if (typeof(arguments[0]) == 'number') {				
				internalKey = '' + arguments[0];
			} else {				
				internalKey = arguments[0];
			}
			// remove above to not converts key {Number} -> {String}
			// & 
			// uncomment line below:
			//
			// if (false === this.containsKey(arguments[0])) {
			//
			
			// add new or replace existing
			if (false === this.containsKey(internalKey)) {
				// add new entry
				this.entries.add(new Pulse.MapEntry(arguments[0], arguments[1]));
			} else {
				// replace value
				iterator = this.entries.iterator();
				while (iterator.hasNext()) {
					o = iterator.next();
					if (internalKey == o.getKey()) {
						o.setValue(arguments[1]);
						break;
					}
				}
				delete o;
				delete iterator;
			}			
			
			return true;
		
	},
	
	/**
	 * @return {Object} Array of values
	 */
	values: function() {
		values = [];
		if (this.isEmpty()) {
			return values;
		}
		iterator = this.entries.iterator();
		while (iterator.hasNext()) {
			values.push(iterator.next().value);
		}
		delete iterator;
		return values;
	},
	
	/**
	 * @return {Object} Array of keys
	 */
	keySet: function() {
		keys = [];
		if (this.isEmpty()) {
			return keys;
		}
		iterator = this.entries.iterator();
		while (iterator.hasNext()) {
			keys.push(iterator.next().key);
		}
		delete iterator;
		return keys;
	},
	
	/**
	 * @return {Number} length of keys
	 */
	size: function() {
		return this.entries.length;
	},
	
	/**
	 * @return {Boolean} true, if a mapped value for the passed key exists 		   
	 */
	containsKey: function(key) {
		
		if (false === this.isEmpty() && this.isComparable(arguments[0])) {

			iterator = this.entries.iterator();
			while (iterator.hasNext()) {
				o = iterator.next();
				if (this.compare(arguments[0], o)) {					
					delete o;
					delete iterator;
					return true;
				}
			}
			delete o;
			delete iterator;
		}
		
		return false;
	},
	
	/**
	 * @return {Boolean}
	 * 		true, if this map maps one or more keys to the specified value
	 * 		false, otherwise
	 */
	containsValue: function(value) {
		
		if (false == this.isEmpty() && this.isComparable(arguments[0])) {	
				
			iterator = this.entries.iterator();
			while (iterator.hasNext()) {
				o = iterator.next();
				if (typeof(o.value) == 'object' && o.value !== null) {
					if (true === o.value.equals(arguments[0])) {
						delete o;
						delete iterator;
						return true;
					}
				} else  {
					if (o.value == arguments[0]) {
						delete o;
						delete iterator;
						return true;
					}
				}
			}
			delete o;
			delete iterator;
			
		}
		
		return false;
	},
	
	/**
	 * returns the entries.
	 * 
	 * @return {Object} HashSet of Pulse.MapEntry
	 */
	entrySet: function() {
		return this.entries;
	},
	
	/**
	 * Not implemented.
	 * 
	 * @throws e, {Object} e, e.e = HashMap.EXCEPTION[.?]
	 * 		
	 * 		- HashMap.EXCEPTION, always
	 * 
	 * 			e = {
	 * 				e: 'HashMap.EXCEPTION',
	 * 				description: 'NOT IMPLEMTED'
	 * 			}
	 */
	hashCode: function() {
		throw({e:'HashMap.EXCEPTION',description:'NOT IMPLEMTED'});
	},
	
	/**
	 * NOTE:
	 * 		on exceptions this method aborts
	 * 		all values already processed remain intact in the HashMap
	 * 
	 * @param {Object} keyValueMapping
	 * 		Array of [ [k, v], [k, v], ...]
	 * 
	 * 		with k = [comaparable]
	 * 		with v = [comaparable]
	 * 
	 * @see Pulse.MapEntry for [comaparable] specification
	 * 
	 * @throws {Object} e, MapEntry.EXCEPTION[.?] 
	 * 		with: 		
	 * 		e.index = {Number} current keyValueMapping[i] 
	 * 		
	 * 		
	 */
	putAll: function(keyValueMapping) {
		
		for (var i = 0; i < arguments[0].length; i++) {
			try {
				this.put(arguments[0][i][0],arguments[0][i][1]);
			} catch (e) {
				if (typeof(e) == 'object' && e !== null) {
					e.index = i;
				}
				throw(e);
			}
		}
		
	},
	
	/**
	 * @return [comaparable]
	 * 		the removed value for the given key, undefined otherwise
	 */
	remove: function(key) {		
		iterator = this.entries.iterator();
		while (iterator.hasNext()) {
			entry = iterator.next();
			if (entry.key == key) {				
				this.entries.remove(entry);
				value = entry.value;
				delete entry;
				delete iterator;
				return value;
			}
		}
		delete entry;
		delete iterator;
	},
	
	/**
	 * @return [comaparable] value, by key
	 * 		or undefined if key does not exist
	 */			
	get: function(key) {
		if (false == this.isEmpty() && this.isComparable(arguments[0])) {	
				
			iterator = this.entries.iterator();
			while (iterator.hasNext()) {
				o = iterator.next();
				if (typeof(o.key) == 'object' && o.key !== null) {
					if (true === o.key.equals(arguments[0])) {
						delete iterator;
						return o.value;
					}
				} else  {
					if (o.key == arguments[0]) {
						delete iterator;
						return o.value;
					}
				}
				delete o;
			}
			delete iterator;
			
		}
	},
	
	/**
	 * removes all key/value mappings from this map.
	 */ 
	clear: function() {
		this.entries.clear();
	},
	
	/**
	 * @return {Boolean} entries.isEmpty()
	 */
	isEmpty: function() {
		return this.entries.isEmpty();
	},
	
	/**
	 * @return {Pulse.HashMap} HashMap,
	 * 		a shallow copy of this HashMap instance: 
	 * 		the keys and values themselves are not cloned.
	 */
	clone: function() {
		m = new Pulse.HashMap();
		m.entries = this.entries;
		return m;
	},
	
	/**
	 * Compares the specified object with this entry for equality (by toString).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 */
	equals: function(o) {
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null && arguments[0].type == this.type) {
			return (arguments[0] == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance 
	 * 		s = "[{type}@id::size]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + this.id + '::' + this.size() + ']';
	},
	
	//
	// @ private
	// compares a given key and a given MapEntry
	// 
	compare: function(key, mapEntry) {
		
		if (typeof(arguments[1].key) == 'object' && arguments[1].key !== null) {
			return arguments[1].key.equals(arguments[0]);
		} else {
			return (arguments[1].key == arguments[0]);
		}

	},
	
	// @ private 
	isComparable: function(o) {
		// undefined
		if (typeof(arguments[0]) == 'undefined' || typeof(arguments[0]) == 'function') {
			return false;
		}
		// object
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null 
			&& true !== arguments[0].implementsComparable) {
			return false;
		}
		// primitives or null
		return true;
	}
	
}; // END :: Pulse.HashMap


/**
 * @throws {Object} e, SetValue.EXCEPTION[.?]
 * 					
 * 		- SetValue.EXCEPTION.ARGS[0]
 * 
 * 			e = {
 * 				e: 'SetValue.EXCEPTION.ARGS[0]',
 * 				args: arguments
 * 			};
 * 
 * 		- SetValue.EXCEPTION.ARGS[1]
 * 
 * 			e = {
 * 				e: 'SetValue.EXCEPTION.ARGS[1]',
 * 				description: 'ARGS[1] IS NOT COMPARABLE',
 * 				value: value
 * 			};
 */
Pulse.SetValue = function(length,o) {
	
	if (typeof(arguments[0]) != 'number') {
		throw({e: 'SetValue.EXCEPTION.ARGS[0]',args:arguments});
	}
	
	if (false === this.isComparable(arguments[1])) {
		throw({
			e: 'SetValue.EXCEPTION.ARGS[1]',
			description: 'ARGS[1] IS NOT COMPARABLE',
			args: arguments
		});
	}
	
	this.height = 0;
	this.o = (typeof(arguments[1]) == 'object' && arguments[1] !== null) ? '' + arguments[1]: arguments[1];
	this.id = arguments[0];
};
/**
 * 
 * 		TODO: 	implement node-balancing in add-method
 * 				for find optimization
 * 
 * 
 * @[comparable]
 */
Pulse.SetValue.prototype = {
	
	type: 'SetValue',
	
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,
	
	/**
	 * @ private: to be used by HashSet
	 */
	add: function(val) {
		if (arguments[0]) {
			if (this.equals(arguments[0])) {
				return false;
			}		
			if (this.compareTo(arguments[0])) {
				if (this.left) {
					return this.left.add(arguments[0]);
				} else {
					arguments[0].parent = this;
					this.left = arguments[0];
//					if (0 !== this.height) {
//						return true;
//					} else {
//						this.height = 1;
						if (this.parent) {
							return this.parent.balance();
						} else {
							return true;
						}
//					}
//					if (this.parent && typeof(this.height) == 'undefined') {
//						this.height = 1;
//						if (this.parent && this.parent.addHeight(1)) {
//							return true;			
//						}
//					}
//					return true;
				}
			} else if (this.right) {
				return this.right.add(arguments[0]);
			} else {
				arguments[0].parent = this;
				this.right = arguments[0];
//				if (this.height) {
//					return true;
//				} else {
//					this.height = 1;
					if (this.parent) {
						return this.parent.balance();
					} else {
						return true;
					}
//				}
//				if (this.parent && typeof(this.height) == 'undefined') {
//					this.height = 1;
//					if (this.parent && this.parent.addHeight(1)) {
//						return true;			
//					}					
//				}
//				return true;
			}		
		}
		return false;
		// TODO: node-balancing
	},
	
	/**
	 * 
	 */
	balance: function() {
		alert('balance: ' + this);
		if (this.left) {
			alert(1 + ':' + this.left.getHeight(1));
			if (this.right) {
				alert(1.1 + ':' + this.right.getHeight(1));
				c = this.left.getHeight(1) - this.right.getHeight(1);
				if (c > 1) {
					alert(1.11);
					delete c;
					return this.rotateRight();
				} else if (c < -1) {
					alert(1.12);
					delete c;
					return this.rotateLeft();
				} else {
					alert(1.13);
					delete c;
					return true;
				}				
			}
			alert(1.2);
			if (this.left.getHeight(1) > 1) {
				alert(1.21);
				return this.rotateRight();
			}
		} else if (this.right) {
			alert(2 + ':' + this.right.getHeight(1));
			if (this.right.getHeight(1) > 1) {
				alert(2.1);
				return this.rotateLeft();
			}
		}
		return true;
	},
	
	/**
	 * 
	 */
	rotateLeft: function() {
		alert('rotateLeft: ' + this);
		p = this.right;
		if (this.right.left) {
			this.right.left.parent = this;
			this.right = this.right.left;
		}
		if (this.parent) {
			if (this.compareTo(this.parent)) {
				p.parent = this.parent;
				this.parent.right = p;
			} else {
				p.parent = this.parent;
				this.parent.left = p;
			}
			return true;
		} else {
			delete p.parent;
			return true;
		}
		return false;
	},
	
	/**
	 * 
	 */
	rotateRight: function() {
		alert('rotateRight: ' + this);
		p = this.left;
		if (this.left.right) {
			this.left.right.parent = this;
			this.left = this.left.right;
		}
		if (this.parent) {
			if (this.compareTo(this.parent)) {
				p.parent = this.parent;
				this.parent.right = p;
			} else {
				p.parent = this.parent;
				this.parent.left = p;
			}
			return true;
		} else {
			delete p.parent;
			return p;
		}
		return false;
	},
	
	/**
	 * 
	 */
	getHeight: function () {
		if (this.left) {
			if (this.right) {
				l = this.left.getHeight(arguments[0]+1);
				r = this.right.getHeight(arguments[0]+1);
				if (l > r) {
					delete l;
					return r;
				} else {
					delete r;
					return l;
				}
			} else {
				return this.left.getHeight(arguments[0]+1);
			}
		} else if (this.right) {
			return this.right.getHeight(arguments[0]+1);
		} else {		
			if (arguments[0]) {
				return arguments[0];
			} else {
				return 0;
			}
		}
	},
	
	

//	/**
//	 * @ private: to be used by HashSet
//	 */
//	remove: function(val) {
//		if (arguments[0] && (this.right == arguments[0])) {
//			if (arguments[0].right) {
//				arguments[0].right.parent = this;
//				this.right = arguments[0].right;
//				if (arguments[0].left) {
//					return this.add(arguments[0].left);
//				}
//			} else if (arguments[0].left) {
//				arguments[0].left.parent = this;
//				this.right = arguments[0].left;
//			}
//			return true;
//		} else if (arguments[0] && (this.left == arguments[0])) {
//			if (arguments[0].right) {
//				arguments[0].right.parent = this;
//				this.left = arguments[0].right;
//				if (arguments[0].left) {
//					return this.add(arguments[0].left);
//				}
//			} else if (arguments[0].left) {
//				arguments[0].left.parent = this;
//				this.left = arguments[0].left;
//			}
//			return true;
//		}
//		return false;
//	},
	
	/**
	 * @ private: to be used by HashSet
	 */
	find: function(o) {
		
		c = (typeof(arguments[0]) == 'object' && arguments[0] !== null) ? '' + arguments[0]: arguments[0];		
		if (this.compareTo(c)) {
			if (this.left) {
				delete c;
				return this.left.find(arguments[0]);
			}
		} else {
			if (this.o === c) {
				delete c;
				return this.id;
			} else if (this.right) {
				delete c;
				return this.right.find(arguments[0]);
			}
		}
		delete c;
		return -1;
		
	},
	
	/**
	 * Compares the specified object with this entry for equality (by toString).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 */
	equals: function(o) {
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null && arguments[0].type == this.type) {
			return (arguments[0] == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance 
	 * 		
	 * 		s = "[{type}@o]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + typeof(this.o) + ',' + this.o + ']';
	},
	
	/**
	 * @ private: to be used by HashSet
	 */
	destroy: function() {
		if (this.left) {
			this.left.destroy();
		} else if (this.right) {
			this.right.destroy();
		} else if (this.parent) {
			this.parent.pRemove(this);
		}
	},
	
	// @ private
	isComparable: function(o) {
		// undefined
		if (typeof(arguments[0]) == 'undefined' || typeof(arguments[0]) == 'function') {
			return false;
		}
		// object
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null 
			&& true !== arguments[0].implementsComparable) {
			return false;
		}
		// primitives or null
		return true;
	},
	
	// @ private
	compareTo: function(o) {
		if (arguments[0] && arguments[0].o) {
			return (this.o > arguments[0].o);
		}
		return false;
	},
	
	// @private for destroy
	pRemove: function(o) {
		if (arguments[0].id == this.right.id) {
			delete this.right;
		} else {
			delete this.left;
		}
	}
};
/**
 * utility-class for removal ("fifo")
 */
Pulse.SetStack = function() {
	this.id = Pulse.id();
	this.start = 0;
	this.end = 0;
	this.length = 0;
};
/**
 * @throws {Object} e, SetStack.EXCEPTION[.?]
 * 
 * 		e = {
 * 			e: 'SetStack.EXCEPTION',
 * 			description: 'STACK EMPTY',
 * 			start: start,
 * 			start: end,
 * 			length: length
 * 		}
 * 
 */
Pulse.SetStack.prototype = {
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,
	type: 'SetStack',
	remove:function(){		
		if (this.length !== (this.end - this.start)) {
			throw({e:'SetStack.EXCEPTION',description:'STACK ERROR',start:this.start,end:this.end,length:this.length});
		}
		this.length -= 1;
		v = this[this.start];
		delete this[this.start];
		this.start += 1;
		return v;

	},
	add:function(o){
		if (arguments[0]) {
			this.length += 1;
			this.end += 1;
			this[this.length] = arguments[0];
		}
	},
	
	/**
	 * Compares the specified object with this entry for equality (by toString).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 */
	equals: function(o) {
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null && arguments[0].type == this.type) {
			return (arguments[0] == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance 
	 * 		
	 * 		s = "[{type}@o]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + this.id + ']';
	}
	
};


/**
 * @param {Object} o
 * 
 * @throws {Object} e, SetValue.EXCEPTION[.?]
 */
Pulse.HashSet = function(o) {
	this.length = 0;
	this.id = Pulse.id();
	if (arguments[0]) {
		this.addAll(arguments[0]);
	}
	// @ private inner store-class for removal
	this.setstack = new Pulse.SetStack();
	// @ private flat setvalue storage-object
	this.setvalues = {};
};
/**
 * @[comparable]
 */
Pulse.HashSet.prototype = {
	
	type: 'HashSet',
	
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,
	
	/**
	 * @throws {Object} e, SetValue.EXCEPTION[.?]
	 */
	add: function(o) {
		if (this.rootvalue) {
			value = new Pulse.SetValue(this.length,arguments[0]);
			if (true === this.rootvalue.add(value)) {
				this[this.length] = arguments[0];
				this.setvalues[this.length] = value;
				this.length += 1;
				while (this.rootvalue.parent) {
					this.rootvalue = this.rootvalue.parent;
				}
				return true;
			} else {
				delete value;
			}
		} else {
			this.rootvalue = new Pulse.SetValue(this.length,arguments[0]);
			this.setvalues[this.length] = this.rootvalue;
			this[this.length] = arguments[0];
			this.length += 1;
			return true;
		}
		
		return false;
	},
	
	/**
	 * 
	 */
	clear: function() {
		delete this.wait;
		delete this;
		delete this.setstack;
		this.length = 0;
		this.setstack = new Pulse.SetStack();
		if (this.rootvalue) {
			this.rootvalue.destroy();
			delete this.rootvalue;
		}
	},
	
	/**
	 * Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.
	 * 
	 * @return {HashSet} s
	 */
	clone: function() {
		s = new Pulse.HashSet();
		s.length = this.length;
		s.values = this;
		s.rootvalue = this.rootvalue;
		return s;
	},
	
	
	/**
	 * @return {Number} values.index
	 * 		or
	 * 		{Number} -1 if the set does not contain the specified o
	 */
	contains: function(o) {
		if (this.isComparable(arguments[0]) && this.rootvalue) {
			return this.rootvalue.find(arguments[0]);			
		}
		return -1;
	},
	
	/**
	 * @return {Object} Pulse.SimpleIterator
	 * 
	 * @throws {Object} e, SimpleIterator.EXCEPTION[.?]
	 */
	iterator: function() {
		return new Pulse.SimpleIterator(this);
	},
	
	/**
	 * @return {Boolean}
	 */
	isEmpty: function() {
		return (0 === this.length);
	},
	
	/**
	 * 
	 */
	remove: function(o) {
		
		
		
//		try {
		
		if (this.isComparable(arguments[0]) && this.rootvalue) {		
			
			if (-1 !== this.rootvalue.find(arguments[0])) {
				
				if (true === this.wait) {
					this.setstack.add(o);
					return;
				}				
				this.wait = true;
				
				pos = this.rootvalue.find(arguments[0]);
				
				if (this[pos].parent) {
					if (this[pos].right) {
						if (this[pos] > this[pos].parent) {						
							this[pos].right.parent = this[pos].parent;
							this[pos].parent.right = this[pos].right;						
							if (this[pos].left) {
								if (true === this[pos].parent.add(this[pos].left)) {
									// remove delete-value
									v = this[pos];
									delete this[pos];			
									// adjust length
									this.length -= 1;			
									delete this.wait;
									if (0 !== this.setstack.length) {
										return this.remove(this.setstack.remove());
									}
									return v;
								}
							} 
						} else {						
							this[pos].right.parent = this[pos].parent;
							this[pos].parent.left = this[pos].right;
							this[pos].parent.add(this[pos].left);
						}
					} else if (this[pos].left) {
						if (this[pos] > this[pos].parent) {
							this[pos].left.parent = this[pos].parent;
							this[pos].parent.right = this[pos].left;
						} else {
							this[pos].left.parent = this[pos].parent;
							this[pos].parent.left = this[pos].left;
						}
					} else {
						if (this[pos] > this[pos].parent) {
							delete this[pos].parent.right;
						} else {
							delete this[pos].parent.left;
						}
					}
								
				} else {

					if (this[pos].right) {
						if (this[pos].left) {
							if (true === this[pos].right.add(this[pos].left)) {
								this.rootvalue = this[pos].right;
							}
						} else {								
							this.rootvalue = this[pos].right;
						}
					} else if (this[pos].left) {
						this.rootvalue = this[pos].left;
					} else {
						delete this.rootvalue;
					}
					
				}
				
				if (this.rootvalue) {
					delete this.rootvalue.parent;
				}
				
				// adjust length
				this.length -= 1;
				
				// remove delete-entry
				v = this[pos].value;
				delete this[pos];
				delete this.wait;
				if (0 !== this.setstack.length) {
					return this.remove(this.setstack.remove());
				}
				return v;
	
			
			}		
		}
		
		delete this.wait;
		if (0 !== this.setstack.length) {
			this.remove(this.setstack.remove());
		}
		
//		return false;
		
//		} catch (e) {
//			FATAL(e,this,'remove');
//		}
	},
	
	/**
	 * @return {Number} length
	 */
	size: function() {
		return this.length;
	},
	
	/**
	 * Not implemented.
	 * 
	 * @throws e, {Object} e, e.e = HashMap.EXCEPTION[.?]
	 * 		
	 * 		- HashMap.EXCEPTION, always
	 * 
	 * 			e = {
	 * 				e: 'HashMap.EXCEPTION',
	 * 				description: 'NOT IMPLEMTED'
	 * 			}
	 */
	hashCode: function() {
		throw({e:'HashMap.EXCEPTION',description:'NOT IMPLEMTED'});
	},
	
	/**
	 * @return {Boolean}
	 * 		true, if this collection changed as a result of the call
	 * @throws {Object} e, SimpleIterator.EXCEPTION[.?]
	 */
	removeAll: function(o) {
		
		iterator = new Pulse.SimpleIterator(arguments[0]);
		if (iterator.hasNext()) {
			while (iterator.hasNext()) {
				this.remove(iterator.next());
			}			
			delete iterator;
			return true;
		}
		delete iterator;
		return false;
	},
	
	/**
	 * @return {Boolean}
	 * 		true, if this collection changed as a result of the call
	 * 
	 * @throws {Object} e, SetValue.EXCEPTION[.?]
	 * @throws {Object} e, SimpleIterator.EXCEPTION[.?]
	 */
	addAll: function(o) {
		
		iterator = new Pulse.SimpleIterator(arguments[0]);
		if (iterator.hasNext()) {
			while (iterator.hasNext()) {
				this.add(iterator.next());
			}			
			delete iterator;
			return true;
		}
		delete iterator;
		return false;
		
	},
	
	/**
	 * @return {Boolean}
	 * 		true, if this collection contains all of the elements in the specified collection 
	 * 		false, otherwise
	 * 
	 * @throws {Object} e, SimpleIterator.EXCEPTION[.?]
	 */
	containsAll: function(o) {
		
		iterator = new Pulse.SimpleIterator(arguments[0]);
		while (iterator.hasNext()) {
			pos = this.rootvalue.find(iterator.next());
			if (-1 === pos) {
				delete iterator;
				return false;
			}
		}
		delete iterator;
		return true;
		
	},
	
	/**
	 * @return {Boolean}
	 */
	retainAll: function(o) {
		THROW({e:'TODO',o:arguments[0]},this,'retainAll');
		return false;
	},
	
	/**
	 * @return {Object} Array
	 */
	toArray: function() {
		a = [];
		j = 0;
		for (i in this) {
			if (('' + parseInt('' + i, 10)) != 'NaN') {
				a[j] = this[i].o;
				j += 1;
			}
		}
		delete j;
		return a;
	},
	
	/**
	 * Compares the specified object with this entry for equality (by key & value).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 */
	equals: function(o) {
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null && arguments[0].type == this.type) {
			return (arguments[0] == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance 
	 * 		
	 * 		s = "[{type}@id::size]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + this.id + '::' + this.size() + ']';
	},
	
	// @ private
	isComparable: function(o) {
		// undefined
		if (typeof(arguments[0]) == 'undefined' || typeof(arguments[0]) == 'function') {
			return false;
		}
		// object
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null 
			&& true !== arguments[0].implementsComparable) {
			return false;
		}
		// primitives or null
		return true;
	}
	
}; // END :: Pulse.HashSet
/**
 * @throws {Object} e, Iterator.EXCEPTION[.?]
 * 
 * 		e = {
 * 			e: 'Iterator.EXCEPTION',
 * 			o: o
 * 		}
 */
Pulse.Iterator = function(o) {
	this.id = Pulse.id();
	this.index = 0;
	this.end = 0;
	this.length = 0;
	if (arguments[0]) {
		if (typeof(arguments[0]) == 'object' && arguments[0] != null) {			
			
			/*
				if (typeof(arguments[0].length) == 'number') {
					this.length = arguments[0].length;
					this.o = arguments[0];
				}
			*/
			
			// filters undefined, adds only if o.i === 'number'
			for (i in arguments[0]) {
				if (('' + parseInt('' + i, 10)) != 'NaN') {
					if (typeof(arguments[0][i]) != 'undefined') {
						this[this.length] = arguments[0][i];
						this.length += 1;
						this.end += 1;					
					}
				}
			}
			return;
		}
	}
	throw({e:'Iterator.EXCEPTION',o:o});

};
/**
 * @[comparable]
 */
Pulse.Iterator.prototype = {
	
	type: 'Iterator',
	
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,
	
	/**
	 * 
	 */
	hasNext: function() {
		return (this.index < this.end);
	},
	
	/**
	 * 
	 */
	next: function() {
		this.index += 1;
		return this[this.index - 1];
	},
	
	/**
	 * 
	 */
	remove: function() {
		if (this.index > 0) {
			this.length -= 1;
			delete this[this.index - 1];
		}		
	},
	
	/**
	 * Compares the specified object with this entry for equality (toString).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 */
	equals: function(o) {
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null && arguments[0].type == this.type) {
			return (arguments[0] == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance 
	 * 		
	 * 		s = "[{type}@id::size]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + this.id + '::' + this.length + '.' + this.index + '.' + this.end + ']';
	}
}; // END :: Pulse.Iterator

/**
 * @throws {Object} e, SimpleIterator.EXCEPTION[.?]
 * 
 * 		e = {
 * 			e: 'SimpleIterator.EXCEPTION',
 * 			o: o
 * 		}
 */
Pulse.SimpleIterator = function(o) {
	this.id = Pulse.id();
	this.index = 0;
	this.length = 0;
	if (arguments[0]) {
		if (typeof(arguments[0]) == 'object' && arguments[0] != null) {			
			if (typeof(arguments[0].length) == 'number') {
				this.length = arguments[0].length;
				this.o = arguments[0];
				return;
			}
		}
	}
	throw({e:'SimpleIterator.EXCEPTION',o:o});

};
/**
 * @[comparable]
 * 
 * remove unsupported
 */
Pulse.SimpleIterator.prototype = {
	
	type: 'SimpleIterator',
	
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,
	
	/**
	 * 
	 */
	hasNext: function() {
		if (typeof(this.o[this.index]) != 'undefined') {
			return true;
		} else {
			this.index += 1;
			if (this.index < this.length) {
				return this.hasNext();
			}
		}

	},
	
	/**
	 * 
	 */
	next: function() {
		this.index += 1;
		// skips undefined
		if (typeof(this.o[this.index - 1]) != 'undefined') {
			return this.o[this.index - 1];
		} else {
			if (this.index < this.length) {
		 		return this.next();
			}
		} 
	},
	
	/**
	 * @throws {Object} e, SimpleIterator.EXCEPTION[.?]
	 *
	 * 		e = {
 	 * 			e: 'SimpleIterator.EXCEPTION',
 	 * 			description: 'unsupported'
 	 * 		}
	 */
	remove: function() {
		 throw({e:'SimpleIterator.EXCEPTION',description:'unsupported'}); 
	},
	
	/**
	 * Compares the specified object with this entry for equality (toString).
	 * 
	 * @param [anything] o
	 * 
	 * @return {Boolean} 
	 * 		true, if the passed object is equal to this
	 * 		false, otherwise
	 */
	equals: function(o) {
		if (typeof(arguments[0]) == 'object' && arguments[0] !== null && arguments[0].type == this.type) {
			return (arguments[0] == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance 
	 * 		
	 * 		s = "[{type}@id::size]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + this.id + '::' + this.length + '.' + this.index + ']';
	}
}; // END :: Pulse.SimpleIterator

Pulse.ObjectSorter = function() {
	this.length = 0;
};
Pulse.ObjectSorter.prototype = {
	add: function(o) {
		
	},
	remove: function() {
		
	},
	find: function() {
		
	}
};




/**
 * 
 */
DBG.ImageGroupEditor = DBG.apply(DBG.Editor,{
//	initComponent: { ImageGroupEditor: false },
	getButtons: { ImageGroupEditor: false },
	renameImageGroup: { click: false, call: false },
	removeImageGroup: { click: false, call: false },
	setAsMainImage: { click: false }
});
/**
 * 
 */
ImageGroupEditor = {
	
	type: 'ImageGroupEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ImageGroupEditor*/,
	
	/**
	 * 
	 */
	getRenameButtonConfig: function(boolDisabled) {
		
		renameButtonConfig = {
	        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RENAME,
	        scope: this,
	        disabled: (typeof(this.renameURL) == 'string' && this.renameURL !== '') ? false : true,
	        handler: function() {
	        	
	        	// DBG >>
	        	if (this.DBG) {
	        		THROW({args:arguments},this,'renameImageGroup.click');
	        	}
	        	
	        	this.renameImageGroup();
	        },
	        iconCls: 'editIconCls'
	    };
	    
	    return renameButtonConfig;
    },
    
    /**
     * 
     */
    getRemoveButtonConfig: function(boolDisabled) {
		
		removeButtonConfig = {
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
	        scope: this,
	        disabled: (typeof(this.removeURL) == 'string' && this.removeURL !== '') ? false : true,
	        handler: function() {
	        	
	        	// DBG >>
	        	if (this.DBG) {
	        		THROW({args:arguments},this,'removeImageGroup.click');
	        	}
	        	
	        	this.removeImageGroup();
	        },
	        iconCls: 'deleteIconCls'
		};
		
		return removeButtonConfig;
    },
	
	/**
	 * 
	 */
	getButtons: function() {
		
		// DBG >>
		if (this.DBG) {	
			THROW({
				args:arguments,
				props:['renameURL','removeURL']
			},this,'getButtons.ImageGroupEditor');
		}

		this.renameButtonConfig = this.getRenameButtonConfig();		
		this.removeButtonConfig = this.getRemoveButtonConfig();
		
		return [
			new Ext.Toolbar.Button(this.renameButtonConfig),new Ext.Toolbar.Separator(),
			new Ext.Toolbar.Button(this.removeButtonConfig),new Ext.Toolbar.Separator()
		];
	},
	
	/**
	 * 
	 */
	 removeImageGroup: function() {
	 	
	 	// DBG >>
    	if (this.DBG) {
    		THROW({args:arguments,props:['imagegroup','imagegroup.id','imagegroup.name']},this,'removeImageGroup.call');
    	}
    	
    	// confirm delete
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' 
			+ this.imageGroup.name + ' (' + this.imageGroup.id + ')"',
			VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
    				params = { contentid: this.getContent().id, imagegroupid: this.imageGroup.id };
                    Ext.Ajax.request({
                    	url: this.removeURL,
                    	scope: this,
                    	method: 'POST',
                    	success: function(response, options) {
                    		decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								
								// THROW({e:'TODO',props:['imagegroup','imagegroup.id','imagegroup.name']},this,'removeImageGroup.success');
								
								// destroy container-editor
								this.masterEditor.destroyEditor(this,true);
								
								this.fireEvent('MSG','deletesuccess',this);
							
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'removeImageGroup');
							}
                    	},
                    	failure: function(response, options) {
                    		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'removeImageGroup');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'removeImageGroup');
					        }
                    	},
                    	params: params
                    });

    			}
			},
		this);
    	
    },
	
	/**
	 * 
	 */
	 renameImageGroup: function() {
	 	
	 	// DBG >>
    	if (this.DBG) {
    		THROW({args:arguments,props:['imagegroup','imagegroup.id','imagegroup.name']},this,'renameImageGroup.call');
    	}
    	
	 	Ext.Msg.prompt(
    		VIEWPORT_PROPERTIES.NAME, 
    		VIEWPORT_PROPERTIES.TEXT_ENTER_NAME + ':', 
    		function(btn, text) {
			    if (btn === 'ok'){
			    	if (text.trim() === '') {
			    		return;			                	
			    	}
			    	params = { contentid: this.getContent().id, imagegroupid: this.imageGroup.id, name: text.trim() };
                    this.masterEditor.showLoading(true);
                    Ext.Ajax.request({
                    	url: this.renameURL,
                    	scope: this,
                    	method: 'POST',
                    	success: function(response, options) {
                    		this.masterEditor.showLoading();
                    		decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								// rename panel (masterEditor -> SubEditorPanel)
								this.imageGroup.name = options.params.name;
								this.masterEditor.setTitle(options.params.name + ' (id: ' + options.params.imagegroupid + ')');
								this.fireEvent('MSG','savesuccess',this);
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'renameImageGroup');
							}
                    	},
                    	failure: function(response, options) {
                    		this.masterEditor.showLoading();
                    		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'renameImageGroup');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'renameImageGroup');
					        }
                    	},
                    	params: params
                    });
        
			    }
			},this,false,
			this.imageGroup.name
		);
	 },
	
	/**
	 * 
	 */
	editorMSG: function(msgString, editor, masterEditor) {
		
		if ((msgString.toUpperCase() === 'SAVESUCCESS') 
			&& (editor.type == 'ImageEditor')) {
			this.masterEditor.loadPanel();
		}
		
		// call super
		Pulse.SubEditorPanel.superclass.editorMSG.call(this, msgString, editor, masterEditor);		
		
		return;
		
	}
	
//	,
//	
//	/**
//	 * 
//	 */
//	initComponent: function() {
//		
//		try {
//			
//			// call super
//			Pulse.ImageGroupEditor.superclass.initComponent.call(this);
//			
//		} catch(e) {
//			FATAL(e,this,'initComponent.ImageGroupEditor');
//		}
//		
//	}
	
};
Pulse.ImageGroupEditor = Ext.extend(Pulse.Editor,ImageGroupEditor);


/**
 * 
 */
DBG.ImageEditor = DBG.apply(DBG.Editor,{
//	initComponent: { ImageGroupEditor: false },
	setImage: { AJAX: false, call: false }
});
/**
 * 
 */
ImageEditor = {
	
	type: 'ImageEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ImageEditor*/,
	
	/**
	 * 
	 */
	setImage: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['image.id','image.clazz','image.version','image.uri']},this,'setImage.call');
		}
		
		if ((typeof(this.dataURL) != 'string' || this.dataURL === '') 
			|| (typeof(this.previewURL) != 'string' || this.previewURL === '')) {
			return;
		}
		
		fileBrowserCFG = {
			restriction: 'img',
			scope: this,
			applyCallback: 'setImageAJAX',
			id: this.image.id,
			uri: this.image.uri,
			dataURL: this.dataURL,
			previewURL: this.previewURL,
			upload: true,
			uploadProgressURL: this.fileBrowserUploadProgressURL
//			,
//			params: {
//				imagegroupid: this.masterEditor.imageGroup.id,
//				imageVFSid: this.image.id,
//				imageversion: this.image.version
//			} 
		};
		
		FileBrowser.open(fileBrowserCFG);
		
	},
	
	/**
	 * 
	 */
	 setImageAJAX: function(node) {
	 	
	 	// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['image.id','image.clazz','image.version','image.uri']},this,'setImage.AJAX');
		}
		
		if (typeof(this.changeImageURL) != 'string' || this.changeImageURL === '') {
			return;
		}
		
		// build params
		params = {
			contentid: this.getContent().id,
			imagegroupid: this.masterEditor.imageGroup.id,
			vfsid: node.id,
			imageversion: this.image.version
		};
		
		// perform request
		Ext.Ajax.request({
			url: this.changeImageURL,
			scope: this,
			method: 'POST',
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);		   		

		   		if (true === decodedResponse.status) {
					
					// 
					this.fireEvent('MSG','savesuccess',this);

		   		} else {
		   			PulseError.Throw({e:'SERVER.ERROR', o:decodedResponse.error},this,'setImageAJAX');
		   		}
		   		
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
		   			PulseError.Throw({e:'REQUEST.FAILED'},this,'setImageAJAX');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'setImageAJAX');
		        }
			},
			node: node,
			params: params
		});
		
	 }
//	 ,
//	
//	/**
//	 * 
//	 */
//	initComponent: function() {
//		
//		}
//		
//		try {
//			
//			// call super
//			Pulse.ImageEditor.superclass.initComponent.call(this);
//			
//		} catch(e) {
//			FATAL(e,this,'initComponent.ImageEditor');
//		}
//		
//	}
	
};
Pulse.ImageEditor = Ext.extend(Pulse.Editor,ImageEditor);


/**
 * 
 */
Pulse.LocaleSelector = function(config) {
	
	this.type = 'LocaleSelector';
	
	this.id = (typeof(config.id) == 'undefined') ? Ext.id() : config.id;
	
	if (typeof(config.store) == 'undefined') {
		props = DBG.getPropertyArray(config);
		FATAL({args:arguments,props:props},this,'constructor');		
	 }
	
	this.store = config.store;
	
	// add store-listener
	this.store.on({
        'beforeload': {
            fn: function(store, opts) {
                opts.params.locale = this.getLocale();
            },
            scope: this
        }
    });
	
	// build locale-box
	this.box = new Ext.form.ComboBox({
	    store: new Ext.data.SimpleStore({
	        fields: ['locale'],
	        sortInfo: {field: 'locale', direction: "ASC"},
	        data : (typeof(config.data) != 'undefined') ? config.data : VIEWPORT_PROPERTIES.getKnownLocalesForBox()
	    }),	    
	    displayField: 'locale',
	    valueField: 'locale',
	    mode: 'local',
	    triggerAction: 'all',
	    editable: false,
	    width: 120,
	    emptyText: VIEWPORT_PROPERTIES.TEXT_SELECTLOCALE_BOX
	});
	
	// build items
	this.items = [this.box];
	
	// build load-button
	this.loadButton = new Ext.Toolbar.Button({
        tooltip: VIEWPORT_PROPERTIES.BUTTON_TEXT_LOAD,
        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_LOAD,
        iconCls: 'reloadIconCls',
        handler: function() { this.store.reload(); },
        scope: this

    });
    
    // add spacer
    this.items.push('&#160;');
    
    // add button to items
    this.items.push(this.loadButton);    
    
    // the fn() to retrieve this localeSelector's locale
    this.getLocale = function() {
		return this.box.getValue();
	};
	
	// resets the locale-selector
	this.reset = function() {
		this.box.reset();
	};
	
};


/**
 * 
 */
var LocalizationGrid = {
	
	el: null,
	win: null,
	msgPanel: null,
	
	/**
	 * @param {Object} config
	 * 
	 * 		config.id:			grid id;
	 * 		config.renderTo:	id of the element to apply the grid to;
	 * 		config.handleId:	the id of the panel/win to notify of changes;
	 * 							also used to set the grids width ( -> ie);
	 * 		config.handleType:	"panel" or "win";
	 * 		config.url:			grid load url;
	 * 		[config.params]: 	parameters that will be added to each request made by grid;
	 * 
	 * 		config.resizeHels:	[array of ids of elements to measure for height on resize];
	 * 
	 * 		[config.createURL]:	a URL to call on click of new-button;
	 * 							if given, a new-button will be added to the toolbar;
	 * 		[config.removeURL]:	a URL to call on click of delete-button;
	 * 							if config.removeURL given, 
	 * 							a delete-button will be added to each row;
	 * 		[config.moveURL]:	a URL to call on click of move-buttons;
	 * 							if config.moveURL is given, move-buttons will be added to each row;
	 * 		[config.sortable]:	by default false;
	 * 		[config.pageable]:	pageable grid;
	 * 		[config.pagelimit]:	by default 10 if unset;
	 * 		[config.cols]: 		by default two rows; 
	 * 							set config.cols=1 to use only one row;
	 * 
	 */
	getGrid: function(config) {
				
		store = this.buildGridStore(config);
		
		tbar = this.buildGridToolbar(config);
		
		cm = this.buildGridColumnModel(config);
		
		gridConfig = {
			id: config.id,
			store: store,
            cm: cm,
            renderTo: config.renderTo,
            autoExpandColumn: 'id',
            height: 300,
//            width: 200,
            loadMask: true,
            viewConfig: { forceFit: true },
            title: (typeof(config.title) == 'undefined') ? VIEWPORT_PROPERTIES.LOCALIZATIONS : config.title,
            header: (typeof(config.header) == 'undefined') ? true : config.header,
            frame: (typeof(config.frame) != 'boolean') ? true : config.frame,
            style: (typeof(config.style) == 'undefined') ? '' : config.style,
            enableHdMenu: false,
            clicksToEdit: 1,            
            tbar: tbar,
            locGridConfig: config/*,
            bbar: <xsl:value-of select="$editorIdentifier"/>PagingToolBar*/
		};
		
		grid = new Ext.grid.EditorGridPanel(gridConfig);
		
		// grid: resize
        // w
        grid.setWidth(Ext.getCmp(config.handleId).getInnerWidth() - 12);
        // h
        maxHeight = Ext.getCmp(config.handleId).getInnerHeight() - 13;
        if (typeof(config.resizeHels) != 'undefined') {
	        for (i = 0; i < config.resizeHels.length; i++) {
	        	maxHeight = maxHeight - Ext.get(config.resizeHels[i]).getBox().height;
	        }
        }
        tabMsgPanel = Ext.getCmp(config.handleId + '.msgPanel');        
        if (true !== tabMsgPanel.hidden) {
        	maxHeight = maxHeight - tabMsgPanel.getSize().height;        	
        }
        grid.setHeight(maxHeight);
        
        // config.handleId: listeners for grid: resize              
        Ext.getCmp(config.handleId).on({
            'resize': {
                fn: function(panel, adjWidth, adjHeight, rawWidth, rawHeight) {
                	grid = Ext.getCmp(config.id);
                    // w
			        grid.setWidth(panel.getInnerWidth() - 12);
			        // h
			        maxHeight = Ext.getCmp(config.handleId).getInnerHeight() - 13;
			        if (typeof(config.resizeHels) != 'undefined') {
				        for (i = 0; i < config.resizeHels.length; i++) {
				        	if (typeof(Ext.get(config.resizeHels[i])) != 'undefined') {
				        		maxHeight = maxHeight - Ext.get(config.resizeHels[i]).getBox().height;
				        	}
				        }
			        }
			        tabMsgPanel = Ext.getCmp(config.handleId + '.msgPanel');
			        if (true !== tabMsgPanel.hidden) {
			        	maxHeight = maxHeight - tabMsgPanel.getSize().height;
			        }
			        grid.setHeight(maxHeight);
                }
            }
        });
        
		
		grid.on({
            'afteredit': {
                fn: function(obj) {
                    PulseError.Throw({
                    	e:'HANDLE',
                    	p:[
	                    	{n:'handle',o:config.handleType},
	                    	{n:'id',o:config.handleId},
	                    	{n:'msg',o:'CHANGE'}
                    	]
                	});
                }                    
            },
            'beforeedit': {
                fn: function(obj) {
                    if (obj.field == 'valueOne') {
                        if (obj.record.get('langOne') === '') {
                            return false;
                        }
                    }
                    if (obj.field == 'valueTwo') {
                        if (obj.record.get('langTwo') === '') {
                            return false;
                        }
                    }
                }
            }
        });
		
		//
		if (typeof(config.params) == 'undefined') {
			params = { init: true };
		} else {
			params = config.params;
			params.init = true;
		}
		
		//
		if (typeof(config.pageable) != 'undefined') {
			params.start = 0;
			params.limit = 10;			
	        if (typeof(config.pagelimit) == 'number') {
	        	params.limit = config.pagelimit;
	        }			
		}
        
        // init grid
        store.load({
            params: params
        });
        
        // store config
        grid.localizationConfig = config;
        
        return grid;
	},
	
	/**
	 *  @param {Object} config
	 */
	buildGridStore: function(config) {
		
		
        
        storeConfig = {
            pruneModifiedRecords : true,
            fields: this.getLocalizationRecord(config),
            root: 'data',
            url: config.url
        };
        
        if (true === config.pageable) {        	
        	storeConfig.totalProperty = 'total';
        }
        
        if (true === config.sortable) {
        	storeConfig.remoteSort = true;
        	storeConfig.sortInfo = {
                field: 'name',
                direction: 'ASC'
            };
        }
        
        store = new Ext.data.JsonStore(storeConfig);
        
        store.on('beforeload',function(store, options) {
        	
        	if (true === options.params.init) {
        		delete options.params.init;
        		return;
        	}
        	
        	if (store.getModifiedRecords().length > 0) {
        		PulseError.Throw(['DBG','conf-msg']);        		
        	}
        	
        	// add languages
        	options.params.langOne = Ext.getCmp('box.1.' + config.id).getValue();
        	if (typeof(config.cols) == 'undefined' || config.cols !== 1) {
        		options.params.langTwo = Ext.getCmp('box.2.' + config.id).getValue();
        	}
        	
        	if (true === config.pageable) {
        		// TODO determine current page-offset
        	}
        	        	
        });
        
        store.on('load', function(store, loadedRecords, options) {
        	
        	cm = Ext.getCmp(config.id).getColumnModel();
        	if (typeof(options.params.langOne) != 'undefined' && options.params.langOne !== '') {
        		cm.setColumnHeader(2, 
        			VIEWPORT_PROPERTIES.FROM + ':&#160;' + 
        			VIEWPORT_PROPERTIES.getLanguage(options.params.langOne));
        	}
        	
        	if (typeof(options.params.langTwo) != 'undefined' && options.params.langTwo !== '') {
        		cm.setColumnHeader(3, 
        			VIEWPORT_PROPERTIES.TO + ':&#160;' + 
        			VIEWPORT_PROPERTIES.getLanguage(options.params.langTwo));
        	}
        	
        });
        
        return store;
		
	},
	
	/**
	  * @param {Object} config
	  */
	 getLocalizationRecord: function(config) {
	 	arr = [{name: 'id'},{name: 'name'},{name: 'langOne'},{name: 'valueOne'}];        
        if (typeof(config.cols) == 'undefined' || config.cols !== 1) {
        	arr.push({name: 'langTwo'});
        	arr.push({name: 'valueTwo'});
        }
        
        return new Ext.data.Record.create(arr);
	 },
	
	/**
	 *  @param {Object} config
	 */
	buildGridToolbar: function(config) {
		
		tbar = [];
		
		if (typeof(config.createURL) != 'undefined') {
			tbar.push(new Ext.Action({
				text: VIEWPORT_PROPERTIES.BUTTON_TEXT_NEW,
				handler: function() {					
					LocalizationGrid.createLocalization(config);
				},
				iconCls: 'addIconCls'
			}));
			tbar.push('-');
		}		
		
		tbar.push('&#160;' + VIEWPORT_PROPERTIES.FROM + ':&#160;');
		tbar.push(this.getLanguageBox('box.1.' + config.id));
		tbar.push('&#160;');
		
		if (typeof(config.cols) == 'undefined' || config.cols !== 1) {
			tbar.push('&#160;' + VIEWPORT_PROPERTIES.TO + ':&#160;');
	    	tbar.push(this.getLanguageBox('box.2.' + config.id));
	    	tbar.push('&#160;');
	    }
	    
	    tbar.push(new Ext.Action({
	    	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_LOAD,
	    	handler: function() {
	    		// reload grid store
	    		Ext.getCmp(config.id).getStore().load({params:config.params});
	    	},
	    	iconCls: 'reloadIconCls'
	    }));
	    
	    tbar.push('-');
	    
		return tbar;
	},
	
	/**
	 *  @param {Object} config
	 */
	buildGridColumnModel: function(config) {
		
		columns = [{    
	        id: 'id',
	        header: 'id:',
	        dataIndex: 'id',
	        sortable: true,
	        width: 30,
	        fixed: true
        }];
			
		if (true === config.sortable) {
			columns.push({    
//	            id: 'id',
	            header: VIEWPORT_PROPERTIES.IDENTIFIER + ':',
	            dataIndex: 'name',
	            sortable: true,
	            editor: new Ext.form.TextField({
                    allowBlank: false
                })
	        });
		} else {
			columns.push({    
//	            id: 'id',
	            header: VIEWPORT_PROPERTIES.IDENTIFIER + ':',
	            dataIndex: 'name',
	            sortable: false,
	            editor: new Ext.form.TextField({
                    allowBlank: false
                })
	        });
		}
	        
        columns.push({    
            header: VIEWPORT_PROPERTIES.FROM + ':',
            dataIndex: 'valueOne',
            editor: new Ext.form.TextField()
        });
	    
	    if (typeof(config.cols) == 'undefined' || config.cols !== 1) {
	    	columns.push({    
	            header: VIEWPORT_PROPERTIES.TO + ':',
	            dataIndex: 'valueTwo',
	            editor: new Ext.form.TextField()
	        });
	    }
	    
	    if (typeof(config.removeURL) != 'undefined') {
        	
        	removeFieldRenderer = function(id) {
	        	return FilterEditor.getGridImageField({
	        		functionString: 'LocalizationGrid.removeLocalization(' + id + ',\'' + config.id + '\')',
	        		iconCls: 'deleteIconCls_14',
	        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
	        	});
	        };
	        
	       columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: removeFieldRenderer
            });
        }
        
        if (typeof(config.moveURL) != 'undefined') {
        	upFieldRenderer = function(id) {
	        	return FilterEditor.getGridImageField({
	        		functionString: 'LocalizationGrid.moveLocalization(\'up\',' + id + ', \'' + config.id + '\')',
	        		iconCls: 'upIconCls_14',
	        		qtip: VIEWPORT_PROPERTIES.UP
	        	});
	        };	        
	        columns.push({
	        	header: '',
	        	dataIndex: 'id',
	            width: 25,
	            fixed: true,
	            sortable: false,
	            renderer: upFieldRenderer
	        });
	        downFieldRenderer = function(id) {
	        	return FilterEditor.getGridImageField({
	        		functionString: 'LocalizationGrid.moveLocalization(\'down\',' + id + ', \'' + config.id + '\')',
	        		iconCls: 'downIconCls_14',
	        		qtip: VIEWPORT_PROPERTIES.DOWN
	        	});
	        };
	        columns.push({
	        	header: '',
	        	dataIndex: 'id',
	            width: 25,
	            fixed: true,
	            sortable: false,
	            renderer: downFieldRenderer
	        });
        }
                
      	return new Ext.grid.ColumnModel(columns);
		
	},
	
	/**
	 * @param {String} boxid
	 */
	 getLanguageBox: function(boxid) {
	 	
	 	boxStore = new Ext.data.SimpleStore({
            fields: ['code', 'localization'],
            data : VIEWPORT_PROPERTIES.getKnownLanguagesForBox()
        });
	 	
//	 	box = Ext.form.ComboBox({
	 	return new Ext.form.ComboBox({
		    id: boxid,
		    store: boxStore,
		    displayField: 'localization',
		    valueField: 'code',
		    mode: 'local',
		    triggerAction: 'all',
		    editable: false,
		    emptyText: VIEWPORT_PROPERTIES.TEXT_SELECTLANGUAGE_BOX
		});
		
		// return box;
	 },
	 
	 /**
	  * @param {Object} config
	  */
	 createLocalization: function(config) {
	 	
//	 	PulseError.Throw({e:'DBG',p:[{n:'config.createURL',o:config.createURL}]});
	 	
	 	try {
			
			 if (this.el === null) {
	                
	            pel = VIEWPORT.getEl();
		        if (typeof(pel) == 'undefined') {
		        	throw('395 :: LocalizationGrid.createLocalization() :: ' + 
		        	'CHECK for element failed...');
		        }    
	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'LocalizationGridWindow.el'
			    });
	        
	        }
		
			propNameField = new Ext.form.TextField({ 
	            fieldLabel: VIEWPORT_PROPERTIES.NAME, 
	            name: 'name', 
	            width: 400,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME, 
	            allowBlank: false 
	        }); 
	                    
	        formPanel = new Ext.form.FormPanel({
	            id: 'newPropForm',
	            name: 'newPropForm', 
	            region: 'center', 
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            defaultType: 'textfield', 
	            autoHeight: true, 
	            items: [propNameField] 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE, 
	            handler: function() {
	                // check values 
	                if (propNameField.getValue().trim() === '') { 
	                    return false; 
	                }
					
					// checks passed : create
	                params = config.params;
	                params.name = propNameField.getValue();
	                
	                // disable grid
	                Ext.getCmp(config.id).disable();
	                
	                Ext.Ajax.request({
	                	url: config.createURL,
	                	method: 'POST',
	                	success: function(response, options) {
	                		decodedResponse = Ext.decode(response.responseText);
	                		
	                		// retrieve grid & reenable grid
                			grid = Ext.getCmp(options.localizationGridId);
                			grid.enable();
	                		
	                		if (true === decodedResponse.status) {	                			
	                			// close create new win 
	                			LocalizationGrid.win.close();	                			
	                			
	                			// create new loc record
	                			Rec = LocalizationGrid.getLocalizationRecord(grid.localizationConfig);	                			
	                			recConf = {
	                				'id': decodedResponse.id,
	                				'name': options.params.name/*,
	                				'langOne': '',
	                				'langTwo': ''*/
                				};
                				bxOne = Ext.getCmp('box.1.' + options.localizationGridId);
                				if (typeof(bxOne) != 'undefined' && bxOne !== null && bxOne.getValue() !== '') {
									recConf.langOne = bxOne.getValue();
									recConf.valueOne = '';
                				}
                				bxTwo = Ext.getCmp('box.2.' + options.localizationGridId);
                				if (typeof(bxTwo) != 'undefined' && bxTwo !== null && bxTwo.getValue() !== '') {
									recConf.langTwo = bxTwo.getValue();
									recConf.valueTwo = '';
                				}
                				newRec = new Rec(recConf);
	                			
	                			// add new record
	                			grid.getStore().add(newRec);
	                			        			
	                		} else {
	                			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'LocalizationGrid','createLocalization()');
	                		}
	                	},
	                	failure: function(response, options) {
	                		// retrieve grid & reenable grid
                			grid = Ext.getCmp(options.localizationGridId);
                			grid.enable();
	                		
	                		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},'LocalizationGrid','createLocalization()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'LocalizationGrid','createLocalization()');
					        }
	                	},
	                	localizationGridId: config.id,
	                	params: params
	                });
	            } 
	        }); 
	        
	        formPanel.addButton({ 
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            handler: function() {
	                LocalizationGrid.win.close();
	            } 
	        }); 
	            
		    this.msgPanel = new Ext.Panel({
	    		id: 'LocalizationGridWindow.msgPanel',
	    		region: 'north',
	    		html: 'msgs go here',
	    		border: false,
	    		autoHeight: true
    		});
        
	        this.win = new Ext.Window({
	        	id: 'LocalizationGridWindow',
	            title: VIEWPORT_PROPERTIES.NEW,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 130,
	            layout: 'border',
	            items: [ this.msgPanel, formPanel ],
	            width: 600
	        });
	        
	        // initial hide of msgPanel
	    	this.msgPanel.hide();
			this.msgPanel.collapse();
			this.msgPanel.on('hide',function(){LocalizationGrid.win.doLayout(true);});
	                                      
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);                       
	        propNameField.validate();		
		
		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
	 	
	 },
	 
	 /**
	  * @param {String} localizedId
	  * @param {String} localizationGridId
	  */
	 removeLocalization: function(localizedId, localizationGridId) {
	 	
//	 	PulseError.Throw({e:'DBG',p:[{n:'localizedId',o:localizedId},{n:'localizationGridId',o:localizationGridId}]});
	 	
	 	Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160"' + localizedId + '"',
    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
	 	
				 	grid = Ext.getCmp(localizationGridId);
				 	grid.disable();
				 	
				 	params = grid.localizationConfig.params;
				 	
				 	if (typeof(params) == 'undefined') {
				 		params = { localizedId: localizedId };
				 	} else {
				 		params.localizedId = localizedId;
				 	}
				 	
				 	Ext.Ajax.request({
				 		url: grid.localizationConfig.removeURL,
				 		method: 'POST',
				 		success: function(response, options) {
				 			decodedResponse = Ext.decode(response.responseText);
				 			
				 			// retrieve grid & reenable grid
		      				grid = Ext.getCmp(options.localizationGridId);
		      				grid.enable();
				 			
			        		if (true === decodedResponse.status) {			      				
			      				// remove record
			      				gridStore = grid.getStore();
			      				for (i = 0; i < gridStore.getCount(); i++) {
			      					delRec = gridStore.getAt(i);
			      					if (delRec.get('id') == options.params.localizedId) {
										gridStore.remove(delRec);
			      						break;
			      					}
			      				}			      				
			      				// show delete-success msg
			      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:grid.localizationConfig.handleType},{n:'id',o:grid.localizationConfig.handleId},{n:'msg',o:'DELETESUCCESS'}]});
			        		} else {
			        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'FilterEditor','removeFilter()');
			        		}
				 		},
				 		failure: function(response, options) {
				 			// retrieve grid & reenable grid
		      				grid = Ext.getCmp(options.localizationGridId);
		      				grid.enable();
		      				
				 			if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},'LocalizationGrid','removeLocalization()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'LocalizationGrid','removeLocalization()');
					        }
				 		},
				 		localizationGridId: localizationGridId,
				 		params: params
				 	});
	 	
    			}
    		},
		this);
	 },
	 
	 /**
	  * @param {String} dir
	  * @param {String}/{Number} locid
	  * @param {String} gridid
	  */
	 moveLocalization: function(dir, localizedId, localizationGridId) {
	 	
	 	// retrieve grid
	 	grid = Ext.getCmp(localizationGridId);
	 	
	 	// retrieve store
	 	store = grid.getStore();
	 	
	 	if (dir === 'up') {	
	 		// avoid unnecessary request on dir = 'up'	
			rec  = store.getAt(0);
			if (rec.get('id') == localizedId) {
				return;
			}
	 	} else {
	 		// avoid unnecessary request on dir = 'down'
	 		rec  = store.getAt(store.getCount() - 1);
			if (rec.get('id') == localizedId) {
				return;
			}
	 	}
	 	
	 	params = grid.localizationConfig.params;
	 	if (typeof(params) == 'undefined') {
	 		params = {
	 			localizedid: localizedId,
	 			dir: dir
	 		};
	 	} else {
	 		params.localizedid = localizedId;
	 		params.dir = dir;
	 	}
	 	
	 	//
		Ext.Ajax.request({
			url: grid.localizationConfig.moveURL,
			method: 'POST',
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
        		if (true === decodedResponse.status) {      				
      				// reload grid
      				Ext.getCmp(options.gridId).getStore().reload();
      				// show move-success msg
      				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:grid.localizationConfig.handleType},{n:'id',o:grid.localizationConfig.handleId},{n:'msg',o:'SAVESUCCESS'}]});
        		} else {
        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'LocalizationGrid','moveLocalization()');
        		}
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({e:'REQUEST.FAILED'},'LocalizationGrid','moveLocalization()');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'LocalizationGrid','moveLocalization()');
		        }
			},
			gridId: localizationGridId,
			params: params
		});
	 	
	 }
	
};


/**
 * 
 */
var PulseMessageHandler = {
	
	type: 'MessageHandler',
	
	DBG: false/*{
		handle: true
	}*/,
	
	/**
	 * 
	 */
	handle: function(handler) {
		
		try {
			
	//		PulseErrorWindow.Throw(['called','' + handler.length]);
			if (typeof(handler.length) != 'number') {
				throw('handler.length != number');
			} else {
	//			var handleTabId, handleMsg;
				for (i = 0; i < handler.length; i++) {
					if (handler[i].n.toUpperCase() == 'ID' && typeof(handler[i].o) == 'string') {
						handleTabId = handler[i].o;
					} else if (handler[i].n.toUpperCase() == 'MSG' && typeof(handler[i].o) == 'string') {
						handleMsg = handler[i].o.toUpperCase();
					}
				}
			}
			
	//		PulseErrorWindow.Throw(['TEST',
	//			'handler.length: '+handler.length,
	//			'ID: '+handleTabId,
	//			'MSG: '+handleMsg,
	//			'PulseMessageHandler',
	//			'handleTab()'
	//		]);
	
			//  retrieve the tabs msg panel
			tab = Ext.getCmp(handleTabId);
			tab.show();
			if (handleMsg == 'CHANGE') {
				tab.isDirty = true;
			} else if (handleMsg == 'SAVESUCCESS' || handleMsg == 'RESET') {
				tab.isDirty = false;
			}
			
			panelid = handleTabId + '.msgPanel';
			
			// resets tab
			if (handleMsg == 'RESET') {
				this.closeMsg(panelid);
				return;
			}
			
			tabMsgPanel = Ext.getCmp(panelid);
			if (typeof(tabMsgPanel) == 'undefined' || tabMsgPanel === null) {
				// DBG >>
				if (this.DBG) {
					throw('no msg-panel found...');
				}
				return;
			}
			
			tabMsgPanel.handleId = handleTabId;
			
			fireResize = !tabMsgPanel.isVisible();
			
			if (fireResize || tabMsgPanel.currentMsg != handleMsg) {
				tabMsgPanel.show();				
				msgObj = this.getMsgObject(handleMsg);
				msgObj.id = panelid;
				MessageTemplate.overwrite(tabMsgPanel.body, msgObj);
				tabMsgPanel.currentMsg = handleMsg;
				tabMsgPanel.expand(true);
				
				if (true === fireResize) {
					(function() {
		            	tab.fireEvent('resize', tab);
		            }).defer(500);
				}
			}
		
		
		
		} catch(e) {
			THROW({e:'FATAL',o:e,args:arguments,propsObj:handler,props:['length'],p:handler},this,'handle');
		}
		
		// DBG
		if (this.DBG) {
			THROW({args:arguments,p:handler},this,'handle');
		}
	},

	/**
	 * 
	 */
	handleTab: function(handler) {
		
		this.handle(handler);
		return;
		
		try {
			
	//		PulseErrorWindow.Throw(['called','' + handler.length]);
			if (typeof(handler.length) != 'number') {
				throw('handler.length != number');
			} else {
	//			var handleTabId, handleMsg;
				for (i = 0; i < handler.length; i++) {
					if (handler[i].n.toUpperCase() == 'ID' && typeof(handler[i].o) == 'string') {
						handleTabId = handler[i].o;
					} else if (handler[i].n.toUpperCase() == 'MSG' && typeof(handler[i].o) == 'string') {
						handleMsg = handler[i].o.toUpperCase();
					}
				}
			}
			
	//		PulseErrorWindow.Throw(['TEST',
	//			'handler.length: '+handler.length,
	//			'ID: '+handleTabId,
	//			'MSG: '+handleMsg,
	//			'PulseMessageHandler',
	//			'handleTab()'
	//		]);
	
			//  retrieve the tabs msg panel
			tab = Ext.getCmp(handleTabId);
			tab.show();
			if (handleMsg == 'CHANGE') {
				tab.isDirty = true;
			} else if (handleMsg == 'SAVESUCCESS') {
				tab.isDirty = false;
			}
			
			panelid = handleTabId + '.msgPanel';
			tabMsgPanel = Ext.getCmp(panelid);
			if (typeof(tabMsgPanel) == 'undefined') {
				PulseError.Throw({e:'ERROR',p:[{n:'no msg-panel found...'},{n:'panelid',o:panelid}]},'PulseMessageHandler','handleWin()');
			}
			
			tabMsgPanel.handleId = handleTabId;
			
			fireResize = !tabMsgPanel.isVisible();
			
			if (fireResize || tabMsgPanel.currentMsg != handleMsg) {
				tabMsgPanel.show();
	//			ctEl = tabMsgPanel.getEl().last().child('.x-panel-body');
	//			ctEl.addClass('greenPanel');
				
				
				msgObj = this.getMsgObject(handleMsg);
				msgObj.id = panelid;
				MessageTemplate.overwrite(tabMsgPanel.body, msgObj);
				tabMsgPanel.currentMsg = handleMsg;
				tabMsgPanel.expand(true);
				
				if (true === fireResize) {
					(function() {
		            	tab.fireEvent('resize', tab);
		            }).defer(500);
				}
			}
		
		
		
		} catch(e) {
			THROW({e:'FATAL',o:e,args:arguments,propsObj:handler,props:['length'],p:handler},this,'handle');
		}
	},
	
	/**
	 * 
	 */
	handleWin: function(handler) {
	
		this.handle(handler);
		return;
	
		try {	
		
	//		PulseErrorWindow.Throw(['called','' + handler.length]);
			if (typeof(handler.length) != 'number') {
				PulseErrorWindow.Throw(['ERROR','handler.length != number','PulseMessageHandler','handleWin()']);
				return;
			} else {
	//			var handleWinId, handleMsg;
				for (i = 0; i < handler.length; i++) {
					if (handler[i].n.toUpperCase() == 'ID' && typeof(handler[i].o) == 'string') {
						handleWinId = handler[i].o;
					} else if (handler[i].n.toUpperCase() == 'MSG' && typeof(handler[i].o) == 'string') {
						handleMsg = handler[i].o.toUpperCase();
					}
				}
			}
			
	//		PulseErrorWindow.Throw(['TEST',
	//			'handler.length: '+handler.length,
	//			'ID: '+handleWinId,
	//			'MSG: '+handleMsg,
	//			'PulseMessageHandler',
	//			'handleWin()'
	//		]);
			
			//  retrieve the wins msg panel
			win = Ext.getCmp(handleWinId);
			win.show();
			if (handleMsg == 'CHANGE') {
				win.isDirty = true;
			} else if (handleMsg == 'SAVESUCCESS') {
				win.isDirty = false;
			}
			
			winid = handleWinId + '.msgPanel';
			winMsgPanel = Ext.getCmp(winid);
			
			if (typeof(winMsgPanel) == 'undefined') {
				PulseError.Throw({e:'ERROR',p:[{n:'no msg-panel found...'},{n:'panelid',o:winid}]},'PulseMessageHandler','handleWin()');
			}
			
			winMsgPanel.handleId = handleWinId;
			
			fireResize = !winMsgPanel.isVisible();
			
			if (fireResize || winMsgPanel.currentMsg != handleMsg) {
				winMsgPanel.show();
	//			ctEl = winMsgPanel.getEl().last().child('.x-panel-body');
	//			ctEl.addClass('greenPanel');			
				msgObj = this.getMsgObject(handleMsg);
				msgObj.id = winid;
				MessageTemplate.overwrite(winMsgPanel.body, msgObj);
				winMsgPanel.currentMsg = handleMsg;
				winMsgPanel.expand(true);
				
				if (true === fireResize) {
					(function() {
		            	win.fireEvent('resize', win);
		            }).defer(500);
				}
			}
		
		
		} catch(e) {
			PulseError.Throw({e:'ERROR',o:e},'PulseMessageHandler','handleWin('+handler+')');
		}
	},
	
	/**
	 * 
	 */
	getMsgObject: function(handleMsg) {
		switch (handleMsg) {
			
			case 'CHANGE':
				return {cls:'yellowPanel',iconCls:'warningIconCls',msg:VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES};
				
			case 'CHANGENOTSAVEABLE':
				return {cls:'redPanel',iconCls:'errorIconCls',msg:VIEWPORT_PROPERTIES.TEXT_CANNOTSAVECHANGES};
				
			case 'SUCCESS':
				return {cls:'greenPanel',iconCls:'saveSuccessIconCls',msg:VIEWPORT_PROPERTIES.TEXT_SUCCESSDEFAULT};	
				
			case 'SAVESUCCESS':
				return {cls:'greenPanel',iconCls:'saveSuccessIconCls',msg:VIEWPORT_PROPERTIES.TEXT_SUCCESSSAVE};
				
			case 'DELETESUCCESS':
				return {cls:'greenPanel',iconCls:'saveSuccessIconCls',msg:VIEWPORT_PROPERTIES.TEXT_SUCCESSDELETE};
				
			case 'SAVEFAIL':
				return {cls:'redPanel',iconCls:'saveFailIconCls',msg:VIEWPORT_PROPERTIES.TEXT_ERRORSAVE};
				
			default:
				PulseErrorWindow.Throw(['TODO','impl switch.case for: "' + handleMsg + '" in PulseMessageHandler.getMsgObj()']);
				return {cls:'redPanel',iconCls:'warningIconCls',msg:'No LOC for: ' + handleMsg};
		
		}
	},
	
	/**
	 * 
	 */
	closeMsg: function(panelid) {
		try {
			closeMsgPanel = Ext.getCmp(panelid);
			if (typeof(closeMsgPanel) != 'undefined' && closeMsgPanel !== null 
				&& closeMsgPanel.isVisible()) {
				closeMsgPanel.on('collapse',function(p){
					p.hide();
					panel = Ext.getCmp(p.handleId);
					if (panel !== null) {
						panel.fireEvent('resize', panel);
					}
				});
				closeMsgPanel.collapse(true);
			}
		} catch(e) {
			THROW({e:e,args:arguments},'PulseMessageHandler','closeMsg');
		}
	},
	
	/**
	 * 
	 */
	handleAjaxError: function(error) {
		
		switch(error.e.toUpperCase()) {
			
			case 'SERVER.ERROR':
				rc = PulseError.getRootCause(error);
				
				if (typeof(VIEWPORT_PROPERTIES[rc.e]) != 'undefined') {
					msgText = VIEWPORT_PROPERTIES[rc.e];
				} else {
					msgText = rc.e;
				}
				
				Ext.Msg.show({
					title: 'SERVER.ERROR:', 
					msg: msgText,
					buttons: Ext.Msg.OK,
					// cls: 'redPanel',
					icon: 'errorIconCls_32'
				});
				break;
				
			case 'REQUEST.ERROR':
			
				if (typeof(VIEWPORT_PROPERTIES.REQUESTERROR) != 'undefined') {
					msgText = VIEWPORT_PROPERTIES.REQUESTERROR;
				} else {
					msgText = 'REQUEST.ERROR';
				}
			
				Ext.Msg.show({
					title: 'REQUEST.ERROR:', 
					msg: msgText,
					buttons: Ext.Msg.OK,
					// cls: 'redPanel',
					icon: 'errorIconCls_32'
				});
				break;
				
			case 'REQUEST.FAILED':
			
				if (typeof(VIEWPORT_PROPERTIES.REQUESTFAILED) != 'undefined') {
					msgText = VIEWPORT_PROPERTIES.REQUESTFAILED;
				} else {
					msgText = 'REQUEST.FAILED';
				}
			
				Ext.Msg.show({
					title: 'REQUEST.FAILED:', 
					msg: msgText,
					buttons: Ext.Msg.OK,
					// cls: 'redPanel',
					icon: 'errorIconCls_32'
				});
				break;
				
			default:
				PulseErrorWindow.Throw(['ERROR','NO CASE DEFINED: ' + error.e.toUpperCase()]);
		}
		
	}
	
}; // END :: PulseMessageHandler

var MessageTemplate = new Ext.XTemplate(
	'<div class="{cls}" style="cursor:pointer;text-align:center;" onclick="PulseMessageHandler.closeMsg(\'{id}\');" ',
	'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_CLOSE + '">',
	'<table border="0" cellpadding="0" cellspacing="0" style="width:95%;" align="center"><tr>',
	'<td align="left"><img src="' + Ext.BLANK_IMAGE_URL + '" width="16" height="16" border="0" class="{iconCls}"/></td>',
	'<td style="text-align:center;font-weight:bold;">{msg}</td>',
	'<td align="right"><img src="' + Ext.BLANK_IMAGE_URL + '" width="16" height="16" border="0" class="{iconCls}"/></td>',
	'</tr></table>',
	'</div>'
);
Pulse.MessageHandler = PulseMessageHandler;

/**
 * !! should not be accessed directly
 * !! used by PulseError
 */
var PulseErrorRegistry = {
 	
 	// @property debug this
pDebug: false,

// @property the timestamp
registryTimestamp: null,
 	
// @property auto-clean
ac: false, 	
// @property clean-intervall in ms (default 1min)
acInt: 60000,

// clean any existing errors on init
cleanOnInit: true,

// @property {Object errors inner class}
errors: {
	
	pDebug: false,
	
	// Array[Object] error-objects 
	//
	// @important 
	// 		!! this should not be accessed directly !!
	// 		look for function or implement needed function
	//
	//		fn:
	//			push(Object e):
	// 			remove(Number id || Object e):
	//			* not implemented remove(String id):
	// 			clean():
	//			get(Number id): 
	// 			getSize(): 
	// 			getErrors():
	//
	
	// @property Number the currently highest error id
	currentId: 0,
	
	p: [],
	
	// adds error e to this.p
	// does check for re-register
	// -> resets e.eTimestamp and returns id
	push: function(e) {
		
		if (typeof(this.p) == 'undefined') {
			this.p = [];
		}
		
		// set/reset timestamp
 		d = new Date();
 		e.eTimestamp = d.getTime();
 		
 		// check for allready registered object
 		if (typeof(e.registryId) == 'number') {
 			cc = this.getErrors(e.registryId);
 			if (typeof(cc) != 'undefined') {
 				if (this.pDebug === true) {
	 				PulseErrorWindow.Throw(['INFO',
						'PulseErrorRegistry.errors.push(' + e + 
						') returns id: ' + e.registryId]);
 				}
 				return e.registryId;
 			}
 		} 
 		
		// set error id & increase internal counter
		this.currentId++; 	
 		e.registryId = this.currentId;	 		
		this.p.push(e);
		if (this.pDebug === true) {
			PulseErrorWindow.Throw(['INFO',
				'PulseErrorRegistry.errors.push(' + e + 
				') pushed error id:' + e.registryId]);
		}
		return e.registryId;
	},
	// removes error either by given
	// Number o = error.id
	// PulseError o
	remove: function(o) {
		id = o;
		if (typeof(o) != 'number') {
			id = o.registryId;
		}
		for (i=0; i < this.p.length; i++) {
			e = this.p[i];
			if (typeof(e) != 'undefined') {
				if (e.registryId == id) {
					if (this.pDebug === true) {
 						PulseErrorWindow.Throw(['INFO',
 							'PulseErrorRegistry.errors.removed error, ' + e.registryId]);
			 		}
 					e = null;
 					break;
 				}
			}
		}
		this.clean();
		o = null;
	},
	// returns a cleaned version of this.p (no error == null)
	// otherwise : []
	// if an id is passed returns the error by id if found
	// otherwise : void
	getErrors: function(id) {
		var result = [];
		for (i=0; i < this.p.length; i++) {
			e = this.p[i]; 				
			if (typeof(e) != 'undefined') {
				if (e.registryId == id) {
 					return e;
 				}
				result.push(e);
			}
		}
		if (typeof(id) != 'number') {
			return result;
		}
	},
	// returns an error by Number id
	get: function(id) {
		if (this.pDebug === true) {
			PulseErrorWindow.Throw(['INFO',
				'PulseErrorRegistry.errors.get(' + id + ')']);
		}
		return this.getErrors(id); 
	},
	// returns the length of this.p
	getSize: function() {
		return this.p.length; 
	},
	// removes all object == null from this.p
	clean: function() {
		this.p = this.getErrors();
		if (this.pDebug === true) {
 			PulseErrorWindow.Throw(['INFO',
 				'PulseErrorRegistry.errors.cleaned']);
 		}
	}
}, // End of errors inner object

// registers an error e
register: function(e) {	
		
	// store error
	id = this.errors.push(e);
	
	if (this.pDebug === true) {
 		PulseErrorWindow.Throw(['INFO',
 			'PulseErrorRegistry.registered error: ' + id,'typeof(id): ' + typeof(id)]);
	}
	
	// return error id
	return id;
},

// clean(true) resets errors, 
// clean() removes all error==null from errors
clean: function(boolResetErrors) {
	if (boolResetErrors) {
		this.errors.p = null;
		this.errors.p = [];
		this.errors.currentId = 0;
		return;
	}
	this.errors.clean();
},

// removes an error
remove: function(o) {
	this.errors.remove(o);
},

// returns an error by id
get: function(id) {
	if (typeof(Number(id)) != 'number') {
		if (this.pDebug === true) {
	 		PulseErrorWindow.Throw(['INFO',
	 			'PulseErrorRegistry.get() called with invalid id: ' + id, 'typeof(id): ' + typeof(id)]);
 		}	
		return;
	}
	e = this.errors.get(Number(id));
	if (this.pDebug === true) {
 		PulseErrorWindow.Throw(['INFO',
 			'PulseErrorRegistry.get() returns error with id: ' + e.registryId]);
	}
	return e;
},

// returns the error ergistrys current length of the error store
getSize: function() {
	size = this.errors.getSize();
	return size;
},

// initializes the PulseErrorRegistry
// TODO implement auto-clean
init: function(boolAutoClean, intCleanIntervall) {
	
	// clean
	if (this.cleanOnInit) {
		// remove startup-errors
		// PulseErrorRegistry.init() is called with delay (@see bottom)
		this.clean(true);
	}
	if (typeof(boolAutoClean) == 'boolean') {
		this.ac = boolAutoClean;
	}
	if (typeof(intCleanIntervall) == 'number') {
		this.acInt = intCleanIntervall;
	}
	
	// set registryTimestamp
	d = new Date();
	this.registryTimestamp = d.getTime();

	// debug
 	if (this.pDebug === true) {
 		PulseErrorWindow.Throw(['INIT',
 			'PulseErrorRegistry',
 			'reg.registryTimestamp: ' + this.registryTimestamp,
 			'reg.cleanOnInit: ' + this.cleanOnInit,
 			'reg.autoclean: ' + this.ac,
 			'reg.autoclean-intervall: ' + this.acInt
 			]);
	 	}
 	}
}; // End :: PulseErrorRegistry

/**
 * PulseError
 * ------------------------------------------------------------------
 */
 var PulseError = {
 	
 	pDebug: false,
 	
 	// defaults
 	// for this.getRootCause()
 	// sets max recursion depth
 	// when trying to find the root cause of 
 	// a given PulseError
 	getRootCauseMaxDepth: 10,
 	getRootCauseMaxDepthOld: 10,
	
	/**
	 * throws an error by definition below
	 * 
	 * @TODO define results
	 * 		- ...
	 * 		- deserializes it and passes it to PulseErrorWindow for show
	 * 
	 * @see param e for description of Object PulseError e
	 * 
	 * @important a PulseError e can be nested two ways, with
	 * 		e.p [optional] at any nesting level
	 * 		
	 * 		1. preferred
	 * 			e = {e: String, o: {e: String, o: {...}}}
	 * 		
	 * 		2. possible
	 * 			e = {e: {e: {...}}}
	 * 
	 * 		3. if nesting that way.:
	 * 			e = {e: {e}, o: {e}} 
	 * 			or
	 * 			e = {e: Object o, o: {e}}
	 * 		the error in e.o is being ignored,
	 * 		and only being deserialized as param
	 * 
	 * {@see this.getRootCause()}
	 * 
	 * @function 
	 * 		Throw(
	 * 			Object e, 
	 * 			String identifier [optional], 
	 * 			String functionName [optional], 
	 * 			Boolean handle [optional]
	 * 		)
	 * 
	 * @param  {Object} e
	 * 		the error that is thrown,
	 * 		where e can be any of the two below
	 * 		
	 * 		1. PulseError
	 * 		e = { 	
	 * 				e: String error or Object error
	 * 					where Object can be typeof: {e}
	 * 					{@see this.getRootCause()}
	 * 					
	 * 				o: Object [optional]
	 * 					where Object can be typeof: {e}
	 * 					{@see this.getRootCause()}
	 * 				
	 * 				p: 	Array[Object obj] [optional]
	 * 					
	 * 					if obj = {	
	 * 						n: String parameterName , 
	 * 						o: Object parameter [optional]
	 * 					}
	 * 					parameter will be output formatted...
	 * 					{@see this.getParamStringArray()}
	 * 
	 * 			}
	 * 
	 * 		2. e != PulseError
	 * 			
	 * 
	 * @param {String} identifier [optional]
	 * 		an identifier, e.g. throwing class, object, function...
	 * @param {String} functionName [optional]
	 * 		the name of the throwing function
	 * 
	 * 
	 * deprecated : [
	 * @param {Boolean} handle [optional]
	 * 		displays e to administration user
	 * 			(preferably localized)
	 *]
	 * 
	 * @return if (@param boolHandle == true)
	 * 			error popup,
	 * 			message in tab
	 * 
	 * @return if (@param boolHandle == 'undefined')
	 * 			display of debug window 
	 * 			if var PulseErrorWindowDebug = true 
	 * 				(in admin-viewport.xsl)
	 */
	Throw: function(e, identifier, functionName, handle) {
		
		try {
			// Check for errors that have to be handled 
			// !! handle only if (typeof(handle) == 'boolean') && (handle == true)
			// 
			// note: 
			// 		a HANDLE error can be wrapped in DBG, TODO or
			//		any other type of error, which means it will
			// 		be ignored here, and should have been / will be
			// 		handled at some other point
			//
			
			if (handle === true) {
				// always display to user
				
				
				
				throw({e: 'HANDLE', o: this.getRootCause(e)});
			}
			
			if (typeof(e.e) == 'string') {				
				if (e.e.toUpperCase() == 'HANDLE') {
					// always display to user
					
					handler = this.getHandle(e).toUpperCase();
					switch (handler) {
						case 'PANEL':
							PulseMessageHandler.handleTab(e.p);
							break;
							
						case 'WIN':
							PulseMessageHandler.handleWin(e.p);
							break;
						
						default: throw({e: 'HANDLE', o: this.getRootCause(e)});
					}			
					return;
				} else if (e.e.toUpperCase() == 'SERVER.ERROR' 
					|| e.e.toUpperCase() == 'REQUEST.ERROR'
					|| e.e.toUpperCase() == 'REQUEST.FAILED') {
					PulseMessageHandler.handleAjaxError(e);
					return;
				}				
			}
			
			// stop, if admin-viewport.xsl PulseErrorWindowDebug != true
			if (true !== PulseErrorWindowDebug) {
				return;
			}
			
			// object check
			if ((typeof(e) != 'object')) {
				// always display to user
				// cannot be handled by below
				PulseErrorWindow.Throw(e);
				return;
				// throw(e);
			}
			
			// check for Pulse.{Object}s
			 if (typeof(e.e) == 'object' && typeof(e.e.type) == 'string') {
				// do not display DBG of Pulse.{Object}s if
				// ({Object}) e.e.DBG === false
				
				// INFO
				args = '';
				if (typeof(e.args) != 'undefined') {
					args += Pulse.getArgsString(e.args);
				}
				
				if (false === e.e.DBG) {
//					alert('NODBG ->' + e.e.type);					
					PulseErrorWindow.Throw(['DBG',
						'DBG.supressed - ' + e.e.type + '.' + 
						functionName + '(' + args + ')'
					]);
					return;
				} else {
//					alert('DBG ->' + e.e.type);
					PulseErrorWindow.Throw(['DBG',
						'DBG - ' + e.e.type + '.' + 
						functionName + '(' + args + ')'
					]);
					e.e = e.e.type;
				}
			}
			
			// array & null check
			// PulseErrorObjects do not have length
			if (e === null || (typeof(e.length) == 'number')) {
				// always display to user
				// arrays are handled by PulseErrorWindow
				PulseErrorWindow.Throw(e);
				return;
				// throw(e);
			}
						
			// !!
			// !! all that happens now is only for output in debug window
			// !!
			
			// try to deserialize PulseError
			// build output Array[String] for PulseErrorWindow		

			// try to retrieve root cause
			rootCause = '' + this.getRootCause(e).e;
			if (rootCause.charAt(0) == '<') {
				//
				rootCause = '' + e.e;
			}
			outputArray = [rootCause];
			
			
			e.identifier = identifier;
			e.functionName = functionName;			
			
			// build Array[String] from e for output
			errorArray = this.getStringArray(e);
			outputArray = outputArray.concat(errorArray);
			
			// dbg
			if (true === this.pDebug) {
				PulseErrorWindow.Throw(['INFO',
					'PulseError.Throw(), e: ' + e + ', e.e: ' + e.e + ', e.o: ' + e.o,
					'identifier: ' + identifier + ', functionName: ' + functionName, 'output.length: ' + outputArray.length]);
			}
			
			// pass error to PulseErrorWindow
			PulseErrorWindow.Throw(outputArray);
			
			
		} catch(result) {
			if ((typeof(result.e) == 'string') && (result.e == 'HANDLE')) {
				alert('TODO: HANDLE: ' + e.e);
			}
		}	
		// !! handle only if typeof(handle) == 'boolean' && handle == false
		if (eval(handle) === false) {
			// debug
			PulseErrorWindow.Throw(['INFO',
				'suppressed error -> eval(handle): ' + eval(handle),
				'e.e: ' + e.e,e]);
			return;	
		}
		
		
	},// End of PulseError.Throw()
	
	// returns the root cause from a given error Object e
	// 
	// if a PulseError (max. depth 10)
	//
	// trys e.e for as long as it does not return undefined
	// then e.o , if( typeof(e.o) != "undefined" )
	//
	// returns found error or the given error if
	// e.e, e.o == undefined
	//
	getRootCause: function(e, intMaxDepth) {
		
		// debug
		if (true === this.pDebug) {
			PulseErrorWindow.Throw(['INFO','PulseError.getRootCause.called',
				'with e: ' + e, 'with e.e: ' + e.e, 'with e.o: ' + e.o,
				'with intMaxDepth: ' + intMaxDepth]);
		}
		
		// set new max recursion depth for this single run;
		if (typeof(intMaxDepth) == 'number') {
			this.getRootCauseMaxDepthOld = this.getRootCauseMaxDepth;
			this.getRootCauseMaxDepth = intMaxDepth;
		}
		
		// retrieve error
		error = this.getRootCauseRecursively(e,0);
		
		this.getRootCauseMaxDepth = this.getRootCauseMaxDepthOld;
		
		// dbg :: info
		if (true === this.pDebug) {		
			PulseErrorWindow.Throw([
				'INFO','PulseError.getRootCause',
				'returns error: ' + error, 
				'returns error.e: ' + error.e]);
		}
		
		// return the found error
		return error;

	},
	
	// @important !! private !!
	// @private 
	// 		only call this.getRootCause(e, intMaxDepth)
	// @param Object e , a given error
	// @param Number intCurrentRecursion , 
	// 		the current recursion depth
	// 
	// @returns on success
	// 		the root cause Object e of a given PulseError,
	// 		or the given error Object e itself
	//      
	// if given Object e
	//		Object e in
	// 		PulsError.Throw(e,...)
	// 
	// @returns on error
	//		this try {} catch (recursionError) { @see }
	//
	// @see {this.getRootCause()}
	// @see {this.Throw()}
	getRootCauseRecursively: function(e, intCurrentRecursion) {
		if (true === this.pDebug) {
			PulseErrorWindow.Throw(['INFO','getRootCauseRecursively( ' 
				+ e + ' , ' + intCurrentRecursion + ' )']);		
		}
		// check max recursion depth
		intCurrentRecursion++;
		if (intCurrentRecursion == this.getRootCauseMaxDepth) {
			// just return given e...
			if (true === this.pDebug) {
				PulseErrorWindow.Throw(['TODO','CHECK','PulseError',
					'getRootCauseRecursively()',
					'getRootCauseMaxDepth: ' + this.getRootCauseMaxDepth + ' !!! reached !!!']);
			}
			return e;
		}
		
		// ? given e is already possible root-error		
		try {
		
			// param to check
			// for being possible nested PulseError
			// @see PulseError.Throw()
			checkError = e.e;
			checkObject = e.o;
			
			// ? recursion : checkError possible PulseError
			if (typeof(checkError) != 'undefined' && checkError !== null) {						
			
				// 1. of 3: ? Object checkError
				if (typeof(checkError) == 'object') {
					// re-run with checkError
					e = this.getRootCauseRecursively(checkError, intCurrentRecursion);
				}
					
				// 2. of 3: ? String checkError
				if (typeof(checkError) == 'string') {
					// ? given e nested a PulseError					
					if (typeof(checkObject) != 'undefined') {
						// re-run with checkObject
						e = this.getRootCauseRecursively(checkObject, intCurrentRecursion);
					}
				}							
							
			}
			
			// 3. of 3: ! none of above applied, return e
			return e;
		
		} catch (recursionError) {
			er = {
				e:'FATAL',
				p:[
					{n:'getRootCauseMaxDepth',o:this.getRootCauseMaxDepth},
					{n:'intCurrentRecursion',o:intCurrentRecursion},
					{n:'recursionError',o:recursionError}
				]
			};
			return er;
		}
		
	},
	
	// @private
	// 		trys deserializing a given error Object e 
	// 		to Array[String]
	//
	// @return Array[String], always
	// 		'': in returned Array[String] will be used for 
	// 			new line in debug window output
	// 	
	getStringArray: function(e) {
				
		try {			
			var errorId = -1;
			
			// add e
			error = [e.e,'e typeof: ' + typeof(e),'e.e: ' + e.e];
			error.push('e.identifier: ' + e.identifier);
			error.push('e.functionName: ' + e.functionName);

			
			if (typeof(e) != 'undefined') {			
				// add e.o			
				error.push('e.o typeof: ' + typeof(e.o));
				error.push('e.o toString: ' + e.o);							
				// add e.args
				error.push('');
				error.push('ARGS');
				try {					
					paramArray = this.getParamStringArray(e.args);
					error = error.concat(paramArray);
				} catch (getParamFailure) {
					error.push('ERROR :: getParamFailure: ' + getParamFailure);
				}
				// add e.p
				error.push('');
				error.push('PARAMS');
				try {
					paramArray = this.getParamStringArray(e.p);
					error = error.concat(paramArray);
				} catch (getParamFailure) {
					error.push('ERROR :: getParamFailure: ' + getParamFailure);
				}
			}	
				
			// check for registring e.e
			if (typeof(e.e) == 'object') {
				// PulseError by definition, register
				errorId = PulseErrorRegistry.register(e.e);
				error.push('registered e.e id: ' + errorId + ', e.e.e: ' + e.e.e);
			}
				
			// check for registring e.o
			if ((typeof(e.e) == 'string') && 
				(typeof(e.o) == 'object')) {
				// PulseError by definition, register
				errorId = PulseErrorRegistry.register(e.o);
				error.push('registered e.o id: ' + errorId + ', e.o.e: ' + e.o.e);
			}		
				
			// if  registered a Object add errorId
			if (errorId != -1) {
				if (errorId == e.registryId) {
					// this error nests itself ?
					error.push('');
					error.push('TODO check on error nesting exception');
					error.push('');
				}
				error.push('**errorid**');
				error.push(errorId);
			}		
			
			// done
			error.push('*');
			
			// dbg
			if (true === this.pDebug) {
				PulseErrorWindow.Throw(['INFO',
					'PulseError.getStringArray() :: returns error.length: ' + error.length]);
			}
			return error;
			
		} catch(getStringArrayError) {
			PulseErrorWindow.Throw(['ERROR',
				'PulseError.getStringArray() :: error.length: ' + getStringArrayError.length,
				'PulseError.getStringArray() :: typeof error: ' + typeof(getStringArrayError),
				'PulseError.getStringArray() :: error: ' + getStringArrayError]);
			// return the error			
			return [getStringArrayError];
		}

		
	},// End of getStringArray()
	
	// @private
	// @return Array[String], always
	getParamStringArray: function(params) {
		
		try {
						
			// build Array[String] from params			
			paramStringArray = ['typeof: ' + typeof(params)];
			
			// check
			if (typeof(params) == 'undefined') {
				return paramStringArray;
			}			
			if (typeof(params.length) != 'number') {
				paramStringArray.push('typeof: no Array');
				return paramStringArray;
			}
			paramStringArray.push('length: ' + params.length);
			if (params.length === 0) {
				return paramStringArray;
			}
			
			// new line
			paramStringArray.push('');
				
			// add params			
			for (i = 0; i < params.length ;i++) {
				param = params[i];
				paramStringArray.push('[' + i + '] typeof: ' + typeof(param) + 			
					', toString: ' + param);
				// PulseError param output
				if (typeof(param.n) != 'undefined') {
					paramStringArray.push('[' + i + '].n typeof: ' + typeof(param.n) + 
					 ', toString: ' + param.n);
				}
				if (typeof(param.o) != 'undefined') {
					paramStringArray.push('[' + i + '].o typeof: ' + typeof(param.o) + 
						', toString: ' + param.o);
				}
				paramStringArray.push('');
			}
			
			return paramStringArray;
			
		} catch(getParamStringArrayError) {
			PulseErrorWindow.Throw(['ERROR',
				'PulseError.getParamStringArray() :: error.length: ' + getParamStringArrayError.length,
				'PulseError.getParamStringArray() :: typeof error: ' + typeof(getParamStringArrayError),
				'PulseError.getParamStringArray() :: error: ' + getParamStringArrayError]);
			// return the error			
			return [getParamStringArrayError];
		} 
		
	},
	
	/**
	 * 
	 */
	getHandle: function(e) {
		if (typeof(e.p) != 'undefined' && typeof(e.p.length) == 'number' && e.p.length > 0) {
			for (i = 0; i < e.p.length; i++) {
				if (typeof(e.p[i]) == 'object') {
					if (typeof(e.p[i].n) == 'string' && e.p[i].n.toUpperCase() == 'HANDLE' && typeof(e.p[i].o) == 'string') {
						return e.p[i].o.toUpperCase();
					}
				}
			}
		}
	}

}; // End :: PulseError

/**
 * initialize the PulseErrorRegistry
 * 
 * delay 5s
 */
 Ext.onReady(function() {
 	(function() {
 		PulseErrorRegistry.cleanOnInit = false;
 		PulseErrorRegistry.init();
 	}).defer(5000);
 });


/**
 * 
 */
var PulseErrorWindow = {
	
	pDebug: true,
	
	// @property acceptState
	// true by default 
	// will only be set to set to false by init() errors 
	acceptState: true,
	
	// @property the debug window 
	// set by this.init() on first use;
	win: null,
	tabPanel: null,
	dbgPanel: null,
	logPanel: null,
	infoPanel: null,
	initPanel: null,
	todoPanel: null,
	
	// adjust "log-level"
	logLevel: {
		
		// if set to true
		//
		// if call
		// 		PulseErrorWindow.Throw(
		// 			Object {e: String 'LOG', o: Object o},  
		// 			Boolean true);
		//
		// with 
		// 		Object o = {
		// 			e: String 'LOG',
		// 			o: Object
		// 		}
		// 			
		// 		stores thrown Object o in the PulseErrorRegistry
		//
		// @important not optional
		//
		// 		@param Object o, o.e = String 'LOG'
		//		@param Boolean true, second call parameter
		//		
		// 		are not optional to force the storing 
		// 		of the thrown Object that is to be logged,
		//      
		//
		LOG: true,
		
		// display HANDLE
		HANDLE: true,
		
		// display TODOs
		TODO: true,
		
		// display DBG		
		DBG: true,
		
		// display INFO		
		INFO: true,
		
		// display INIT
		INIT: true
		
		// every other is tried to be displayed
		
	},
	
	// initial windows on first show
	// use by init()
	// @important may not be empty, or contain '' only adds to below possible
	// buildConfig: [{title: 'DBG', id: 'PulseError.js.window.dbg.string'}]
	buildConfig: [{title: 'DBG', id: 'PulseError.js.window.dbg.string'},
		{title: 'INFO', id: 'PulseError.js.window.info.string'}],
	
	// panel config, the debug window ids
	// for all non configured an own tab will be opened	
	panelIds: {
		// @see this getPropertie().switch()
			
		DBG: 'PulseError.js.window.dbg.string',		
		LOG: 'PulseError.js.window.dbg.string',
		INIT: 'PulseError.js.window.info.string',
		INFO: 'PulseError.js.window.info.string'
		
	},
	
	outputConfig: {		
		// debug window config
		fontSize: 9,
		linePrefix: '>> ',
		// output separator
		separator: '<div style="height: 3px; font-size: 3px;"> </div>',
		outputContinues: '<div>...</div>',		
		// by default output will be formatted as ERROR
		// for Given Object o at Throw(o)
		// @see this getPropertie().switch()
		defaultStyle: '', // black		
		ERROR: 'style="color:#FF0000;"', // red
		DBG: '', // black
		HANDLE: '', // black
		INIT: 'style="color:#0000FF; font-size: 8px;"', // blue		
		TODO: 'style="color:#00CC00;"', // green
		INFO: 'style="color:#555555;"' // gray		
	},
	
	/**
	 * shows the PulseErrorWindow window according to config,
	 * trying to display given Object o
	 * 
	 * @param o
	 * 		the Object to display
	 * 		
	 * 		if given:
	 * 			o = Array[Object] it will be deserialized 
	 * 			to an output String html where every Object 
	 * 			will be output as String an every empty
	 * 			String '' will be interpreted as an empty line 
	 * 			'>>' (usefull for output-separation)		
	 * 
	 * @param boolShow
	 * 	
	 */
	Throw: function(o, boolShow) {

		// abort if acceptState == false -> init-error
		if (this.acceptState === false) { return; }
		
		try {			
			// check for output according to configuration
			// prepare Object output
			output = this.prepareOutput(o);
		
			// check
			if (typeof(output.display) != 'boolean') {
				throw({e:'EXPECTED.BOOL',n:'output.display',o:output.display});
			}
			
			// no display			
			if (output.display === false) {
				return;
			}
			
			// show this.win or this.init()
			if (this.win === null) {
				this.init();
				test = 'DBG';
				init = this.prepareOutput(['INIT','PulseErrorWindow',
					'PulseErrorWindowDebug :: typeof(eval(PulseErrorWindowDebug): ' + 
						typeof(eval(PulseErrorWindowDebug)),
					'PulseErrorWindowDebug :: eval(PulseErrorWindowDebug): ' + 
						eval(PulseErrorWindowDebug) + ' : str: ' + PulseErrorWindowDebug,
					'TEST :: typeof(eval(true)) : ' + typeof(eval(true)),
					'TEST :: typeof(eval("true")) : ' + typeof(eval('true')),
					'TEST :: typeof(eval("var " + test + ";")) : ' + typeof(eval('var ' + test + ';')),
					'',
					'TEST :: var test = "DBG";',
					'TEST :: typeof(eval(test + " = new Object();")) : ' + typeof(eval(test + ' = new Object();')),
					'TEST :: typeof(this.panelIds.test) : ' + typeof(this.panelIds.test)
				]);
				this.output(init);
			}
			
			this.output(output);
			
			if (false === boolShow) {
				return;
			} else {
				this.win.show();
			}
			
			
		} catch (ee) {
			args = '';
			try {
				args = Pulse.getArgsString(arguments);
			} catch(eee) {
				args = eee;
			}
			alert('FATAL WIN.THROW(' + args + ')\n\n' + ee);
		}
	},
	
	// trys to parse given Object o and
	// prepares the output object according to the configuration
	// returns an output result object
	// of type {display: Boolean display, html: String html}
	prepareOutput: function(o) {
		try {
			// run checks according to config
			// set in admin-viewport.xsl
			if (PulseErrorWindowDebug !== true) {
				return { display: false };
			}
			if (typeof(o) == 'string') {
				return { display: true, html: o, title: 'str' };
			}
			if (typeof(o) != 'object' || o === null) {
				html = '<div>typeof: ' + typeof(o) + '</div>';
				html = '<div>string: ' + o + '</div>';
				return { display: true, html: html, title: '!{o}' };
			}
			if (typeof(o.length) != 'number') {
				html = '<div>typeof: ' + typeof(o) + '</div>';
				html = '<div>string: ' + o + '</div>';
				return { display: true, html: html, title: '{o}' };
			}			
			
//			alert(o.concat());
			
			var string = o[0] + '';
			
			if (string === '') {
				html = this.formatArray(o);
				return { display: true, html: html, title: '[o]' };
			}
			
			// handle possible pulse error/dbg-Array			
			switch(string.toUpperCase()) {
									
				case 'HANDLE':
					if (this.logLevel.HANDLE !== true) {
						return { display: false };
					}
					html = this.formatArray({
						array: o, 
						prefix: string,
						style: this.outputConfig.HANDLE
					});
					return { display: true, html: html, type: string, title: string };
					
				case 'TODO':
					if (this.logLevel.TODO !== true) {
						return { display: false };
					}
					html = this.formatArray({
						array: o, 
						prefix: string,
						style: this.outputConfig.TODO
					});
					return { display: true, html: html, type: string, title: string };
					
				case 'DBG':
					if (this.logLevel.DBG !== true) {
						return { display: false };
					}
					html = this.formatArray({
						array: o, 
						prefix: string,
						style: this.outputConfig.DBG
					});
					return { display: true, html: html, type: string, title: string };
					
				case 'INFO':
					if (this.logLevel.INFO !== true) {
						return { display: false };
					}
					html = this.formatArray({
						array: o, 
						prefix: string,
						style: this.outputConfig.INFO
					});
					return { display: true, html: html, type: string, title: string };
					
				case 'INIT':
					if (this.logLevel.INIT !== true) {
						return { display: false };
					}
					html = this.formatArray({
						array: o, 
						prefix: string,
						style: this.outputConfig.INIT
					});
					return { display: true, html: html, type: string, title: string };
					
				case 'LOG':
					if (this.logLevel.LOG !== true) {
						return { display: false };
					}
					html = this.formatArray({
						array: o, 
						prefix: string,
						style: this.outputConfig.LOG
					});
					return { display: true, html: html, type: string, title: string };
					
//				case 'UNDEFINED': // just format array error style for output
//					html = this.formatArray(o, true);
//					return { display: true, html: html, title: string }
//					break;
					
				default: // just format array error style for output
					html = this.formatArray(o, true);
					return { display: true, html: html, title: string };
			
			}			
			
		} catch (prepareOutputError) {
			alert('FATAL :: PulseErrorWindow.prepareOutputError :: \n' + prepareOutputError);
		}
	},// End of prepareOutput()
	
	// outputs a given output object passed by Throw()
	output: function(out) {

		//
		if (typeof(out.type) == 'string') {
			// try fetch exixting panel
			// if configured for out.type
			panel = this.getPropertie(out.type);
			// alert(panel + ' :: ' + out.html);
			if (typeof(panel) != 'undefined' && panel !== null) {
				panel.body.createChild({tag: 'div', html: out.html });
				return;
			}
			//else below	
		}
		
		// shorten tab-title if required < 15chars
		title = out.title;
		if (title.length > 15) {
			title = out.title.substring(0,14) + '...';			
		}
		
		// show new tab
		this.tabPanel.add({
			title: title,
			tabTip: out.title,
			closable: true,
			autoscroll: true,
			// bodyStyle: 'font-size: ' + this.fontSize + 'px;',
	        html: out.html
	    }).show();
		
		
	},	
	
	// formatArray(obj, boolFirstRed)
	//		will format the array if 
	// @param Array[Object] obj	
	// @param Boolean boolFirstRed
	// 		=== true , first entry with error styling // red
	//		== !true , all black
	// with Object -> String
	// 
	formatArray: function(obj, boolFirstRed) {
		
		result = '';
		
		// @flag fetch + obj = Array
		var fetchId = -1;
		objIsArray = false;
		
		// check for simple array
		if (typeof(obj.length) == 'number') {
			
			// set flag for  fecth registered
			objIsArray = true;
			
			// start simple array formatting
			if ((typeof(boolFirstRed) == 'boolean') 
				&& (boolFirstRed === true)) {
				
				// format first line red
				result += '<div ' + this.outputConfig.ERROR + '>' + 
						this.outputConfig.linePrefix + obj[0] + '</div>';						
						
				// format rest black !! start 1 !!
				for (i = 1; i < obj.length; i++) {
					outputObj = obj[i];
					if (outputObj == '**errorid**') {
						// found registered object to output
						fetchId = obj[i+1];
						// skip output of '**errorid**' and the id
						 i += 2; continue;
						// result += '<div>fetch #: ' + fetchId + '<br /> !! skip</div>';
					}
					// outputObj -> String
					result += '<div ' + this.outputConfig.defaultStyle + '>' + 
						this.outputConfig.linePrefix + outputObj + '</div>';					
				}
				
				
			} else {
				
				// format all black
				for (i = 0; i < obj.length; i++) {
					outputObj = obj[i];
					// outputObj -> String
					result += '<div ' + this.outputConfig.defaultStyle + '>' + 
						this.outputConfig.linePrefix + outputObj + '</div>';
				}
				
			}
		} else {
			
			// received possible format object
			// check
			if (typeof(obj.array) == 'undefined') {
				
				result += '<div ' + this.outputConfig.ERROR + '>' + 
					'ERROR PulseErrorWindow.formatArray<br />' + 
					'ERROR no output object received<br />' + 
					'ERROR object typeof: ' + typeof(obj) + '<br />' + 
					'ERROR string version:<br />' + obj + '</div>';
					
			} else {
				
				// start formatting
				style = this.outputConfig.defaultStyle;
				prefix = this.outputConfig.linePrefix;
				
				// set format style
				if (typeof(obj.style) != 'undefined') {
					style = ' ' + obj.style;
				}
				
				// set format prefix and format counter start
				start = 0;
				if (typeof(obj.prefix) != 'undefined') {
					prefix = '[' + obj.prefix + '] ';
					if (obj.array[0] == obj.prefix) {
						start = 1;
					}
				}
				
				// format
				for (i = start; i < obj.array.length; i++) {
					outputObj = obj.array[i];
					if (outputObj == '**errorid**') {
						// found registered object to output
						fetchId = obj.array[i+1];
						// skip output of '**errorid**' and the id
						i += 2; continue;
						// result += '<div>fetch ##: ' + fetchId + '<br />' + obj[i+1] + ', ' + obj[i+2] + ', ' + obj[i+2] +' !! skip</div>';
					}					
					// outputObj -> String
					result += '<div' + style + '>' + 
						prefix + outputObj + '</div>';
				}
								
			}	
			
		}
		
		// try to display registered obj/error		
		if (fetchId != -1) {
			result += this.outputConfig.outputContinues;
			try {
				result += this.tryRegisteredError(fetchId);
			} catch (check) {
				result += '<div>ERROR fetch: ' + fetchRegistered + 
					'<br />' + check + '</div>';
			}
		}
		
		result += this.outputConfig.separator;
		return result;

	},
	
	// @param identifier for known identifiers see cases
	// @param propertie
	// 		know properties are
	//		
	getPropertie: function(identifier, propertie) {
		
		if (typeof(identifier) != 'string') {
			return;
		}
		
		// build upper case for switch
		// if (typeof(identifier) == 'string') { 		
			ident = identifier.toUpperCase();
		// }
		var prop;
		if (typeof(propertie) == 'string' && propertie !== '') {
			prop = propertie.toUpperCase();
		}
		
		// uncommented/didn't implement what's unused at this point
		switch(ident) {					
				
			case 'DBG':
				if (typeof(prop) != 'string') {
					// return DBG panel
					return this.dbgPanel;
				} 
//				else {
//					if (prop == 'STYLE') {
//						return this.outputConfig.DBG;
//					}
//				}				
				break;			
									
//			case 'HANDLE':						
//				break;				
				
			case 'TODO':				
				if (typeof(prop) != 'string') {
					// return LOG panel
					return this.todoPanel;
				} else {
					if (prop == 'STYLE') {
						return this.outputConfig.TODO;
					}
				}				
				break;
				
			case 'INFO':
				if (typeof(prop) != 'string') {
					// return INFO panel
					return this.infoPanel;
				} else {
					if (prop == 'STYLE') {
						return this.outputConfig.INFO;
					}
				}				
				break;					
				
			case 'INIT':
				if (typeof(prop) != 'string') {
					// return INIT panel
					return this.initPanel;
				} else {
					if (prop == 'STYLE') {
						return this.outputConfig.INIT;
					}
				}				
				break;
				
			case 'LOG':				
				if (typeof(prop) != 'string') {
					// return LOG panel
					return this.logPanel;
				} else {
					if (prop == 'STYLE') {
						return this.outputConfig.LOG;
					}
				}				
				break;
				
//			default: 
//				return;
		}	
		return;
	},
	
	
	// trys to fetch an error from error reg
	// 
	// @return String html 
	// 		the result of the operation 
	// 		for the debug output window
	tryRegisteredError: function(id) {
		
		try  {
		
			// retrieve possible nested error/object
			obj = PulseErrorRegistry.get(id);
			
			// check for obj
			if (typeof(obj) == 'undefined') {
				// output nothing
				return 'no error received at PulseErrorWindow.tryRegisteredError.PulseErrorRegistry.get(id)';
			}
			
			// check for PulseError
			if (typeof(obj.eTimestamp) == 'undefined') {
				// received no PulseError
				if (typeof(obj.length) == 'number') {
					// try to output Array[Object]
					return this.formatArray(obj);
				}
				// ouput object as string
				return '' + obj;
			}
			
			// -> received PulseError
			// try to get StringArray from error
			errorArray = PulseError.getStringArray(obj);
			return this.formatArray(errorArray, true);
		
		} catch (tryRegisteredErrorError) {
			errorString = '<div style="color: red;">>>tryRegisteredError.id: ' + id + '</div>';
			errorString += '<div style="color: red;">>> ' + tryRegisteredErrorError + '</div>';
			return errorString;
		}
		
	},
	
	// @private
	// initializes this.win
	// initializes panels
	init: function() {
		try {
			
			// build initial tab setup
			panels = [];
			for (i = 0; i < this.buildConfig.length; i++) {
				cfgObj = this.buildConfig[i];
				panel = this.getInitPanel(cfgObj);
				panels.push(panel);
			}
						
			// default dbgPanel
//			dbgPanel = new Ext.Panel({
//	        	id: 'PulseError.js.window.dbg.string',
//				title: 'dbg :: string',
//				closable: false,
//				autoscroll: true,
//				// bodyStyle: 'font-size: ' + this.fontSize + 'px;',
//				html: ''
//			});
			
			// tabpanel
			tabpanel = new Ext.TabPanel({
				id: 'PulseError.js.window.tabpanel',
				region: 'center',
	            enableTabScroll: true,
	            resizeTabs: false,
	            deferredRender: false,
	            defaults: {autoScroll:true},
	            plugins: new Ext.ux.TabCloseMenu(),
	            activeTab: 0,
	            bodyStyle: 'font-size: ' + this.outputConfig.fontSize + 'px;',
	            items: panels
	        });
	        // alert('break : win.show(win);'); return;
	        pel = Ext.get(document.body);
	        if (typeof(pel) == 'undefined') {
	        	throw('618 :: PULSE.PulseError.js.ThrowWindow() :: ' + 
	        	'CHECK for element failed...');
	        }        
			el = pel.createChild({
		        tag: 'div', 
		        id: 'PulseError.js.window.el'
		    });        
			
			// config
		    windowCfg = {
		    	id: 'PulseError.js.window',
		    	maximizable: false,
		        title: 'PulseErrorWindow.win',
		        closable: true, 
		        plain: true,
		        modal: false, 
				// draggable: true,
				// resizable: true, 
		        renderTo: el,
		        height: 300, 
		        width: 750, 
		        layout: 'border',
				// buttonAlign: 'center', 
				// buttons: [],
		        items: tabpanel
	    	};
	    	    
	    	win = new Ext.Window(windowCfg);
	    	
	    	win.on({
	    		'beforeclose': {
	    			fn : function(pwin) {
	    				pwin.hide();
	    				return false;
	    			}
	    		},
	    		'show': {
	    			fn : function(pwin) {
	    				pwin.setPosition(10, 10);
	    			}
	    		}
	    	});
	    	// win.show();
			// win.setPosition(10, 10);
			
	    	this.win = win;	    	
			this.setPanels();
			
		} catch (initError) {
			this.acceptState = false;
			if (this.pDebug === true) {
				alert('window.initError' + initError);
			}
		}
	},// End of init()
	
	// use during init
	getInitPanel: function(cfg) {
		panel = new Ext.Panel({
        	id: cfg.id,
			title: cfg.title,
			closable: false,
			autoscroll: true,
			// bodyStyle: 'font-size: ' + this.fontSize + 'px;',
			html: '...panel initialized'
		});
		return panel;
	},
	
	// @private
	// used during init()
	// initializes panels
	setPanels: function() {
		// retrieve dbgpanel for output
		this.tabPanel = Ext.getCmp('PulseError.js.window.tabpanel');
		this.dbgPanel = this.tabPanel.getComponent(this.panelIds.DBG);
		this.logPanel = this.tabPanel.getComponent(this.panelIds.LOG);
		this.infoPanel = this.tabPanel.getComponent(this.panelIds.INFO);
		this.initPanel = this.tabPanel.getComponent(this.panelIds.INIT);
		this.todoPanel = this.tabPanel.getComponent(this.panelIds.TODO);
		//this.tabPanel = wintabpanel;
	}
}; // End :: PulseErrorWindow

/**
 * only extending for comparable.
 */
Record = {
	
	type: 'PulseRecord',
	
	// @see Pulse.Editor.implementsComparable
	implementsComparable: true,
	
	/**
	 * @see Pulse.Editor.equals(o) for description
	 */
	equals: function(o) {
		if (typeof(o) == 'object' && o !== null && o.type == this.type) {
			return (o == this);
		}
		return false;
	},
	
	/**
	 * @return {String} s, representing the current instance
	 * 		
	 * 		s = "[{type}@id]"
	 */
	toString: function() {
		return '[{' + this.type + '}@' + this.id + ']';
	}
	
};
Pulse.Record = Ext.extend(Ext.data.Record,Record);
/**
 * copied.
 * 
 * @see Ext.data.Record.create(o)
 */
Pulse.Record.create = function(o){
    var f = Ext.extend(Pulse.Record, {});
	var p = f.prototype;
    p.fields = new Ext.util.MixedCollection(false, function(field){
        return field.name;
    });
    for(var i = 0, len = o.length; i < len; i++){
        p.fields.add(new Ext.data.Field(o[i]));
    }
    f.getField = function(name){
        return p.fields.get(name);
    };
    return f;
};


// Create namespace (PULSE)
// Ext.namespace('PULSE');
 
/**
 * definition of the user-interface for a registry-tree-node
 */
PULSE.RegistryTreeNodeUI = function() {	
    // call parent constructor    
    PULSE.RegistryTreeNodeUI.superclass.constructor.apply(this, arguments);
};
 
// extend
Ext.extend(PULSE.RegistryTreeNodeUI, Ext.tree.TreeNodeUI, {

	disableFnClicks: false,
	
	defaultIconCls: 'x-tree-node-icon ',
	beforeIconCls: '',
	loadIconCls: 'nodeLoadingIconCls',
	functionsIconSize: 14,

	/**
	 * @Override
	 */
	renderElements : function(n, a, targetNode, bulkRender) {
		
//		this.functionsIconSize = 14;
		
		// set the icon		
		if (typeof(n.getOwnerTree().iconRenderer) == 'function') {
			
			a.iconCls = n.getOwnerTree().iconRenderer(a);
			
		} else {
		
			if (a.type != 'dir') {
				if (a.bundle) {
					a.iconCls = a.bundle + 'BundleIcon';
				} 
				if (a.country) {
					a.iconCls = a.country + 'FlagCls';
				} 
				if (a.contentType) {
					contentTypeArray = a.contentType.split('.');
					a.iconCls = contentTypeArray.join('');
				} 
			}
		
		}
		styleString = 'margin-bottom: 2px; padding: 0px; border: 0px; vertical-align: middle;';
		id = Ext.id();
		var pulseLinkArray = [
			// select
			'&#160;<a href="#" style="font-weight: bold" id="selectEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="selectIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_SELECT + '" />' + 
			'</a>&#160;',
			// create
			'&#160;<a href="#" style="font-weight: bold" id="crtEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="addIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE + '" />' + 
			'</a>&#160;',
			// edit
			'&#160;<a href="#" style="font-weight: bold" id="edtEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="editIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT + '" />' + 
			'</a>&#160;',
			// delete	
			'&#160;<a href="#" style="font-weight: bold" id="delEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="deleteIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE + '" />' + 
			'</a>&#160;'
		];
		
		var pulseLinks = '';
		
		// show select button
		if (a.mode === 'select') {
			pulseLinks = pulseLinkArray[0];		
		}
		
		// show create button
		if (typeof(a.createURL) != 'undefined') {
			pulseLinks += pulseLinkArray[1];
		}
		
		// show edit button
		if (typeof(a.editURL) != 'undefined') {
			pulseLinks += pulseLinkArray[2];
		}
		
		// show delete button
		if (typeof(a.deleteURL) != 'undefined') {
			pulseLinks += pulseLinkArray[3];
		}
		
        // add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

        var cb = typeof a.checked == 'boolean';

        var href = a.href ? a.href : Ext.isGecko ? "" : "#";
        var buf = ['<li class="x-tree-node"><div ext:tree-node-id="',
        	n.id,
        	'" class="x-tree-node-el x-tree-node-leaf ', 
        	a.cls,
        	'">',
            '<span class="x-tree-node-indent">',
            this.indentMarkup,
            "</span>",
            '<img src="', 
            this.emptyIcon, 
            '" class="x-tree-ec-icon x-tree-elbow" />',
            '<img src="', 
            a.icon || this.emptyIcon, 
            '" class="x-tree-node-icon',
            (a.icon ? " x-tree-node-inline-icon" : ""),
            (a.iconCls ? " "+a.iconCls : ""),
            '" unselectable="on" style="width:18px"/>',
            cb ? ('<input class="x-tree-node-cb" type="checkbox" ' + (a.checked ? 'checked="checked" />' : '/>')) : '',
            '<a hidefocus="on" class="x-tree-node-anchor" href="'
            ,href,
            '" tabIndex="1" ',
             a.hrefTarget ? ' target="'+a.hrefTarget+'"' : "", 
             ' dir="LTR"><span unselectable="on">',
             n.text,
             "</span></a>",
             pulseLinks,
             "</div>",
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>"].join('');
	
        if(bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()){
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf);
        }else{
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
        }
        
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var cs = this.elNode.childNodes;
        this.indentNode = cs[0];
        this.ecNode = cs[1];
        this.iconNode = cs[2];
        var index = 3;
        if(cb){
            this.checkbox = cs[index];
            index++;
        }
        this.anchor = cs[index];
        this.textNode = cs[index].firstChild;
        
        // create qTIP
        this.buildQTip(this, a);
        
		// select node
    	if (a.mode == 'select') {
			var selectEl = Ext.get('selectEl_' + n.id + '.' + id);
			selectEl.on('click', this.selectNode, null, {node: n});
			return;
		}
		
		// create
		if (typeof(a.createURL) != 'undefined') {
	        var createEl = Ext.get('crtEl_' + n.id + '.' + id);
	        createEl.on('click', this.createNode, null, {node: n});
		}
		
		// edit
		if (typeof(a.editURL) != 'undefined') {
	        var editEl = Ext.get('edtEl_' + n.id + '.' + id);
	        editEl.on('click', this.editNode, null, {node: n});
		}
		
		// delete
		if (typeof(a.deleteURL) != 'undefined') {
	        var deleteEl = Ext.get('delEl_' + n.id + '.' + id);
	        deleteEl.on('click', this.deleteNode, null, {node: n});
		}
    },
    
    /**
     * builds ext-qtip for node from passed {attributes}
     * 
     * @param ui : PULSE.SitemapTreeNodeUI
     * @param a : node.attributes
     * 		{
     * 			node.id
     * 			node.locale
     * 			node.visible
     * 			node.contentId
     * 			node.bundle
     * 			node.contentType
     * 		} 
     */
    buildQTip: function(ui, a) {
    	if (typeof(ui) == 'undefined' || typeof(a) == 'undefined' || ui === null) {
    		return;
    	}
    	
        text = '<span style="font-style: italic">id:</span> ' + a.id;
    	
    	if (typeof(a.locale) != 'undefined') {
    		text += '<br /><span style="font-style: italic">locale:</span> ' + a.locale;
    	}
		
		if (typeof(a.contentId) != 'undefined') {
			text += '<br /><hr /><span style="font-weight: bold">content</span><br />' +
			  '<span style="font-style: italic">id:</span> ' + a.contentId + '<br />' +
			  '<span style="font-style: italic">name:</span> ' + a.text + '<br />' +
			  '<span style="font-style: italic">bundle:</span> ' + a.bundle + '<br />' +
			  '<span style="font-style: italic">type:</span> ' + a.contentType;
		}	      	
    	try { 
	    	Ext.QuickTips.register({
	        	target: ui.textNode,
	        	title: '' + a.text,
	        	text: text
	        });  
    	} catch (e) {
    		PulseError.Throw({e:'DBG',o:e,p:[{n:'error',o:'Ext.QuickTips.register.failed'}]},'PULSE.RegistryTreeNode','buildQTip');
    	}  	
    },
    
    /**
     * 
     */
    selectNode: function(ev, target, options) {
    	if (this.disableFnClicks === true) {
			return;
		}
		tree = options.node.getOwnerTree();
		if (tree.onSelectNodeClick !== null) {
			tree.onSelectNodeClick(options.node);
		}
		return false;
    },
    
    /**
     * 
     */
    createNode: function(ev, target, options) {
    	tree = options.node.getOwnerTree();
		tree.editor.createNode(options.node);
		return false;
    },
    
    /**
     * 
     */
    editNode: function(ev, target, options) {
    	tree = options.node.getOwnerTree();
		tree.editor.editNode(options.node);
		return false;
    },
    
    /**
     * 
     */
    deleteNode: function(ev, target, options) {
    	tree = options.node.getOwnerTree();
		tree.editor.deleteNode(options.node);
		return false;
    },
    
    /**
	 * shows node loading icon
	 * call with no param or false to reset node icon
	 */
	setBusy: function(bool) {
		if (true === bool) {
			this.toggleIconCls(this.loadIconCls);
			return;
		}
		this.toggleIconCls();
	},
	
	/**
	 * 
	 */
	toggleIconCls: function(clsString) {		
		
//		PulseError.Throw({e:'DBG',p:[
//			{n:'clsString',o:clsString},
//			{n:'iconNode.getAttributeNode(class).nodeValue',o:this.iconNode.getAttributeNode('class').nodeValue},
//			{n:'loadIconCls',o:this.loadIconCls},
//			{n:'beforeIconCls',o:this.beforeIconCls}
//		]},'RegisryTreeNodeUI','toggleIconCls');
//				
    	if (typeof(clsString) == 'string') {
    		if (this.iconNode.getAttributeNode('class').nodeValue != this.loadIconCls) {
    			this.beforeIconCls = this.iconNode.getAttributeNode('class').nodeValue;
    		}    		
    		this.iconNode.getAttributeNode('class').nodeValue = this.defaultIconCls + clsString;    		
    		return;
    	}
    	
    	// try reset to this.beforeIconCls if called with no param
    	if (typeof(this.beforeIconCls) == 'string' && this.beforeIconCls !== '') {
    		this.iconNode.getAttributeNode('class').nodeValue = this.beforeIconCls;
    	}
    },
    
    /**
     * @Override
     */
    updateExpandIcon : function() {
    	
//    	nn = this.node;
//    	THROW({args:arguments,
//    		propsObj:nn,
//    		props:['id','text','attributes.has_Children','attributes.expandable'],
//    		o: nn.hasChildNodes() + ' # ' + nn.childNodes.length + ' # ' + nn.isLoaded()
//		},{type:'test'},'test');
		
        if(this.rendered){
        	
            var n = this.node, c1, c2;
            
            if (true === n.attributes.has_Children && true === n.isLoaded() && n.childNodes.length === 0) {
				n.attributes.has_Children = false;
				n.attributes.expandable = false;
			}
            
            var cls = n.isLast() ? "x-tree-elbow-end" : "x-tree-elbow";
//            var hasChild = n.hasChildNodes();
            if ((true === n.attributes.has_Children && true === n.attributes.expandable)
            	|| (true === n.hasChildNodes() && true === n.isLoaded() && n.childNodes.length > 0)) {
                if (n.expanded) {
                    cls += "-minus";
                    c1 = "x-tree-node-collapsed";
                    c2 = "x-tree-node-expanded";
                } else {
                    cls += "-plus";
                    c1 = "x-tree-node-expanded";
                    c2 = "x-tree-node-collapsed";
                }
//                if (this.wasLeaf) {
                    this.removeClass("x-tree-node-leaf");
//                    this.wasLeaf = false;
//                }
                if (this.c1 != c1 || this.c2 != c2) {
                    Ext.fly(this.elNode).replaceClass(c1, c2);
                    this.c1 = c1; this.c2 = c2;
                }
            } else {
//                if (!this.wasLeaf) {
                	this.removeClass("x-tree-node-leaf");
                    Ext.fly(this.elNode).replaceClass("x-tree-node-expanded", "x-tree-node-collapsed");
//                    delete this.c1;
//                    delete this.c2;
//                    this.wasLeaf = true;
//                }
            }
            var ecc = "x-tree-ec-icon "+cls;
//            if(this.ecc != ecc){
                this.ecNode.className = ecc;
                this.ecc = ecc;
//            }
        }

    }
    
}); // end of extend


/**
 * @Override
 */ 
PULSE.RegistryRootTreeNodeUI = function(){
    PULSE.RegistryRootTreeNodeUI.superclass.constructor.apply(this, arguments);
};
Ext.extend(PULSE.RegistryRootTreeNodeUI, PULSE.RegistryTreeNodeUI, {
    render : function(){
        if(!this.rendered){
            var targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    collapse : function(){
    },
    expand : function(){
    }
}); 
// end of file

/**
 * 
 */
DBG.SelectBoxEditorWrapper = DBG.apply(DBG.Editor,{
	initComponent: { SelectBoxEditorWrapper: false },
	onRender: false
});

/**
 * 
 */
SelectBoxEditorWrapper = {
	
	type: 'SelectBoxEditorWrapper',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: DBG.SelectBoxEditorWrapper,
	
//	/**
//	 * Is being called by Pulse.SubEditorPanel to initialise the panel with buttons 
//	 * if the SelectBoxEditorWrapper is being added to a Pulse.SubEditorPanel via 
//	 * Pulse.SubEditorPanel.addSubEditor(editor).
//	 * 
//	 * @return {Object} an Array of Ext.Toolbar.Button
//	 */
//	getButtons: function() {
//	
//		buttons = [];
//		
//		// TODO
//		
//		return buttons;
//		
//	},
	
	/**
	 * Returns whether the SelectBoxEditorWrapper has changes.
	 * 
	 * @return {Boolean} true, if the editor has changes, false otherwise
	 */
	hasChanges: function() {
		superBool = Pulse.SelectBoxEditorWrapper.superclass.hasChanges.call(this);		
		return (superBool || (this.initialValue != this.getValue()));
	},
	
	/**
	 * Returns an Object with the changes of the SelectBoxEditorWrapper.
	 * 
	 * NOTE: 	Does not check if any changes with the same parameter-name 
	 * 			are already applied to the changes-object.
	 * 
	 * @param {Object} v, the object to apply the chenges to
	 * 
	 * @return {Object} the changes, either applied to given v, or a newly created object
	 */
	getChanges: function(v) {
		
		v = Pulse.SelectBoxEditorWrapper.superclass.getChanges.call(this, v);
		
		if (false === this.hasChanges() && true !== this.getChangesAlways) {
			return v;
		}
		
		if (typeof(v) == 'undefined') {
			v = {};
		}
		
		v[this.el.dom.name] = this.getValue();
		
		return v;
		
	},
	
	/**
	 * Commits the changes of the SelectBoxEditorWrapper.
	 */
	commit: function() {
		
		if (false === this.fireEvent('MSG','beforecommit',this)) {			
			// TODO			
			return false;			
		}
		
		this.initialValue = this.getValue();		
		this.setBoxColor();
		
		this.fireEvent('MSG','commit',this);

	},
	
	/**
	 * Resets the changes of the SelectBoxEditorWrapper.
	 */
	reset: function() {
		
		if (false === this.fireEvent('MSG','beforereset',this)) {			
			// TODO			
			return false;
		}
		
		this.setValue(this.initialValue);
		this.setBoxColor();
		
		this.fireEvent('MSG','reset',this);
		
	},
	
	/**
	 * 
	 */
	setValue: function(value) {
		if (this.getValue() == value) {
			return;
		}
		
		options = this.el.dom.options;
		contains = false;
		for (var i = 0; i < options.length ; i++) {
			if (options[i].value == value) {
				options[i].selected = true;
				contains = true;		
			} else {
				options[i].selected = false;
			}
		}
		if (true === contains) {
			if (value != this.initialValue) {
				this.fireEvent('MSG','change',this);
				this.setBoxColor('y');
			} else {
				this.fireEvent('MSG','reset',this);
				this.setBoxColor();
			}
			return;
		}
		
		throw({e: 'UNDEFINED VALUE', o: this, description: 'value not in box'});
		
	},
	
	/**
	 * 
	 */
	 getValue: function() {
	 	return this.el.getValue();
	 },
	 
	 /**
	 * @param {String} color: 
	 * 		'r' or 'R'					=> red 
	 * 		'y' or 'Y' 					=> yellow
	 * 		'' or null or undefined 	=> blue, default
	 */
	setBoxColor: function(color) {
		
		// DBG >>
		THROW({o:'COLOR',args:arguments},this,'setBoxColor');
		
		if (typeof(color) != 'string') {
			// blue : default
			this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
			this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls);
			return;
		}
		
		_color = color.toUpperCase();
		switch(_color) {
			
			// red
			case 'R':
				this.el.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Red');
				this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls + 'Red');
				break;
			
			// yellow
			case 'Y':
				this.el.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
				this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls + 'Yellow');
				break;
			
			// blue
			default:
				this.el.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				this.el.replaceClass(Pulse.fieldCls + 'Red', Pulse.fieldCls);
				break;
			
		}
		
		return;
		
	},
	
	/**
	 * Is being called during creation if 
	 * SelectBoxEditorWrapper.initialConfig.renderTo is being specified.
	 */
	onRender: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['renderTo'],args:arguments},this,'onRender');
		}
		
		try {
		
			// TODO
		
		
		} catch(e) {			
 			FATAL(e,this,'onRender');
		}
	},
	
	/**
	 * Is being called during creation and initialises the editor.
	 */
	initComponent: function() {
		
		// call super
		Pulse.SelectBoxEditorWrapper.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.SelectBoxEditorWrapper');
		}
		
		try {
			
			if (typeof(this.el) == 'string') {
				this.el = Ext.get(this.el);
			}
			
			if (typeof(this.el) == 'undefined' || !this.el.is('select') || typeof(this.el.dom.name) == 'undefined') {
				throw({ e: 'config.el.UNDEFINED', o: this, description: 'initComponent.SelectBoxEditorWrapper' });
			}
			
			this.initialValue = this.getValue();
			
			this.el.on('change',function() {
				if (this.hasChanges()) {
					this.setBoxColor('y');
					this.fireEvent('MSG','change',this);
				} else {
					this.setBoxColor();
					this.fireEvent('MSG','reset',this);
				}
			}, this);
			
		} catch(e) {
			FATAL(e, this, 'initComponent.SelectBoxEditorWrapper');
		}
	}
		
};
Pulse.SelectBoxEditorWrapper = Ext.extend(Pulse.Editor, SelectBoxEditorWrapper); // END :: Pulse.SelectBoxEditorWrapper

/**
 * the sitemap-properties
 * 
 * this Object is being used for localizations, 
 * and contains the non-localized defaults
 */
var SitemapLocalizations = {
    addToolTip: 'add a new menu-item',
    deleteToolTip: 'delete this menu-item',
    editToolTip: 'edit the properties of this menu-item',
    toggleToolTip: 'toggle the visibility of this menu-item',
    removeViewToolTip: 'remove the content from this menu-item',
    MSG_REALLYREMOVEVIEW_START: 'Do you really want to remove the content from menu-item: ',
    MSG_REALLYREMOVEVIEW_END: '?'    
};


// old
/**
 * Pulse SitemapProvider
 */
var Sitemap = {
	/**
	 * returns sitemap-tree
	 *    
	 * 	@param config {Object} 
	 *    
	 *  config-options:
	 * 
	 *  	for loader: {PULSE.SitemapTreeLoader}
	 * 
	 *			@param Url	 	config.getChildrenURL
	 *			@param Url	 	config.loadNodeURL
	 * 
	 *  	for tree: {Ext.tree.TreePanel}
	 *			
	 * 			@param String 	config.renderTo (
	 * 					the id of the element the tree is to be rendered to
	 *  
	 *  		@param Url	 	config.createURL
	 *  		@param Url	 	config.renameURL
	 *  		@param Url	 	config.moveURL
	 *  		@param Url	 	config.toggleURL
	 *			@param Url	 	config.deleteURL
	 * 			@param Url	 	config.removeViewURL
	 *	
	 *  		@param function(node) 	config.startEditorFunction
	 * 					a userdefined function to put on the nodes edit button: 		
	 * 			
	 * 					function startEditorFunction(node) {
	 * 			
	 * 						// node : the clicked sitemap node
	 * 			
	 * 					}
	 * 
	 */
	getTree: function(config) {
	
	    // config-options:
	    
		// el: 			config.renderTo
		// browse: 		config.getChildrenURL
		// loadNode: 	config.loadNodeURL
	    // addNode: 	config.addNodeURL
	    // renameNode: 	config.renameURL
	    // move: 		config.moveURL
	    // toggle: 		config.toggleURL
		// delete: 		config.deleteURL
		// removeView:	config.removeViewURL
		
	    // startEditorFunction: 	config.startEditorFunction
	    
	    tree = new Ext.tree.TreePanel(this.getTreeCfg(config)); // End tree

	    // final tree setup
	    
	    // set tree root node
	    tree.setRootNode(this.getRootNode('Sitemap','source'));
	    
		// add tree listener for move-operations
		this.addMoveListener(tree);
		
		// add an inline editor for the nodes
		this.addInlineEditor(tree);
	
		// set custom tree.startEditorFunction
		if (typeof(config.startEditorFunction) == 'function') {
			tree.startEditorFunction = config.startEditorFunction;
		}
		
		// set height if given
		if (typeof(config.height) != 'undefined') { 
			tree.setHeight(config.height);
		}
	
	    return tree;
	    // call:
	    //  
	    // your_received_tree_Object.render();
	    // && 
	    // your_received_tree_Object.getRootNode().expand();
	    // 
	    // on the received tree-Object 
	    // to actually render/display the tree...
	},
	
	getTreeCfg: function(config) {
		loader = this.getTreeLoader(config);
		return {
	    	// ext-cfg
	    	xtype: 'treepanel',
	        el: config.renderTo,
	        autoScroll: true,
	        autoHeight: (typeof(config.height) != 'undefined') ? false : true,
	        animate: true,                
	        enableDD: true,
	        containerScroll: true,
	        rootVisible: false,        
	        border: false,
	        loader: loader,        
	        // pulse-cfg
	        // flag
	        creatingNewNode: false,
	        // flag for tree.editor when a node is selected:
	        // if a function icon of the node was clicked
	        // the editor will not be shown
	        hideInlineEditor: false,        
	        // function to start userdefined editor        
	        startEditorFunction: false,           
	        // the trees connection
	        dataConnection: new Ext.data.Connection(),
	        // inline node editor
	        editor: null,
	        runOnlyOnceAfterReload: null,
	        
	        /**
	         * removes the view from a sitemap-node
	         * 
	         * TODO: refactor below: this has to go elsewhere to unbind tree from ViewEditor
	         * 
	         * @param {Object} node, the node the view/content of which is to be removed
	         */
			removeView: function(node) {				
				// retrieve the removeView-action from the ViewEditor
//				tab = Ext.getCmp(node.attributes.contentType + '.' + node.attributes.contentId + '.editor');
				ViewEditor.removeView(node, config.removeViewURL);
			},
			
			/**
			 * called by the node that requests a child
			 * 
			 * @param {Object} node, the node that requests a child
			 */
			 addNewNode: function(node) {
			 	// set flag to disable further node add, delete & toggle calls
				// this.hideInlineEditor = true;
				
				// abort if another creation is already in progress
				if (this.creatingNewNode === true) {
					return;
				} else {
					this.creatingNewNode = true;
				}
				
				// run expand-context
				node.expand(null, false, function(node) {
					
					// create temp node
					newNode = node.appendChild(
						new Ext.tree.AsyncTreeNode({
							text: VIEWPORT_PROPERTIES.NEW.toUpperCase(),
							visible: false, 
							// leave autogenerated by ext
							// id: VIEWPORT_PROPERTIES.NEW + ' ' + new Date().getMilliseconds(),
							// leaf: true,
							uiProvider: PULSE.SitemapTreeNodeUI
						})
					);
					
					// scroll to node
					newNode.select();
					
					// set node ui busy
					newNode.ui.setBusy(true);
					
					// server-call
					Ext.Ajax.request({
						url: config.addNodeURL,
		        		method: 'POST',
		        		success: function(response, options) {
		        			decodedResponse = Ext.decode(response.responseText);
							node = options.node;
							newNode = options.newNode;
		        			tree = node.getOwnerTree();
							if (true === decodedResponse.status) {
		        				// set new state of addContext.node (parent)
								// if (node.leaf == true) {
									// reset the nodes elbow									
									node.ui.toggleElbow(true);
								// }					
								// set received id				
								newNode.id = decodedResponse.id;
								
								// reload newNode from server also resets tree.creatingNewNode => false
								tree.reloadNode(newNode);
								//tree.loadNodeBeforeCmd(newNode);
		        			} else {
		        				options.node.removeChild(options.newNode);
		        				tree.creatingNewNode = false;
		        				PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'Sitemap','addNode(' + options.node + ')');
		        			}
		        			
		        		},
		        		failure: function(response, options) {
		        			node = options.node;
							newNode = options.newNode;
		        			tree = node.getOwnerTree();
		        			node.removeChild(newNode);
		        			tree.creatingNewNode = false;
		        			if (typeof(response.responseText) == 'undefined') {
	   							PulseError.Throw({e:'REQUEST.FAILED'},'Sitemap','addNode(' + node + ')');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'Sitemap','addNode(' + node + ')');
					        }
		        		},
		        		node: node,
						newNode: newNode,
						params: {
							id: node.id,
							name: newNode.text
						}
					});
					
				// expand callback needs to run in this context
				}.createDelegate(this));
			 },
			 
			 /**
			  * @param {Object} node, the node to be reloaded
			  */
			 reloadNode: function(node) {
			 	
			 	//
			  	node.ui.setBusy(true);	

				// server-call
				Ext.Ajax.request({
					url: config.loadNodeURL,
	        		method: 'POST',
	        		success: function(response, options) {
	        			decodedResponse = Ext.decode(response.responseText);
	        			node = options.node;
	        			node.ui.setBusy();
						tree = node.getOwnerTree();
						if (true === decodedResponse.status) {
							// set the (new) loaded properties
	        				loadedProperties = decodedResponse.node;					
							node.ui.setPropertiesAfterLoad(loadedProperties, node);
							// trigger edit if creation of new node was in progress
							if (tree.creatingNewNode === true) {						
								// reset tree
								tree.creatingNewNode = false;
								// (function(){tree.editor.triggerEdit(node);}).defer(500);
								tree.editor.triggerEdit(node);
							}
	        			} else {
	        				PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'Sitemap','reloadNode(' + options.node + ')');
	        			}	        			
	        			if (typeof(tree.runOnlyOnceAfterReload) == 'function') {
							tree.runOnlyOnceAfterReload(node);
							tree.runOnlyOnceAfterReload = null;
						}
	        		},
	        		failure: function(response, options) {
	        			options.node.ui.setBusy();
	        			if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},'Sitemap','reloadNode(' + options.node + ')');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'Sitemap','reloadNode(' + options.node + ')');
				        }
	        		},
	        		node: node,
	        		params: {
	        			id: node.id
        			}
				});			 
			 
			 },
	
			/**
			 * deletes a node.
			 * 
			 * @param {Object} node, the node that is to be deleted
			 */
			deleteNode: function(node) {
				// set flag to disable further node add, delete & toggle calls
				this.hideInlineEditor = true;
				
				// display delete confirm-dialogue
				Ext.Msg.confirm(
					VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + node.text + '"',
					VIEWPORT_PROPERTIES.MSG_REALLYDELETE, 
		        	function(response) {
		        		// do nothing if answer is not yes
			        	if('yes' === response) {
			        		
			        		// show node busy
			        		node.ui.setBusy(true);
			        		
			        		// server-call
			        		Ext.Ajax.request({
			        			url: config.deleteURL, 
				        		method: 'POST', 
				        		success: function(response, options) {
				        			decodedResponse = Ext.decode(response.responseText);
				        			node = options.node;
									parentNode = node.parentNode;
									if (true === decodedResponse.status) {
										
										// TODO: remove this -> ViewEditor-Specific Stuff
										// do sth. like: 
										// if (node.registeredTab) {PULSE_VIEWPORT_CONTROLLER.closeTab(node.registeredTab, true);}
										tabId = 'ViewEditor.' + node.id;
										PULSE_VIEWPORT_CONTROLLER.closeTab(tabId, true);
										
										//delete
										parentNode.removeChild(node);
										
										// delay: one sec
										(function(){
											if (parentNode.childNodes.length === 0) {
												parentNode.attributes.has_Children = false;
												parentNode.ui.toggleElbow(false);
											}
										}).defer(500);
									} else {
										node.ui.setBusy();
										PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'Sitemap','deleteNode(' + options.node + ')');
									}
//									tree = node.getOwnerTree();
//									tree.hideInlineEditor = false;
				        		},
				        		failure: function(response, options) {
				        			options.node.ui.setBusy();
//				        			tree = options.node.getOwnerTree();
//				        			tree.hideInlineEditor = false;
	        						if (typeof(response.responseText) == 'undefined') {
				   						PulseError.Throw({e:'REQUEST.FAILED'},'Sitemap','deleteNode(' + options.node + ')');
							        } else {
							        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'Sitemap','deleteNode(' + options.node + ')');
							        }
				        		},
				        		node: node, 
				        		params: {
				        			id: node.id
				        		}
			        		});
			        		
			        	} 
//			        	else {
//			        		// reset flag to reenable node add, delete & toggle calls
//							this.hideInlineEditor = false;
//			        		return;
//			        	}
		        	}, 
		        	this
	        	);				
			},
	
			/**
			 * toggles the visibility of a node
			 * 
			 * @param {Object} node, the node to be toggled
			 */
			toggleNode: function(node) {
				// set flag to disable further node add, delete & toggle calls
				this.hideInlineEditor = true;
				
				// set nodeUI
	        	node.ui.setBusy(true);
	        	
	        	// server-call
	        	Ext.Ajax.request({
	        		url: config.toggleURL,
		    		method: 'POST',
		    		success: function(response, options) {
		    			decodedResponse = Ext.decode(response.responseText);
		    			node = options.node;
		    			node.ui.setBusy();
		    			if (true === decodedResponse.status) {
		    				node.attributes.visible = decodedResponse.visible;
							node.ui.toggleNodeText(decodedResponse.visible);
							node.ui.buildQTip(node.ui, node.attributes);
							if (true === decodedResponse.reloadNode) {
								node.reload();
							}
		    			} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'Sitemap','toggleNode(' + options.node + ')');
		    			}
//		    			tree = node.getOwnerTree();
//		    			tree.hideInlineEditor = false;
		    		},
		    		failure: function(response, options) {
		    			options.node.ui.setBusy();
//		    			tree = options.node.getOwnerTree();
//		    			tree.hideInlineEditor = false;
						if (typeof(response.responseText) == 'undefined') {
				   			PulseError.Throw({e:'REQUEST.FAILED'},'Sitemap','toggleNode(' + options.node + ')');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'Sitemap','toggleNode(' + options.node + ')');
				        }
		    		},
		    		node: node, 
		    		params: {
		    			id: node.id
		    		}
	        	});
			},
	
			/**
			 * moves a node within the tree after exectuing an Ajax-server-call and processing
			 * it's response.
			 * 
			 * @Override 
			 * 
			 * @param {Object} e :   
			 * 		e.tree - The TreePanel
		     * 		e.target - The node being targeted for the drop
		     * 		e.data - The drag data from the drag source
		     * 		e.point - The point of the drop - append, above or below
		     * 		e.source - The drag source
		     * 		e.rawEvent - Raw mouse event
		     * 		e.dropNode - Drop node(s) provided by the source OR you can supply node(s) to be inserted by setting them on this object.
		     * 		e.cancel - Set this to true to cancel the drop.
		     * 
		     * @return {Boolean} false 
		     * 		always to cancel default Ext.tree-operation drop, drop is performed after AJAX-call
		     * 
			 */
			onbeforenodedrop: function(e) {

				// set flag to disable further node add, delete & toggle calls
				this.hideInlineEditor = true;		

				// server-call
				Ext.Ajax.request({
					url: config.moveURL, 
		    		method: 'POST', 
		    		success: function(response, options) {
		    			decodedResponse = Ext.decode(response.responseText);
		    			targetNode = options.e.target;
						movenode = options.e.dropNode;
						oldParent = movenode.parentNode;
		    			if (true === decodedResponse.status)  {
		    				switch (options.e.point) {						
								case 'append':
									// targetNode.leaf = false;									
									if(!targetNode.isExpanded()){
										try {
											if (true === targetNode.isLoaded()) {
									            targetNode.expand(false, null, function(){
								            		targetNode.appendChild(movenode);
								            		targetNode.ui.toggleElbow(true);
								            		if (oldParent.childNodes.length === 0) {
								            			oldParent.ui.toggleElbow(false);
								            		}
									            }.createDelegate(this));							            		
							            	} else {
							            		oldParent.removeChild(movenode);
							            		if (oldParent.childNodes.length === 0) {
							            			oldParent.ui.toggleElbow(false);
							            		}
							            		targetNode.expand();
							            		targetNode.ui.toggleElbow(true);					                							                	
							            	}
						            	} catch (err) {
								            targetNode.expand();
							            	targetNode.appendChild(movenode);
							            	targetNode.ui.toggleElbow(true);
							            	if (oldParent.childNodes.length === 0) {
						            			oldParent.ui.toggleElbow(false);
						            		}
						            	}
							        } else {
							        	targetNode.appendChild(movenode);
							        	targetNode.ui.toggleElbow(true);
							        	if (oldParent.childNodes.length === 0) {
					            			oldParent.ui.toggleElbow(false);
					            		}
							        }
								break;
								
								case 'above':
									targetNode.parentNode.insertBefore(movenode, targetNode);
									if (oldParent.childNodes.length === 0) {
				            			oldParent.ui.toggleElbow(false);
				            		}
								break;
								
								case 'below':
									targetNode.parentNode.insertBefore(movenode, targetNode.nextSibling);
									if (oldParent.childNodes.length === 0) {
				            			oldParent.ui.toggleElbow(false);
				            		}
								break;
							}
		    			} else {
		    				PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'Sitemap','onbeforenodedrop(' + options.e.dropNode + ')');
		    			}
		    		},	    		 
		    		failure: function(response, options) {
		    			if (typeof(response.responseText) == 'undefined') {
				   			PulseError.Throw({e:'REQUEST.FAILED'},'Sitemap','onbeforenodedrop(' + options.e.dropNode + ')');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'Sitemap','onbeforenodedrop(' + options.e.dropNode + ')');
				        }
		    		}, 
		    		e: e,
		    		params: {
		    			targetnodeid: e.target.id, 
						insertpoint: e.point,
						movenodeid: e.dropNode.id
		    		}					
				});
				return false;
			},
			
			/**
			 * renames a node
			 * 
			 * @param {Object} renameContext
			 *	 	{
			 *			editor: editor,
			 *			node: editor.editNode, 
			 *			newname: newName, 
			 *			oldname: oldName
			 *		}
			 */
			 renameNode: function(renameContext) {
			 	
			 	renameContext.node.ui.setBusy(true);
			 	Ext.Ajax.request({
					url: config.renameURL,  
		    		method: 'POST', 
		    		success: function(response, options) {
		    			decodedResponse = Ext.decode(response.responseText);
		    			options.renameContext.editor.cancellingEdit = true;
	        			options.renameContext.editor.cancelEdit();
		    			node = options.renameContext.node;
		    			tree = node.getOwnerTree();		    			
		    			if (true === decodedResponse.status) {
		    				tree.reloadNode(node);
		    				// node.setText(renameContext.newname);							
							// node.ui.buildQTip(renameContext.node.ui, renameContext.node.attributes);
		    			} else {
		    				node.ui.setBusy();
		    				PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'Sitemap','renameNode(' + node + ')');
		    			}
		    			// tree.hideInlineEditor = false;
		    		},
		    		failure: function(response, options) {
		    			options.renameContext.editor.cancellingEdit = true;
	        			options.renameContext.editor.cancelEdit();
		    			node = options.renameContext.node;
		    			// tree = node.getOwnerTree();
		    			node.ui.setBusy();
		    			// tree.hideInlineEditor = false;
		    			if (typeof(response.responseText) == 'undefined') {
				   			PulseError.Throw({e:'REQUEST.FAILED'},'Sitemap','renameNode(' + options.renameContext.node + ')');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'Sitemap','renameNode(' + options.renameContext.node + ')');
				        }
		    		},
		    		renameContext: renameContext, 
		    		params: {
//		    			oldname: renameContext.oldname, 
						newname: renameContext.newname,
						id: renameContext.node.id
		    		}
				});
			 },
			
			/**
			 * calls a userdefined editor function with the given node
			 */
			startEditorForNode: function(node) {
				tree.hideInlineEditor = true;
				if (typeof(this.startEditorFunction) != 'function') {
					alert('ERROR :: node.id:' + node.id + 
						'\ntypeof( startEditorFunction ) != "function": \n' + 
						typeof(this.startEditorFunction));
					return;
				}
				try {
					this.startEditorFunction(node);
				} catch (startEditorFunctionError) {
					tree.hideInlineEditor = false;
				}
			},
			
			/**
			 * sets the inline-editor of the tree
			 */
			setEditor: function(editor) {
				this.editor = editor;
			},
			
			/**
			 * checks for show of editor
			 */
			onBeforeStartEdit: function() {
				if (this.hideInlineEditor === true) {
					// reset flag
					this.hideInlineEditor = false;
					return false;
				}
				// check
				if(this.creatingNewNode === true) {
					// exit: currently creating new node			
					return false;
				}
			},
					
			/**
			 * @Override
			 */
			onBeforeEditComplete: function(editor, newName, oldName) {
				
				// check
				if(this.creatingNewNode === true) {
					// exit: creating new node			
					return;
				}
							
				// check						
				if(editor.cancellingEdit === true) {
					editor.cancellingEdit = false;
					return;
				}
				
				// check
				if(newName === oldName) {
					return;
				}
				
				// set flag to disable further node add, delete & toggle calls
				this.hideInlineEditor = true;
				
				this.renameNode({
					editor: editor,
					node: editor.editNode, 
					newname: newName, 
					oldname: oldName
				});
				return false;
			},
	
		
			/**
			 * @param {Object} node
			 * @param {Array} arrayids, array of node-ids
			 * @param {Function} callback
			 */	
			expandByIds: function(node, arrayids, callback, locale, expand) {
				
				try {
				
					if (typeof(node) == 'undefined') {
						return;
					} else if (node === null) {
						if (typeof(SitemapTree) != 'undefined' && SitemapTree !== null) {
							node = SitemapTree.getRootNode();
						} else {
							return;
						}
					}
					
					sitemapPanel = Ext.getCmp('SitemapEditor.WEST');
					if (typeof(sitemapPanel) == 'undefined' || sitemapPanel === null) {
						PULSE_TOOLBAR.openPanel({
            				id: 'SitemapEditor.WEST',
            				callback: function() {
	            				SitemapTree.expandByIds(null, arrayids);
	            			}
            			});
            			return;
					}
					
					sitemapPanel.expand();
					sitemapPanel.disable();
					if (true === sitemapPanel.isExpanding && true !== expand) {
						return;
					}
					sitemapPanel.isExpanding = true;
					if (typeof(locale) != 'undefined' 
							&& locale !== null
							&& locale != SitemapTree.getRootNode().attributes.locale) {
						if (true === sitemapPanel.isLoading) {
							return;
						}
						cfg = sitemapPanel.initialConfig.autoLoad;
						cfg.timeout = 30;
						cfg._arrayids = arrayids;
						cfg._callback = callback;
						cfg._sitemapPanel = sitemapPanel;
						cfg.callback = function(el, success, response, options) {
							cfg._sitemapPanel.isLoading = false;
							if (true === success) {
								SitemapTree.expandByIds(null, options._arrayids, options._callback, null, true);
							} else  {
								cfg._sitemapPanel.enable();
							}
							LPCB(el, success, response, options);
						};
						cfg.params = { 'sitemap-locale' : locale };
						sitemapPanel.isLoading = true;
						(function(){sitemapPanel.load(cfg);}).defer(500);
						return;
						
					}
					
					// expand-function
					exp_fn = function(){
						node.expand(false, true, function(node) {
						
							c = node.findChild('id', arrayids[0]);
	
							if (arrayids.length === 1) {
								c.select();
								sitemapPanel = Ext.getCmp('SitemapEditor.WEST');
								sitemapPanel.isExpanding = false;
								sitemapPanel.enable();
								Ext.getCmp('west-region').doLayout();
								if (typeof(callback) == 'function') {
									callback(c);	
								}
								return;
							}
							
							arrayids.shift();
							SitemapTree.expandByIds(c, arrayids, callback, null, true);
						});
					};
					
					//
					if (arrayids.length === 2) {
						if (node.isLoaded()) {
							node.reload(exp_fn);
						} else {
							exp_fn();
						}
					} else {
						exp_fn();
					}
					
							
					return;
					
				} catch(e) {
					sitemapPanel = Ext.getCmp('SitemapEditor.WEST');
					if (typeof(sitemapPanel) != 'undefined' && sitemapPanel !== null) {
						sitemapPanel.isExpanding = false;
						sitemapPanel.isLoading = false;
						sitemapPanel.enable();
					}
				}	
					
			},
	
			/**
			 * recursively walks through the tree (loaded nodes only) and tries to find node with
			 * node.id == given id
			 * 
			 * @param {String}/{Number} id
			 * @param {Object} node
			 */
			findChildById: function(id, node) {
				
				if (typeof(id) == 'undefined' || id === null) {
					return;
				}
				
				if (typeof(node) == 'undefined' || node === null) {
					node = SitemapTree.getRootNode();
				}
				
				if (node.id == id) {
					return node;
				}
				
				if (node.firstChild !== null) {
					return this.findChildById(id, node.firstChild);
				} else if (node.nextSibling !== null) {
					return this.findChildById(id, node.nextSibling);
				} else if (node.parentNode !== null && node.parentNode.nextSibling !== null) {
					return this.findChildById(id, node.parentNode.nextSibling);
				}
				
			},
	
			/**
			 * recursively walks through the tree (loaded nodes only) and tries to find node with
			 * node.attributes.contentId == given id
			 * 
			 * @param {String}/{Number} id
			 * @param {Object} node
			 * @param {Object} list array
			 */
			findChildrenByContentId: function(id, node, list) {
				
				if (typeof(id) == 'undefined' || id === null) {
					return;
				}
				
				if (typeof(node) == 'undefined' || node === null) {
					node = SitemapTree.getRootNode();
				}
				
				if (typeof(list) == 'undefined' || list === null) {
					list = [];
				}
				
				if (node.attributes.contentId == id) {
					list.push(node);
				}
				
				if (node.firstChild !== null) {
					return this.findChildrenByContentId(id, node.firstChild, list);
				} else if (node.nextSibling !== null) {
					return this.findChildrenByContentId(id, node.nextSibling, list);
				} else if (node.parentNode !== null && node.parentNode.nextSibling !== null) {
					return this.findChildrenByContentId(id, node.parentNode.nextSibling, list);
				}
				
				return list;
				
			}			
					
	    };
	},
	
	getTreeLoader: function(config) {
		return new Ext.tree.TreeLoader({
	        dataUrl: config.getChildrenURL,
	        uiProviders: {
	     		'SitemapTreeNodeUI': PULSE.SitemapTreeNodeUI
	 		}
	    });
	},
	
	getRootNode: function(text, id) {
		return new Ext.tree.AsyncTreeNode({
	        text: text,
	        draggable: false,
	        id: id
	    });
	},
	
	addMoveListener: function(tree) {
	    tree.on({
	    	// moveNode-function
			'beforenodedrop': {scope:tree, fn:tree.onbeforenodedrop}
		});
	},
	
	addInlineEditor: function(tree) {
		
	    editor = new Ext.tree.TreeEditor(tree, {
	        allowBlank: false,
	        selectOnFocus: true    
	    });
	    tree.setEditor(editor);    
	    
	    // add inline editor listener
	    editor.on({
			// checks for show of editor at all
			'beforestartedit': { scope: tree, fn: tree.onBeforeStartEdit },
			// check create/rename
			'beforecomplete': { scope: tree, fn: tree.onBeforeEditComplete }
		});
		
	}

}; // END :: Sitemap

// Create namespace (PULSE)
// Ext.namespace('PULSE');
 
/**
 * definition of the user-interface for a sitemap-tree-node
 */
PULSE.SitemapTreeNodeUI = function() {	
    // call parent constructor    
    PULSE.SitemapTreeNodeUI.superclass.constructor.apply(this, arguments);
};
 
// extend
SitemapTreeNodeUI = {

	// properties

	// used to hold old icon
	// when displaying loading-icon
	defaultIconCls: 'x-tree-node-icon ',
	beforeIconCls: '',
	loadIconCls: 'nodeLoadingIconCls',
	functionsIconSize: 14,
//	disableFnClicks: false,
	


	/**
	 * @Override
	 */
	renderElements: function(n, a, targetNode, bulkRender) {
		
		//set icon
		a.iconCls = 'noViewIconCls';
		removeViewCls = '';
		if (typeof(a.contentType) != 'undefined' &&
			typeof(a.contentType) == 'string' && 
			a.contentType !== '') {
			
			a.iconCls = a.contentType.replace(/\./g,'');
			
			// build remove view icon
			removeViewCls = 'delete' + a.iconCls + '_' + this.functionsIconSize;
		}
		
		visibleClass = 'visibleIconCls_' + this.functionsIconSize;
		if (a.visible === false || a.visible == 'false') {
			visibleClass = 'invisibleIconCls_' + this.functionsIconSize;
		}

		// var _this = this;
		styleString = 'margin-bottom: 2px; padding: 0px; border: 0px; vertical-align: middle;';

		id = Ext.id();
		var pulseLinkArray = [
			// 0 : add
			'&#160;<a href="#" style="font-weight: bold" id="addEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="addIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + SitemapLocalizations.addToolTip + '" />' + 
			'</a>&#160;',
			// 1 : delete	
			'&#160;<a href="#" style="font-weight: bold" id="delEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="deleteIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + SitemapLocalizations.deleteToolTip + '" />' + 
			'</a>&#160;',
			// 2 : edit
			'&#160;<a href="#" style="font-weight: bold" id="edtEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="editIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + SitemapLocalizations.editToolTip + '" />' + 
			'</a>&#160;',
			// 3 : toggle
			'&#160;<a href="#" style="font-weight: bold" id="tglEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="' + visibleClass + '" ' + 
				'id="tglIcon_' + n.id + '" ' + 
				'ext:qtip="' + SitemapLocalizations.toggleToolTip + '"/>' + 
			'</a>&#160;',
			// 4 : remove view/content
			'&#160;<a href="#" style="font-weight: bold" id="remEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="' + removeViewCls + '" ' + 
				'id="remIcon_' + n.id + '" ' + 
				'ext:qtip="' + SitemapLocalizations.removeViewToolTip + '"/>' + 
			'</a>&#160;',
			// 5 : select
			'&#160;<a href="#" style="font-weight: bold" id="selectEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="selectIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_SELECT + '" />' + 
			'</a>&#160;'
		];
		
		// remember this.toggleIconId for further toggles
		this.toggleIconId = 'tglIcon_' + n.id;
		
		// TODO: choose the right links
		// remove view directly after title -> [4] first
		var pulseLinks = pulseLinkArray[4] + 
						pulseLinkArray[0] + 
						pulseLinkArray[1] + 
						pulseLinkArray[2] + 
						pulseLinkArray[3];
						
		// show select button
		if (a.mode === 'select') {
			pulseLinks = pulseLinkArray[5];		
		}
						
        // add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

        var cb = typeof a.checked == 'boolean';

        var href = a.href ? a.href : Ext.isGecko ? '' : '#';
        var buf = [
	        '<li class="x-tree-node"><div ext:tree-node-id="',
	        n.id,
	        '" class="x-tree-node-el x-tree-node-leaf ', 
	        a.cls,
	        '">',
	        '<span class="x-tree-node-indent">',
	        this.indentMarkup,
	        '</span>',
	        '<img src="',
	        this.emptyIcon,
	        '" class="x-tree-ec-icon x-tree-elbow" />',
	        '<img src="',
	        a.icon || this.emptyIcon,
	        '" class="x-tree-node-icon',
	        (a.icon ? ' x-tree-node-inline-icon' : ''),
	        (a.iconCls ? ' ' + a.iconCls : ''),
	        '" unselectable="on" style="width:18px"/>',
	        (cb ? ('<input class="x-tree-node-cb" type="checkbox" ' + 
	        	(a.checked ? 'checked="checked" />' : '/>')) : ''),
	        '<a hidefocus="on" class="x-tree-node-anchor" href="',
	        href,
	        '" tabIndex="1" ',
	        (a.hrefTarget ? ' target="'+a.hrefTarget+'"' : ''),
	        ' dir="LTR"><span unselectable="on">',
	        n.text,
	        '</span></a>',
	        (a.type == 'VIRTUAL' && a.mode != 'select') ? '' : pulseLinks,
	        '</div>',
	        '<ul class="x-tree-node-ct" style="display:none;"></ul>',
	        '</li>'
        ].join('');

        if (bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()) {
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin", n.nextSibling.ui.getEl(), buf);
        } else {
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
        }
        
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        var cs = this.elNode.childNodes;
        this.indentNode = cs[0];
        this.ecNode = cs[1];
        this.iconNode = cs[2];
        var index = 3;
        if(cb){
            this.checkbox = cs[3];
            index++;
        }
        this.anchor = cs[index];
        this.textNode = cs[index].firstChild;
        
        // select node
    	if (a.mode == 'select') {
			var selectEl = Ext.get('selectEl_' + n.id + '.' + id);
			selectEl.on('click', this.selectNode, null, {node: n});
		} else if (a.type != 'VIRTUAL' && a.mode != 'select') {
        
	        // pulse nodes { index += 2 => to skip textnodes inbetween the links }
	        // rem view
	        index += 2;
	        this.removeViewFunctionNode = cs[index];
	        // add
	        index += 2;
	        this.addFunctionNode = cs[index];
	        // delete
	        index += 2;
	        this.deleteFunctionNode = cs[index];
	        // edit
	        index += 2;
	        this.editFunctionNode = cs[index];
	        // toggle
	        index += 2;
	        this.toggleFunctionNode = cs[index];
        
		}
        
        // set visible/invisible textNode.cls
        this.toggleNodeText(a.visible, true);
        
        // create qTIP
        this.buildQTip(this, a);
        
        // display correct node-elbow
		// this.toggleElbow(a.has_Children);        
		
		if (a.type != 'VIRTUAL' && a.mode != 'select') {
	        // add
	        var addEl = Ext.get('addEl_' + n.id + '.' + id);
	        addEl.on('click', this.addNode, null, {node: n});
			// addEl.set({'ext:qtip': 'TODO: addNewSitemapNode'});
	        
	        // remove
	        var delEl = Ext.get('delEl_' + n.id + '.' + id);
			delEl.on('click', this.deleteNode, null, {node: n});
	        // delEl.set({'ext:qtip': 'TODO: deleteSitemapNode'});  
	       
	       // editor
	        var edtEl = Ext.get('edtEl_' + n.id + '.' + id);
			edtEl.on('click', this.editorForNode, null, {node: n});
	        // edtEl.set({'ext:qtip': 'TODO: editorForSitemapNode'});
	       
	       // toggle
	        var tglEl = Ext.get('tglEl_' + n.id + '.' + id);
			tglEl.on('click', this.toggleNode, null, {node: n});
	        // tglEl.set({'ext:qtip': 'TODO: toggleVisibilitySitemapNode'});
	        
	        
	        // determine show/hide remove view button
	        if (removeViewCls === '') {
	    		this.toggleRemoveView(removeViewCls);
	    	}
	        // remove view
	        var remEl = Ext.get('remEl_' + n.id + '.' + id);
			remEl.on('click', this.removeView, null, {node: n});
		}
    },
    
    /**
     * 
     */
    selectNode: function(ev, target, options) {
    	if (this.disableFnClicks === true) {
			return;
		}
//		tree = options.node.getOwnerTree();
//		tree.fireEvent('click', options.node, ev);
//		if (typeof(tree.onSelectNodeClick) == 'function') {
//			tree.onSelectNodeClick(options.node);
//		}
		return false;
    },
    
    /**
     * removes the View from the SitemapNode
     */
    removeView: function(ev, target, options) {
    	if (this.disableFnClicks === true) {
			return;
		}
		tree = options.node.getOwnerTree();
		tree.removeView(options.node);
        return false;
//		options.node.getOwnerTree().editor.removeView(options.node);
//		return false;
    },
	
	/**
	 * adds child node
	 * calls the owner trees' add function
	 */
	addNode: function(ev, target, options) {
		if (this.disableFnClicks === true) {
			return;
		}
		tree = options.node.getOwnerTree();
		tree.addNewNode(options.node);
        return false;
//		options.node.getOwnerTree().editor.create(options.node);
//		return false;
	},

	/**
	* deletes the passed node
	* calls the owner trees' delete function
	*/
	deleteNode: function(ev, target, options) {
		if (this.disableFnClicks === true) {
			return;
		}
		tree = options.node.getOwnerTree();
		tree.deleteNode(options.node);
        return false;
//		options.node.getOwnerTree().pulsetree.remove(options.node);
//		return false;
	},
 
 	/**
 	 * starts the editor
	 * calls the owner trees' editor function
	 */
	editorForNode: function(ev, target, options) {
		if (this.disableFnClicks === true) {
			return;
		}						
		tree = options.node.getOwnerTree();
		tree.startEditorForNode(options.node);
        return false;
//		options.node.getOwnerTree().editor.startViewEditor(options.node);
//		return false;
	},
	
	/**
	 * toogles the node
	 * calls the owner trees' toggle function
	 */
	toggleNode: function(ev, target, options) {
		if (this.disableFnClicks === true) {
			return;
		}
		tree = options.node.getOwnerTree();
		tree.toggleNode(options.node);
        return false;
//		options.node.getOwnerTree().editor.toggle(options.node);				
//		return false;
	},
    
    // call this with the nodes new sitemap-properties
    // as nodes Object to set new properties 
    setPropertiesAfterLoad: function(loadedNode, node) {
    	
    	node.id = loadedNode.id;
    	node.setText(loadedNode.text);
    	node.attributes = loadedNode;
    	
    	// determine icon
    	iconCls = 'noViewIconCls';
    	removeViewIconCls = '';
		if (typeof(loadedNode.contentType) != 'undefined' && 
			typeof(loadedNode.contentType) == 'string' && 
			loadedNode.contentType !== '') {
								
			contentTypeArray = loadedNode.contentType.split('.');
			iconCls = contentTypeArray.join('');	
			removeViewIconCls = 'delete' + iconCls + '_' + this.functionsIconSize;
		}
		// set icon
		this.beforeIconCls = this.defaultIconCls + iconCls;
		this.toggleIconCls(iconCls);
		
		// set visibility state
		this.toggleNodeText(loadedNode.visible);
		
		// rebuild quick-tip
		this.buildQTip(node.ui, loadedNode);
		
		// show/hide remove-view button
		this.toggleRemoveView(removeViewIconCls);
		
		// display correct node-elbow
		this.toggleElbow(loadedNode.has_Children);
    },
    
    // showHide remove view button
    toggleRemoveView: function(clsString) {
    	if (typeof(this.removeViewFunctionNode) == 'undefined' 
    		|| this.removeViewFunctionNode === null) {
    		return;
    	}
    	if (clsString === '') {
    		this.removeViewFunctionNode.style.cssText = 'display: none;';
    	} else {
    		this.removeViewFunctionNode.firstChild.className = clsString;
    		this.removeViewFunctionNode.style.cssText = '';
    	}
    },
    
    /**
     * toggles/sets the the current state visibility state of the node
     * 
     * either pass boolean or string "false" to set node invisible 
     */
    toggleNodeText: function(visible, bRender) {

    	// alert("toggleNodeText: " + visible);    	
    	visible = eval(visible);    	
    	if (typeof(visible) != 'boolean') {
    		return;
    	}
    	
    	// toggle 	
    	if (!visible) {
    		this.textNode.style.cssText = 'color: #999999;';
    	} else {
    		this.textNode.style.cssText = 'color: #000000;';
    	}
    	
    	// toggle toggle icon
    	if (typeof(bRender) != 'boolean' && bRender !== true) {
    		this.toggleToggleIcon(visible);
    	}
    	
    },
    
    /**
     * toggles the toggle icon
     */
    toggleToggleIcon: function(visible) {

    	tglIconImgEl = Ext.get(this.toggleIconId);
    	if (typeof(tglIconImgEl) == 'undefined' || tglIconImgEl === null) {
    		return;
    	}
    	if (visible) {
    		tglIconImgEl.replaceClass('invisibleIconCls_' + this.functionsIconSize, 
    			'visibleIconCls_' + this.functionsIconSize);
    	} else {    		
    		tglIconImgEl.replaceClass('visibleIconCls_' + this.functionsIconSize, 
    			'invisibleIconCls_' + this.functionsIconSize);
    	}
    	return;
    	
    },
    
    updateExpandIcon : function(){
        if(this.rendered){
            var n = this.node, c1, c2;
            var cls = n.isLast() ? "x-tree-elbow-end" : "x-tree-elbow";
            var hasChild = n.hasChildNodes();
            if (hasChild || n.attributes.expandable) {
                if (n.expanded) {
                    cls += "-minus";
                    c1 = "x-tree-node-collapsed";
                    c2 = "x-tree-node-expanded";
                } else {
                    cls += "-plus";
                    c1 = "x-tree-node-expanded";
                    c2 = "x-tree-node-collapsed";
                }
                if (this.wasLeaf) {
                    this.removeClass("x-tree-node-leaf");
                    this.wasLeaf = false;
                }
                if (this.c1 != c1 || this.c2 != c2) {
                    Ext.fly(this.elNode).replaceClass(c1, c2);
                    this.c1 = c1; this.c2 = c2;
                }
            } else {
                if (!this.wasLeaf) {
                    Ext.fly(this.elNode).replaceClass("x-tree-node-expanded", "x-tree-node-leaf");
                    delete this.c1;
                    delete this.c2;
                    this.wasLeaf = true;
                }
            }
            var ecc = "x-tree-ec-icon "+cls;
            if(this.ecc != ecc){
                this.ecNode.className = ecc;
                this.ecc = ecc;
            }
        }
//        if (typeof(n.attributes.mode) == 'undefined') {
			this.toggleElbow();
//        }
    },    
    
    /**
     * toggles the nodes elbow according to it's current state
     */
    toggleElbow: function(has_Children) {

    	if (typeof(has_Children) != 'boolean') {
    		if (this.node.attributes.has_Children === false/* && this.node.childNodes.length == 0*/) {
    			has_Children = false;
    		} else {
    			has_Children = true;
    		}
    	}
    	
    	classBefore = this.ecNode.className;
//    	PulseError.Throw({e:'DBG',p:[{n:'node.id',o:this.node.id},{n:'has_Children',o:has_Children},{n:'classBefore',o:classBefore}]},
// 			'SitemapTreeNodeUI','toggleElbow()');
    	
    	classNew = this.node.isLast() ? 'x-tree-elbow-end' : 'x-tree-elbow';
    	
    	if (has_Children === true && this.node.isExpanded()) {
    		this.node.attributes.has_Children = true;
    		classNew += '-minus';
    	} else if (has_Children === true && !this.node.isExpanded()) {
    		this.node.attributes.has_Children = true;
    		classNew += '-plus';
    	} else {
    		//this.node.attributes.expandable = false;
    		this.node.attributes.has_Children = false;
    		this.node.expandable = false;
    	}
    	
//    	PulseError.Throw({e:'DBG',p:[{n:'node.id',o:this.node.id},
//    		{n:'node.expandable',o:this.node.expandable},
//    		{n:'has_Children',o:has_Children},{n:'classNew',o:classNew}]},
// 			'SitemapTreeNodeUI','toggleElbow()');
    	
    	var ecc = "x-tree-ec-icon " + classNew;
        if(this.ecc != ecc){
            this.ecNode.className = ecc;
            this.ecc = ecc;
        }
    	
//    	PulseError.Throw({e:'DBG',p:[{n:'node.id',o:this.node.id},{n:'node.childNodes.length',o:this.node.childNodes.length},
//    		{n:'node.text',o:this.node.text},{n:'has_Children',o:has_Children},
//    		{n:'this.ecc',o:this.ecc},{n:'this.ecNode.className',o:this.ecNode.className}]},
// 			'SitemapTreeNodeUI','toggleElbow()');
    	
    	return;
    }, 

    
    /**
     * builds ext-qtip for node from passed {attributes}
     * 
     * @param ui : PULSE.SitemapTreeNodeUI
     * @param a : node.attributes
     * 		{
     * 			node.id
     * 			node.locale
     * 			node.visible
     * 			node.contentId
     * 			node.bundle
     * 			node.contentType
     * 		} 
     */
    buildQTip: function(ui, a) {

    	if (typeof(ui) == 'undefined' || typeof(a) == 'undefined' || ui === null) {
    		return;
    	}
    	Ext.QuickTips.register({
        	target: ui.textNode,
        	title: '' + a.text,
        	text: '<span style="font-style: italic">id:</span> ' + a.id + '<br />' +
        		  '<span style="font-style: italic">locale:</span> ' + a.locale + '<br />' +
				  '<span style="font-style: italic">visible:</span> ' + a.visible +
				  '<hr /><span style="font-weight: bold">content</span><br />' +
				  '<span style="font-style: italic">id:</span> ' + a.contentId+ '<br />' +
				  '<span style="font-style: italic">name:</span> ' + a.contentName+ '<br />' +
				  '<span style="font-style: italic">bundle:</span> ' + a.contentBundle + '<br />' +
				  '<span style="font-style: italic">type:</span> ' + a.contentType
        });	
    },
	
	/**
	 * 
	 */
	toggleIconCls: function(clsString) {
		
//		PulseErrorWindow.Throw(['DBG',
//			'SitemapTreeNode.toggleIconCls(' + clsString + ') -1- ',
//			'this.beforeIconCls: ' + this.beforeIconCls,
//			'this.iconNode.class: ' + this.iconNode.getAttributeNode('class').nodeValue
//		]);
    	if (typeof(clsString) == 'string') {
    		if (this.iconNode.getAttributeNode('class').nodeValue != this.defaultIconCls + this.loadIconCls) {
    			this.beforeIconCls = this.iconNode.getAttributeNode('class').nodeValue;
    		}
    		this.iconNode.getAttributeNode('class').nodeValue = this.defaultIconCls + clsString;
//    		PulseErrorWindow.Throw(['DBG',
//				'SitemapTreeNode.toggleIconCls(' + clsString + ') -2.1- ',
//				'this.beforeIconCls: ' + this.beforeIconCls,
//				'this.iconNode.class: ' + this.iconNode.getAttributeNode('class').nodeValue
//			]);
    		return;
    	}
    	// try reset to this.beforeIconCls if called with no param
    	if (typeof(this.beforeIconCls) == 'string' && this.beforeIconCls !== '') {
    		this.iconNode.getAttributeNode('class').nodeValue = this.beforeIconCls;
    	}
//    	PulseErrorWindow.Throw(['DBG',
//			'SitemapTreeNode.toggleIconCls(' + clsString + ') -2.2- ',
//			'this.beforeIconCls: ' + this.beforeIconCls,
//			'this.iconNode.class: ' + this.iconNode.getAttributeNode('class').nodeValue
//		]);
    },
	
	/**
	 * shows node loading icon
	 * call with no param or false to reset node icon
	 */
	setBusy: function(bool) {
//		PulseErrorWindow.Throw(['DBG',
//			'SitemapTreeNode.setBusy(' + bool + ')',
//			'this.busyBusy: ' + this.busyBusy,
//			'this.beforeIconCls: ' + this.beforeIconCls,
//			'this.iconNode.class: ' + this.iconNode.getAttributeNode('class').nodeValue
//		]);
		if (true === bool) {
			if (true === this.busyBusy) {
				return;
			}
			this.busyBusy = true;
			this.disableFnClicks = true;
			this.toggleIconCls(this.loadIconCls);
			return;
		}
		this.busyBusy = false;
		this.toggleIconCls();
		this.disableFnClicks = false;		
	},
	
	/**
	 * 
	 */
	cleanUp: function() {
		try {
			tabId = 'ViewEditor.' + this.node.id;
			PULSE_VIEWPORT_CONTROLLER.closeTab(tabId, true);
		} catch (e) {/* ignore */}
	},
	
	/**
	 * 
	 */
	afterChange: function(_thisNode) {
//		alert('called ' + this.node + ' ' + _thisNode);
		(function() {
			if (_thisNode.childNodes.length === 0) {
				_thisNode.attributes.has_Children = false;
				_thisNode.ui.toggleElbow(false);
			} else {
				_thisNode.attributes.has_Children = true;
				_thisNode.ui.toggleElbow(true);
			}
		}).defer(500);
	}
		
};
Ext.extend(PULSE.SitemapTreeNodeUI, Ext.tree.TreeNodeUI, SitemapTreeNodeUI); // end of extend


/**
 * @Override
 */ 
PULSE.SitemapRootTreeNodeUI = function() {
    PULSE.SitemapRootTreeNodeUI.superclass.constructor.apply(this, arguments);
};
Ext.extend(PULSE.SitemapRootTreeNodeUI, PULSE.SitemapTreeNodeUI, {
    render : function() {
        if(!this.rendered){
            var targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    	collapse : function(){
    },
    	expand : function(){
    }
}); 
// end of file

/**
 * 
 */
DBG.EditorPanelComp = DBG.apply(DBG.Editor,{
	initComponent: { EditorPanel : false}
});
/**
 * 
 */
// create object for Ext.Component-extension
EditorPanelComp = Editor;
/**
 * required because extending Ext.Component.
 */
EditorPanelComp.initComponent = function() {
	
	// DBG >>
	if (this.initialConfig.DBG) {
		this.DBG = DBG.apply(DBG[this.getTypeString()],this.initialConfig.DBG);
	}
	
	// DBG >>
	if (this.DBG) {
		props = ['id','type'];
		props = props.concat(DBG.getPropertyArray(this.initialConfig));
		THROW({args:arguments,props:props},this,'initComponent.EditorPanel');
	}
	
	if (typeof(this.subEditors) == 'undefined') {
		this.subEditors = [];
	}
	 			
 	// call super
	Pulse.EditorPanel.superclass.initComponent.call(this);
 	
 	// add common events
	this.addEvents({
		
		
	   /**
		* 	
		* 	msgs: change
		* 
		*/
		
		'MSG': true
		
	});
		
};
Pulse.EditorPanel = Ext.extend(Ext.Panel,EditorPanelComp); // END :: Pulse.EditorPanel

/**
 * 
 */
DBG.SubEditorPanel = DBG.apply(DBG.EditorPanelComp,{
	addSubEditor: { SubEditorPanel : false},
	expand: false,
	initializePanel: false,
	loadPanel: { click: false, call: false }
//	,
//	insertHasChangesIcon: false
});

/**
 * 
 */
SubEditorPanel = {
	
	type: 'SubEditorPanel',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: DBG.SubEditorPanel,
	
	
	getReloadButtonCFG: function() {
		return {
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
			scope: this,
			handler: function() {
				// DBG >>
				if (this.DBG) {
					THROW({args:arguments},this,'loadPanel.click');
				}
				this.loadPanel();
			},
			iconCls: 'reloadIconCls'
		};
	},
	
	/**
	 * 
	 */
	addSubEditor: function(editor) {		
		
		// call super
		addSuccess = Pulse.SubEditorPanel.superclass.addSubEditor.call(this,editor);		
		
		// DBG >>
		if (this.DBG) {
			THROW({
				o:'ADD: ' + addSuccess,
				props:['id','subEditors.length','subEditors'],
				p:[{n:'editor.id',o:editor.id},{n:'editor.type',o:editor.type}]
			},this,'addSubEditor.SubEditorPanel');	
		}
		
		if (true !== addSuccess) {
			// DBG >>
			if (this.DBG) {
				FATAL(editor,this,'addSubEditor.SubEditorPanel','ADD: ' + addSuccess);
			}
			return;
		}

		try {
	    	
	    	if (typeof(editor.getButtons) == 'function') {
	    		this.addToolbarButtons(editor.getButtons());
	    	}
	    	
//	    	this.insertHasChangesIcon();
	    	Pulse.insertHasChangesIcon(this);
	    	
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'addSubEditor.SubEditorPanel');
			}
		}
    },
	
	/**
	 * 
	 */
	editorMSG: function(msgString, editor, masterEditor) {
				
		this.toggleHasChangesIcon(this.hasChanges());
		
		// call super
		Pulse.SubEditorPanel.superclass.editorMSG.call(this, msgString, editor, masterEditor);

	},
	
	/**
	 * 
	 */
	initializePanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['id','url','initialLoad','loadPanel']},this,'initializePanel');
		}
		
		if (true !== this.initialLoad) {
			this.loadPanel();
			this.initialLoad = true;
		}
		
	},
	
	/**
	 * @param {Object} Array of Ext.Toolbar.Buttons...
	 */
	addToolbarButtons: function(buttons) {
		
		if (typeof(this.addedButtons) != 'undefined') {
			for (i = 0; i < this.addedButtons.length; i++) {
				o = this.addedButtons[i];
				try {
					
					Ext.get(o.getEl()).remove();					
					o.destroy();
					
				} catch (e) {
					FATAL(e,this,'addToolbarButtons');
				}
			}
			delete this.addedButtons;
		}
		this.addedButtons = buttons;
	
	 	this.getTopToolbar().insertButton(0,this.addedButtons);
	},
	
	/**
	 * @param {Boolean} boolShow, 
	 * 		if true and only if true will display loading-icon for panel
	 * 		otherwise resets icon to former iconCls
	 */
	showLoading: function(boolShow) {
		
		if (true === boolShow) {
			this.header.child("*[@class*='x-panel-inline-icon']").replaceClass(this.iconCls, 'loadingIconCls');
			return;
		} else {
			this.header.child("*[@class*='x-panel-inline-icon']").replaceClass('loadingIconCls', this.iconCls);
			return;
		}
		
		// DBG >>
		if (this.DBG) {
			FATAL('CANNOT RESET ICONCLS',this,'showLoading');
		}
		
	},
	
	/**
	 * 
	 */
	loadPanel: function() {
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['id','url']},this,'loadPanel.call');
		}
				
		try {
			
			if (true === this.hasChanges()) {

				Ext.Msg.confirm(
					VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
					VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
					VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
		        	function(response) {
		        		
						if ('yes' === response) {
					    	this.reset();
					    	this.loadPanel();
						}
						
					},
				this);
				
				return;
			}

			if (true === this.getUpdater().isUpdating()) {
				return;
			}

			if (this.getSubEditors().length > 0) {
				this.removeSubEditors();
			}

			if (typeof(this.toggleHasChangesIcon) == 'function') {
				this.toggleHasChangesIcon(false);
			}
			
			this.load({
				url: this.url,
				method: 'POST',
				scripts: true,
				callback: LPCB,
				params: this.params,
	            text: 'loading...',
	            discardUrl: true,
	            nocache: true,
	            timeout: 30
			});
			
		} catch(e){
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'loadPanel');
			}
		}
	},	
	
	/**
	 * initializes this component.
	 */
	initComponent: function() {
		
		try {
			
			this.title = (typeof(this.initialConfig.title) != 'string') ? '' + VIEWPORT_PROPERTIES.SUBEDITOR : this.initialConfig.title;
			this.iconCls = (typeof(this.initialConfig.iconCls) != 'string') ? 'editIconCls' : this.initialConfig.iconCls;
			this.autoScroll = true; 
			this.collapsed = true; 
			this.collapsible = true;
			this.html = '<div style="font-weight:bold;">NOT LOADED</div>';
			this.reloadButtonCFG = this.getReloadButtonCFG();
			this.reloadButtonCFG.scope = this;
			this.tbar = ['->','-'];
			this.tbar.push(this.reloadButtonCFG);
			
			// call super
			Pulse.SubEditorPanel.superclass.initComponent.call(this);
			
		} catch(e) {
			FATAL(e, this, 'initComponent.SubEditorPanel');
		}
				
	},
	
	/**
	 * 
	 */
	destroyEditor: function(editor,selfDestroy) {
		if (true === selfDestroy) {
			this.removeSubEditors();
			this.masterEditor.removeSubEditor(this,true);
		} else {
			this.removeSubEditor(editor,true);
		}
	}
	
//	,
//	
//	/**
// 	 * 
// 	 */
// 	insertHasChangesIcon: function() {
// 		
//		// DBG >>
//		if (this.DBG) {
//			THROW({props:['id','header','header.id','header.className','hasChangesIconImgEl']},this,'insertHasChangesIcon');
//		}
//
// 		try {
// 		
//	 		if (typeof(this.hasChangesIconImgEl) != 'undefined' || this.hasChangesIconImgEl !== null) {
//	 			// already there
//	 			return;
//	 		}
//			
//			// retrieve title-dom
//			extPanelElTitleDom = Ext.DomQuery.selectNode(
//				"*[@class*='x-panel-header-text']",
//				Ext.get(this.header.id).dom
//			);
//			// retrieve icon-dom
//			extPanelElIconDom = Ext.DomQuery.selectNode(
//				"*[@class*='x-panel-inline-icon']",
//				Ext.get(this.header.id).dom
//			);
//			
//			// build img
////			this.hasChangesIconImgEl = document.createElement('img');			
////			this.hasChangesIconImgEl.id = this.id + '.hasChangesIconImgEl';
////			this.hasChangesIconImgEl.src = Ext.BLANK_IMAGE_URL;
////			this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
//			
//			// add to header
//			if (typeof(extPanelElIconDom) != 'undefined' && extPanelElIconDom !== null) {
//				
////				extPanelElIconDom.parentNode.insertBefore(this.hasChangesIconImgEl, extPanelElIconDom);
//				
//				this.hasChangesIconImgEl = Ext.DomHelper.insertBefore(Ext.get(extPanelElIconDom),{
//					tag: 'img',
//					id: this.id + '.hasChangesIconImgEl',
//					src: Ext.BLANK_IMAGE_URL,
//					className: 'tabHasChangesIconHidden'
//				},true)
//				
//			} else {
//				
////				extPanelElTitleDom.parentNode.insertBefore(this.hasChangesIconImgEl, extPanelElTitleDom);
//				
//				this.hasChangesIconImgEl = Ext.DomHelper.insertBefore(Ext.get(extPanelElTitleDom),{
//					tag: 'img',
//					id: this.id + '.hasChangesIconImgEl',
//					src: Ext.BLANK_IMAGE_URL,
//					className: 'tabHasChangesIconHidden'
//				},true)
//				
//			}
//		
// 		} catch(e) {
// 			// DBG
// 			FATAL(e, this, 'insertHasChangesIcon'); 			
// 		}
//
// 	},
// 	
// 	/**
// 	 * 
// 	 */
// 	toggleHasChangesIcon: function(bool) {
//				
//		// tabHasChangesIcon / tabHasChangesIconHidden
//		if (typeof(this.hasChangesIconImgEl) == 'undefined') {
//			return;
//		}
//		
//		if (typeof(bool) != 'boolean') {
//			if (this.hasChangesIconImgEl.className == 'tabHasChangesIconHidden') {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
//			} else {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
//			}
//		} else {
//			if (true === bool) {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
//			} else {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
//			}
//		}
//		
//	}

	
};
Pulse.SubEditorPanel = Ext.extend(Pulse.EditorPanel,SubEditorPanel);// END :: Pulse.SubEditorPanel


/**
 * 
 */
DBG.EditorWindowComp = DBG.apply(DBG.Editor,{
	initComponent: { EditorWindow : false}
});
/**
 * 
 */
// create object for Ext.Component-extension
EditorWindowComp = Editor;
/**
 * required because extending Ext.Component.
 */
EditorWindowComp.initComponent = function() {
	
	// DBG >>
	if (this.initialConfig.DBG) {
		this.DBG = DBG.apply(DBG[this.getTypeString()],this.initialConfig.DBG);
	}
	
	// DBG >>
	if (this.DBG) {
		props = ['id','type'];
		props = props.concat(DBG.getPropertyArray(this.initialConfig));
		THROW({args:arguments,props:props},this,'initComponent.EditorPanel');
	}
	
	if (typeof(this.subEditors) == 'undefined') {
		this.subEditors = [];
	}
	 			
 	// call super
	Pulse.EditorPanel.superclass.initComponent.call(this);
 	
 	// add common events
	this.addEvents({
		
		
	   /**
		* 	
		* 	msgs: change
		* 
		*/
		
		'MSG': true
		
	});
		
};
Pulse.EditorWindow = Ext.extend(Ext.Window,EditorWindowComp); // END :: Pulse.EditorPanel

/**
 * 
 */
DBG.SubEditorWindow = DBG.apply(DBG.EditorWindow,{
	addSubEditor: { SubEditorWindow : false},
	expand: false,
	initializePanel: false,
	loadPanel: { click: false, call: false }
//	,
//	insertHasChangesIcon: true
});

/**
 * 
 */
SubEditorWindow = {
	
	type: 'SubEditorWindow',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.SubEditorWindow*/,
	
	// defaults
	reloadButton: {
		text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
		scope: this,
		handler: function() {
			// DBG >>
			if (this.DBG) {
				THROW({args:arguments},this,'loadPanel.click');
			}
			this.loadPanel();
		},
		iconCls: 'reloadIconCls'
	},
	
	/**
	 * 
	 */
	addSubEditor: function(editor) {		
		
		// call super
		addSuccess = Pulse.SubEditorWindow.superclass.addSubEditor.call(this,editor);		
		
		// DBG >>
		if (this.DBG) {
			THROW({
				o:'ADD: ' + addSuccess,
				props:['id','subEditors.length','subEditors'],
				p:[{n:'editor.id',o:editor.id},{n:'editor.type',o:editor.type}]
			},this,'addSubEditor.SubEditorWindow');	
		}
		
		if (true !== addSuccess) {
			// DBG >>
			if (this.DBG) {
				FATAL(editor,this,'addSubEditor.SubEditorWindow','ADD: ' + addSuccess);
			}
			return;
		}

		try {
	    	
	    	if (typeof(editor.getButtons) == 'function') {
	    		this.addToolbarButtons(editor.getButtons());
	    	}
	    	
//	    	this.insertHasChangesIcon();
	    	Pulse.insertHasChangesIcon(this);
	    	
	    	
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'addSubEditor.SubEditorWindow');
			}
		}
    },
	
	/**
	 * 
	 */
	editorMSG: function(msgString, editor, masterEditor) {
				
		this.toggleHasChangesIcon(this.hasChanges());
		
		// call super
		Pulse.SubEditorWindow.superclass.editorMSG.call(this, msgString, editor, masterEditor);

	},
	
	/**
	 * 
	 */
	initializePanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['id','url','initialLoad','loadPanel']},this,'initializePanel');
		}
		
		if (true !== this.initialLoad) {
			this.loadPanel();
			this.initialLoad = true;
		}
		
	},
	
	/**
	 * @param {Object} Array of Ext.Toolbar.Buttons...
	 */
	addToolbarButtons: function(buttons) {
		
		if (typeof(this.addedButtons) != 'undefined') {
			for (i = 0; i < this.addedButtons.length; i++) {
				o = this.addedButtons[i];
				try {
					
					Ext.get(o.getEl()).remove();					
					o.destroy();
					
				} catch (e) {
					FATAL(e,this,'addToolbarButtons');
				}
			}
			delete this.addedButtons;
		}
		this.addedButtons = buttons;
	
	 	this.getTopToolbar().insertButton(0,this.addedButtons);
	},
	
	/**
	 * @param {Boolean} boolShow, 
	 * 		if true and only if true will display loading-icon for panel
	 * 		otherwise resets icon to former iconCls
	 */
	showLoading: function(boolShow) {
		
		if (true === boolShow) {
			this.header.child("*[@class*='x-panel-inline-icon']").replaceClass(this.iconCls, 'loadingIconCls');
			return;
		} else {
			this.header.child("*[@class*='x-panel-inline-icon']").replaceClass('loadingIconCls', this.iconCls);
			return;
		}
		
		// DBG >>
		if (this.DBG) {
			FATAL('CANNOT RESET ICONCLS',this,'showLoading');
		}
		
	},
	
	/**
	 * 
	 */
	loadPanel: function() {
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['id','url']},this,'loadPanel.call');
		}
				
		try {
			
			if (true === this.hasChanges()) {

				Ext.Msg.confirm(
					VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
					VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
					VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
		        	function(response) {
		        		
						if ('yes' === response) {
					    	this.reset();
					    	this.loadPanel();
						}
						
					},
				this);
				
				return;
			}

			if (true === this.getUpdater().isUpdating()) {
				return;
			}

			if (this.getSubEditors().length > 0) {
				this.removeSubEditors();
			}

			if (typeof(this.toggleHasChangesIcon) == 'function') {
				this.toggleHasChangesIcon(false);
			}
			
			this.load({
				url: this.url,
				method: 'POST',
				scripts: true,
				callback: LPCB,
				params: this.params,
	            text: 'loading...',
	            discardUrl: true,
	            nocache: true,
	            timeout: 30
			});
			
		} catch(e){
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'loadPanel');
			}
		}
	},	
	
	/**
	 * initializes this component.
	 */
	initComponent: function() {
		
		try {
			
			this.title = (typeof(this.initialConfig.title) != 'string') ? '' + VIEWPORT_PROPERTIES.SUBEDITOR : this.initialConfig.title;
			this.iconCls = (typeof(this.initialConfig.iconCls) != 'string') ? 'editIconCls' : this.initialConfig.iconCls;
			this.autoScroll = true; 
			this.html = '<div style="font-weight:bold;">NOT LOADED</div>';
			this.reloadButton.scope = this;
			this.tbar = ['->','-'];
			this.tbar.push(this.reloadButton);
			
			// call super
			Pulse.SubEditorWindow.superclass.initComponent.call(this);
			
		} catch(e) {
			FATAL(e, this, 'initComponent.SubEditorWindow');
		}
				
	},
	
	/**
	 * 
	 */
	destroyEditor: function(editor,selfDestroy) {
		if (true === selfDestroy) {
			this.removeSubEditors();
			this.masterEditor.removeSubEditor(this,true);
		} else {
			this.removeSubEditor(editor,true);
		}
	}
	
//	,
//	
//	/**
// 	 * 
// 	 */
// 	insertHasChangesIcon: function() {
// 		
//		// DBG >>
//		if (this.DBG) {
//			THROW({props:['id','header','header.id','header.className','hasChangesIconImgEl']},this,'insertHasChangesIcon');
//		}
//
// 		try {
// 		
//	 		if (typeof(this.hasChangesIconImgEl) != 'undefined' || this.hasChangesIconImgEl !== null) {
//	 			// already there
//	 			return;
//	 		}
//			
//			// retrieve title-dom
//			extPanelElTitleDom = Ext.DomQuery.selectNode(
//				"*[@class*='x-panel-header-text']",
//				Ext.get(this.header.id).dom
//			);
//			// retrieve icon-dom
//			extPanelElIconDom = Ext.DomQuery.selectNode(
//				"*[@class*='x-panel-inline-icon']",
//				Ext.get(this.header.id).dom
//			);
//			
//			// build img
//			this.hasChangesIconImgEl = document.createElement('img');			
//			this.hasChangesIconImgEl.id = this.id + '.hasChangesIconImgEl';
//			this.hasChangesIconImgEl.src = Ext.BLANK_IMAGE_URL;
//			this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
//			
//			// add to header
//			if (typeof(extPanelElIconDom) != 'undefined' && extPanelElIconDom !== null) {
//				
//				extPanelElIconDom.parentNode.insertBefore(this.hasChangesIconImgEl, extPanelElIconDom);
//				
////				this.hasChangesIconImgEl = Ext.DomHelper.insertBefore(Ext.get(extPanelElIconDom),{
////					tag: 'img',
////					id: this.id + '.hasChangesIconImgEl',
////					src: Ext.BLANK_IMAGE_URL,
////					className: 'tabHasChangesIconHidden'
////				},true)
//				
//			} else {
//				
//				extPanelElTitleDom.parentNode.insertBefore(this.hasChangesIconImgEl, extPanelElTitleDom);
//				
//				
//			}
//		
// 		} catch(e) {
// 			// DBG
// 			FATAL(e, this, 'insertHasChangesIcon'); 			
// 		}
//
// 	},
// 	
// 	/**
// 	 * 
// 	 */
// 	toggleHasChangesIcon: function(bool) {
//				
//		// tabHasChangesIcon / tabHasChangesIconHidden
//		if (typeof(this.hasChangesIconImgEl) == 'undefined') {
//			return;
//		}
//		
//		if (typeof(bool) != 'boolean') {
//			if (this.hasChangesIconImgEl.className == 'tabHasChangesIconHidden') {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
//			} else {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
//			}
//		} else {
//			if (true === bool) {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
//			} else {
//				this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
//			}
//		}
//		
//	}

	
};
Pulse.SubEditorWindow = Ext.extend(Pulse.EditorWindow,SubEditorWindow);// END :: Pulse.SubEditorWindow


/**
 * 
 */
Toolbar = {
	
	type: 'Toolbar',
	
	DBG: {
		afterRender: {In: false, Out: false },
		openPanel: false
	},
	
	// private
    onRender : function(ct, position){
        this.el = ct.createChild(Ext.apply({ id: this.id },this.autoCreate), position);
        this.tr = this.el.child("tr", true);
    },

    // private
    afterRender : function(){
        Ext.Toolbar.superclass.afterRender.call(this);
        
        THROW({props:['ownerCt.id','ownerId','buttons']},this,'afterRender.In');
        
        if(this.buttons){
            this.add.apply(this, this.buttons);
            delete this.buttons;
        }
        
        THROW({props:['ownerCt.id','ownerId','buttons']},this,'afterRender.Out');
    },
    
    /**
     * @param {Object} config
     */
    openPanel: function(config) {
    	
    	THROW({
        	args:arguments,
            propsObj: config,
            props:[
                'id',
				'decodedResponse',
				'decodedResponse.ids',
                'callback'
            ]
        },this,'openPanel');
        
    	this.actions[(config.id + '.btn').split('.').join('')].execute(config);
    }
	
};
Pulse.Toolbar = Ext.extend(Ext.Toolbar, Toolbar); // END :: Pulse.Toolbar
//new
/**
 * 
 */
Pulse.Tree = function(config) {
	
	// type
	this.type = 'Tree';
	
	try {
	
		// generate id
		this.id = Ext.id();
		
		// store initialconfig
		this.initialconfig = config;	
	
		// init checks
	    if (typeof(config.url) != 'string' || config.url === '') {
	    	return;
	    	throw(new Pulse.Error({e:'config.url.string.error',o:new Pulse.Error({e:'config.url: '+config.url})},'Tree','constructor'));
	    }
	    if (typeof(config.el) != 'string' || config.el === '') {
	    	return;
	    	throw(new Pulse.Error({e:'config.el.string.error',o:new Pulse.Error({e:'config.el: '+config.el})},'Tree','constructor'));
	    }    
	    
	    // apply default config unless overridden
	    config.autoScroll = typeof(config.autoScroll) != 'boolean' ? true : config.autoScroll;
	    config.autoHeight = typeof(config.autoHeight) != 'boolean' ? true : config.autoHeight;
	    config.animate = typeof(config.animate) != 'boolean' ? true : config.animate;
	    config.enableDD = typeof(config.enableDD) != 'boolean' ? true : config.enableDD;
	    config.containerScroll = typeof(config.containerScroll) != 'boolean' ? true : config.containerScroll;
	    config.rootVisible = typeof(config.rootVisible) != 'boolean' ? false : config.rootVisible;
	    config.border = typeof(config.border) != 'boolean' ? false : config.border;
	    
	    // default loader
	    config.loader = typeof(config.loader) != 'object' ? new Ext.tree.TreeLoader({
	        dataUrl: config.url,
	        uiProviders: {
                'SitemapTreeNodeUI': PULSE.SitemapTreeNodeUI,
                'AccecssControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
	    }) : config.loader;
	    
	    // store config
		this.config = config;
		
		this.config.pulsetree = this;
		
		
		// build tree from config
		this.tree =  new Ext.tree.TreePanel(this.config);

		// set root
		this.tree.setRootNode(
			new Ext.tree.AsyncTreeNode({
		        text: 'root.' + this.id,
		        draggable: false,
		        id: 'source.' + this.id
		        //,uiProvider: PULSE.SitemapTreeNodeUI
		    })
	    );
	    
	    /**
	     * 
	     */
	    this.render = function(bool) {
	    	this.tree.render();
	    	if (false === bool) {
	    		return;
	    	}
	    	this.getRootNode().expand();    	
	    };
	    
	    /**
	     * 
	     */
	    this.getRootNode = function() {
	    	return this.tree.getRootNode();
	    };
	    
	    /**
	     * 
	     */
	    this.getLoader = function() {
	    	return this.tree.getLoader();
	    };
	    
	    /**
	     * 
	     */
	    this.reload = function() {
	    	this.getRootNode().reload();
	    };
		
		/**
		 * 
		 */
		this.refresh = function(node, callback) {
	    	try {
	    		this.tree.editor.refresh(node, callback);
	    	} catch (e) {
	    		Pulse.Throw(new Pulse.Error({e: 'HANDLE', o: e},this,'refresh'));
	    	}
	    };

		/**
		 * 
		 */
		this.setBusy = function(node) {
			this.busy = true;
			if (typeof(node) == 'object') {
				node.ui.setBusy(true);
			}
		};
		
		/**
		 * 
		 */
		this.unBusy = function(node) {
			(function(){
				this.busy = false;
				if (typeof(node) == 'object') {
					node.ui.setBusy();
				}
			}).defer(500,this);
		};
		
		/**
		 * 
		 */
		this.isBusy = function() {			
			if ((true === this.busy) || 
				(typeof(this.tree.editor) != 'undefined' && true === this.tree.editor.busy)) {
				return true;
			}
			return false;
		};
	    
	    /**
	     * 
	     */
	    this.remove = function(node) {
	    	
	    	// busy-check
	    	if (true === this.isBusy()) { return; }
	    	this.setBusy();
	    	
	    	// show confirm-dialog
	    	Ext.Msg.confirm(
				VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + node.text + '"',
				VIEWPORT_PROPERTIES.MSG_REALLYDELETE, 
	        	function(cnfResponse) {
	        		// if confirm-dialog.answer == 'yes'
		        	if('yes' === cnfResponse) {
		        		
		        		// show node.ui busy
		        		this.setBusy(node);
		        		
		        		// server-remove-call
		        		Ext.Ajax.request({
		        			scope: this,
		        			url: (typeof(node.attributes.deleteURL) == 'string') ? node.attributes.deleteURL : config.deleteURL, 
			        		method: 'POST', 
			        		success: function(response, options) {
			        			// check for success -> error-output
			        			if (true === Pulse.ajaxSuccess(response, this, 'remove', true)) {
									// delete success -> node.ui.cleanUp()
									if (typeof(node.ui.cleanUp) == 'function') {
										node.ui.cleanUp();
									}									
									// delete
									parentNode = options.node.parentNode;
									parentNode.removeChild(options.node);									
									// delete success -> node.ui.cleanUp()
									if (typeof(parentNode.ui.afterChange) == 'function') {
										parentNode.ui.afterChange(parentNode);
									}
									this.unBusy();									
								} else {
									// delete failed cleanup
									this.unBusy(options.node);
								}
			        		},
			        		failure: function(response, options) {
			        			// delete failed cleanup
			        			this.unBusy(options.node);
			        			// error-output
        						Pulse.ajaxFailure(response, this, 'remove', true);
			        		},
			        		node: node, 
			        		params: {
			        			nodeid: node.id
			        		}
		        		});
		        		
		        	} else {
		        		this.unBusy();
		        	}		        	
	        	}, 
	        	this
        	); // END :: remove.confirm-dialog
        	
	    };
	    // set function this.tree.deleteNode
//		this.tree.deleteNode = this.remove;
		
		/**
		 * moves a node within the tree after exectuing an Ajax-server-call and processing
		 * it's response.
		 * 
		 * @Override 
		 * 
		 * @param {Object} e :   
		 * 		e.tree - The TreePanel
	     * 		e.target - The node being targeted for the drop
	     * 		e.data - The drag data from the drag source
	     * 		e.point - The point of the drop - append, above or below
	     * 		e.source - The drag source
	     * 		e.rawEvent - Raw mouse event
	     * 		e.dropNode - Drop node(s) provided by the source OR you can supply node(s) to be inserted by setting them on this object.
	     * 		e.cancel - Set this to true to cancel the drop.
	     * 
	     * @return {Boolean} false 
	     * 		always to cancel default Ext.tree-operation drop, drop is performed after AJAX-call
	     * 
		 */
		this.move = function(e) {
			
			// busy-check
			if (true === this.isBusy()) { return; }

			this.setBusy();

			// server-call
			Ext.Ajax.request({
				scope: this,
				url: (typeof(e.dropNode.attributes.moveURL) == 'string') ? e.dropNode.attributes.moveURL : config.moveURL, 
	    		method: 'POST', 
	    		success: function(response, options) {
	    			// check for success -> error-output
        			if (true === Pulse.ajaxSuccess(response, this, 'move', true)) {
        				targetNode = options.e.target;
						movenode = options.e.dropNode;
						oldParent = movenode.parentNode;
	    				switch (options.e.point) {						
							case 'append':
								// targetNode.leaf = false;									
								if(!targetNode.isExpanded()){
									try {
										if (true === targetNode.isLoaded()) {
								            targetNode.expand(false, null, function(){
							            		targetNode.appendChild(movenode);
							            		if (typeof(targetNode.ui.afterChange) == 'function') {
							            			targetNode.ui.afterChange(targetNode);
							            		}
							            		if (typeof(oldParent.ui.afterChange) == 'function') {
							            			oldParent.ui.afterChange(oldParent);
							            		}
								            }.createDelegate(this));							            		
						            	} else {
						            		oldParent.removeChild(movenode);
						            		if (typeof(oldParent.ui.afterChange) == 'function') {
						            			oldParent.ui.afterChange(oldParent);
						            		}
						            		targetNode.expand();
						            		if (typeof(targetNode.ui.afterChange) == 'function') {
						            			targetNode.ui.afterChange(targetNode);
						            		}			                							                	
						            	}
					            	} catch (err) {
							            targetNode.expand();
						            	targetNode.appendChild(movenode);
						            	if (typeof(targetNode.ui.afterChange) == 'function') {
					            			targetNode.ui.afterChange(targetNode);
					            		}
						            	if (typeof(oldParent.ui.afterChange) == 'function') {
					            			oldParent.ui.afterChange(oldParent);
					            		}
					            	}
						        } else {
						        	targetNode.appendChild(movenode);
						        	if (typeof(targetNode.ui.afterChange) == 'function') {
				            			targetNode.ui.afterChange(targetNode);
				            		}
						        	if (typeof(oldParent.ui.afterChange) == 'function') {
				            			oldParent.ui.afterChange(oldParent);
				            		}
						        }
							break;
							
							case 'above':
								targetNode.parentNode.insertBefore(movenode, targetNode);
								if (typeof(oldParent.ui.afterChange) == 'function') {
			            			oldParent.ui.afterChange(oldParent);
			            		}
							break;
							
							case 'below':
								targetNode.parentNode.insertBefore(movenode, targetNode.nextSibling);
								if (typeof(oldParent.ui.afterChange) == 'function') {
			            			oldParent.ui.afterChange(oldParent);
			            		}
							break;
						}
	    			}
	    			this.unBusy();
	    		},	    		 
	    		failure: function(response, options) {
	    			this.unBusy();
	    			// error-output
					Pulse.ajaxFailure(response, this, 'move', true);
	    		}, 
	    		e: e,
	    		params: {
	    			targetnodeid: e.target.id, 
					insertpoint: e.point,
					movenodeid: e.dropNode.id
	    		}					
			});
			return false;
		};
		
		// add tree listener  for move
	    this.tree.on({
			'beforenodedrop': {scope:this, fn:this.move}
		});
		
		// initialize tree.editor if given
		if (typeof(config.editor) == 'object') {
			config.editor.init(this);
		}
		
		if (typeof(config.onSelectNodeClick) == 'function') {
			this.tree.on('click',function(node){
				config.onSelectNodeClick(node);
			});
		}
    
    } catch (e) {
    	// error during initialization
		Pulse.Throw(e);
	}
    
}; // END :: Pulse.Tree


/**
 * 
 */
TreePagingToolbar = {

	type: 'TreePagingToolbar',
	// DBG
	DBG: false,
	
    pageSize: 20,
    displayMsg : '{0} - {1} / {2}'/*'Displaying {0} - {1} of {2}'*/,
    emptyMsg : '--'/*'No data to display'*/,
    beforePageText : ''/*"Page"*/,
    afterPageText : ' / {0}'/*"of {0}"*/,
    firstText : "First Page",
    prevText : "Previous Page",
    nextText : "Next Page",
    lastText : "Last Page",
    refreshText : "Refresh",
    paramNames : {start: 'start', limit: 'limit'},

	/**
	 * 
	 */
    initComponent : function(){
        Ext.PagingToolbar.superclass.initComponent.call(this);
        this.cursor = 0;
        this.bind(this.treeLoader);
        if (typeof(this.initialConfig.id) == 'undefined') {
			this.id = Ext.id(null, this.type + '.');
		}
    },
	
	/**
	 * 
	 */
    onRender : function(ct, position){
        Ext.PagingToolbar.superclass.onRender.call(this, ct, position);
        this.first = this.addButton({
            tooltip: this.firstText,
            iconCls: "x-tbar-page-first",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["first"])
        });
        this.prev = this.addButton({
            tooltip: this.prevText,
            iconCls: "x-tbar-page-prev",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["prev"])
        });
        this.addSeparator();
        this.add(this.beforePageText);
        this.field = Ext.get(this.addDom({
           tag: "input",
           type: "text",
           size: "3",
           value: "1",
           cls: "x-tbar-page-number"
        }).el);
        this.field.on("keydown", this.onPagingKeydown, this);
        this.field.on("focus", function(){this.dom.select();});
        this.afterTextEl = this.addText(String.format(this.afterPageText, 1));
        this.field.setHeight(18);
        this.addSeparator();
        this.next = this.addButton({
            tooltip: this.nextText,
            iconCls: "x-tbar-page-next",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["next"])
        });
        this.last = this.addButton({
            tooltip: this.lastText,
            iconCls: "x-tbar-page-last",
            disabled: true,
            handler: this.onClick.createDelegate(this, ["last"])
        });
        this.addSeparator();
        this.loading = this.addButton({
            tooltip: this.refreshText,
            iconCls: "x-tbar-loading",
            handler: this.onClick.createDelegate(this, ["refresh"])
        });
        this.addSeparator();
		this.pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),
		    forceSelection: false,
		    displayField: 'size',
		    valueField: 'size',
		    typeAhead: false,
		    selectOnFocus: true,
//		    disableKeyFilter: true,
		    mode: 'local',
		    regex: /^[+]?\d*$/,
		    triggerAction: 'all',
		    width: 40,
		    blankText: '' + this.pageSize,
		    emptyText: '' + this.pageSize
		});
		this.add(this.pageSizeBox);
		
		this.pageSizeBox.on('blur',function(box){
			if (this.pageSizeBox.getRawValue() !== '') {
	    		try {
	    			this.pageSize = parseInt(this.pageSizeBox.getRawValue().trim(), 10);
	    		} catch(e) {
	    			// just reset to default page-size
					this.pageSize = 20;
				}
	    	} else {
	    		this.pageSize = 20;
	    	}
		},this);
		
		this.pageSizeBox.on('specialkey',function(box, evt){
			if (evt.getKey() != Ext.EventObject.ENTER) {
				return;
			}
			if (this.pageSizeBox.getRawValue() !== '') {
	    		try {
	    			this.pageSize = parseInt(this.pageSizeBox.getRawValue().trim(), 10);
	    		} catch(e) {
	    			// just reset to default page-size
					this.pageSize = 20;
				}
	    	} else {
	    		this.pageSize = 20;
	    	}
	    	this.doLoad(this.cursor);
		},this);
		

        if(this.displayInfo){
            this.displayEl = Ext.fly(this.el.dom).createChild({cls:'x-paging-info'});
        }
        if(this.dsLoaded){
            this.onLoad.apply(this, this.dsLoaded);
        }
    },

    /**
     * 
     */
    updateInfo : function(){
        if(this.displayEl){
            count = this.node.getCount();
            total = this.node.getTotalCount();
            if (total <= this.pageSize) {
            	c = 0;
            } else {
            	c = this.cursor;
            }
            msg = count == 0 ?
                this.emptyMsg :
                String.format(
                    this.displayMsg,
                    c + 1, c + count, total
                );
            this.displayEl.update(msg);
        }
    },
    
    /**
     * 
     */
    onLoad : function(node){    	
       
        if(!this.rendered){
            this.dsLoaded = [node];
            return;
        }
        
      	pn = this.paramNames;
		if (typeof(this.treeLoader.baseParams) != 'object') {
			this.treeLoader.baseParams = {};
		}
	    c = this.treeLoader.baseParams[pn.start];
        this.cursor = (typeof(c) == 'number') ? c : 0;
    
        var d = this.getPageData(), ap = d.activePage, ps = d.pages;        

        this.afterTextEl.el.innerHTML = String.format(this.afterPageText, d.pages);
        this.field.dom.value = ap;
        this.first.setDisabled(ap == 1);
        this.prev.setDisabled(ap == 1);
        this.next.setDisabled(ap == ps);
        this.last.setDisabled(ap == ps);
        this.loading.enable();
       
        this.updateInfo();
        if (typeof(this.editor) != 'undefined') {
    		this.editor.fireEvent('load', {assorter: this.editor, node: node});
    	}
    },

    /**
     * 
     */
    getPageData : function(){
        total = this.node.getTotalCount();
        return {
            total : total,
            activePage : total < this.pageSize ? 1 : Math.ceil((this.cursor+this.pageSize)/this.pageSize),
            pages :  total < this.pageSize ? 1 : Math.ceil(total/this.pageSize)
        };
    },

    /**
     * 
     */
    onLoadError : function(){
        if(!this.rendered){
            return;
        }
        this.loading.enable();
    },

	/**
	 * 
	 */
    readPage : function(d){
        var v = this.field.dom.value, pageNum;
        if (!v || isNaN(pageNum = parseInt(v, 10))) {
            this.field.dom.value = d.activePage;
            return false;
        }
        return pageNum;
    },

    /**
     * 
     */
    onPagingKeydown : function(e){
        var k = e.getKey(), d = this.getPageData(), pageNum;
        if (k == e.RETURN) {
            e.stopEvent();
            if(pageNum = this.readPage(d)){
                pageNum = Math.min(Math.max(1, pageNum), d.pages) - 1;
                this.doLoad(pageNum * this.pageSize);
            }
        }else if (k == e.HOME || k == e.END){
            e.stopEvent();
            pageNum = k == e.HOME ? 1 : d.pages;
            this.field.dom.value = pageNum;
        }else if (k == e.UP || k == e.PAGEUP || k == e.DOWN || k == e.PAGEDOWN){
            e.stopEvent();
            if(pageNum = this.readPage(d)){
                var increment = e.shiftKey ? 10 : 1;
                if(k == e.DOWN || k == e.PAGEDOWN){
                    increment *= -1;
                }
                pageNum += increment;
                if(pageNum >= 1 & pageNum <= d.pages){
                    this.field.dom.value = pageNum;
                }
            }
        }
    },

    /**
     * 
     */
    beforeLoad : function(){
    	
        if(this.rendered && this.loading){
            this.loading.disable();
        }
    	
    },

	/**
	 * 
	 */
    doLoad : function(start){
    	
    	if (typeof(this.editor) != 'undefined') {
    		
    		if (true === this.editor.hasChanges()) {
    			return;
    		}
	    	if (false === this.editor.fireEvent('beforeload', {assorter: this.editor, node: this.node})) {
	    		return;
	    	}
    		
    	}

    	pn = this.paramNames;
    	if (!this.treeLoader.baseParams) {
    		this.treeLoader.baseParams = {};
    	}
        this.treeLoader.baseParams[pn.start] = start;
        this.treeLoader.baseParams[pn.limit] = this.pageSize;
        
        this.node.reload();
        return;
    },

	/**
	 * 
	 */
	setNode: function(node) {
		this.node = node;
		this.node.on("beforeload", this.beforeLoad, this);
		this.node.on("load", this.onLoad, this);
		this.node.getCount = function() {
	    	return this.childNodes.length;
	    };
	    this.node.getTotalCount = function() {
	    	return (this.firstChild !== null) ? this.firstChild.attributes.total : 0;
	    };
	},

    /**
     * 
     */
    onClick : function(which){
    	
    	loadInt = null;
    	switch(which){
            case "first":
                loadInt = 0;
            break;
            case "prev":
                loadInt = Math.max(0, this.cursor-this.pageSize);
            break;
            case "next":
                loadInt = this.cursor+this.pageSize;
            break;
            case "last":
                total = this.node.getTotalCount();
                extra = total % this.pageSize;
                loadInt = extra ? (total - extra) : total-this.pageSize;
            break;
            case "refresh":
            	if (typeof(this.onBeforeRefresh) == 'function') {
            		this.onBeforeRefresh(this);
            	}
                loadInt = this.cursor;
            break;
        }
    	
    	if (false === this.editor.fireEvent('beforeload', this)) {
			return;
		}
		
		// DBG
		THROW({args:arguments,p:[
			{n:'beforereset',o:''+this.editor.fireEvent('beforereset', {assorter: this.editor})},
			{n:'typeof(this.editor)',o:''+typeof(this.editor)},
			{n:'this.editor.hasChanges()',o:''+this.editor.hasChanges()}
		]},this,'onClick');
		
    	if (typeof(this.editor) != 'undefined' && true === this.editor.hasChanges()) {
    		Ext.Msg.confirm(
				VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
				VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
				VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
	        	function(response) {
	        		// load
		        	if('yes' === response) {
		        		if (false === this.editor.fireEvent('beforereset', {assorter: this.editor})) {
		        			return;
		        		}
		        		this.editor.reset();
		        		this.doLoad(loadInt);
		        		this.editor.refreshPagingBar(this.id, true);
		        		
		        	}
	        	}, 
	        	this
        	);
    	} else {
    		
    		// DBG
    		THROW({args:arguments,p:[
				{n:'typeof(this.editor)',o:''+typeof(this.editor)},
				{n:'this.editor.hasChanges()',o:''+this.editor.hasChanges()},
				{n:'loadInt',o:''+loadInt}
			]},this,'onClick');
			
    		this.doLoad(loadInt);
    	}
//        switch(which){
//            case "first":
//                this.doLoad(0);
//            break;
//            case "prev":
//                this.doLoad(Math.max(0, this.cursor-this.pageSize));
//            break;
//            case "next":
//                this.doLoad(this.cursor+this.pageSize);
//            break;
//            case "last":
//                total = this.node.getTotalCount();
//                extra = total % this.pageSize;
//                lastStart = extra ? (total - extra) : total-this.pageSize;
//                this.doLoad(lastStart);
//            break;
//            case "refresh":
//                this.doLoad(this.cursor);
//            break;
//        }
    },

    /**
     * 
     */
    unbind : function(treeLoader) {
        treeLoader.un("loadexception", this.onLoadError, this);
        this.treeLoader = undefined;
    },

    /**
     * 
     */
    bind : function(treeLoader) {
        treeLoader.on("loadexception", this.onLoadError, this);
        this.treeLoader = treeLoader;
        
        pn = this.paramNames;
    	if (typeof(this.treeLoader.baseParams) != 'object') {
    		this.treeLoader.baseParams = {};
    	}
        this.treeLoader.baseParams[pn.start] = 0;
        this.treeLoader.baseParams[pn.limit] = this.pageSize;
    }
};
Pulse.TreePagingToolbar = Ext.extend(Ext.Toolbar, TreePagingToolbar); // END :: Pulse.TreePagingToolbar



/**
 * 
 */
DBG.ViewEditor = DBG.apply(DBG.Editor,{
	initComponent:  { ViewEditor: true },
	initTab: true,
	MSG: false
});

/**
 * The ViewEditor for a SitemapNode.
 */
ViewEditor = {
	
	type: 'ViewEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ViewEditor*/,
	
	// save-button
	getSaveButtonConfig: function() {
		return {
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
			disabled: true,
	//		scope: this,
			handler: function() {
				
				if (false === this.hasChanges()) {
					this.reset();
					return;
				}
				
				saveValues = this.getChanges({id:this.sitemapNode.id});
				if (typeof(this.view) != 'undefined' && this.view !== null) {
					saveValues.viewId = this.view.id;
				}
				
				if (typeof(saveValues) == 'undefined' || saveValues === null) {
					if (this.DBG) {
						THROW({
							e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
							args:[this.hasChanges(),saveValues]
						},this,'saveContentButton');
					}
					return;
				}
				
				if (true === this.applyRolesForChildrenMonitor.hasChanges()) {
					this.applyRolesForChildrenMonitor.reset();
					try {
						Ext.get(config.clazz + '.' + config.id + '.applyForChildrenMSG').hide();
					} catch(e) {/* ignore */}
				}
				if (true === this.applySectionTagForChildrenMonitor.hasChanges()) {
					this.applySectionTagForChildrenMonitor.reset();
					try {
						Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applySitemapSectionTagForChildrenMSG').hide();
					} catch(e) {/* ignore */}
				}
				
				this.tab.disable();
				
				Ext.Ajax.request({
					url: this.saveURL,
					method: 'POST',
					scope: this,
					success: function(response, options) {
						this.tab.enable();
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {								
							this.commit();
							(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
						} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
						}
					},
					failure: function(response, options) {
						this.tab.enable();
						if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
				        }
					},
					params: saveValues
				});
			},
			iconCls: 'saveIconCls'
		};
	},
	
	// remove-view-button
	getRemoveViewButtonConfig: function() {
		
	return {
		text: VIEWPORT_PROPERTIES.TEXT_REMOVE_VIEW,
		disabled: true,
//		scope: this,
		handler: function() {
			this.removeView(this.tab.registeredObject.node, this.removeViewURL);
		},
		iconCls: 'deleteIconCls'
	};
	
	},
	
	// edit-content-button
	getEditContentButtonConfig: function() {
		return {
			text: VIEWPORT_PROPERTIES.EDITCONTENT,
			disabled: true,
	//		scope: this,
			handler: function() {
				
				node = this.tab.registeredObject.node;
				
				// PulseErrorWindow.Throw(['TODO', node, tab.registeredObject.contentEditURL]);
				openTabCFG = {
	                id: node.attributes.contentType + '.' + node.attributes.contentId + '.editor',
	                title: node.attributes.contentName /*+ ' (id: ' + node.attributes.contentId + ')'*/,
	                tabTip: node.attributes.contentName + ' (id: ' + node.attributes.contentId + ')',
	                iconCls: node.attributes.contentType.split('.').join(''),
	                registeredObject: {
	                    node: node
	                },
	                loadParams: {
	                    url: this.editContentURL,
	                    params: {
	                        id: node.attributes.contentId
	                    }
	                }
	            };
	            PULSE_VIEWPORT_CONTROLLER.openTab(openTabCFG);
			},
			iconCls: 'editIconCls'
		};
	},
	
	/**
	 * 
	 */
	initTab: function() {
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id','tab.isInitialized','saveURL','removeViewURL','editContentURL']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
				
				buttons = [];
				
				// enables save-button if URL
				saveButtonConfig = this.getSaveButtonConfig();
				if (typeof(this.saveURL) == 'string' && this.saveURL !== '') {
					saveButtonConfig.disabled = false;
					saveButtonConfig.scope = this;
				}				
				buttons.push(saveButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// enables remove-view-button if URL
				removeViewButtonConfig = this.getRemoveViewButtonConfig();
				if (typeof(this.removeViewURL) == 'string' && this.removeViewURL !== '') {
					removeViewButtonConfig.disabled = false;
					removeViewButtonConfig.scope = this;
					removeViewButtonConfig.iconCls = 'delete' + this.tab.registeredObject.node.attributes.contentType.split('.').join('');
				}
				buttons.push(removeViewButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// enables edit-content-button if URL
				editContentButtonConfig = this.getEditContentButtonConfig();
				if (typeof(this.editContentURL) == 'string' && this.editContentURL !== '') {
					editContentButtonConfig.disabled = false;
					editContentButtonConfig.scope = this;
				}			
				buttons.push(editContentButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// insert buttons
//				buttons = [
//					this.saveButtonConfig,
//					new Ext.Toolbar.Separator(),
//					removeViewButtonConfig,
//					new Ext.Toolbar.Separator(),
//					this.editContentButtonConfig,
//					new Ext.Toolbar.Separator()
//				];
				
				this.tab.getTopToolbar().insertButton(0,buttons);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
	},
	
	/**
	 * TODO: at some point this has to be refactored:
	 * 
	 * ->@see Pulse.Sitemap.removeView
	 * 
	 */
//	removeViewInternal: function() {
//		this.removeView(this.tab.registeredObject.node, this.removeViewURL);
//	},
	
	/**
	 * TODO: at some point this has to be refactored:
	 * 
	 * ->@see Pulse.Sitemap.removeView
	 * 
	 */
	removeView: function(node, removeURL) {
		
		// disable editor
		tree = node.getOwnerTree();
		tree.hideInlineEditor = true;
		
		// display delete confirm-dialogue
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE, 
			SitemapLocalizations.MSG_REALLYREMOVEVIEW, 
        	function(response) {
        		// do nothing if answer is not yes
	        	if('yes' === response) {
					node.ui.setBusy(true);
					
					requestCFG = {
					   	url: removeURL,
					   	scope: this,
					   	method: 'POST',
					   	success: function(response, options) {
					   		decodedResponse = Ext.decode(response.responseText);
					   		
					   		if (true === decodedResponse.status) {
                                
                                tree = SitemapTree;
   			
					   			node = SitemapTree.findChildById(options.node.id);
					   			
					   			if (typeof(node) == 'undefined' || node === null) {
					   				
					   				SitemapTree.expandByIds(null, options.node.attributes.expandIds, function(_node) {
					   					// so the tab will be defintly reloaded (after node) with the actual node
					   					ve = Ext.getCmp('ViewEditor.' + _node.id + '.editor');
					   					if (typeof(ve) != 'undefined' && ve !== null) {
				                        	ve.reloadTab(_node);
					   					}
					   				});
					   				
					   			} else {
			
						   			// 'old' sitemap
				                	tree.runOnlyOnceAfterReload = function(node) {
				                        // so the tab will be defintly reloaded (after node) with the actual node
				                        ve = Ext.getCmp('ViewEditor.' + node.id + '.editor');
					   					if (typeof(ve) != 'undefined' && ve !== null) {
				                        	ve.reloadTab(node);
					   					}
					   					node.reload();
				                    };
				                	tree.reloadNode(node);
			                	
					   			}
					   			
					   		} else {
								options.node.ui.setBusy();
					   			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'ViewEditor','getRemoveViewAction.Action.execute()');
					   		}						   		
					   	},
					   	failure: function(response, options) {
					   		options.node.ui.setBusy();
					        if (typeof(response.responseText) == 'undefined') {
					   			PulseError.Throw({e:'REQUEST.FAILED'},'ViewEditor','getRemoveViewAction.Action.execute()');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ViewEditor','getRemoveViewAction.Action.execute()');
					        }
					   	},
					   	node: node,
					   	params: { nodeid: node.id }
					};
					Ext.Ajax.request(requestCFG);
	        	} 
        	}, 
        	this
    	);				
	},
	
	/**
	 * reloads a ViewEditor-tab with a given ext-tree-node (only if tab is open)
	 * @param {Object} node, the node the ViewEditor-tab of which is to be reloaded
	 */
	reloadTab: function(node) {
		tab = Ext.getCmp('ViewEditor.' + node.id);
		if (typeof(tab) != 'undefined' && tab !== null) {
			tab.registeredObject.node = node;
			tab.show();					
			PULSE_VIEWPORT_CONTROLLER.reloadTab(tab, true);
		}
	},
	
	/**
	 * 
	 */
	buildRolesAssorter: function() {
		
		if (typeof(this.loadRolesURL) == 'undefined' || this.loadRolesURL === '') {
			return;
		}
		
		// show roles-assorter
		this.rolesEditor = new Pulse.AssorterPanel({
			preLoad: false,
			title: VIEWPORT_PROPERTIES.ROLES,
			renderTo: this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.roles',
			loadURL: this.loadRolesURL + '?snid=' + this.sitemapNode.id,
			editURL: this.editRoleURL,
			editHandler: function(node) {
				RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
			},
			uiProviders: {
                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
            }
		});
		
		
		this.rolesEditor.on('MSG',function(msgString,editor) {
			// DBG >>
			if (this.DBG) {
				THROW({args:arguments},this,'MSG');
			}
			if (msgString == 'change') {
				if (false === this.hasChanges()) {
					this.tab.toggleHasChangesIcon(false);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
				} else {
					this.tab.toggleHasChangesIcon(true);
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
				}
			} else {
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
			}
		},this);
		
		this.rolesEditor.on('reset',function(eObj){
			if (true === eObj.success && false === this.hasChanges()) {
				this.tab.toggleHasChangesIcon(false);
				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:'reset'}]});
			}
		},this);
		
	},
	
	/**
	 * 
	 */
	initApplyRolesChildrenMonitor: function() {
		
		try {
			
			// retrieve required fields
			this.applyRolesForChildrenEl = Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applyRolesForChildren');
			
			if (typeof(this.applyRolesForChildrenEl) == 'undefined' 
				&& this.applyRolesForChildrenEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initApplyRolesChildrenMonitor');
				}
				return;
			}
			
			// builds monitor
			applyRolesForChildrenMonitorCFG = {
				id: this.id + '.applyRolesForChildrenEditor',
				el: this.applyRolesForChildrenEl,
				fieldType: 'checkbox'
			};
			
			this.applyRolesForChildrenMonitor = new Pulse.FieldMonitor(applyRolesForChildrenMonitorCFG);
						
			this.addSubEditor(this.applyRolesForChildrenMonitor);
		
			// initial hide of msg-el
			try {
				Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applyRolesForChildrenMSG').hide();
			} catch(e) {/* ignore */}
			
			// hide/show listener
			this.applyRolesForChildrenMonitor.on('MSG',function(msgString){
				try {
					if (msgString == 'change') {
						Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applyRolesForChildrenMSG').show(true);
					} else if(msgString == 'reset') {
						Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applyRolesForChildrenMSG').hide(true);
					}
				} catch(e) {/* ignore */}
			},this);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initApplyRolesChildrenMonitor');
			}
		}
	},
	
	/**
	 * 
	 */
	initApplySectionTagChildrenMonitor: function() {
		
		try {
			
			// retrieve required fields
			this.applySectionTagForChildrenEl = Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applySitemapSectionTagForChildren');
			
			if (typeof(this.applySectionTagForChildrenEl) == 'undefined' 
				&& this.applySectionTagForChildrenEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initApplySectionTagChildrenMonitor');
				}
				return;
			}
			
			// builds monitor
			applySectionTagForChildrenMonitorCFG = {
				id: this.id + '.applySectionTagForChildrenEditor',
				el: this.applySectionTagForChildrenEl,
				fieldType: 'checkbox'
			};
			
			this.applySectionTagForChildrenMonitor = new Pulse.FieldMonitor(applySectionTagForChildrenMonitorCFG);			
			this.addSubEditor(this.applySectionTagForChildrenMonitor);
			
			// initial hide of msg-el
			try {
				Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applySitemapSectionTagForChildrenMSG').hide();
			} catch(e) {/* ignore */}
			
			// hide/show listener
			this.applySectionTagForChildrenMonitor.on('MSG',function(msgString){
				try {
					if (msgString == 'change') {
						Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applySitemapSectionTagForChildrenMSG').show(true);
					} else if(msgString == 'reset') {
						Ext.get(this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.applySitemapSectionTagForChildrenMSG').hide(true);
					}
				} catch(e) {/* ignore */}
			},this);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initApplySectionTagChildrenMonitor');
			}
		}
	},
	
	/**
	 * 
	 */
	initSitemapSectionTagEditorPanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['initSitemapSectionTagEditorURL']},this,'initSitemapSectionTagEditorPanel');
		}
		
		try {
		
			if (typeof(this.initSitemapSectionTagEditorURL) != 'string' || this.initSitemapSectionTagEditorURL === '') {
				if (this.DBG) {
					FATAL({e:'URL UNDEFINED',props:['initSitemapSectionTagEditorURL']},this,'initSitemapSectionTagEditorPanel');
				}
				return;
			}
			
			subEditorPanelCFG = {
				/*height: 250,*/
				id: this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.sitemapSectionTagEditorPanel',
				masterEditor: this,
				url: this.initSitemapSectionTagEditorURL,
				params: { id: this.sitemapNode.id },
				renderTo: this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.sitemapSectionTagEditorDiv',
				bodyStyle: 'padding: 5px 5px 5px 5px;'
			};
			if (typeof(this.sectionTagEditorTitle) == 'string' 
				&& this.sectionTagEditorTitle !== '') {
				subEditorPanelCFG.title = this.sectionTagEditorTitle;
			}
			subEditorPanel = new Pulse.SubEditorPanel(subEditorPanelCFG);
			
			subEditorPanel.on('expand',function(){
				this.initializePanel();
			});
			
			this.addSubEditor(subEditorPanel);
		
		} catch(e) {
			FATAL(e,this,'initSitemapSectionTagEditorPanel');
		}
		
	},
	
	/**
	 * 
	 */
	initDurationEditorPanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['initDurationEditorURL']},this,'initDurationEditorPanel');
		}
		
		try {
		
			if (typeof(this.initDurationEditorURL) != 'string' || this.initDurationEditorURL === '') {
				if (this.DBG) {
					FATAL({e:'URL UNDEFINED',props:['initDurationEditorURL']},this,'initDurationEditorPanel');
				}
				return;
			}
			
			subEditorPanelCFG = {
				/*height: 250,*/
				id: this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.durationEditorPanel',
				masterEditor: this,
				url: this.initDurationEditorURL,
				params: { id: this.sitemapNode.id },
				renderTo: this.sitemapNode.clazz + '.' + this.sitemapNode.id + '.durationEditorDiv',
				bodyStyle: 'padding: 5px 5px 5px 5px;' 
			};
			
			if (typeof(this.durationEditorTitle) == 'string' 
				&& this.durationEditorTitle !== '') {
				subEditorPanelCFG.title = this.durationEditorTitle;
			}
			
			subEditorPanel = new Pulse.SubEditorPanel(subEditorPanelCFG);
			
			subEditorPanel.on('expand',function(){
				this.initializePanel();
			});
			
			this.addSubEditor(subEditorPanel);
		
		} catch(e) {
			FATAL(e,this,'initDurationEditorPanel');
		}
		
	},
	
	/**
	 * returns if this editor has changes
	 * 
	 * @return {Boolean}
	 */
	hasChanges: function() {
		
		// call super
		superBool = Pulse.ViewEditor.superclass.hasChanges.call(this);
		
		// roles-editor
		rolesBool = false;
		if (typeof(this.rolesEditor) != 'undefined'
			&& typeof(this.rolesEditor) !== null) {
			rolesBool = this.rolesEditor.hasChanges();
		}
		
		return (superBool || rolesBool);
	},
	
	/**
	 * 
	 */
	getChanges: function(v) {
		
		// call super
		v = Pulse.ViewEditor.superclass.getChanges.call(this, v);
		
		try {
		
			if (typeof(v) != 'object') {
				v = {};
			}
			
			// add roles if changed
			if (typeof(this.rolesEditor) != 'undefined' 
				&& this.rolesEditor !== null) {
				if (true === this.rolesEditor.hasChanges()) {
					chgs = this.rolesEditor.getChanges();
					if (typeof(chgs.asoc) != 'undefined') {
						v.addroles = chgs.asoc;
					}
					if (typeof(chgs.unasoc) != 'undefined') {
						v.remroles = chgs.unasoc;
					}
				}
			}
			
			return v;
		
		} catch (e) {
			THROW({e:'FATAL',o:e}, this, 'getChanges');
		}
	},
	
	/**
	 *
	 */
	commit: function() {
		
		// call super
		Pulse.ViewEditor.superclass.commit.call(this);
		
		// roles-editor
		if (typeof(this.rolesEditor) != 'undefined' 
			&& this.rolesEditor !== null) {
			if (true === this.rolesEditor.hasChanges()) {
				this.rolesEditor.commit();
			}
		}

	},
	
	/**
	 * resets the editor.
	 * 
	 *  !!! does not update ui (of AssorterPanels) !!!
	 */
	reset: function() {
		
		// call super
		Pulse.ViewEditor.superclass.reset.call(this);
				
		// roles-editor
		if (typeof(this.rolesEditor) != 'undefined' 
			&& this.rolesEditor !== null) {
			this.rolesEditor.reset();
		}
		
	},
	
	/**
	 * 
	 */
	initComponent: function(boolInitTab) {
		
		// call super
		Pulse.ViewEditor.superclass.initComponent.call(this, boolInitTab);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.ViewEditor');
		}
		
		try {
			
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}
			
			this.initApplyRolesChildrenMonitor();
			this.buildRolesAssorter();
		
			this.initApplySectionTagChildrenMonitor();
			this.initSitemapSectionTagEditorPanel();
			
			this.initDurationEditorPanel();
		
		} catch(e) {
			FATAL(e, this, 'initComponent.ViewEditor');
		}
		
	},
	
	/**
	 * ! ! ! ! ! ! ! static ! ! ! ! ! ! ! !
	 */
	createNewView: function() {
		alert('static access only via ViewEditor.createNewView()');
	}
		
};
Pulse.ViewEditor = Ext.extend(Pulse.Editor, ViewEditor); // END :: Pulse.ViewEditor

/**
 * !!!!!!!!!!!!! static methods (TODO: rework) !!!!!!!!!!!!!!!!!!!
 * 
 * @param {Object} crNode the content-registry-node to fetch the content from
 * @param {Object} smNode the sitemap-node to create the new view for
 * @param {String} createViewURL the URL to use for the create
 */
ViewEditor.createNewView = function (crNode, smNode, createViewURL) {

	Ext.Ajax.request({
		node: smNode,
	   	url: createViewURL,
	   	method: 'POST',
	   	success: function(response, options) {
	   		decodedResponse = Ext.decode(response.responseText);		   		

	   		if (true === decodedResponse.status) {
//		   			tree = smNode.getOwnerTree();
	   			tree = SitemapTree;
	   			
	   			node = SitemapTree.findChildById(options.node.id);
	   			
	   			if (typeof(node) == 'undefined' || node === null) {
	   				
	   				SitemapTree.expandByIds(null, options.node.attributes.expandIds, function(_node) {
	   					// so the tab will be defintly reloaded (after node) with the actual node
                        ViewEditor.reloadTab(_node);
	   				});
	   				
	   			} else {

		   			// 'old' sitemap
                	tree.runOnlyOnceAfterReload = function(node) {
                        // so the tab will be defintly reloaded (after node) with the actual node
                        ViewEditor.reloadTab(node);
                        node.reload();
                    };
                	tree.reloadNode(node);
            	
	   			}
                
	   			// uncomment below for new sitemap
//		   			tree.editor.refresh(smNode, {success: 'reloadTab', scope: ViewEditor});
	   		} else {
	   			PulseError.Throw({e:'SERVER.ERROR', o:decodedResponse.error},'ViewEditor','createNewView');
	   		}	
	   	},
	   	failure: function(response, options) {
	   		if (typeof(response.responseText) == 'undefined') {
	   			PulseError.Throw({e:'REQUEST.FAILED'},'ViewEditor','createNewView');
	        } else {
	        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ViewEditor','createNewView');
	        }
	   	},
	   	params: { crNode: crNode.id, smNode: smNode.id }
	});
};

/**
 * 
 */
DBG.SitemapSectionTagEditor = DBG.apply(DBG.Editor,{
	initComponent: { SitemapSectionTagEditor: false },
	createSitemapSectionTag: false,
	selectSectionTag: false,
	editSectionTag: false,
	deleteSectionTag: false
});

/**
 * 
 */
SitemapSectionTagEditor = {
	
	type: 'SitemapSectionTagEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.SitemapSectionTagEditor*/,
	
	/**
	 * 
	 */
	getButtons: function() {
		
		createButtonCfg = {
			scope: this,
			disabled: true,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
			iconCls: 'addIconCls',
			handler: this.createSitemapSectionTag
		};
		
//		deleteButtonCFG = {
//			scope: this,
//			disabled: true,
//			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
//			iconCls: 'deleteIconCls',
//			handler: this.removeSelection
//		};
		
		removeSelectionButtonCFG = {
			scope: this,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_UNSELECT,
			iconCls: 'isSelectedDisabledIconCls',
			handler: this.removeSelection
		};
		
//		if (typeof(this.deleteSitemapSectionTagURL) == 'string' 
//			&& this.deleteSitemapSectionTagURL !== '') {
//			deleteButtonCFG.disabled = false;
//		}
		
		if (typeof(this.createSitemapSectionTagURL) == 'string' 
			&& this.createSitemapSectionTagURL !== '') {
			createButtonCfg.disabled = false;
		}
		
		return [new Ext.Toolbar.Button(createButtonCfg),new Ext.Toolbar.Separator(),
//				new Ext.Toolbar.Button(deleteButtonCFG),new Ext.Toolbar.Separator(),
				new Ext.Toolbar.Button(removeSelectionButtonCFG),new Ext.Toolbar.Separator()];
		
	},
	
	/**
	 * 
	 */
	createSitemapSectionTag: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW(this.masterEditor,this,'createSitemapSectionTag');
		}
		
		//prompt for name
		Ext.Msg.prompt(
    		VIEWPORT_PROPERTIES.NAME, 
    		VIEWPORT_PROPERTIES.TEXT_ENTER_NAME + ':', 
    		function(btn, text) {
    			
			    if (btn === 'ok'){
			    	
			    	if (text.trim() === '') {
			    		return;			                	
			    	}
					
					// create new SitemapSectionTag
					
					this.masterEditor.disable();
					
                    requestCFG = {
                    	url: this.createSitemapSectionTagURL,
                    	scope: this,
                    	method: 'POST',
                    	success: function(response, options) {
                    		
                    		this.masterEditor.enable();
                    		
                    		decodedResponse = Ext.decode(response.responseText);
                    		
							if (true === decodedResponse.status) {
								
								// refresh panel-content
								this.masterEditor.loadPanel();
								
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'createSitemapSectionTag');
							}
                    	},
                    	failure: function(response, options) {
                    		
							this.masterEditor.enable();
                    		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'createSitemapSectionTag');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'createSitemapSectionTag');
					        }
					        
                    	},
                    	params: { text: text }
                    };
                    
                    // perform the actual request
                    Ext.Ajax.request(requestCFG);
        
			    }
			},this,false
		);        
		
		
	},
	
	/**
	 * 
	 */
	removeSelection: function() {
		
		if (typeof(this.sitemapSectionTag) == 'undefined') {
			return;
		}
		
		Ext.get(this.sitemapSectionTag.clazz + '.' 
			+ this.sitemapSectionTag.id + '.'
			+ this.sitemapNode.id).dom.checked = false;
			
		delete this.sitemapSectionTag;		
			
		if (true === this.hasChanges()) {
			this.fireEvent('MSG','change',this);
		} else {
			this.fireEvent('MSG','reset',this);
		}
		
	},
	
	/**
	 * 
	 */
	hasChanges: function() {

		if (typeof(this.sitemapSectionTag) == 'undefined' 
			&& typeof(this.initialSelectionTag) == 'undefined') {
			return false;
		}

		if (typeof(this.sitemapSectionTag) != 'undefined' 
			&& this.sitemapSectionTag !== null
			&& typeof(this.initialSelectionTag) != 'undefined'
			&& typeof(this.initialSelectionTag) !== null) {
			return (this.sitemapSectionTag.id != this.initialSelectionTag.id);
		}
		
		
		return true;
	},
	
	/**
	 * 
	 */
	getChanges: function(v) {
		
		if (false === this.hasChanges()) {
			return v;
		}
		
		if (typeof(v) == 'undefined') {
			v = {};
		}
		
		if (typeof(this.sitemapSectionTag) != 'undefined') {
			v.sitemapSelectionTagId = this.sitemapSectionTag.id;
		} else {
			v.sitemapSelectionTagId = 'undefined';
		}
		return v;
		
	},
	
	/**
	 * 
	 */
	commit: function() {
		
		this.initialSelectionTag = this.sitemapSectionTag;
		this.fireEvent('MSG','commit',this);
		return;
		
		/*
		this.reset(false);
		this.masterEditor.loadPanel();*/
	},
	
	/**
	 * 
	 */
	reset: function(boolFireEvt) {
		if (typeof(this.sitemapSectionTag) != 'undefined') {
			Ext.get(this.sitemapSectionTag.clazz + '.' 
			+ this.sitemapSectionTag.id + '.'
			+ this.sitemapNode.id).dom.checked = false;
		}
		if (typeof(this.initialSelectionTag) != 'undefined') {
			Ext.get(this.initialSelectionTag.clazz + '.' 
			+ this.initialSelectionTag.id + '.'
			+ this.sitemapNode.id).dom.checked = true;
		}
		this.sitemapSectionTag = this.initialSelectionTag;
		if (false === boolFireEvt) {
			return;
		}
		this.fireEvent('MSG','reset',this);
		
	},
	
	/**
	 * 
	 */
	onRender: function() {
		// DBG
		THROW({props:['renderTo'],args:arguments},this,'onRender');
		
		try {
		
			// TODO
		
		
		} catch(e) {
			description = (typeof(e) == 'object' && typeof(e.description) != 'undefined') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:{e:e,o:description}}, this, 'onRender');
		}
	},
	
	/**
	 * 
	 */
	selectSectionTag: function(radioEl) {
		
		// DBG >>
		if (this.DBG) {
			THROW({propsObj:radioEl,props:['name','value','className']},this,'selectSectionTag');
		}
		
		this.sitemapSectionTag = {
			id: radioEl.value,
			clazz: radioEl.className
		};
		
		if (true === this.hasChanges()) {
			this.fireEvent('MSG','change',this);
		} else {
			this.fireEvent('MSG','reset',this);
		}
	},
	
	/**
	 * 
	 */
	editSectionTag: function(id, name) {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['editSitemapSectionTagURL'],args:arguments},this,'editSectionTag');
		}
		
		//prompt for new name
		Ext.Msg.prompt(
    		VIEWPORT_PROPERTIES.NAME, 
    		VIEWPORT_PROPERTIES.TEXT_ENTER_NAME + ':', 
    		function(btn, text) {
    			
			    if (btn === 'ok'){
			    	
			    	if (text.trim() === '') {
			    		return;			                	
			    	}
					
					// create new SitemapSectionTag
					
					this.masterEditor.disable();
					
                    requestCFG = {
                    	url: this.editSitemapSectionTagURL,
                    	scope: this,
                    	method: 'POST',
                    	success: function(response, options) {
                    		
                    		this.masterEditor.enable();
                    		
                    		decodedResponse = Ext.decode(response.responseText);
                    		
							if (true === decodedResponse.status) {
								
								// refresh panel-content
								this.masterEditor.loadPanel();
								
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'createSitemapSectionTag');
							}
                    	},
                    	failure: function(response, options) {
                    		
							this.masterEditor.enable();
                    		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'createSitemapSectionTag');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'createSitemapSectionTag');
					        }
					        
                    	},
                    	params: { text: text, id: id }
                    };
                    
                    // perform the actual request
                    Ext.Ajax.request(requestCFG);
        
			    }
			},this,false,name
		);
	},
	
	/**
	 * 
	 */
	deleteSectionTag: function(id, name) {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['deleteSitemapSectionTagURL'],args:arguments},this,'deleteSectionTag');
		}
		
		
		
		// display delete confirm-dialogue
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + name + '"',
			VIEWPORT_PROPERTIES.MSG_REALLYDELETE, 
        	function(response) {
        		// do nothing if answer is not yes
	        	if('yes' === response) {
	        		
	        		// disable panel
	        		this.masterEditor.disable();
	        		
	        		requestCFG = {
	        			url: this.deleteSitemapSectionTagURL,
	        			scope: this,
		        		method: 'POST', 
		        		success: function(response, options) {
		        			this.masterEditor.enable();
		        			decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								
								this.masterEditor.loadPanel();
								(function(){this.fireEvent('MSG','savesuccess',this);}).defer(500,this);
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'deleteSectionTag');
							}
		        		},
		        		failure: function(response, options) {
							this.masterEditor.enable();
    						if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'deleteSectionTag');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'deleteSectionTag');
					        }
		        		},
		        		params: {
		        			id: id
		        		}
	        		};
	        		// server-call
	        		Ext.Ajax.request(requestCFG);
	        		
	        	} 
        	}, 
        	this
    	);
	},
	
	/**
	 * 
	 */
	initComponent: function() {
		// call super
		Pulse.SitemapSectionTagEditor.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.SitemapSectionTagEditor');
		}
		
		try {
			
			// TODO
			this.initialSelectionTag = this.initialConfig.sitemapSectionTag;
			
		} catch(e) {
			FATAL(e, this, 'initComponent.SitemapSectionTagEditor');
		}
	}
		
};
Pulse.SitemapSectionTagEditor = Ext.extend(Pulse.Editor, SitemapSectionTagEditor); // END :: Pulse.SitemapSectionTagEditor

/**
 * 
 */
DBG.ViewStyleEditor = DBG.apply(DBG.Editor,{
	initComponent: { ViewStyleEditor: false}
});

/**
 * 
 */
ViewStyleEditor = {
	
	type: 'ViewStyleEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ViewStyleEditor*/,
	
	buildPanel: function() {
		
		try {
		
			this.panel = new Ext.Panel({
				title: this.title + ':',
				header: true,
				collapsible: true,
				collapsed: true,
				renderTo: this.id + '.el',
				contentEl: this.id + '.contentEl',
				bodyStyle: 'padding: 5px 5px 5px 5px;'
			});
			
			Pulse.insertHasChangesIcon(this.panel);
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'buildPanel');
			}
		}
		
	},
	
	/**
	 * 
	 */
	selectStyle: function(newStyle) {
		
		if (this.selectedStyle == newStyle) {
			return;
		}
		
		sitemapNodeId = this.tab.registeredObject.node.id;
		
		// process currently selected style-img-element
		imgEl = Ext.get(this.selectedStyle + '.' + sitemapNodeId + '.isSelected');		
		if (imgEl.hasClass('isSelectedIconCls')) {			
			imgEl.removeClass('isSelectedIconCls');
			imgEl.setWidth(1);
		}
		
		// process new style-img-element
		imgEl = Ext.get(newStyle + '.' + sitemapNodeId + '.isSelected');
		imgEl.addClass('isSelectedIconCls');
		imgEl.setWidth(16);
		
		// set new style
		this.selectedStyle = newStyle;
		
		if (this.selectedStyle != this.initialConfig.selectedStyle) {
			this.fireEvent('MSG','change',this);
			this.panel.toggleHasChangesIcon(true);
		} else {
			this.fireEvent('MSG','reset',this);
			this.panel.toggleHasChangesIcon(false);
		}
		
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
//		alert(this.selectedStyle + ' == ' + this.initialConfig.selectedStyle 
//			+ ' = ' + (this.selectedStyle == this.initialConfig.selectedStyle));
		return (this.selectedStyle != this.initialConfig.selectedStyle);
	},
	
	/**
	 * 
	 */
	getChanges: function(v) {
		
		if (false === this.hasChanges()) {
			return v;
		}
		
		if (typeof(v) == 'undefined') {
			v = {};
		}
		
		v.style = this.selectedStyle;
		
		return v;
		
	},
	
	/**
	 * 
	 */
	commit: function() {
		this.initialConfig.selectedStyle = this.selectedStyle;
		this.panel.toggleHasChangesIcon(false);
	},
	
	/**
	 * 
	 */
	reset: function() {
		this.selectedStyle = this.initialConfig.selectedStyle;
		this.panel.toggleHasChangesIcon(false);
	},
	
	/**
	 * 
	 */
	initComponent: function() {
		// call super
		Pulse.ViewStyleEditor.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.ViewStyleEditor');
		}
		
		try {
			
			this.buildPanel();
		
		} catch(e) {
			FATAL(e, this, 'initComponent.ViewStyleEditor');
		}
	}
		
};
Pulse.ViewStyleEditor = Ext.extend(Pulse.Editor, ViewStyleEditor); // END :: Pulse.ViewStyleEditor

/**
 * 
 */
DBG.ViewThemeEditor = DBG.apply(DBG.Editor,{
	initComponent: { ViewThemeEditor: false }
});

/**
 * 
 */
ViewThemeEditor = {
	
	type: 'ViewThemeEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ViewThemeEditor*/,
	
	/**
	 * 
	 */
	buildPanel: function() {
		
		try {
		
			this.panel = new Ext.Panel({
				title: this.title + ':',
				header: true,
				collapsible: true,
				collapsed: true,
				renderTo: this.id + '.el',
				contentEl: this.id + '.contentEl',
				bodyStyle: 'padding: 5px 5px 5px 5px;'
			});
			
			Pulse.insertHasChangesIcon(this.panel);
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'buildPanel');
			}
		}
		
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		// DBG >>
		if (this.DBG) {
			FATAL({e:'IMPLEMENT'},this,'hasChanges');
		}
		return false;
	},
	
	/**
	 * 
	 */
	getChanges: function(v) {
		// DBG >>
		if (this.DBG) {
			FATAL({e:'IMPLEMENT'},this,'getChanges');
		}
		return v;
	},
	
	/**
	 * 
	 */
	commit: function() {
		// DBG >>
		if (this.DBG) {
			FATAL({e:'IMPLEMENT'},this,'commit');
		}
	},
	
	/**
	 * 
	 */
	reset: function() {
		// DBG >>
		if (this.DBG) {
			FATAL({e:'IMPLEMENT'},this,'reset');
		}
	},
	
	/**
	 * 
	 */
	initComponent: function() {
		
		// call super
		Pulse.ViewThemeEditor.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.ViewThemeEditor');
		}
		
		try {
			
			this.buildPanel();
		
		} catch(e) {
			FATAL(e, this, 'initComponent.ViewThemeEditor');
		}
	}
		
};
Pulse.ViewThemeEditor = Ext.extend(Pulse.Editor, ViewThemeEditor); // END :: Pulse.ViewThemeEditor

/**
 * !!!!!!!!!!!!! static methods (TODO: rework) !!!!!!!!!!!!!!!!!!!
 */
ViewThemeEditor.showSelector = function(sitemapNodeId, editThemesURL) {
	
	try {		
	
		pel = VIEWPORT.getEl();
        if (typeof(pel) == 'undefined') {
        	throw('24 :: PULSE.ViewEditor.Themes.js.initEditor() :: ' + 
        	'CHECK for element failed...');
        }
        
        if (typeof(this.win) == 'undefined' || this.win === null) {
                
			el = pel.createChild({
		        tag: 'div', 
		        id: 'ThemesEditorWindow.el'
		    });        
			
			// config
		    windowCfg = {
		    	id: 'ThemesEditorWindow',
		    	maximizable: false,
		        title: VIEWPORT_PROPERTIES.TEXT_VIEWEDITOR_THEMES,
		        iconCls: 'sitemapIconCls',
		        closable: true, 
		        plain: false,
		        modal: true,
		        autoScroll: true, 
				html: '',
		        renderTo: el,
		        height: 300, 
		        width: 400,
		        bodyStyle: 'background-color: #FFFFFF;',
		        tbar: [{
						text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
						handler: function() {
							ViewThemeEditor.win.close();
						},
						iconCls: 'cancelIconCls'
				}]	        
	    	};
	    	
	    	this.win = new Ext.Window(windowCfg);
        }


		loadConfig = {
			url: editThemesURL,
			method: 'POST',
			callback: LPCB,
			params: { id: sitemapNodeId },
            text: 'loading...',
            discardUrl: true,
            nocache: true,
            timeout: 30
		};
        this.win.load(loadConfig);
    	
    	// ! hide win on close
    	this.win.on({
    		'beforeclose': {
    			fn : function(win) {
    				win.hide();
    				return false;
    			}
    		}
    	});
    	
    	this.win.setSize({width: VIEWPORT.getSize().width * 0.8, height: VIEWPORT.getSize().height * 0.8});
    	this.win.show();
		this.win.setPosition(VIEWPORT.getSize().width * 0.1, VIEWPORT.getSize().height * 0.1);
        
	} catch (windowInitError) {
		alert('windowInitError: \n' + windowInitError);
	}
};
 
/**
 * 
 */
ViewThemeEditor.removeTheme = function(sitemapNodeId, removeThemeURL, loadThemeURL) {
	
	Ext.Msg.confirm(
		VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
		VIEWPORT_PROPERTIES.TEXT_REALLYRESET,
		function(response) {
			if ('yes' === response) {
			
				Ext.Ajax.request({
					url: removeThemeURL,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);		   		

				   		if (true === decodedResponse.status) {
				   			ViewThemeEditor.updateTheme(options.params.id, loadThemeURL);
				   		} else {
				   			PulseError.Throw({e:'SERVER.ERROR', o:decodedResponse.error},'ViewEditorThemes','removeTheme');
				   		}
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
				   			PulseError.Throw({e:'REQUEST.FAILED'},'ViewEditorThemes','removeTheme');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ViewEditorThemes','removeTheme');
				        }
					},
					params: { id: sitemapNodeId }
				});
	
			}		
		},this
	);
	
};
	
/**
 * 
 */
ViewThemeEditor.applyTheme = function(sitemapNodeId, themeName, applyThemeURL, loadThemeURL) {
	
	Ext.Ajax.request({
		url: applyThemeURL,
		method: 'POST',
		success: function(response, options) {
			decodedResponse = Ext.decode(response.responseText);		   		

	   		if (true === decodedResponse.status) {
	   			ViewThemeEditor.win.close();
	   			ViewThemeEditor.updateTheme(options.params.id, loadThemeURL);
	   		} else {
	   			PulseError.Throw({e:'SERVER.ERROR', o:decodedResponse.error},'ViewEditorThemes','applyTheme');
	   		}
		},
		failure: function(response, options) {
			if (typeof(response.responseText) == 'undefined') {
	   			PulseError.Throw({e:'REQUEST.FAILED'},'ViewEditorThemes','applyTheme');
	        } else {
	        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'ViewEditorThemes','applyTheme');
	        }
		},
		params: { id: sitemapNodeId, theme: themeName }
	});
	
};

/**
 * 
 */
ViewThemeEditor.updateTheme = function(sitemapNodeId, loadThemeURL) {
	themesEl = Ext.get(sitemapNodeId + '.themeReloadWrapper');
	themesEl.getUpdater().update({
		url: loadThemeURL,
		method: 'POST',
		callback: LPCB,
		params: { id: sitemapNodeId },
        text: 'loading...',
        discardUrl: true,
        nocache: true,
        timeout: 30
	});
};


/**
 * provides convenience functions for handling the viewport
 */
 var PULSE_VIEWPORT_CONTROLLER = {
 	
 	type: 'PULSE_VIEWPORT_CONTROLLER',
 	
 	DBG: false/*{
 		openTab: false,
 		openTabDbgNewTab: false,
 		openTabDeferredActivation: false,
 		reloadTab: false,
 		closeTab: false,
 		onBeforeTabClose: false,
 		onAfterTabClose: false 		
 	}*/,
 	
 	/**
 	 * 
 	 */
 	openTab: function(config) {
 		
 		// DBG >>
		if (this.DBG) {     
 			THROW({args:arguments,propsObj:config,props:['id','loadParams','loadParams.url']},this,'openTab');
		}
		
 		// check for valid config
 		if (typeof(config) == 'undefined' || typeof(config.id) == 'undefined') {
 			THROW({e:'config.ERROR',propsObj:config,props:['id']},this,'openTab');
 			return;
 		}
 		
 		// store inital pulse load configuration for tab reloads
 		pulseLoadConfig = config;
 		
 		// show tab if already open
 		if (typeof(CENTER_TAB_PANEL.getComponent(config.id)) != 'undefined' && CENTER_TAB_PANEL.getComponent(config.id) !== null) {
        	CENTER_TAB_PANEL.getComponent(config.id).show();
//			THROW({o:'tabAlreadyThere',args:arguments,propsObj:config,props:['id','loadParams','loadParams.url']},this,'openTab');
            return;
        } 
//        else {
//        	THROW({o:'tabNotThere',args:arguments,propsObj:config,props:['id','loadParams','loadParams.url']},this,'openTab');
//        }
 		
 		// add defaults to config
 		if (typeof(config.closable) == 'undefined') {
 			config.closable = true;
 		}
 		
 		// by default a freshly loaded tab is not dirty
 		// tabIsDirty: flag indicating changes within the tab
 		config.isDirty = false; 		
 		// config.html = '...';
 		
 		// init the msg panel
 		msgPanel = new Ext.Panel({
 			id: config.id + '.msgPanel', 
 			html: 'msgs go here', 
 			bodyStyle:'padding:4px;', 
 			border:false,
			collapsed: true
		});
 		
 		// init the content-area of the new tab
 		contentPanel = new Ext.Panel({id: config.id + '.contentPanel', html: 'content goes here', border: false});
 		
 		//
 		actionReloadTab = new Ext.Action({
 			reloadTabId: config.id,
	        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	        handler: function() {
	        	
	        	tab = Ext.getCmp(this.reloadTabId);
	        	
	        	if (PULSE_VIEWPORT_CONTROLLER.DBG) {
		        	THROW({
		        		propsObj:tab,
		        		props:['id','contentPanel'],
		        		o:'reloadTabId: ' + this.reloadTabId
	        		},this,'RELOAD.CLICK');
	        	}
	        	
	        	if (true === tab.contentPanel.getUpdater().isUpdating()) {
					return;
				}
	        	PULSE_VIEWPORT_CONTROLLER.reloadTab(tab);
	        	return;

	        },
	        iconCls: 'reloadIconCls'
	    });
	    
	    // init the tabs toolbar
 		toolBar = new Ext.Toolbar({id:config.id + '.toolBar',items: ['->',actionReloadTab]});
 		
 		// set up the PulseTab
 		config.type = 'PulseExtendedTab';
 		config.tbar = toolBar;
 		config.items = [msgPanel, contentPanel];
 		
 		// add the requested tab
        newTab = CENTER_TAB_PANEL.add(config);
        newTab.msgPanel = msgPanel;
        newTab.contentPanel = contentPanel;
      
        newTab.show();
        
        newTab.pulseLoadConfig = pulseLoadConfig;
        newTab.doLayout();
        
        /**
         * 
         */
        newTab.setEditor = function(editor) {
        	
	    	if (typeof(editor) == 'undefined' || editor === null) {
	    		FATAL('CANNOT ADD UNDEFINED EDITOR',this,'setEditor');
	    		return;
	    	}
	    	this.pEditor = editor;
	    	
//	    	THROW({o:editor,props:['pEditor','pEditor.id']},this,'setEditor');
	    	
	    	this.pEditor.on('MSG',function(msgString,editor){
	    		
	    		if (typeof(editor.DBG) != 'undefined' && true === editor.DBG.MSG) {
        			THROW({
        				o: 'PULSE_VIEWPORT_CONTROLLER',
        				args:arguments,
        				p:[{n:'editor',o:editor},{n:'editor.id',o:editor.id},{n:'editor.type',o:editor.type}],
        				props:['id','type']
    				},this,'MSG');
        		}
	    		
	    		this.toggleHasChangesIcon(this.pEditor.hasChanges());
	    		        		
	    		msg = msgString.toUpperCase();
	    		
	    		/*
	    		PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o: msg}]});
	    		
	    		return;
	    		*/
	    		
	    		// TODO: refactor MSGS so they will work with fireEvent('MSG')-msgString-values
	    		
	    		switch(msg) {
	    			case 'RESET':
	    				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o:'RESET'}]});
	    				break;
	    				
	    			case 'COMMIT':
	    				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o:'SAVESUCCESS'}]});
	    				break;
	    				
	    			case 'SAVESUCCESS':
	    				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o:'SAVESUCCESS'}]});
	    				break;
	    				
	    			case 'DELETESUCCESS':
	    				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o:'DELETESUCCESS'}]});
	    				break;
	    				
	    			case 'CHANGE':
	    				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o:'CHANGE'}]});
	    				break;
	    				
	    			case 'CHANGES':
	    				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o:'CHANGE'}]});
	    				break;
	    				
	    			case 'CHANGENOTSAVEABLE':
	    				PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.id},{n:'msg',o:'CHANGENOTSAVEABLE'}]});
	    				break;
	    				
	    			default:
	        			if (typeof(editor.DBG) != 'undefined' && true === editor.DBG.MSG) {
		        			THROW({
		        				o: 'PULSE_VIEWPORT_CONTROLLER',
		        				args:arguments,
		        				propsObj:editor,
		        				props:['tab','tab.id']
	        				},editor,'MSG');
		        		}
	    				break;
	    		}
	    		
	    		return;
	    		
	    	},this);
	    	
	    	PULSE_VIEWPORT_CONTROLLER.insertHasChangesIcon(this);
	    };
	    
	    /**
         * 
         */
        newTab.addSubEditor = function(editor) {
        	try {
        		
		    	if (typeof(editor) == 'undefined' || editor === null) {
		    		throw('CANNOT ADD UNDEFINED EDITOR');
		    	}
		    	if (typeof(this.pEditor) == 'undefined' || this.pEditor === null) {
		    		throw('this.pEditor UNDEFINED');
		    	}
	    	
	    		this.pEditor.addSubEditor(editor);
	    	
        	} catch (e) {
        		FATAL(e,this,'addSubEditor');
        	}
        };        

		// initialize/hide msgPanel
		msgPanel.hide();
		msgPanel.on('collapse',
			function(p) {
				msgPanel.hide();
			}
		);		
		msgPanel.on('hide',
        	function(p) {
        		(function() {
        			newTab.fireEvent('resize', newTab);
            	}).defer(500);
        	}        	
      	);
      	
        
        if (!config.loadParams) {
        	actionReloadTab.disable();
        } else {        	
        	if (typeof(config.loadParams.url) == 'undefined' || 
        		typeof(config.loadParams.url) != 'string' || 
        		config.loadParams.url === '') {
        		THROW({
        			e:'URL for AJAX call undefined',
        			args:arguments,
        			propsObj:config,
        			props:['id','title','iconCls','loadParams','loadParams.url']
    			},this,'openTab');
        		actionReloadTab.disable();
        		return;
        	}
        	params = {};
        	if (typeof(config.loadParams.params) != 'undefined') {
        		params = config.loadParams.params;
        	}
        	
        	scripts = true;
        	if (typeof(config.loadParams.scripts) == 'boolean') {
        		scripts = config.loadParams.scripts;
        	}     	
        	
        	loadConfig = {
        		url: config.loadParams.url,
        		scripts: scripts,
    			callback: LPCB,
				params: params,
                text: 'loading...',
                discardUrl: true,
                nocache: true,
                timeout: 30
    		};
    		
        	contentPanel.loadConfig = loadConfig;
        	contentPanel.load(loadConfig);
        	
        }
        
        // init the tab
        if (typeof(config.initTab) == 'function') {
        	config.initTab(config.id);
        }
        
        // DBG >>
		if (this.DBG) {      
	      	THROW({
	      		args:arguments,
	      		propsObj:newTab,
	      		props:[
	      			'contentPanel','msgPanel',
      				'contentPanel.id','msgPanel.id'
      			]
	  		},this,'openTabDbgNewTab');
		}
		
        (function(_newTab,_config){
        	
        	newTabEl = CENTER_TAB_PANEL.getTabEl(_newTab);
        	
        	// DBG >>
			if (this.DBG) {     
		        THROW({
		        	args:arguments,
		        	o:{
		        		o:'deferredTabActivation',
		        		propsObj:newTabEl,
		        		props:['id','className']
	        		},
	        		propsObj:_config,
	        		props:['id']
	    		},this,'openTabDeferredActivation');	        
			}
			
	        if (newTabEl.className.indexOf('x-tab-strip-active') == -1) {
		
	        	newTabEl.className += ' x-tab-strip-active';
	        	
	        	// DBG >>
				if (this.DBG) {     
		        	THROW({
		        		o:'deferredTabActivation.true',
		        		propsObj:_config,
		        		props:['id']
	        		},this,'openTabDeferredActivation');
				}

	        }
	        
        }).defer(200,this,[newTab,config]);
        
        // DBG >>
		if (this.DBG) {     
        	THROW({o:'finished',propsObj:config,props:['id']},this,'openTab');
		}
 	},
 	
 	/**
 	 * 
 	 */
 	 reloadTab: function(tab, disregardChanges) {
 	 	
 	 	THROW({args:arguments},this,'reloadTab');
 	 	
 	 	// set reload-flag
 	 	tab.reloadTab = true;
 	 	
 	 	// set disregardChanges-flag
 	 	if (typeof(disregardChanges) == 'boolean' && disregardChanges === true) {
 	 		tab.disregardChanges = true;
 	 	} 
 	 	
		CENTER_TAB_PANEL.remove(tab.id, true);

 	},
 	 
 	/**
 	 * 
 	 */
 	closeTab: function(tabId, disregardChanges) {
 		
 		THROW({args:arguments},this,'closeTab');

 	 	// reloadTabWithChangesCheck
 	 	if (typeof(disregardChanges) == 'boolean' && disregardChanges === true) {
 	 		tab = Ext.getCmp(tabId);
 	 		if (typeof(tab) != 'undefined') {
 	 			tab.disregardChanges = true;
 	 		}
 	 		CENTER_TAB_PANEL.remove(tabId, true);
 	 	} else { 	 		
			CENTER_TAB_PANEL.remove(tabId, true);		
 	 	}
 	},
 	 
 	/**
 	 * 
 	 */
 	onBeforeTabClose: function(tabPanel, tab) {
 		
 		THROW({
 			args:arguments,
 			propsObj: tab,
 			props: ['id','isDirty','disregardChanges','reloadTab']
 		},this,'onBeforeTabClose');

		// Staindocotor legacy :( 	 	
		if (typeof(tab.tabIsDirty) == 'boolean') {
			// calls staindoc.onBeforeTabClose
			onBeforeTabClose(tabPanel, tab);			
			return;
		}
		
		if (true === tab.reloadTab && true === tab.disregardChanges) {
			if (typeof(tab.toggleHasChangesIcon) == 'function') {
	 			tab.toggleHasChangesIcon(false);
	 		}			
			return;
		}
		
		// tab.isDirty-check
		if (typeof(tab.pEditor) != 'undefined') {
			
			if (true === tab.pEditor.hasChanges()) {
				// display reload/close confirm-dialogue
				Ext.Msg.confirm(
					VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
					VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
					VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
		        	function(response) {
		        		// close or reload tab
			        	if('yes' === response) {
			        		tab.isDirty = false;
			        		if (typeof(tab.toggleHasChangesIcon) == 'function') {
					 			tab.toggleHasChangesIcon(false);
					 		}
			        		if (typeof(tab.pEditor.reset) == 'function') {
			        			tab.pEditor.reset(); // only resets change state for reload
			        		} else {
			        			tab.pEditor.commitChanges(); // only resets change state for reload
			        		}
			        		CENTER_TAB_PANEL.remove(tab.id, true);
			        	} else {
			        		tab.reloadTab = false;	
			        	}
		        	}, 
		        	this
	        	);
				return false;			
			}
			
		} else {
		
			if (true === tab.isDirty) {						
				// display reload/close confirm-dialogue
				Ext.Msg.confirm(
					VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
					VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
					VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
		        	function(response) {
		        		// close or reload tab
			        	if('yes' === response) {
			        		tab.isDirty = false;
			        		if (typeof(tab.toggleHasChangesIcon) == 'function') {
					 			tab.toggleHasChangesIcon(false);
					 		}
			        		CENTER_TAB_PANEL.remove(tab.id, true);
			        	} else {
			        		tab.reloadTab = false;	
			        	}
		        	}, 
		        	this
	        	);
				return false;		
			}
		
		}
		
		if (typeof(tab.toggleHasChangesIcon) == 'function') {
 			tab.toggleHasChangesIcon(false);
 		}
					 		
 	},
 	
 	/**
 	 * 
 	 */
 	onAfterTabClose: function(tabPanel, tab) {
 		
 		// DBG >>
 		if (this.DBG) {
			THROW({
	 			args:arguments,
	 			propsObj: tab,
	 			props: ['id','isDirty','disregardChanges','reloadTab']
	 		},this,'onAfterTabClose');
 		}
		
/* test -> see Pulse.UserOverviewEditor line.433 */		
//		p = [
//			{n:'tab',o:tab.id},
//			{n:'reloadTab',o:tab.reloadTab},
//			{n:'disregardChanges',o:tab.disregardChanges},
//			{n:'isDirty',o:tab.isDirty}
//		];
//		
//		if (typeof(tab.deleteObjects) != 'undefined') {
//			for (i = 0; i < tab.deleteObjects.length; i++) {
//				p.push({
//					n: 'deleteObject[' + i + ']', 
//					o: tab.deleteObjects[i] + ', id: '+tab.deleteObjects[i].id
//				});
//				tab.deleteObjects[i] = null;
//				delete tab.deleteObjects[i];
//			}
//		}
//		
// 		PulseError.Throw({e:'DBG',p: p
//		},'ViewPortController','onAfterTabClose');
/* test */
		
 		if (true === tab.reloadTab) {
 			tab.reloadTab = false;
			tab.disregardChanges = false;
			tab.isDirty = false;
			PULSE_VIEWPORT_CONTROLLER.openTab(tab.pulseLoadConfig);
 		}
 	},
 	
 	/**
 	 * 
 	 */
 	insertHasChangesIcon: function(tab, tabPanel) {
 		
 		if (typeof(tab) == 'undefined'|| tab === null) {
 			// check
 			return;
 		}
 		
 		try {
 		
	 		if (typeof(tab.toggleHasChangesIcon) == 'function') {
	 			// already there
	 			return;
	 		}
	 		
	 		if (typeof(tabPanel) == 'undefined' || tabPanel === null) {
	 			pnlTabEl = CENTER_TAB_PANEL.getTabEl(tab);
	 		} else {
	 			pnlTabEl = tabPanel.getTabEl(tab);
	 		}
	 		
			if (typeof(pnlTabEl) == 'undefined' || pnlTabEl === null) {			
				THROW({
					e: 'tab: El undefined',
					args:arguments,
					o: {
						props:['className'],
						propsObj:pnlTabEl
					},
					propsObj: tab,
					props:['id']
				},this,'insertHasChangesIcon');
				return;
			}

			// retrieve tab-dom
			extPnlTabElTitleDom = Ext.DomQuery.selectNode("*[@class*='x-tab-strip-inner']",pnlTabEl);
			
			// build img
			hasChangesIconImgEl = document.createElement('img');			
			hasChangesIconImgEl.id = tab.id + '.hasChangesIconImgEl';
			hasChangesIconImgEl.src = Ext.BLANK_IMAGE_URL;
			hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
			
			// add to tab
			if (extPnlTabElTitleDom.firstChild !== null) { 
				if (extPnlTabElTitleDom.firstChild.id !== tab.id + '.hasChangesIconImgEl') {
					extPnlTabElTitleDom.insertBefore(hasChangesIconImgEl, extPnlTabElTitleDom.firstChild);
					// set for tab
					tab.hasChangesIconImgEl = hasChangesIconImgEl;
				} else {
					tab.hasChangesIconImgEl = Ext.get(tab.id + '.hasChangesIconImgEl').dom;
				}
			} else {
				return;
			}
//			if (extPnlTabElTitleDom.nextSibling !== null) {
//				extPnlTabElTitleDom.nextSibling.insertBefore(hasChangesIconImgEl);
//			} else {
//				extPnlTabElTitleDom.parentNode.appendChild(hasChangesIconImgEl);
//			}
			
			// set for tab
//			tab.hasChangesIconImgEl = hasChangesIconImgEl;
			
			// add function for tab
			tab.toggleHasChangesIcon = function(bool) {
				
				// tabHasChangesIcon / tabHasChangesIconHidden
				
				if (typeof(bool) != 'boolean') {
					if (this.hasChangesIconImgEl.className == 'tabHasChangesIconHidden') {
						if (this.hasChangesIconImgEl.nextSibling.className.indexOf('m16left') === -1) {
							this.hasChangesIconImgEl.nextSibling.className += ' m16left';
						}
						this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
					} else {
						this.hasChangesIconImgEl.nextSibling.className = 
							this.hasChangesIconImgEl.nextSibling.className.replace(' m16left', '');
						this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
					}
				} else {
					if (true === bool) {
						if (this.hasChangesIconImgEl.nextSibling.className.indexOf('m16left') === -1) {
							this.hasChangesIconImgEl.nextSibling.className += ' m16left';
						}
						this.hasChangesIconImgEl.className = 'tabHasChangesIcon';
					} else {
						this.hasChangesIconImgEl.nextSibling.className = 
							this.hasChangesIconImgEl.nextSibling.className.replace(' m16left', '');
						this.hasChangesIconImgEl.className = 'tabHasChangesIconHidden';
					}
				}
				
			};
		
 		} catch(e) {
 			
 			description = (typeof(e) == 'object') ? ', ' + e.description : ''; 			
 			THROW({e:'FATAL',o:'' + e + description}, this, 'insertHasChangesIcon');
 			
 		}
		return;

 	},
 	
 	
 	// remove below when not needed anymore
 	
 	
 	/**
 	 * primitive error-displayer if the "building/loading" of a tab failed
 	 */
 	displayPanelError: function(tab, identifier) {
 		
 		contentPanel = Ext.getCmp(tab.id + '.contentPanel');
 		
 		PulseError.Throw({e:'TODO',p:[{n:'tab',o:tab},{n:'contentPanel',o:contentPanel}]},'PULSE_VIEWPORT_CONTROLLER','displayPanelError()');
 		
 		// contentPanel.getEl().update("ccc");
 		
 		return;
 		
 		switch (identifier) {
 			
 			// error on identifier == '' 			
 			case '':
 				alert('ERROR :: PULSE_VIEWPORT_CONTROLLER.displayPanelError(tab, identifier): identifier cannot be: ""');
 				break;
 			
 			default:
 				tab.getEl().update('NO CASE DEFINED :: PULSE_VIEWPORT_CONTROLLER.displayPanelError().switch( "' + identifier + '" )');
 		}
 		
 	}
 	
 }; // END :: PULSE_VIEWPORT_CONTROLLER
 
 
/**
 * 
 */
Pulse.test = function() {
	FATAL({e:'TODO',description:'{@see PULSE.test.js}'},this,'test');
};


/**
 * 
 */
DBG.CMSContentEditor = DBG.apply(DBG.ContentEditor,{
		
//	initComponent:  { CMSContentEditor: false },
	initFieldMonitoring: { CMSContentEditor: false },
	addSubEditor: { CMSContentEditor: false },
	hasChanges: { CMSContentEditor: false },
	
	initTab: false,
	
	MSG: false // checked also in PULSE_VIEWPORT_CONTROLLER

});

/**
 * 
 */
CMSContentEditor = {
	
	type: 'CMSContentEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.CMSContentEditor*/,
	
	// defaults
	
	// copy-content-button
	getCreateCopyButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.COPYCONTENT,
		disabled: true,
		scope: this,
		handler: function() {

			this.selectCopyCallback = function(node) {
				Ext.Ajax.request({
					url: this.copyContentURL,
					scope: this,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// reloads ContentLocalizationMap
							panel = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentLocalizationMap.panel');
		            		panel.lastLoadConfig.callback = LPCB;
		            		panel.lastLoadConfig.timeout = 30;
		            		panel.load(panel.lastLoadConfig);
		            		// shows copy in contentregistrytree
		            		crPanel = Ext.getCmp('ContentRegistry.WEST');
		            		crPanel.expand();
		            		path = decodedResponse.expandPath;
		            		ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), path, function(node) {
		            			ContentRegistryEditor.editNode(node);
		            		});
	            		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'tbar.copy');
						}
						delete this.selectCopyCallback;
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this,'tbar.copy');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'tbar.copy');
				        }
				        delete this.selectCopyCallback;
					},
					params: { id: this.getContent().id, toid: node.attributes.id }
				});
				
			};

			windowCfg = {
    			getChildrenURL: this.browseContentRegistryURL + '?mode=folder&bundle=' + this.getContent().bundle,
    			emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FOLDER,
    			scope: this,
    			selectCallback: 'selectCopyCallback'
    		};
    		ContentRegistryEditor.getSelectWindow(windowCfg);
		},
		iconCls: 'copyIconCls'
	};
	
	},
	
	// save-content-button
	getSaveContentButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
		disabled: true,
		scope: this,
		handler: function() {
			
			if (false === this.hasChanges()) {
				this.reset();
				return;
			}
			
			if (false === Ext.getCmp(this.id + '.nameEditor').validate() 
				|| false === Ext.getCmp(this.id + '.suffixEditor').validate()) {
				return;
			}
			
			saveValues = this.getChanges({id:this.getContent().id});
			saveValues.pages = this.getPageOrder();
			
			if (typeof(saveValues) == 'undefined' || saveValues === null) {
				if (this.DBG) {
					THROW({
						e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
						args:[this.hasChanges(),saveValues]
					},this,'saveContentButton');
				}
				return;
			}
			
			this.tab.disable();
			
			Ext.Ajax.request({
				url: this.saveContentURL,
				method: 'POST',
				scope: this,
				success: function(response, options) {
					this.tab.enable();
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {								
						this.commit();
						(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
					} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
					}
				},
				failure: function(response, options) {
					this.tab.enable();
					if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
			        }
				},
				params: saveValues
			});
		},
		iconCls: 'saveIconCls'
	};
	},
	
	// find-content-in-content-registry-button
	getFindButtonConfig: function() {
		return {
		text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
		disabled: true,
		scope: this,
		handler: function() {					
			Ext.Ajax.request({
				url: this.contentExpandPathURL,
				method: 'POST',
				success: function(response, options) {
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {
						// show content in contentregistrytree
	            		crPanel = Ext.getCmp('ContentRegistry.WEST');
	            		if (typeof(crPanel) == 'undefined' || crPanel === null) {
	            			PULSE_TOOLBAR.openPanel({
	            				id: 'ContentRegistry.WEST',
	            				callback: function() {
		            				ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
		            			}
	            			});
	            			return;
	            		}
	            		crPanel.expand();
						ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
	        		} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.find');
					}
				},
				failure: function(response, options) {
					if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.find');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.find');
				        }
				},
				params: { id: this.getContent().id }
			});
		},
		iconCls: 'findIconCls'
	};
	},
	
	// create-new-page-button
	getCreatePageButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.NEWPAGE,
		disabled: true,
		scope: this,
		handler: function() {
			AbstractBasicContentEditor.getFCKEditorWindow({
				scope: this,
                onSaveSuccess: 'saveNewPageSuccess',
                loadURL: this.editPageURL,
                saveURL: this.savePageURL,
                saveParams: { contentid: this.getContent().id }
            });
		},
		iconCls: 'newPageIconCls'
	};
	},
	
	// TODO change this 
	// (
	// new structure has to be: 
	// 	- a seperate page-(sub)editor to be added to this editor, 
	// 	- taking care of its stuff (e.g. save/create-success) on its own 
	// 	- and providing this editor with the required button
	// 
	// see: buttonConfig above
	// )
	saveNewPageSuccess: function() {
    	// reload all pages
		pagesEl = Ext.get('pagesWrapper.' + this.getContent().id);
		updateCfg = {
            url: this.loadPagesURL,
            scripts: true,
            method: 'POST',
            callback: LPCB,
            params: { id: this.getContent().id },
            text: 'loading...',
            discardUrl: true,
            nocache: true,
            timeout: 30
        };
        pagesEl.getUpdater().update(updateCfg);
    },
	
	/**
	 * adds buttons to tab holding the editor.
	 */
	initTab: function() {
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
			
				buttons = [];
				
				// enables save-content-button if URL
				saveContentButtonConfig = this.getSaveContentButtonConfig();
				if (typeof(this.saveContentURL) == 'string' && this.saveContentURL !== '') {
					saveContentButtonConfig.disabled = false;
					saveContentButtonConfig.scope = this;
				}
				buttons.push(saveContentButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
			
				// enables copy-content-button if URL
				createCopyButtonConfig = this.getCreateCopyButtonConfig();
				if (typeof(this.copyContentURL) == 'string' && this.copyContentURL !== '') {
					createCopyButtonConfig.disabled = false;
					createCopyButtonConfig.scope = this;
				}
				buttons.push(createCopyButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// enables find-button if URL
				findButtonConfig = this.getFindButtonConfig();
				if (typeof(this.contentExpandPathURL) == 'string' && this.contentExpandPathURL !== '') {
					findButtonConfig.disabled = false;
					findButtonConfig.scope = this;
				}
				buttons.push(findButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());		
				
				// enables new-page-button if URL
				createPageButtonConfig = this.getCreatePageButtonConfig();
				if (typeof(this.savePageURL) == 'string' && this.savePageURL !== '') {
					createPageButtonConfig.disabled = false;
					createPageButtonConfig.scope = this;
				}
				buttons.push(createPageButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// insert buttons
				this.tab.getTopToolbar().insertButton(0, buttons);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
	},
	
	/**
	 * initializes the field-monitoring
	 * (calls super-class-method)
	 */
	initFieldMonitoring: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initFieldMonitoring');
		}
		
		try {
					
			// inititialize field-monitoring for abstract-basic-content-editor-part
			Pulse.CMSContentEditor.superclass.initFieldMonitoring.call(this);

			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initFieldMonitoring');
			}
		}
	},
	
	/**
	 * this will obsolete as soon as new page-editor is available.
	 * 
	 * @Override
	 */
	hasChanges: function() {
		try {
			superBool = Pulse.CMSContentEditor.superclass.hasChanges.call(this);
			return (superBool || this.pageOrderChanged);
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'hasChanges');
			}
		}
	},
	
	/**
	 * this will obsolete as soon as new page-editor is available.
	 * 
	 * @Override
	 */
	commit: function() {
		try {
			Pulse.CMSContentEditor.superclass.commit.call(this);
			this.pageOrderChanged = false;
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'hasChanges');
			}
		}
	},
	
	/**
	 * this will be obsolete as soon as new page-editor is available.
	 * 
	 * @Override
	 */
	reset: function() {
		try {
			Pulse.CMSContentEditor.superclass.reset.call(this);
			this.pageOrderChanged = false;
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'hasChanges');
			}
		}
	},
	
	/**
	 * returns an array of ids representing the current page-order.
	 */
	getPageOrder: function() {
		
		// retrieve pages.table
		pagesTable = Ext.get('Pages.' + this.getContent().id);
		
		pageids = [];
		if (pagesTable.dom.getElementsByTagName('tr').length > 0) {
			child = Ext.get(pagesTable.dom.getElementsByTagName('tr')[0]);
//			pageids.push(child.id);
			while (child !== null) {
				pageids.push(child.id.split('.')[2]);
				child = child.next();
			}
		}
//		PulseError.Throw({e:'DBG',p:[
//			{n:'pagesTable',o:pagesTable},
//			{n:'pagesTable.first()',o:(pagesTable.dom.getElementsByTagName('tr').length < 1) ? null : pagesTable.dom.getElementsByTagName('tr')[0].id},
//			{n:'pageids',o:''+pageids.concat(' ')},
//			{n:'pageids.length',o:''+pageids.length}]},'CMSContentEditor','getPageOrder');
		return pageids;
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function(boolInitTab) {
		
			
		// call super
		Pulse.CMSContentEditor.superclass.initComponent.call(this);
			
//		// DBG >>
//		if (this.DBG) {
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.CMSContentEditor');
//		}
	
		try {
		
			// call inits
			this.initFieldMonitoring();
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}
			
			
			// `Â´ refactor ASAP
			// create page-editor which extends Pulse.Editor
			this.pageOrderChanged = false;
			// Â´` refactor ASAP
			
		
		} catch(e) {
			FATAL(e, this, 'initComponent.CMSContentEditor');
		}
				
	}
	
};

Pulse.CMSContentEditor = Ext.extend(Pulse.ContentEditor,CMSContentEditor); // END :: Pulse.CMSContentEditor


/**
 * 
 */
var CMSPageEditor = {
	
	LOC: {
		pageToSummary: 'this page as summary'
	},
	
	/**
	 * returns a page-panel
	 */
	buildPagePanel: function(config) {
		pagePanel = new Ext.Panel({
			id: 'PagePanel.' + config.contentid + '.' + config.pageid,
			renderTo: 'Page.' + config.contentid + '.' + config.pageid,
			contentEl: 'Page.' + config.contentid + '.' + config.pageid + '.content',
            title: VIEWPORT_PROPERTIES.PAGE + ' (id: ' + config.pageid + ')',
            iconCls: 'pageIconCls',
            collapsible:true,
            collapsed:true,            
			//
			// page-panel :: toolbar
			//
            tbar: [
                new Ext.Action({
                    text: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT,
                    handler: function() {
                        AbstractBasicContentEditor.getFCKEditorWindow({
                            loadURL: config.editURL,
                            loadParams: { id: config.pageid },
                            saveURL: config.saveURL,
                            saveParams: { id: config.pageid, contentid: config.contentid },
                            onSaveSuccess: function(decodedResponse) {
                            	thisPanel = Ext.getCmp('PagePanel.' + config.contentid + '.' + config.pageid);
                            	thisPanel.reloadContentAction.execute();
                            }
                        });
                    },
                    iconCls: 'editIconCls'
                }),'-',
                new Ext.Action({
                    text: this.LOC.pageToSummary,
                    handler: function() {
                        Ext.Ajax.request({
                        	url: config.toSummaryURL,
                        	method: 'POST',
                        	success: function(response, options) {
                        		decodedResponse = Ext.decode(response.responseText);
								if (true === decodedResponse.status) {
									// reload summary-panel
									summaryPanel = Ext.getCmp(config.contentclass + '.' + config.contentid + '.summary.panel');
									summaryPanel.reloadContentAction.execute();
									PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:config.contentclass+'.'+config.contentid+'.editor'},{n:'msg',o:'SUCCESS'}]});
								} else {
									PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'CMSPageEditor','tbar.toSummary.Action.execute()');
								}
                        	},
                        	failure: function(response, options) {
                        		if (typeof(response.responseText) == 'undefined') {
			   						PulseError.Throw({e:'REQUEST.FAILED'},'CMSPageEditor','tbar.toSummary.Action.execute()');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'CMSPageEditor','tbar.toSummary.Action.execute()');
						        }
                        	},
                        	params: { id: config.pageid, contentid: config.contentid }
                        });
                    },
                    iconCls: 'asSummaryIconCls'
                }),'-',
                new Ext.Action({
                    text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
                    handler: function() {
                    	Ext.Msg.confirm(
                    		VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + VIEWPORT_PROPERTIES.PAGE + '-' + config.pageid + '"',
                    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
                    		function(response) {
                    			if ('yes' === response) {
                    				
			                        Ext.Ajax.request({
			                        	url: config.deleteURL,
			                        	method: 'POST',
			                        	success: function(response, options) {
			                        		decodedResponse = Ext.decode(response.responseText);
											if (true === decodedResponse.status) {
												// reload pages
												pagesEl = Ext.get('pagesWrapper.' + config.contentid);
												pagesEl.getUpdater().update({
					                                url: config.loadPagesURL,
					                                scripts: true,
					                                method: 'POST',
					                                callback: LPCB,
					                                params: { id: config.contentid },
					                                text: 'loading...',
					                                discardUrl: true,
					                                nocache: true,
					                                timeout: 30
					                            });
												
												PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:config.contentclass+'.'+config.contentid+'.editor'},{n:'msg',o:'SUCCESS'}]});
											} else {
												PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},'CMSPageEditor','tbar.deletePage.Action.execute()');
											}
			                        	},
			                        	failure: function(response, options) {
			                        		if (typeof(response.responseText) == 'undefined') {
						   						PulseError.Throw({e:'REQUEST.FAILED'},'CMSPageEditor','tbar.deletePage.Action.execute()');
									        } else {
									        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},'CMSPageEditor','tbar.deletePage.Action.execute()');
									        }
			                        	},
			                        	params: { id: config.pageid, contentid: config.contentid }
			                        });
                        
                    			}
                    		},
                		this);
                        
                    },
                    iconCls: 'deletePageIconCls'
                }),'-'
            ],
            //
            // page-panel :: tools
            //
            tools: [{ 
                id:'up', 
                handler:function(){ 
                    liEl = Ext.get('Page.' + config.contentid + '.' + config.pageid + '.tr');
//                    PulseError.Throw({e:'up',p:[{n:'liEl.dom.previousSibling',o:(liEl.dom.previousSibling === null) ? liEl.dom.previousSibling : liEl.dom.previousSibling.id },{n:'liEl.id',o:liEl.id},{n:'liEl.dom.id',o:liEl.dom.id},{n:'liEl',o:liEl}]}); 
                    if (liEl.prev() !== null) {
                        liElExtPrv = Ext.get(liEl.prev().dom.id);
                        liEl.insertBefore(liElExtPrv);
                        Ext.getCmp(config.contentclass + '.' + config.contentid + '.contentEditor').pageOrderChanged = true;
                        PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:config.contentclass+'.'+config.contentid+'.editor'},{n:'msg',o:'change'}]}); 
                    }
                }, 
                qtip:VIEWPORT_PROPERTIES.UP
            },{ 
                id:'down',
                handler:function(){ 
                    liEl = Ext.get('Page.' + config.contentid + '.' + config.pageid + '.tr');
//                    PulseError.Throw({e:'down',p:[{n:'liEl.nextSibling.id',o:(liEl.dom.nextSibling === null) ? liEl.dom.nextSibling : liEl.dom.nextSibling.id },{n:'liEl.id',o:liEl.id},{n:'liEl.dom.id',o:liEl.dom.id},{n:'liEl',o:liEl}]});
                    if (liEl.next() !== null) {
                      	liElExtNxt = Ext.get(liEl.next().dom.id);
                        liEl.insertAfter(liElExtNxt);
                        Ext.getCmp(config.contentclass + '.' + config.contentid + '.contentEditor').pageOrderChanged = true;
                        PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:config.contentclass+'.'+config.contentid+'.editor'},{n:'msg',o:'change'}]}); 
                    }
                }, 
                qtip:VIEWPORT_PROPERTIES.DOWN
            }],
            //
            // page-panel :: reload content action
            //
            reloadContentAction: new Ext.Action({
	        	text: 'reloads the content.div',
	        	handler: function() {
	        		contentEl = Ext.get('Page.' + config.contentid + '.' + config.pageid + '.content');
	        		contentEl.getUpdater().update({
	        			url: config.loadURL,
	        			method: 'POST',
	        			callback: LPCB,
	        			params: { id: config.pageid },
                        text: 'loading...',
                        discardUrl: true,
                        nocache: true,
                        timeout: 30
	        		});
	        	}
	        })
        });
		
		// disable panel on expand
		pagePanel.on('expand',function(p){
            pgElem = p.getEl().last().child('.x-panel-body');
            if (true !== pgElem.pulseMask) {
            	Ext.DomHelper.append(pgElem.dom, {cls:"pulseTransparentMask"}, true);
            	pgElem.pulseMask = true;
            }
        });

	}
	
}; // END :: CMSPageEditor


/**
 * 
 */
DBG.StoreContentEditor = DBG.apply(DBG.ContentEditor,{
		
//		initComponent:  { StoreContentEditor: false },
		initFieldMonitoring: { StoreContentEditor: false },
		addSubEditor: { StoreContentEditor: false },
		
		initTab: false,
		
		editDescription: { click: false },		
		initDescriptionPanel: false,
		loadDescripton: false,
		
		createImage: {
			click: false,
			call: false,
			success: false
		},
		
		showCreateImageEditor: false,
		createNewImageGroupPanel: false,
		initImageGroupPanel: false,
		
		setAsMainImage: false,
		setMainImageGroupEditor: false,
		setMainImageGroupPanel: false,
		setMainImageGroupPanelUI: false,
		
		loadVariantsEanContainer: false,
		createVariant: {
			click: false,
			call: false
		},
		createVariantAJAX: false,
		createNewVariantPanel: false,
		initVariantPanel: false,
		
		createOrderCode: {
			click: false,
			call: false,
			success: false 
		},
		
		MSG: false // checked also in PULSE_VIEWPORT_CONTROLLER

	});

/**
 * 
 */
StoreContentEditor = {
	
	type: 'StoreContentEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.StoreContentEditor*/,
	
	// defaults
	
	// copy-content-button
	getCreateCopyButtonConfig: function() { 
		return {
		text: VIEWPORT_PROPERTIES.COPYCONTENT,
		disabled: true,
		scope: this,
		handler: function() {

			this.selectCopyCallback = function(node) {
				Ext.Ajax.request({
					url: this.copyContentURL,
					scope: this,
					method: 'POST',
					success: function(response, options) {
						decodedResponse = Ext.decode(response.responseText);
						if (true === decodedResponse.status) {
							// reloads ContentLocalizationMap
							panel = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentLocalizationMap.panel');
		            		panel.lastLoadConfig.callback = LPCB;
		            		panel.lastLoadConfig.timeout = 30;
		            		panel.load(panel.lastLoadConfig);
		            		// shows copy in contentregistrytree
		            		crPanel = Ext.getCmp('ContentRegistry.WEST');
		            		crPanel.expand();
		            		path = decodedResponse.expandPath;
		            		ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), path, function(node) {
		            			ContentRegistryEditor.editNode(node);
		            		});
	            		} else {
							PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'tbar.copy');
						}
						delete this.selectCopyCallback;
					},
					failure: function(response, options) {
						if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this,'tbar.copy');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'tbar.copy');
				        }
				        delete this.selectCopyCallback;
					},
					params: { id: this.getContent().id, toid: node.attributes.id }
				});
				
			};

			windowCfg = {
    			getChildrenURL: this.browseContentRegistryURL + '?mode=folder&bundle=' + this.getContent().bundle,
    			emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_FOLDER,
    			scope: this,
    			selectCallback: 'selectCopyCallback'
    		};
    		ContentRegistryEditor.getSelectWindow(windowCfg);
		},
		iconCls: 'copyIconCls'
	};
	},
	
	// save-content-button
	getSaveContentButtonConfig: function() { 
		return {
		text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
		disabled: true,
		scope: this,
		handler: function() {
			
			if (false === this.hasChanges()) {
				this.reset();
				return;
			}
			
			saveValues = this.getChanges({id:this.getContent().id});
			
			if (typeof(saveValues) == 'undefined' || saveValues === null) {
				if (this.DBG) {
					THROW({
						e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
						args:[this.hasChanges(),saveValues]
					},this,'saveContentButton');
				}
				return;
			}
			
			this.tab.disable();
			
			// un-comment when needed
			// saveValues.imageGroups = StoreContentEditor.getImageGroupOrder(config.content.id);
			
			Ext.Ajax.request({
				url: this.saveContentURL,
				method: 'POST',
				scope: this,
				success: function(response, options) {
					this.tab.enable();
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {								
						this.commit();
						(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
					} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
					}
				},
				failure: function(response, options) {
					this.tab.enable();
					if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
			        }
				},
				params: saveValues
			});
		},
		iconCls: 'saveIconCls'
	};
	},
	
	// new-image-button
	getCreateImageButtonConfig: function() {
	return {
		text: VIEWPORT_PROPERTIES.NEWIMAGE,
		disabled: true,
		scope: this,
		handler: function() {
			// DBG >>
			if (this.DBG) {
				THROW({args:arguments},this,'createImage.click');            
			}
            this.createImage();
		},
		iconCls: 'addImageIconCls'
	};
	},
	
	// find-content-in-content-registry-button
	getFindButtonConfig: function() {
		return {
		text:  VIEWPORT_PROPERTIES.BUTTON_TEXT_FIND,
		disabled: true,
		scope: this,
		handler: function() {					
			Ext.Ajax.request({
				url: this.contentExpandPathURL,
				method: 'POST',
				success: function(response, options) {
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {
						// show content in contentregistrytree
	            		crPanel = Ext.getCmp('ContentRegistry.WEST');
	            		if (typeof(crPanel) == 'undefined' || crPanel === null) {
	            			PULSE_TOOLBAR.openPanel({
	            				id: 'ContentRegistry.WEST',
	            				callback: function() {
		            				ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
		            			}
	            			});
	            			return;
	            		}
	            		crPanel.expand();
						ContentRegistryEditor.expandByIds(ContentRegistryTree.getRootNode(), decodedResponse.ids);
	        		} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.find');
					}
				},
				failure: function(response, options) {
					if (typeof(response.responseText) == 'undefined') {
	   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.find');
				        } else {
				        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.find');
				        }
				},
				params: { id: this.getContent().id }
			});
		},
		iconCls: 'findIconCls'
	};
	},
	
	// description-button-config for description-panel
	getEditDescriptionButtonConfig: function() {
		return {
	        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT,
	        disabled: true,
	        scope: this,
	        handler: function() {
	            fckWinCfg = {
	                loadURL: this.initDescriptionEditorURL,
	                loadParams: { id: this.getContent().id },
	                saveURL: this.saveDescriptionURL,
	                saveParams: { id: this.getContent().id },
	                scope: this,
	        		onSaveSuccess: 'loadDescription'
	            };
	            
	            // DBG >>
	            if (this.DBG) {
		        	THROW({
		        		propsObj: fckWinCfg, 
		        		props:[
		        			'loadURL','loadParams',
		        			'saveURL','saveParams',
		        			'scope','onSaveSuccess']
	    			},this,'editDescription.click');
	            }
	            
	            AbstractBasicContentEditor.getFCKEditorWindow(fckWinCfg);                               
	        },
	        iconCls: 'editIconCls'
	    };
    
    },
    getReloadDescriptionButtonConfig: function() {
    	return {
	        text: VIEWPORT_PROPERTIES.BUTTON_TEXT_RELOAD,
	        disabled: true,
	        scope: this,
	        handler: function() {
	            this.loadDescription();
	        },
	        iconCls: 'reloadIconCls'
	    };
    },
    
    // ceates new Variant
    getCreateVariantButtonConfig: function() {
    	return {
	    	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATEVARIANT,
	        disabled: true,
	        scope: this,
	        handler: function() {
	        	// DBG >>
	        	if (this.DBG) {
	            	THROW({args:arguments},this,'createVariant.click');            
	        	}
	            this.createVariant();
	        },
	        iconCls: 'addIconCls'
	    };
    },
    
    // creates order-code
    getCreateOrderCodeButtonConfig: function() {
    	return {
    	text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATEORDERCODE,
        disabled: true,
        scope: this,
        handler: function() {
            // DBG >>
        	if (this.DBG) {
            	THROW({args:arguments},this,'createOrderCode.click');
        	}
            this.createOrderCode();
        },
        iconCls: 'addIconCls'
    };
    },
    
    /**
     * 
     */
    createVariant: function() {
    	
    	// DBG >>
		if (this.DBG) {
            THROW({args:arguments},this,'createVariant.call');
		}
		
    	if (typeof(this.getSubEditor(this.id + '.orderCodeEditor')) != 'undefined') {
    			
			Ext.Msg.confirm(
				VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
				VIEWPORT_PROPERTIES.TEXT_WARN_REMOVE_ORDERCODE + '<br />' +
				VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
	        	function(response) {
	        		
					if ('yes' === response) {
						// show create-form-window    			    	
				    	this.showCreateFormWindow({
				    		fields: [{
				    			fieldLabel: VIEWPORT_PROPERTIES.NAME,
				    			name: 'name',
				    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME
				    		},{
				    			fieldLabel: VIEWPORT_PROPERTIES.ORDERCODE,
				    			name: 'orderCode',
				    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_ORDERCODE
				    		}],
				    		handler: 'createVariantAJAX'
				    	});
					}
					
				},
			this);
    		return;		
    		
    	}
		
		// show create-form-window    			    	
    	this.showCreateFormWindow({
    		fields: [{
    			fieldLabel: VIEWPORT_PROPERTIES.NAME,
    			name: 'name',
    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME
    		},{
    			fieldLabel: VIEWPORT_PROPERTIES.ORDERCODE,
    			name: 'orderCode',
    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_ORDERCODE
    		}],
    		handler: 'createVariantAJAX'
    	});
    		
    },
    
    /**
     * 
     */
    createImage: function() {
    	
    	// DBG >>
    	if (this.DBG) {
    		THROW({args:arguments},this,'createImage.call');
    	}
		
		// show create-form-window    			    	
    	this.showCreateFormWindow({
    		fields: [{
    			fieldLabel: VIEWPORT_PROPERTIES.NAME,
    			name: 'name',
    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME
    		}],
    		handler: 'showCreateImageEditor'
    	});
    		
    },
    
    /**
     * 
     */
    showCreateImageEditor: function(_this, createFormWindowConfig) {
    	params = this.getCreateFormParams({ id: this.getContent().id });
    	
    	// DBG >>
    	if (this.DBG) {
	    	THROW({
	    		args:arguments,
	    		propsObj: params,
	    		props:['id','name']
			},this,'showCreateImageEditor');
    	}
    	
    	StoreContentImageGroupCreator.create(this,params.name);
    	
    	this.closeCreateFormWindow();
    },
    
    /**
     * 
     */
    createVariantAJAX: function(_this, createFormWindowConfig) {
    	
    	// DBG >>
    	if (this.DBG) {
	    	THROW({
	    		args:arguments,
	    		props:['orderCodeMonitor','orderCodeMonitor.id','orderCodeMonitor.type','createVariantURL']
			},this,'createVariantAJAX');
    	}
    	
		params = this.getCreateFormParams({ id: this.getContent().id });
		
		Ext.Ajax.request({
			url: this.createVariantURL,
			scope: this,
			method: 'POST',
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					
					// DBG >>
					if (this.DBG) {
			    		THROW({propsObj:decodedResponse,props:['id','clazz']},this,'createVariantAJAX');						
					}
					
					if (typeof(this.getSubEditor(this.id + '.orderCodeEditor')) != 'undefined') {
						this.getSubEditor(this.id + '.orderCodeEditor').reset();
						this.removeSubEditor(this.id + '.orderCodeEditor',true);
						if (this.createOrderCodeButton instanceof Ext.Toolbar.Button) {
							this.createOrderCodeButton.enable();
						}
						this.loadVariantsEanContainer();
					} else {								    	
				    	this.createNewVariantPanel({
				    		id: decodedResponse.id,
				    		clazz: decodedResponse.clazz,
				    		name: options.params.name
				    	});			    	
					}
					
					this.closeCreateFormWindow();
			    		
        		} else {
					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'tbar.createVariant');
				}
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({e:'REQUEST.FAILED'},this,'tbar.createVariant');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'tbar.createVariant');
		        }
			},
			params: params
		});
    	
    },
    
    /**
     * 
     */
    loadVariantsEanContainer: function() {
    	
    	// DBG >>
    	if (this.DBG) {
    		THROW({props:['loadVariantOrOrderCodeURL']},this,'loadVariantsEanContainer');
    	}
    	
    	Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.variantsOrderCodeContainer').load({
    		url: this.loadVariantOrOrderCodeURL,
            method: 'POST',
            callback: LPCB,
            params: { id: this.getContent().id },
            text: 'loading...',
            scripts: true,
            discardUrl: true,
            nocache: true,
            timeout: 30
    	});
    },
    
    /**
     * 
     */
    createOrderCode: function() {
    	
    	// DBG >>
    	if (this.DBG) {
    		THROW({args:arguments,props:['removeAllVariantsURL']},this,'createOrderCode.call');
    	}
    	
    	Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
			VIEWPORT_PROPERTIES.TEXT_WARN_REMOVE_VARIANTS + '<br />' +
			VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
        	function(response) {
        		
				if ('yes' === response) {
					// removeVariants
			    	params = { id: this.getContent().id };
		
					Ext.Ajax.request({
						url: this.removeAllVariantsURL,
						scope: this,
						method: 'POST',
						success: function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								
								// DBG >>
								if (this.DBG) {
						    		THROW({propsObj:decodedResponse,props:['status']},this,'createOrderCode.success');						
								}
								
								// disable create-ordercode-button
								this.createOrderCodeButton.disable();
								
								// reload variants-ean-container
								this.loadVariantsEanContainer();	
													    		
			        		} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'createOrderCode');
							}
						},
						failure: function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({e:'REQUEST.FAILED'},this,'createOrderCode');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'createOrderCode');
					        }
						},
						params: params
					});
				}
				
			},
		this);
    	
    },
	
//	/**
//	 * 
//	 */
//	onRender: function() {
//		// DBG >>
//		THROW({props:['renderTo'],args:arguments},this,'onRender');
//		
//		try {
//		
//			THROW({e:'TODO',args:arguments},this,'onRender');
//		
//		
//		} catch(e) {
//			FATAL(e, this, 'onRender');
//		}
//	},
	
	/**
	 * 
	 */
	initTab: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
			
				buttons = [];
				
				// enables save-content-button if URL
				saveContentButtonConfig = this.getSaveContentButtonConfig();
				if (typeof(this.saveContentURL) == 'string' && this.saveContentURL !== '') {
					saveContentButtonConfig.disabled = false;
					saveContentButtonConfig.scope = this;
				}
				buttons.push(saveContentButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());	
				
				// enables copy-content-button if URL
				createCopyButtonConfig = this.getCreateCopyButtonConfig();
				if (typeof(this.copyContentURL) == 'string' && this.copyContentURL !== '') {
					createCopyButtonConfig.disabled = false;
					createCopyButtonConfig.scope = this;
				}	
				buttons.push(createCopyButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());	
				
				// enables find-button if URL
				findButtonConfig = this.getFindButtonConfig();
				if (typeof(this.contentExpandPathURL) == 'string' && this.contentExpandPathURL !== '') {
					findButtonConfig.disabled = false;
					findButtonConfig.scope = this;
				}
				buttons.push(findButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());
				
				// enables new-image-button if URL
				createImageButtonConfig = this.getCreateImageButtonConfig();
				if (typeof(this.saveNewImageGroupURL) == 'string' && this.saveNewImageGroupURL !== '') {
					createImageButtonConfig.disabled = false;
					createImageButtonConfig.scope = this;
				}
				buttons.push(createImageButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());	
				
				// enables create-variant-button if URL
				createVariantButtonConfig = this.getCreateVariantButtonConfig();
				createVariantButtonConfig.disabled = false;
				createVariantButtonConfig.scope = this;
				buttons.push(createVariantButtonConfig);
				buttons.push(new Ext.Toolbar.Separator());	
				
				// enables create-OrderCode-button if URL
				createOrderCodeButtonConfig = this.getCreateOrderCodeButtonConfig();
				if (typeof(this.removeAllVariantsURL) == 'string' && this.removeAllVariantsURL !== '' && 
					typeof(this.getSubEditor(this.id + '.orderCodeEditor')) == 'undefined') {						
						createOrderCodeButtonConfig.disabled = false;					
				}
				createOrderCodeButtonConfig.scope = this;
				this.createOrderCodeButton = new Ext.Toolbar.Button(createOrderCodeButtonConfig);
				buttons.push(this.createOrderCodeButton);
				buttons.push(new Ext.Toolbar.Separator());	
					
				
				// insert buttons
				this.tab.getTopToolbar().insertButton(0, buttons);
				
//				this.tab.setEditor(this);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
		
	},
	
	/**
	 * loads the description-panel
	 */
	loadDescription: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['loadDescriptionURL','content.id']},this,'loadDescripton');
		}
		
		try {
			
	        loadCfg = {
	            url: this.loadDescriptionURL,
	            method: 'POST',
	            callback: LPCB_DISABLE,
	            params: { id: this.getContent().id },
	            text: 'loading...',
	            discardUrl: true,
	            nocache: true,
	            timeout: 30
	        };
	        this.descriptionPanel.load(loadCfg);
	        
		} catch(e) {
			FATAL(e, this, 'loadDescripton');
		}
	},
	
	/**
	 * 
	 */
	addSubEditor: function(editor) {
		
		
		// call super
		addSuccess = Pulse.StoreContentEditor.superclass.addSubEditor.call(this,editor);
		
		
		// DBG >>
		if (this.DBG) {
			THROW({
				o:'ADD: ' + addSuccess,
				props:['id','subEditors.length','subEditors'],
				p:[{n:'editor.id',o:editor.id},{n:'editor.type',o:editor.type}]
			},this,'addSubEditor.StoreContentEditor');	
		}
		
		if (true !== addSuccess) {
			
			// DBG >>
			if (this.DBG) {
				FATAL(editor,this,'addSubEditor.StoreContentEditor','ADD: ' + addSuccess);
			}
			
			return;
		}
		
		if (editor.type === 'SubEditorPanel' && true === editor.isMainImagePanel) {							
			this.setMainImageGroupPanel(editor);
			this.setMainImageGroupEditor(editor.getSubEditors()[i]);
		}
		
	},
	
	/**
	 * 
	 */
	editorMSG: function(msgString, editor, masterEditor) {
				
		msg = msgString.toUpperCase();
		if (msg == 'DELETESUCCESS') {
			if (editor.type == 'StoreVariantEditor') {
				if (true === editor.wasLastVariant) {
					this.removeSubEditor(editor.masterEditor,true);
					this.loadVariantsEanContainer();
				} else {
					this.removeSubEditor(editor.masterEditor,true);
				}
			}
		}
		
		// call super
		Pulse.StoreContentEditor.superclass.editorMSG.call(this, msgString, editor, masterEditor);

	},
	
	/**
	 * 
	 */
	setMainImageGroupPanel: function(subEditorPanel) {
		
		// DBG >>
		if (this.DBG) {
			THROW({propsObj:subEditorPanel,props:['id','type']},this,'setMainImageGroupPanel');
		}
		
		this.mainImageGroupPanel = subEditorPanel;
	},
	
	/**
	 * 
	 */
	setMainImageGroupEditor: function(imageGroupEditor) {
		
		// DBG >>
		if (this.DBG) {
			THROW({propsObj:imageGroupEditor,props:['id','type']},this,'setMainImageGroupEditor');
		}
		
		this.mainImageGroupEditor = imageGroupEditor;
	},
	
	/**
	 * 
	 */
	setMainImageGroupPanelUI: function(subEditorPanel) {
		
		// DBG >>
		if (this.DBG) {
			THROW({propsObj:subEditorPanel,props:['id','type']},this,'setMainImageGroupPanelUI');
		}
		
		// process former main-image-editor-panel
		if (typeof(this.mainImageGroupPanel) != 'undefined' && this.mainImageGroupPanel !== null) {
			Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.alternativeImagesContainer').appendChild(this.mainImageGroupPanel.getEl());
		}
		
		Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.mainImageContainer').appendChild(subEditorPanel.getEl());
		this.setMainImageGroupPanel(subEditorPanel);
	},
	
	/**
	 * @param {Object} imageGroupEditor, Pulse.ImageGroupEditor
	 */
	setAsMainImage: function(imageGroupEditor) {
		
		// DBG >>
		if (this.DBG) {
			THROW({propsObj:imageGroupEditor,props:['id','type']},this,'setAsMainImage');
		}
		this.setMainImageGroupEditor(imageGroupEditor);					
		this.setMainImageGroupPanelUI(imageGroupEditor.masterEditor);
	},
	
	/**
	 * @param {Object} imageGroupEditor, Pulse.ImageGroupEditor
	 */
	setAsMainImageAJAX: function(imageGroupEditor) {
		
		// DBG >>
		if (this.DBG) {
			THROW({propsObj:imageGroupEditor,props:['id','type','imageGroup','imageGroup.id','imageGroup.main']},this,'setAsMainImage');
		}
		
		if (typeof(this.setMainImageGroupURL) != 'string' || this.setMainImageGroupURL === '') {
			
			// DBG >>
			if (this.DBG) {
				FATAL('UNDEFINED setMainImageGroupURL',this,'setAsMainImage');
			}
			
			return;
		}
		
		Ext.Ajax.request({
        	url: this.setMainImageGroupURL,
        	scope: this,
        	method: 'POST',
        	success: function(response, options) {
        		decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					
					this.setAsMainImage(options.imageGroupEditor);
					                    
					this.fireEvent('MSG','savesuccess',this);
				
				} else {
					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'setAsMainImage');
				}
        	},
        	failure: function(response, options) {
        		if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({e:'REQUEST.FAILED'},this,'setAsMainImage');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'setAsMainImage');
		        }
        	},
        	imageGroupEditor: imageGroupEditor,
        	params: { imagegroupid: imageGroupEditor.imageGroup.id, contentid: this.getContent().id }
        });
		
	},
	
	/**
	 * @param {Object} el, the element
	 */
	initOrderCodeMonitor: function(el) {
		
		try {
			
			// retrieve required fields
			this.orderCodeEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.orderCode');
			
			if (typeof(this.orderCodeEl) == 'undefined' 
				&& this.orderCodeEl === null) {
				
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initOrderCodeMonitor');
				}
				
				return;
			}
			
			// builds monitor
			this.orderCodeMonitorCFG = {
				id: this.id + '.orderCodeEditor',
				el: this.orderCodeEl,
				// OrderCode-Code-validation
				invalidText: '' + VIEWPORT_PROPERTIES.TEXT_NOT_EANCODE,
            	regex: /(\b([0-9]{8})\b)|(\b([0-9]{13})\b)/,
            	handler: function(v) {
            		return (v.trim().length === 8 || v.trim().length === 13);
            		if (v.trim().length === 8 || v.trim().length === 13) {
            			return true;
            		}
            		return false;
            	},
            	allowSave: true
			};
			
			this.orderCodeMonitor = new Pulse.FieldMonitor(this.orderCodeMonitorCFG);			

			// initial validation
			this.orderCodeMonitor.validate();
			
			this.addSubEditor(this.orderCodeMonitor);
			
		} catch(e) {			
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'initOrderCodeMonitor');
			}				
		}
	},
    
    /**
     * 
     */
    createNewImageGroupPanel: function(imageGroup) {
    	
    	// DBG >>
    	if (this.DBG) {
	    	THROW({
	    		args:arguments,
	    		propsObj: imageGroup,
	    		props:['id','clazz','name','main']
			},this,'createNewImageGroupPanel');
    	}
    	
    	try {
		
			el = Ext.get('imageGroup.' + this.getContent().id + '.' + imageGroup.id);
			
			if (typeof(el) === 'undefined' || el === null) {
		        
		        if (true === imageGroup.main) {
		        	if (typeof(mainImageGroupPanel) != 'undefined') {
		        		throw('INCONSISTENT DATA: a main-image already exists in ui -> reload content?');
		        	}
		        	containerEl = Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.mainImageContainer');
		        } else {
		        	containerEl = Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.alternativeImagesContainer');
		        }
		        
				containerEl.createChild({
			        tag: 'div',
			        id: 'imageGroup.' + this.getContent().id + '.' + imageGroup.id
			    }/*,containerEl.first()*/);
	        
	        }
        
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'createNewImageGroupPanel');
			}
		}
		
		this.initImageGroupPanel(imageGroup);
    },
	
	/**
	 * @param {Object} imageGroup
	 */
	initImageGroupPanel: function(imageGroup) {
		
		// DBG >>
		if (this.DBG) {
			THROW({
				args:arguments,
				propsObj:imageGroup,
				props:['id','clazz','name']
			},this,'initImageGroupPanel');
		}
		
		try {
			
			if (typeof(this.loadImageGroupURL) != 'string' || this.loadImageGroupURL === '') {
				if (this.DBG) {
					THROW({e:'URL UNDEFINED',props:['loadImageGroupURL']},this,'initImageGroupPanel');
				}
				return;
			}
			
			var params = { contentid: this.getContent().id, imagegroupid: imageGroup.id };
			var subEditorPanel = new Pulse.SubEditorPanel({
				isMainImagePanel: imageGroup.main,
				content: this.getContent(),
                title: imageGroup.name + ' (id: ' + imageGroup.id +')',
                id: imageGroup.clazz + '.' + imageGroup.id + '.editor',
                url: this.loadImageGroupURL,
                params: params,
                renderTo: 'imageGroup.' + this.getContent().id + '.' + imageGroup.id,
                bodyStyle: 'background-color:#EDF5FF;padding:5px;padding-bottom:15px;',
                style: 'margin-bottom:5px;',
                iconCls: 'imageGroupIconCls'
            });
			
			subEditorPanel.on('expand',function(){
				
				// DBG >>
				if (this.DBG) {
					THROW({props:['id','url','initializePanel','loadPanel']},this,'expand');
				}
				
				this.initializePanel();
			});
			
			this.addSubEditor(subEditorPanel);
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'initImageGroupPanel');
			}
		}
		
	},
	
	/**
	 * @param {Object} variant
	 */
	createNewVariantPanel: function(variant) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,propsObj:variant,props:['id','clazz','name']},this,'createNewVariantPanel');
		}
		
		try {
		
			el = Ext.get(variant.clazz + '.' + variant.id);
			
			if (typeof(el) === 'undefined' || el === null) {
		        
		        variantsEl = Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.variants');
		                
				variantsEl.createChild({
			        tag: 'div', 
			        id: variant.clazz + '.' + variant.id
			    },variantsEl.first());
	        
	        }
        
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'createNewVariantPanel');
			}
		}
		
		this.initVariantPanel(variant);
	},
	
	/**
	 * @param {Object} variant
	 */
	initVariantPanel: function(variant) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,propsObj:variant,props:['id','clazz','name']},this,'initVariantPanel');
		}
		
		try {
			
			if (typeof(this.editVariantURL) != 'string' || this.editVariantURL === '') {
				// DBG >>
				if (this.DBG) {
					throw('URL UNDEFINED this.editVariantURL: ' + this.editVariantURL);
				}
				return;
			}
			
			var params = { id: variant.id };
			var subEditorPanel = new Pulse.SubEditorPanel({
				iconCls: 'variantIconCls',
				content: variant,
				title: variant.name,
				id: variant.clazz + '.' + variant.id + '.editor',
				masterEditor: this,
				url: this.editVariantURL,
				params: params,
				renderTo: variant.clazz + '.' + variant.id,
				bodyStyle: 'background-color:#EDF5FF;padding:5px;padding-bottom:15px;',
				style: 'margin-bottom:15px;'
			});
			
			subEditorPanel.on('expand',function(){
				
				// DBG >>
				if (this.DBG) {
					THROW({props:['id','url','initializePanel','loadPanel']},this,'expand');
				}
				
				this.initializePanel();
			});
			
			this.addSubEditor(subEditorPanel);
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'initVariantPanel');
			}
		}
		
	},
	
	/**
	 * 
	 */
	initDescriptionPanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['initDescriptionEditorURL','saveDescriptionURL']},this,'initDescriptionPanel');
		}
		
		try {
			
			buttons = [];
			
			// enable edit-desceiption-button if URL
			editDescriptionButtonConfig = this.getEditDescriptionButtonConfig();
	        if (typeof(this.initDescriptionEditorURL) == 'string' && this.initDescriptionEditorURL !== '' 
	        	&& typeof(this.saveDescriptionURL) == 'string' && this.saveDescriptionURL !== '') {
	        	editDescriptionButtonConfig.disabled = false;
	        	editDescriptionButtonConfig.scope = this;
	        }
	        
	        reloadDescriptionButtonConfig = this.getReloadDescriptionButtonConfig();
	        if (typeof(this.loadDescriptionURL) == 'string' && this.loadDescriptionURL !== '') {
	        	reloadDescriptionButtonConfig.disabled = false;
	        	reloadDescriptionButtonConfig.scope = this;
	        }
			
			// builds description panel
			tbar = [editDescriptionButtonConfig,'-','->','-',reloadDescriptionButtonConfig];
			panelCfg = {
	            id: this.getContent().clazz + '.' + this.getContent().id + '.description.panel',
	            title: VIEWPORT_PROPERTIES.DESCRIPTION + ':',
	            collapsible:true, collapsed:true,
	            renderTo: this.getContent().clazz + '.' + this.getContent().id + '.description',
	            html: '...',
	            bodyStyle: 'padding:5px;',
	            tbar: tbar
	        };
	        this.descriptionPanel = new Ext.Panel(panelCfg);
	        
	        // disable summary-panels' content on expand
	        this.descriptionPanel.on('expand',function(p){	        	
	        	if (true !== this.descriptionPanel.initialExpand) {	        		
		            this.loadDescription();
		            this.descriptionPanel.initialExpand = true;
	            }
	        },this);
	        	
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initDescriptionPanel');
			}
		}		
		
	},
	
	/**
	 * 
	 */
	initFieldMonitoring: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['orderCodeEl']},this,'initFieldMonitoring');
		}
		
		try {
					
			// inititialize field-monitoring for abstract-basic-content-editor-part
			Pulse.StoreContentEditor.superclass.initFieldMonitoring.call(this);

			// order-code
			el = Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.orderCode');
			if (typeof(el) != 'undefined' && el !== null) {
				// builds oder-code-monitor
				this.initOrderCodeMonitor(el);
			}
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e, this, 'initFieldMonitoring');
			}
		}
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function(boolInitTab) {
		
			
		// call super
		Pulse.StoreContentEditor.superclass.initComponent.call(this);
			
//		// DBG >>
//		if (this.DBG) {	
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.StoreContentEditor');
//		}
	
		try {
		
			// call inits
			this.initDescriptionPanel(); // builds descritpion-editor
			this.initFieldMonitoring(); // monitor order-code
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}
		
		} catch(e) {
			FATAL(e, this, 'initComponent.StoreContentEditor');
		}
				
	}
	
};

Pulse.StoreContentEditor = Ext.extend(Pulse.ContentEditor,StoreContentEditor); // END :: Pulse.StoreContentEditor


/**
 * 
 */
DBG.StoreContentImageGroupCreator = {
	create : {
		call : false,
		success : false
	}
};
/**
 * 
 */
StoreContentImageGroupCreator = {

	type : 'StoreContentImageGroupCreator',

	/**
	 * uncomment below for global DBG
	 */
	DBG : false/* DBG.StoreContentImageGroupCreator */,

	/**
	 * store for new imagegroup during creation
	 */
	newImageGroup : {

		type : 'StoreContentImageGroupCreator.newImageGroup',

		DBG : true,

		/**
		 * set this in admin-viewport.JS-editor-configurations.xsl globally
		 */
		versions : null,

		/**
		 * set this in admin-viewport.JS-editor-configurations.xsl globally
		 */
		optionalVersions : null,

		clear : function() {
			if (this.versions !== null) {
				for (i = 0; i < this.versions.length; i++) {
					this[this.versions[i]] = null;
				}
			}
			if (this.optionalVersions === null) {
				return;
			}
			for (i = 0; i < this.optionalVersions.length; i++) {
				this[this.optionalVersions[i]] = null;
			}
		},

		isValid : function() {
			for (i = 0; i < this.versions.length; i++) {
				if (typeof(this[this.versions[i]]) == 'undefined'
						|| this[this.versions[i]] === null
						|| this[this.versions[i]] === '') {
					return false;
				}
			}
			return true;
		},

		applyImages : function(object) {
			if (typeof(object) != 'object' || object === null) {
				FATAL({
							args : arguments
						}, this, 'applyImages', 'objectUNDEFINED');
				return object;
			}
			if (!this.isValid()) {
				FATAL({
							args : arguments
						}, this, 'applyImages', 'imageGroupIsINVALID');
				return object;
			}
			for (i = 0; i < this.versions.length; i++) {
				object[this.versions[i]] = this[this.versions[i]];
			}
			if (this.optionalVersions === null) {
				return object;
			}
			for (i = 0; i < this.optionalVersions.length; i++) {
				if (!this.hasVersion(this.optionalVersions[i])) {
					continue;
				}
				object[this.optionalVersions[i]] = this[this.optionalVersions[i]];
			}
			return object;
		},

		hasVersion : function(versionName) {
			return (typeof(this[versionName]) != 'undefined'
					&& this[versionName] !== null && this[versionName] !== '');
		}
		// ,
		//
		// debug : function() {
		// dbg = 'new image group: \n';
		// dbg += '[' + this.versions.length + '] req: ' + this.versions
		// + '\n';
		// dbg += '[' + this.optionalVersions.length + '] opt: '
		// + this.optionalVersions;
		// if (this.versions != null) {
		// dbg += '\n\n';
		// for (i = 0; i < this.versions.length; i++) {
		// dbg += this[this.versions[i]] + '\n';
		// }
		// }
		// if (this.optionalVersions != null) {
		// dbg += '\n\n';
		// for (i = 0; i < this.optionalVersions.length; i++) {
		// dbg += this[this.optionalVersions[i]] + '\n';
		// }
		// }
		// dbg += '\n\nvalid: ' + this.isValid();
		// alert(dbg);
		// }

	},

	/**
	 * @param {Object}
	 *            config
	 */
	create : function(editor, newName) {

		// if (this.newImageGroup.versions === null &&
		// this.newImageGroup.optionalVersions === null) {
		// FATAL(this.newImageGroup,this,'create','newImageGroup.versions.NULL');
		// return;
		// }

		this.newImageGroup.clear();

		this.editor = editor;

		// this.newImageGroup.debug();

		// DBG >>
		if (this.DBG) {
			THROW({
						args : arguments,
						propsObj : editor,
						props : ['id', 'type', 'saveNewImageGroupURL',
								'createNewImageGroupURL']
					}, this, 'create.call');
		}

		try {

			pel = VIEWPORT.getEl();

			if (typeof(pel) == 'undefined') {
				throw ('ELEMENT CHECK FAILED');
			}

			if (this.el === null) {

				this.el = pel.createChild({
							tag : 'div',
							id : 'StoreContentImageGroupCreator.el'
						});

			}

			this.contentPanel = new Ext.Panel({
						id : 'StoreContentImageGroupCreator.contentPanel',
						region : 'center',
						html : 'content goes here',
						border : false,
						autoScroll : true
					});

			createButtonConfig = {
				text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
				disabled : true,
				scope : this,
				handler : function() {

					// check
					if (false === this.newImageGroup.isValid()) {
						return;
					}

					params = this.newImageGroup.applyImages({
								contentid : this.editor.getContent().id,
								name : newName
							});

					Ext.Ajax.request({
						url : this.editor.saveNewImageGroupURL,
						scope : this,
						method : 'POST',
						success : function(response, options) {
							decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {

								// DBG >>
								if (this.DBG) {
									THROW({
												propsObj : decodedResponse.imageGroup,
												props : ['id', 'clazz', 'name',
														'main']
											}, this, 'create.success');
								}

								this.editor
										.createNewImageGroupPanel(decodedResponse.imageGroup);

								this.win.close();

							} else {
								PulseError.Throw({
											e : 'SERVER.ERROR',
											o : decodedResponse.error
										}, this, 'create');
							}
						},
						failure : function(response, options) {
							if (typeof(response.responseText) == 'undefined') {
								PulseError.Throw({
											e : 'REQUEST.FAILED'
										}, this, 'create');
							} else {
								PulseError.Throw({
											e : 'REQUEST.ERROR',
											o : {
												e : response.responseText
											}
										}, this, 'create');
							}
						},
						params : params
					});

				},
				iconCls : 'addIconCls'
			};

			this.createButton = new Ext.Button(createButtonConfig);

			this.closeButtonConfig = {
				text : VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
				scope : this,
				handler : function() {
					this.win.close();
				},
				iconCls : 'deleteIconCls'
			};

			this.win = new Ext.Window({
						id : 'StoreContentImageGroupCreator.Win',
						title : VIEWPORT_PROPERTIES.IMAGE,
						iconCls : 'imageGroupIconCls',
						renderTo : this.el,
						maximizable : false,
						closable : true,
						modal : true,
						plain : true,
						autoScroll : true,
						height : 130,
						width : 600,
						layout : 'border',
						items : [this.contentPanel],
						// tbar: [
						// createButtonConfig,'-',this.closeButtonConfig,'-']
						buttonAlign : 'center',
						buttons : [this.createButton, this.closeButtonConfig]
					});

			// setup listeners
			//    
			this.win.on('beforeclose', function() {
						if (true === this.win.isDirty) {
							// confirm reload
							Ext.Msg
									.confirm(
											VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
											VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES
													+ '<br />'
													+ VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE,
											function(response) {
												if ('yes' === response) {
													this.win.isDirty = false;
													this.win.close();
												}
											}, this);
							return false;
						}
					}, this);

			this.win.on('close', function() {
						// clean
						delete this.editor;
						delete this.el;
						delete this.win;
						delete this.contentPanel;
						delete this.closeButtonConfig;
						delete this.createButton;
						this.newImageGroup.clear();
					}, this);

			this.win.on('show', function() {
						loadConfig = {
							url : this.editor.createNewImageGroupURL,
							scripts : true,
							callback : LPCB,
							params : {
								name : newName
							},
							text : 'loading...',
							discardUrl : true,
							nocache : true,
							timeout : 30
						};
						this.contentPanel.load(loadConfig);
					}, this);

			this.contentPanel.on('load', function() {
						this.win.doLayout(true);
					}, this);

			this.win.setSize({
						width : VIEWPORT.getSize().width * 0.8,
						height : VIEWPORT.getSize().height * 0.8
					});
			this.win.show();
			this.win.setPosition(VIEWPORT.getSize().width * 0.1, VIEWPORT
							.getSize().height
							* 0.1);

		} catch (windowInitError) {
			alert('windowInitError: \n' + windowInitError);
		}
	},

	/**
	 * @param {Object}
	 *            editInfo
	 */
	edit : function(editInfo) {

		if (this.newImageGroup.versions === null
				&& this.newImageGroup.optionalVersions === null) {
			FATAL(this.newImageGroup, this, 'edit',
					'newImageGroup.versions.NULL');
			return;
		}

		FileBrowser.open({
			restriction : 'img',
			applyCallback : function(node) {

				imgDom = Ext
						.get(editInfo.imageversion + '.newImageGroup.image').dom;
				imgDom.src = node.attributes.httpURI;

				linkDom = Ext.get(editInfo.imageversion
						+ '.newImageGroup.image.link').dom;
				linkDom.removeAttribute('onclick');
				newOnclick = document.createAttribute('onclick');
				newOnclick.nodeValue = 'StoreContentImageGroupCreator.edit({'
						+ 'dataURL:\'' + editInfo.dataURL + '\','
						+ 'previewURL:\'' + editInfo.previewURL + '\','
						+ 'fileBrowserUploadProgressURL:\''
						+ editInfo.fileBrowserUploadProgressURL + '\','
						+ 'imageversion:\'' + editInfo.imageversion + '\','
						+ 'imageVFSid:\'' + node.attributes.fileId + '\','
						+ 'imageURI:\'' + node.attributes.httpURI + '\''
						+ '});this.blur();return;';
				linkDom.setAttributeNode(newOnclick);

				StoreContentImageGroupCreator.newImageGroup[editInfo.imageversion] = node.attributes.fileId;
				if (true === StoreContentImageGroupCreator.newImageGroup
						.isValid()) {
					StoreContentImageGroupCreator.createButton.enable();
				} else {
					StoreContentImageGroupCreator.createButton.disable();
				}
				// StoreContentImageGroupCreator.newImageGroup.debug();
				return;
			},
			id : editInfo.imageVFSid,
			uri : editInfo.imageURI,
			dataURL : editInfo.dataURL,
			previewURL : editInfo.previewURL,
			upload : true,
			uploadProgressURL : editInfo.fileBrowserUploadProgressURL,
			params : {
				imageVFSid : editInfo.imageVFSid,
				imageversion : editInfo.imageversion
			}
		});

	}
};

/**
 * 
 */
Pulse.LOC.StoreContentImageGroupEditor = {
	toMainImage: 'set this as main-image'
};
/**
 * 
 */
DBG.StoreContentImageGroupEditor = DBG.apply(DBG.ImageGroupEditor,{
	getButtons: { StoreContentImageGroupEditor: true },
	setUpMainImageListener: { MSG: false, call: false }
});
/**
 * 
 */
StoreContentImageGroupEditor = {
	
	type: 'StoreContentImageGroupEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.StoreContentImageGroupEditor*/,
	
	/**
	 * 
	 */
	getMainImageButtonConfig: function (boolDisabled) {
	
		cEditor = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentEditor');
	
		toMainImageButtonConfig = {
	        text: Pulse.LOC.StoreContentImageGroupEditor.toMainImage,
	        scope: this,
	        disabled: (true !== this.imageGroup.main 
				&& (typeof(cEditor.setMainImageGroupURL) == 'string' 
				&& cEditor.setMainImageGroupURL !== '')) ? false : true,
	        handler: function() {
	        	
	        	// DBG >>
	        	if (this.DBG) {
	        		THROW({args:arguments},this,'setAsMainImage.click');
	        	}
	        	
	        	// set main-image for content
	        	cEditor = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentEditor');
	        	cEditor.setAsMainImageAJAX(this);
	        	
	        },
	        iconCls: 'asSummaryIconCls'
	    };
	    
	    
		
		// create listener for content-editor
		this.setUpMainImageListener();
	    
	    return toMainImageButtonConfig;
    },
    
    /**
     * 
     */
    setUpMainImageListener: function() {
    	
    	// DBG >>
    	if (this.DBG) {
    		THROW({o:'Ext.getCmp("' +this.getContent().clazz + '.' + this.getContent().id + '.contentEditor"): ' + 
    			Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentEditor')},this,'setUpMainImageListener.call');
    	}
		
		this.contentEditor = Ext.getCmp(this.getContent().clazz + '.' + this.getContent().id + '.contentEditor');
			
		// suscribe to content-editor savesuccess event
		this.contentEditor.on('MSG',function(msgString, editor){
			
			// DBG >>
			if (this.DBG) {
				THROW({args:arguments},this,'setUpMainImageListener.MSG');
			}
			
			msg = msgString.toUpperCase();
			
			if (msg == 'SAVESUCCESS') {
				
				if (typeof(this.contentEditor.mainImageGroupEditor) != 'undefined') {
					
					if (this.contentEditor.mainImageGroupEditor.id == this.id) {
						
						this.imageGroup.main = true;
						if (typeof(this.toMainImageButton) != 'undefined') {
							this.toMainImageButton.disable();
						}
						
					} else {
						
						this.imageGroup.main = false;
						if (typeof(this.toMainImageButton) != 'undefined') {
							this.toMainImageButton.enable();
						}
						
					}
					
				}
				
			}
			
		},this);
		
    },
	
	/**
	 * 
	 */
	getButtons: function() {
		
		// call super
		btnArray = Pulse.StoreContentImageGroupEditor.superclass.getButtons.call(this);
		
		// DBG >>
		if (this.DBG) {	
			THROW({
				args:arguments,
				props:['renameURL','removeURL'],
				p: btnArray
			},this,'getButtons.StoreContentImageGroupEditor');
		}


		this.toMainImageButtonConfig = this.getMainImageButtonConfig();		
		this.toMainImageButton = new Ext.Toolbar.Button(this.toMainImageButtonConfig);
		
		btnArray.push(this.toMainImageButton);
		btnArray.push(new Ext.Toolbar.Separator());
				
		return btnArray;
	}
	
//	,
//	
//	/**
//	 * 
//	 */
//	initComponent: function() {
//		
//		try {
//			
//			// call super
//			Pulse.StoreContentImageGroupEditor.superclass.initComponent.call(this);		
//			
//		} catch(e) {
//			FATAL(e,this,'initComponent.StoreContentImageGroupEditor');
//		}
//		
//	}
	
};
Pulse.StoreContentImageGroupEditor = Ext.extend(Pulse.ImageGroupEditor,StoreContentImageGroupEditor);

/**
 * 
 */
DBG.StoreVariantEditor = DBG.apply(DBG.StoreContentEditor,{
//	initComponent: { StoreVariantEditor: false },
	getButtons: false,
	initNameMonitor: false,
	removeVariant: { click: false, call: false },
	
	DBGButton: false
});
/**
 * 
 */
StoreVariantEditor = {
	
	type: 'StoreVariantEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.StoreVariantEditor*/,
	
	/**
     * 
     */
    getRemoveButtonConfig: function() {
		
		return {
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
	        scope: this,
	        disabled: true,
	        handler: function() {
	        	
	        	// DBG >>
	        	if (this.DBG) {
	        		THROW({args:arguments},this,'removeVariant.click');
	        	}
	        	
	        	this.removeVariant();
	        },
	        iconCls: 'deleteIconCls'
		};
		
    },
	
	/**
	 * 
	 */
	getButtons: function() {
		
		// DBG >>
		THROW({props:['saveNewImageGroupURL']},this,'getButtons');
		
		try {
			
			buttons = [];
				
			// enables new-image-button if URL
			createImageButtonCFG = this.getCreateImageButtonConfig();
			if (typeof(this.saveNewImageGroupURL) == 'string' && this.saveNewImageGroupURL !== '') {
				createImageButtonCFG.disabled = false;
				createImageButtonCFG.scope = this;
			}
			buttons.push(new Ext.Toolbar.Button(createImageButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
			
			removeButtonCFG = this.getRemoveButtonConfig();
			if (typeof(this.removeURL) == 'string' && this.removeURL !== '') {
				removeButtonCFG.disabled = false;
				removeButtonCFG.scope = this;
			}
			buttons.push(new Ext.Toolbar.Button(removeButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
			
			// enables create-variant-button if URL
			createVariantButtonConfig = this.getCreateVariantButtonConfig();
			createVariantButtonConfig.disabled = false;
			createVariantButtonConfig.scope = this;
			buttons.push(new Ext.Toolbar.Button(createVariantButtonConfig));
			buttons.push(new Ext.Toolbar.Separator());
			
			if (this.DBG && true === this.DBG.DBGButton) {				
				DBGButtonCFG = {
					text: 'DBG',
					scope: this,
					handler: function() {
						FATAL(this,this,'DBG','DBG');
					}
				};
				buttons.push(new Ext.Toolbar.Button(DBGButtonCFG));
				buttons.push(new Ext.Toolbar.Separator());
			}
			
			return buttons;
			
		
		} catch(e) {
			FATAL(e, this, 'getButtons');
		}
		
	},
	
	/**
	 * 
	 */
	 removeVariant: function() {
	 	
	 	// DBG >>
    	if (this.DBG) {
    		THROW({args:arguments,props:['variant','variant.id','variant.clazz','variant.name']},this,'removeVariant.call');
    	}
    	
    	// confirm delete
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' 
			/*+ this.getContent().name*/ + '(id: ' + this.getContent().id + ')"',
			VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
    				params = { id: this.getContent().id };
					if (typeof(this.getContent().parentVariantId) == 'number') {
						params.variantId = this.getContent().parentVariantId;
					}
                    Ext.Ajax.request({
                    	url: (typeof(this.getContent().parentVariantId) == 'number') ? this.removeSubVariantURL : this.removeURL,
                    	scope: this,
                    	method: 'POST',
                    	success: function(response, options) {
                    		decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								
								/*
								// destroy container-editor
								this.masterEditor.destroyEditor(this,true);
								*/
								
								if (0 === decodedResponse.noOfVariantsLeft) {
									this.wasLastVariant = true;
								}
								
								this.fireEvent('MSG','deletesuccess',this);
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'removeVariant');
							}
                    	},
                    	failure: function(response, options) {
                    		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'removeVariant');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'removeVariant');
					        }
                    	},
                    	params: params
                    });

    			}
			},
		this);
    	
    },
	
	/**
	 * @param {Object} el, the element
	 */
	initOrderCodeMonitor: function(el) {
		
		try {
			
			// retrieve required fields
			this.orderCodeEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.orderCode');
			
			if (typeof(this.orderCodeEl) == 'undefined' 
				&& this.orderCodeEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initOrderCodeMonitor');
				}
				return;
			}
			
			// builds monitor
			this.orderCodeMonitorCFG = {
				valuePrefix: 'variant_' + this.getContent().id + '_',
				id: this.id + '.orderCodeEditor',
				el: this.orderCodeEl,
				// OrderCode-Code-validation
				invalidText: '' + VIEWPORT_PROPERTIES.TEXT_NOT_EANCODE,
            	regex: /(\b([0-9]{8})\b)|(\b([0-9]{13})\b)/,
            	handler: function(v) {
            		return (v.trim().length === 8 || v.trim().length === 13);
            		if (v.trim().length === 8 || v.trim().length === 13) {
            			return true;
            		}
            		return false;
            	},
            	allowSave: true
			};
			
			this.orderCodeMonitor = new Pulse.FieldMonitor(this.orderCodeMonitorCFG);			

			// initial validation
			this.orderCodeMonitor.validate();
			
			this.addSubEditor(this.orderCodeMonitor);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initOrderCodeMonitor');
			}
		}
	},
	
	/**
	 * @param {Object} el, the element
	 */
	initNameMonitor: function(el) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initNameMonitor');
		}
		
		try {
			
			// retrieve required fields
			this.nameEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.name');
			
			if (typeof(this.nameEl) == 'undefined' 
				&& this.nameEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initNameMonitor');
				}
				return;
			}
			
			// builds monitor
			nameMonitorCFG = {
				valuePrefix: 'variant_' + this.getContent().id + '_',
				id: this.id + '.nameEditor',
				el: this.nameEl,
				allowBlank: false 
			};
			
			this.nameMonitor = new Pulse.FieldMonitor(nameMonitorCFG);

			// initial validation
			this.nameMonitor.validate();
			
			this.addSubEditor(this.nameMonitor);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initNameMonitor');
			}
		}
	},
	
	/**
	 * @Override Pulse.ContentEditor.setTitle()
	 * 
	 * called during commit()
 	 * 
	 * @param {String} title
	 */
	setTitle: function(title) {
		if (typeof(this.masterEditor) != 'undefined' && this.masterEditor !== null) {
			// set new tab title
			this.masterEditor.setTitle(title + ' (id: ' + this.getContent().id + ')');		
		}		
	},
	
	/**
	 * @return {Object} this.variant
	 */
	getContent: function() {
		return this.variant;
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function() {
			
		// call super : with false -> super.initTab() will not be called
		// TODO: refactor super.initTab() for super.getButtons
		Pulse.StoreVariantEditor.superclass.initComponent.call(this,false);
		
		// DBG >>
//		if (this.DBG) {	
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.StoreVariantEditor');
//		}
	
		try {

			// TODO
		
		} catch(e) {
			FATAL(e, this, 'initComponent.StoreVariantEditor');
		}
				
	}
	
};

Pulse.StoreVariantEditor = Ext.extend(Pulse.StoreContentEditor,StoreVariantEditor); // END :: Pulse.StoreVariantEditor


/**
 * 
 */
DBG.ShopPricesEditor = DBG.apply(DBG.Editor,{
//	initComponent: { Editor: false },
	onRender: false,
	buildGrid: false,
	getRenderer: false,
	validateAmount: { click: false, call: false },
	getButtons: false,
	hasChanges: { ShopPricesEditor: false },
	updatePriceInfo: false,
	removeSelectedPrices: false,
	createPrice: false,
	editPriceRoles: false
});
/**
 * 
 * shopSettings: {
 * 		id: {Number} someId,
 * 		clazz: {String} 'some-fq-className',
 * 		locale: {String} 'someLocale',
 * 		bundle: {String} 'someBundleName',
 * 		currency: {
 * 			symbol: {String} 'someString',
 * 			currencyCode: {String} 'someString',
 * 			defaultFractionDigits: {Number} 0000
 * 		},
 * 		netBased: {Boolean} 'indicates if shop is net-based',
 * 		taxGroups: [{
 * 			id: {Number} someId, 
 * 			clazz: {String} 'some-fq-className', 
 * 			name: {String} 'someName', 
 * 			percentage: {String} '00.00'
 * 		}, ... ],
 * 		priceStates: [ 'ACTIVE', 'INACTIVE', 'EXPIRED' ]
 * }
 * 
 */
ShopPricesEditor = {
	
	type: 'ShopPricesEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ShopPricesEditor*/,
	
	/**
	 * 
	 */
//	updatePriceInfo: function(evt) {
//		// DBG >>
//		if (this.DBG) {
//			THROW({args:arguments,props:['updateURL']},this,'updatePriceInfo');
//		}
//		
//		if (typeof(this.updateURL) != 'string' || this.updateURL === '') {
//			return;
//		}
//		
//		params = { 
//			taxGroupId: evt.record.get('taxGroupId'),
//			isNetBased: evt.record.get('isNetBased'),
//			amount: (true === evt.record.get('isNetBased')) ? evt.record.get('netAmount') : evt.record.get('grossAmount')
//		};
//		
//		Ext.Ajax.request({
//			url: this.updateURL,
//			scope: this,
//			method: 'POST',
//			success: function(response, options) {
//				decodedResponse = Ext.decode(response.responseText);
//				if (true === decodedResponse.status) {
//					
//					// DBG >>
//					if (this.DBG) {
//			    		THROW({propsObj:decodedResponse,props:['price']},this,'updatePriceInfo');						
//					}
//			    	
//			    	if (options.evt.field == 'netAmount') {
//			    		options.evt.record.set('grossAmount',decodedResponse.price.grossAmount);
//			    	} else if (options.evt.field == 'grossAmount') {
//			    		options.evt.record.set('netAmount',decodedResponse.price.netAmount);
//			    	} else if (options.evt.field == 'taxGroupId') {
//			    		options.evt.record.set('grossAmount',decodedResponse.price.grossAmount);
//			    		options.evt.record.set('netAmount',decodedResponse.price.netAmount);
//			    	}
//			    	
//        		} else {
//					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'updatePriceInfo');
//				}
//			},
//			failure: function(response, options) {
//				if (typeof(response.responseText) == 'undefined') {
//					PulseError.Throw({e:'REQUEST.FAILED'},this,'updatePriceInfo');
//		        } else {
//		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'updatePriceInfo');
//		        }
//			},
//			evt: evt,
//			params: params
//		});
//		
//	},
	
	
	
	/**
	 * 
	 */
	getButtons: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'getButtons');
		}
		
		disabled = false;
		if (this.shopSettings.error) {
			// disables buttons
			disabled = true;	
		}
		
		deleteButtonConfig = {
			scope: this,
			disabled: disabled,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_REMOVE,
			handler: this.removeSelectedPrices,
			iconCls: 'deleteIconCls'
		};
		createButtonConfig = {
			scope: this,
			disabled: disabled,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
			handler: this.createPrice,
			iconCls: 'addIconCls'
		};
//		DBGBTN = {
//			scope: this,
//			text: 'DBG',
//			handler: function() {
//				try {
//				iterator = new Pulse.SimpleIterator(this.store.addRecords.entrySet().setvalues);
//				p = ['HashSet','',this.store.addRecords.entrySet(),'',this.store.addRecords.entrySet().rootvalue,''];
//				j = 0;
//				while (iterator.hasNext()) {
//					o = iterator.next();
//					p.push(j + '.' + i + ' :: ' + o.parent.id + ' <- ' + o.id + 
//						'left -> ' + o.left.id + ' right -> ' + o.right.id);
//					p.push(j + '.' + i + ' :: ' + o.parent + ' <- ' + o);
//					p.push('left -> ' + o.left + ' right -> ' + o.right);
//					p.push('');
//					j += 1;
//				}
//				delete iterator;
//				delete o;
//				delete j;
//				PulseErrorWindow.Throw(p);
//				delete p;
//				} catch(e) {
//					FATAL(e,this,'DBG');
//				}
//			},
//			iconCls: 'infoIconCls'
//		};
		return [
			new Ext.Toolbar.Button(deleteButtonConfig),new Ext.Toolbar.Separator(),
			new Ext.Toolbar.Button(createButtonConfig),new Ext.Toolbar.Separator()
//			,new Ext.Toolbar.Button(DBGBTN),new Ext.Toolbar.Separator()
		];
	},
	
	/**
	 * 
	 */
	createPrice: function() {
		
		this.grid.stopEditing(true);
		
		// DBG
		if (this.DBG) {
			THROW({args:arguments},this,'createPrice');	
		}
		
		try {
			
			// check
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('ELEMENT-CHECK FAILED');
	        }
	        
	        /*
	        // isNetBased-checkBox
			this.isNetBasedCheckBox = new Ext.form.Checkbox({
	            fieldLabel: VIEWPORT_PROPERTIES.NETBASED,
	            name: 'isNetBased'
	        });
	        */
	        
	        // tax-group-selector
	        taxGroupStoreCFG = {
	        	fields: [{ name: 'id' },{ name: 'displayInfo' }],
	        	data: this.getTaxGroupsForComboBox()
	        };
			this.taxGroupCombo = new Ext.form.ComboBox({
//				tpl: '<tpl for="."><div class="x-combo-list-item">{percentage}&#160;%&#160;({name})</div></tpl>',
	        	mode: 'local',
		        forceSelection: true,
		        triggerAction: 'all',
		        selectOnFocus: true,
		        editable: false,	
	        	displayField: 'displayInfo',
	        	valueField: 'id',
	            fieldLabel: VIEWPORT_PROPERTIES.TAX, 
	            name: 'taxGroupId', 
	            width: 300,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_TAXGROUP,
	            allowBlank: false,
	            store: new Ext.data.SimpleStore(taxGroupStoreCFG)
	        });
	        this.taxGroupCombo.on('select',function(box,rec,index){
	        	
	        });
		
			// price-state-selector
			this.priceStateCombo = new Ext.form.ComboBox({  
	            fieldLabel: VIEWPORT_PROPERTIES.STATUS, 
	            name: 'status', 
	            width: 300,
	            emptyText: VIEWPORT_PROPERTIES.TEXT_CHOOSE_PRICESTATUS,
	            allowBlank: false,
	            editable: false,
	            store: this.shopSettings.priceStates
	        });
	        
	        // form-panel to house checkbox & combos   
	        formPanel = new Ext.form.FormPanel({
	            id: 'createPriceForm',
	            name: 'createPriceForm',
	            region: 'center',
	            margins: '3 3 3 3',
	            bodyStyle: 'padding: 5px', 
	            autoHeight: true,
	            labelWidth: 100, 
	            items: [/*this.isNetBasedCheckBox,*/this.taxGroupCombo,this.priceStateCombo]
	        }); 
	        
	        // add create-button
	        formPanel.addButton({
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
	            scope: this,
	            handler: function() {
	                
	                // check
	                if (true !== (this.taxGroupCombo.isValid() && this.priceStateCombo.isValid())) {
	                	return;
	                }
	                
	                // add new price
					this.addPrice(
						this.taxGroupCombo.getValue(),
						this.priceStateCombo.getValue()/*,
						this.isNetBasedCheckBox.getValue()*/
					);
					
					// close win
					this.win.close();
					
	            } 
	        }); 
	        
	        // add cancel-button
	        formPanel.addButton({
	            text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
	            scope: this,
	            handler: function() {
	                this.win.close();
	            } 
	        }); 
	        
	        // build el
	        if (this.el === null) {	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'createPrice.win.el'
			    });	        
	        }
        
        	// build win
	        this.win = new Ext.Window({
	        	id: 'createPrice.win',
	        	iconCls: 'addIconCls',
	            title: VIEWPORT_PROPERTIES.NEW,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            height: 160,
	            layout: 'border',
	            items: [ formPanel ],
	            width: 450
	        });
	        
	        // clean-up on close
	        this.win.on('close',function(){
	        	delete this.win;
	        	delete this.el;
	        	/*delete this.isNetBasedCheckBox;*/
	        	delete this.taxGroupCombo;
	        	delete this.priceStateCombo;	        	
	        },this);
	        
	        // show win                              
	        this.win.setPagePosition((VIEWPORT.getSize().width / 2) - 300, 100); 
	        this.win.show(this);
	        this.taxGroupCombo.validate();
	        this.priceStateCombo.validate();   
						
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'createPrice');
			}
		}
	},
	
	/**
	 * @return {Object} Array of tax-groups for ComboBox
	 * 		Array = [ 
	 * 			[ {Number} id, {String} name ], 
	 * 			...
	 *		]
	 */
	getTaxGroupsForComboBox: function () {
		taxGroups = [];
		for (i = 0; i < this.shopSettings.taxGroups.length; i++) {
			taxGroups.push([
				this.shopSettings.taxGroups[i].id,
				this.shopSettings.taxGroups[i].percentage + ' % ' + 
				'(' + this.shopSettings.taxGroups[i].name + ')'
			]);
		}
		return taxGroups;
	},
		
	/**
	 * 
	 */
	getRecord: function() {
		return new Pulse.Record.create([
			{ name: 'id' }, // contains the price.id
			{ name: 'clazz' }, // fq-className
			{ name: 'status' },
			{ name: 'currency' },
			{ name: 'isNetBased' },
			{ name: 'amount' },
			/*
			{ name: 'netAmount' },
			{ name: 'grossAmount' },
			*/
			{ name: 'minOrderSize' },
			{ name: 'maxOrderSize' },
			{ name: 'taxGroupId' },
			{ name: 'taxGroup' },
			{ name: 'noOfRoles' }
        ]);
	},
	
	/**
	 * 
	 */
	addPrice: function(taxGroupId, status/*, isNetBased*/) {
		
		Record = this.getRecord();
        
        id = Ext.id();
		newRec = {
			id: id,
			clazz: '',
			status: status,
			currency: this.shopSettings.currency,
			isNetBased: this.shopSettings.netBased,
			amount: '0',
			/*
			isNetBased: isNetBased,
			netAmount: '0',
			grossAmount: '0',
			*/
			minOrderSize: 1,
			maxOrderSize: '',
			taxGroupId: taxGroupId,
			taxGroup: {},
			noOfRoles: 0
		};

		this.store.addSorted(new Record(newRec));
		this.store.addIds.push(id);
//		this.store.addRecords.put(id,newRec);
		
		this.fireEvent('MSG','change',this);
		
	},
	
	/**
	 * 
	 */
	buildGrid: function() {
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['gridId','url','expandURL']},this,'buildGrid');
		}
		try {
				        
	        storeCFG = {
	        	pEditor: this,
	            pruneModifiedRecords : true,
	            fields: this.getRecord(),
	            root: 'data',
	            totalProperty: 'total',
	            baseParams: {
	            	id: this.getContent().id
	            },
	            url: '',
	            removeIds: [],
	            addIds: []
//	            ,addRecords: new Pulse.HashMap()
	        };
	        
	        if (typeof(this.url) == 'string' && this.url !== '') {
	        	storeCFG.url = this.url;
	        } else {
	        	storeCFG.data = {data:[]};
	        }
	        
	        this.store = new Ext.data.JsonStore(storeCFG);
	        
	        this.store.on('remove',function(_store, record, index){
	        	// only add loaded recs for deletion
	        	if (typeof(record.get('id')) == 'number') {
	        		_store.removeIds.push(record.get('id'));
	        	} else /*if  (typeof(record.get('id')) == 'string')*/ {
					
					for (i = 0; i < this.addIds.length; i++) {
						
						if (this.addIds[i] == record.get('id')) {
							this.addIds.splice(i,1);
							break;
						}
						
					}

				}
	
	        	if (false === this.pEditor.hasChanges()) {
	        		this.fireEvent('MSG','reset',this);
	        	}
	        	
	        });
	        
	        // selection-model
	    	this.sm = new Ext.grid.CheckboxSelectionModel();
			
			// build column-model
			amountEditorConfig = {
	        	pEditor: this,
                validator: function(v) {
                	if (this.pEditor.DBG) {
			    		THROW({args:arguments,props:['pEditor']},this.pEditor,'validateAmount.click');
                	}
			    	return this.pEditor.validateAmount(v);
			    }
	        };
	        
			/*netBasedField = new Pulse.CheckColumn({
				header: VIEWPORT_PROPERTIES.NETBASED,
				width: 70,
				fixed: true,
		      	dataIndex: 'isNetBased',
		      	sortable: true
			});*/
			
			taxGroupEditorBoxCFG = {
               typeAhead: true,
               triggerAction: 'all',
               transform: this.getContent().clazz + '.' + this.getContent().id + '.taxGroupSelector',
               lazyRender: true,
               listClass: 'x-combo-list-small'
            };			
			taxGroupField = new Pulse.TaxGroupColumn({
				pEditor: this,
				header: VIEWPORT_PROPERTIES.TAX,
		      	dataIndex: 'taxGroupId',
		      	sortable: true,
                editor: new Ext.form.ComboBox(taxGroupEditorBoxCFG)
			});
	        
	        // build-up columns
	        columns = [this.sm];
	        
	        // add row-expander for roles-editor if URL !!! does not work properly
//	        expander = null;
//	        if (typeof(this.initPriceRoleEditorURL) == 'string' && this.initPriceRoleEditorURL !== '') {
//	        	expander = new Ext.grid.AjaxRowExpander({
//			        spanRows: '10',
//			        enableCaching: true,
//			        url: this.initPriceRoleEditorURL,
//			        params: {
//			        	contentid: this.getContent().id
//			        }
//			    });
//			    columns.push(expander);
//	        }
	        
	        priceStatesEditorBoxCFG = {
               typeAhead: true,
               triggerAction: 'all',
               transform: this.getContent().clazz + '.' + this.getContent().id + '.priceStatusSelector',
               lazyRender: true,
               listClass: 'x-combo-list-small'
            };
	        
	        columns = columns.concat([{
	                header: 'id',
	                dataIndex: 'id',
	                sortable: true,
	                width: 50,
	                fixed: true,
	                renderer: this.getRenderer('id')
	            },{
	                header: VIEWPORT_PROPERTIES.STATUS,
	                dataIndex: 'status',
	                css: 'text-align:center;',
	                sortable: true,
	                editor: new Ext.form.ComboBox(priceStatesEditorBoxCFG)
	            },{
					header: VIEWPORT_PROPERTIES.NETBASED,
					width: 70,
					fixed: true,
			      	dataIndex: 'isNetBased',
			      	sortable: true,
			      	renderer: function(v) {
			      		if (false === v) {
			      			return '';
			      		}			
						return '<div style="text-align:center;"><img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" border="0" '
							+ 'class="isSelectedIconCls_14_big" style="vertical-align:middle;text-align:center;" '			
							+ '/></div>';
			      	}
				},/*netBasedField,*/{
	                header: VIEWPORT_PROPERTIES.CURRENCY,
	                dataIndex: 'currency',
	                sortable: true,
	                css: 'text-align:center;',
	                renderer: this.getRenderer('currency')
	            },{
	            	// new
	                header: '' + VIEWPORT_PROPERTIES.PRICE,
	                dataIndex: 'amount',
	                sortable: true,
	                renderer: this.getRenderer('amount'),
	                editor: new Ext.form.TextField(amountEditorConfig)
	            }/*,{
	                header: VIEWPORT_PROPERTIES.NETAMOUNT,
	                dataIndex: 'netAmount',
	                sortable: true,
	                renderer: this.getRenderer('amount'),
	                editor: new Ext.form.TextField(amountEditorConfig)
	            }*/,taxGroupField/*,{
	                header: VIEWPORT_PROPERTIES.GROSSAMOUNT,
	                dataIndex: 'grossAmount',
	                sortable: true,
	                renderer: this.getRenderer('amount'),
	                editor: new Ext.form.TextField(amountEditorConfig)
	            }*/,{
	                header: 'min-' + VIEWPORT_PROPERTIES.ORDERSIZE,
	                dataIndex: 'minOrderSize',
	                sortable: true,
	                css: 'text-align:right;',
	                editor: new Ext.form.TextField({
	                	regex: /\b^[0-9]+\b/
	                })
	            },{
	                header: 'max-' + VIEWPORT_PROPERTIES.ORDERSIZE,
	                dataIndex: 'maxOrderSize',
	                sortable: true,
	                css: 'text-align:right;',
	                editor: new Ext.form.TextField({
	                	regex: /\b^[0-9]+\b/
	                })
	            },{
	                header: VIEWPORT_PROPERTIES.ROLES,
	                dataIndex: 'noOfRoles',
	                width: 50,
	                fixed: true,
	                css: 'text-align:center;',
	                sortable: true
	            }
	        ]);
	        
	        if (typeof(this.initPriceRoleEditorURL) == 'string' && this.initPriceRoleEditorURL !== '') {
			    columns.push({
	                dataIndex: 'id',
	                width: 30,
	                fixed: true,
	                renderer: this.getRenderer('editPriceRolesBtn')
	            });
	        }	        
	        
	        this.cm = new Ext.grid.ColumnModel(columns);
	        
	        height = this.getHeight();
	        
	        plugins = [/*netBasedField,*/taxGroupField];
	        // add row-expander for roles-editor if URL !!! does not work properly
//	        if (expander !== null) {
//	        	plugins.push(expander);
//	        }
	        
	        this.grid = new Ext.grid.EditorGridPanel({
	        	pEditor: this,
	        	plugins: plugins,
	        	disabled: true,
	            store: this.store,
	            cm: this.cm,
	            sm: this.sm,
	            renderTo: this.gridId,
	        	height: height,
	            autoExpandColumn: 'id',
	            loadMask: true,
	            viewConfig: { forceFit: true },
	            border: false,
	            frame: false,
//            	style: 'border: 1px solid #8DB2E3;',
//            	enableHdMenu: false,
            	clicksToEdit: 1
	        });
	        
	        /*
	        this.grid.on('beforeedit',function(evt){
	        	
	        	if (true === evt.record.get('isNetBased')) {
	        		if (evt.field == 'grossAmount') {
	        			return false;
	        		}
	        	} else {
	        		if (evt.field == 'netAmount') {
	        			return false;
	        		}
	        	}
	        	
	        });
	        */
	        
	        this.grid.on('afteredit',function(evt){
	        	
	        	if (evt.value == evt.originalValue ) {
	        		return;
	        	}
	        	
//	        	if (typeof(evt.record.id) == 'string') {
//	        		this.store.addRecords.put(evt.record.id,evt.record);
//	        	}
	        	
	        	/*
	        	this.updatePriceInfo(evt);
	        	*/
	        	
	        	this.fireEvent('MSG','change',this);
	        	
	        },this);
			
			if (typeof(this.url) == 'string' && this.url !== '') {
				this.loadStore(/*{ id: this.getContent().id }*/);
	        	this.grid.enable();
	        }
			
		} catch(e) {
			FATAL(e, this, 'buildGrid');
		}
	},
	
	/**
	 * 
	 */
	removeSelectedPrices: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['grid','store']},this,'removeSelectedPrices');
		}
		
		try {
			
			arr = this.grid.getSelectionModel().getSelections();			
			for (i = 0; i < arr.length; i++) {
				this.store.remove(arr[i]);
			}
			
			if (arr.length > 0) {
				this.fireEvent('MSG','change',this);
			}
			delete arr;
			if (false === this.hasChanges()) {
				this.reset();
			}
			
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'removeSelectedPrices');
			}
		}
	},
	
	/**
	 * 
	 */
	loadStore: function(params) {
		this.store.load({
    		url: this.url,
    		params: params
    	});
	},
	
	/**
	 * @param {Number} taxGroupId
	 */
	getTaxGroup: function(taxGroupId) {
		
		for (i = 0; i < this.shopSettings.taxGroups.length; i++) {
			if (taxGroupId == this.shopSettings.taxGroups[i].id) {
				return this.shopSettings.taxGroups[i];
			}
		}
		
	},
	
	/**
	 * 
	 */
	getHeight: function() {
		if (typeof(this.initialConfig.height) == 'number') {
			return this.initialConfig.height;
		}
		if (typeof(this.renderTo) == 'object' && this.renderTo !== null 
				&& this.renderTo.type == 'SubEditorPanel') {
			return this.renderTo.getInnerHeight()-1;
		}
		if (typeof(this.grid) == 'undefined') {
			return;
		}
		return this.grid.getSize().height;
	},
	
	/**
	 * 
	 */
	getRenderer: function(field) {
		
		try {
			
			fieldUP = field.toUpperCase();
			
			switch(fieldUP) {
				
				case 'ID':
					renderer = function(v, leftNeighBourCell, rec, rowIdx, colIdx, store) {
						try {
							if (typeof(v) == 'number') {
								return v;
							} else {
								return '*';
							}
						} catch (re) {
							return v + ' : ' + re;
						}
					};
					break;
				
				case 'CURRENCY':
					renderer = function(v, leftNeighBourCell, rec, rowIdx, colIdx, store) {
						try {
							symbol = '<span' /*style="font-weight:bold;"*/ + '>';
							if (typeof(v.symbol) == 'string' && v.symbol !== '') {
								symbol += v.symbol + '&#160;';	
							}
							return  symbol + '(' + v.currencyCode + ')</span>';
						} catch (re) {
							return v + ' : ' + re;
						}
					};
					break;
					
				case 'TAXGROUP':
					renderer = function(v, leftNeighBourCell, rec, rowIdx, colIdx, store) {
						try {						
							return '<span ext:qtip="' + v.clazz + '&#160;(' + v.id + ')">' + 
									v.percentage + '&#160;%&#160;(' + v.name + ')' + 
								'</span>';
						} catch (re) {
							return v + ' : ' + re;
						}
					};
					break;
					
				case 'AMOUNT':
					renderer = function(v, leftNeighBourCell, rec, rowIdx, colIdx, store) {
						try {
							
							currency = rec.get('currency');
							
							/*
							currencyString = '';
							if (typeof(currency) != 'undefined' 
								&& typeof(currency.symbol) == 'string' && currency.symbol !== '') {
								currencyString = '<div style="font-weight:bold;float:left;">' + currency.symbol + '&#160;(' + currency.currencyCode + ')</div>';	
							}
							*/
							
							start = 0;
							preDot = v;
							appendString = '.';
							if (v.indexOf('.') !== -1) {
								splitArray = v.split('.');
								preDot = splitArray[0];
								appendString = '.' + splitArray[1];
								start = splitArray[1].length;
							}							
							
							for (i = start; i < currency.defaultFractionDigits; i++) {
								appendString += 0;
							}
							if (appendString.length > (currency.defaultFractionDigits + 1)) {
								appendString = appendString.substring(0,currency.defaultFractionDigits + 1);
							}
													
							return /*currencyString +*/ '<div style="text-align:right;">' + 
									parseInt(preDot,10) + appendString + '</div>';
									
						} catch (re) {
							return v + ' : ' + re;
						}
					};
					break;
					
				case 'EDITPRICEROLESBTN':
					renderer = function(v, leftNeighBourCell, rec, rowIdx, colIdx, store) {
				
						try {
							start =  '<a href="#" ';
							if (typeof(v) != 'string') {
								start += 'onclick="Ext.getCmp(\'' + store.pEditor.id + '\').editPriceRoles(\'' + rec.get('clazz') +'\',' + v + ');' + 
									'this.blur();return;"'; 
							}
							return start + ' style="display:block;width:14px;height:14px;margin:0px;padding:0px;border:0px;vertical-align:middle;" ' + 
								'class="editIconCls_14" ' + 
								'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT + 
									': ' + VIEWPORT_PROPERTIES.ROLES + '">' + 
								'<img src="' + Ext.BLANK_IMAGE_URL + '" width="1" height="1" border="0"/>' + 
							'</a>';
						
						} catch (re) {
							return v + ' : ' + re;
						}
					};
					break;
					
				default:
					FATAL(field,this,'getRenderer','NO MATCHING RENDERER');
					return;
					
			}
			
			return renderer;
		
		} catch(e) {
			FATAL(field,this,'getRenderer','CANNOT PROCESS FIELD');
			return;
		}
	},
	
	/**
	 * @param {String} priceClazz
	 * @param {String}/{Number} priceId
	 */
	editPriceRoles: function(priceClazz,priceId) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'editPriceRoles');
		}
		
		try {
			
			// check
			pel = VIEWPORT.getEl();
	        if (typeof(pel) == 'undefined') {
	        	throw('ELEMENT-CHECK FAILED');
	        }
	        
	        // build el
	        if (this.el === null) {	                
				this.el = pel.createChild({
			        tag: 'div', 
			        id: 'editPriceRoles.win.el'
			    });	        
	        }

			// build win	        
	        vpSize = VIEWPORT.getSize();
        	params = {id:priceId,contentid:this.getContent().id};
	        winCfg = {
	        	url: this.initPriceRoleEditorURL,
	        	params: params,
	        	id: priceClazz + '.' + priceId + '.roles.editor',
	            title: VIEWPORT_PROPERTIES.ROLES,
	            modal: true,
	            plain: true,
	            renderTo: this.el,
	            width: ((vpSize.width - 200) < 800) ? vpSize.width - 200 : 800,
	            height: ((vpSize.height - 200) < 550) ? vpSize.height - 200 : 550,
	            iconCls: 'roleIconCls'
	        };
	        this.win = new Pulse.SubEditorWindow(winCfg);
						        
	        /* // clean-up on close
	        this.win.on('close',function(){
       			
       			
       			
	        },this);*/
	        
	        this.win.on('show',function(){
       			this.win.initializePanel();
	        },this);
	        
	        this.win.on('MSG',function(msgString, _priceRoleEditor, _win){
       			
       			msg = msgString.toUpperCase();
       			if (msg == 'SAVESUCCESS' && _priceRoleEditor.price) {
       				rc = this.store.getAt(this.store.find('id', _priceRoleEditor.price.id));
       				if (rc.get('noOfRoles') != _priceRoleEditor.price.noOfRoles) {
       					rc.beginEdit();
       					rc.set('noOfRoles', _priceRoleEditor.price.noOfRoles);
       					rc.endEdit();
       				}
       				delete rc;
       			}
       			delete msg;
       			
	        },this);
	        
	        // show win                              
	        this.win.setPagePosition((vpSize.width / 2) - 300, 100); 
	        this.win.show(this);			
						
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'editPriceRoles');
			}
		}
	},
	
	/**
	 * 
	 */
	validateAmount: function(v) {
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'validateAmount.call');
		}
		
		_split = v.split('.');
		if (_split.length > 2) {
			return false;
		}
		
		regex = /(\b^\d+\b)/;
		
		success = regex.test(_split[0]);
		
		if (typeof(_split[1]) == 'undefined' || _split[1] === '') {
			return success;
		}
		
//		FATAL({
//			1: _split[0],
//			2: _split[1],
//			3: regex.test(_split[0]),
//			4: regex.test(_split[1]),
//			5: regex.test(_split[0]) && regex.test(_split[1])
//		},this,'validateAmount.call');
		
		success = (success && regex.test(_split[1]));
		
		if (true === success) {
			success = (success && (_split[1].length <= this.shopSettings.currency.defaultFractionDigits));
		}
		
		return success;
	},
	
	/**
	 * 
	 */
	onRender: function() {
		// DBG
		THROW({props:['renderTo'],args:arguments},this,'onRender');
		
		try {
		
			if (typeof(this.renderTo) == 'object' && this.renderTo !== null 
				&& this.renderTo.type == 'SubEditorPanel') {
				
				if (this.shopSettings.error) {
					this.renderTo.body.createChild({
				        tag: 'div',
				        style:'color:red;font-weight:bold;text-align:center;padding-top:50px;',
				        html: this.shopSettings.error
				    });
				} else {
					// builds the prices-grid if there are ShopSettings available
					this.gridId = this.id + '.gridDiv';
					el = this.renderTo.body.createChild({
				        tag: 'div',
				        id: this.gridId
				    });				
					this.buildGrid();				
				}
				
			} else {		
				THROW({e:'TODO',props:['renderTo'],args:arguments},this,'onRender');
			}
		
		} catch(e) {
			FATAL(e, this, 'onRender');
		}
	},
	
	/**
	 * 
	 */
	getChanges: function(v) {
		
		if (typeof(this.valPrefix) == 'undefined') {
			this.valPrefix = '';
		}
		
		v = Pulse.ShopPricesEditor.superclass.getChanges.call(this, v);
		
		if (true === this.hasChanges()) {
			if (typeof(v) == 'undefined' || v === null) {
				v = {};
			}
			try {
				
//				// added records
//				if (this.store.addRecords.size() > 0) {
//					
//					addRecs = this.store.addRecords.values();
//					
//					for (i = 0; i < addRecs.length; i++) {						
//						/*FATAL(addRecs[i].data,this,'getChanges');*/
//						rec = addRecs[i];
//						prefix = 'price_' + rec.get('id') + '_';
//						for (o in rec.data) {
//							valString = prefix + o;
//							v[valString] = rec.data[o];
//						}						
//					}
//					
//				}
				
				// added records
				if (this.store.addIds.length > 0) {
					for (i = 0; i < this.store.addIds.length; i++) {						
						/*FATAL(addRecs[i].data,this,'getChanges');*/
						rec = this.store.getAt(this.store.find('id',this.store.addIds[i]));
						prefix = this.valPrefix + 'price_' + rec.get('id') + '_';
						for (o in rec.data) {
							valString = prefix + o;
							v[valString] = rec.data[o];
						}						
					}
					
				}
				
				// modified records
				modRecs = this.store.getModifiedRecords();
				if (modRecs.length > 0) {
					
					for (i = 0; i < modRecs.length; i++) {
						
						rec = modRecs[i];						
						prefix = this.valPrefix + 'price_' + rec.get('id') + '_';
						
						if (typeof(rec.get('id')) == 'string') {
							continue;
//							for (o in rec.data) {
//								valString = prefix + o;
//								v[valString] = rec.data[o];
//							}
						} else {
							chg = rec.getChanges();
							for (o in chg) {
								valString = prefix + o;
								v[valString] = chg[o];
							}		
						}
								
					}
					
				}
				
				// removed records
				if (this.store.removeIds.length > 0) {
					v[this.valPrefix + 'removePriceIds'] = this.store.removeIds;
				}
				
			} catch (e) {
				// DBG >>
				if (this.DBG) {
					FATAL(e,this,'getChanges');
				}
			}
		}
		
		return v;
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		
		superBool = Pulse.ShopPricesEditor.superclass.hasChanges.call(this);
		
		bool = ((this.store.getModifiedRecords().length > 0) 
			|| (this.store.removeIds.length > 0)
			|| (this.store.addIds.length > 0));
//			|| (this.store.addRecords.size() > 0));
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,p:[{n:'superBool',o:superBool},{n:'bool',o:bool}]},this,'hasChanges.ShopPricesEditor');
		}
		
		return superBool || bool;
	},
	
	/**
	 * 
	 */
	commit: function(v) {
		
		Pulse.ShopPricesEditor.superclass.commit.call(this);
		
		this.store.commitChanges();
		this.store.removeIds = [];
		this.store.addIds = [];
//		this.store.addRecords.clear();
		
		this.fireEvent('MSG','commit',this);
	},
	
	/**
	 * 
	 */
	reset: function() {
		
		Pulse.ShopPricesEditor.superclass.reset.call(this);
		
		this.store.rejectChanges();
		this.store.removeIds = [];
		this.store.addIds = [];
//		this.store.addRecords.clear();
		
		this.fireEvent('MSG','reset',this);
	}
	
};
Pulse.ShopPricesEditor = Ext.extend(Pulse.Editor,ShopPricesEditor); // END :: Pulse.ShopPricesEditor

/**
 * 
 */
DBG.ShopPriceRoleEditor = DBG.apply(DBG.Editor,{
//	initComponent: { Editor: false },
	onRender: false,
	init: false
});
ShopPriceRoleEditor = {
	
	type: 'ShopPriceRoleEditor',
	
	DBG: DBG.ShopPriceRoleEditor,
	
	init: function(editor) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['url','saveURL','price.id','price.clazz']},this,'init');
		}
		
		try {
	
			if (typeof(editor) != 'object' || editor === null) { 
				throw({
					e: 'EDITOR.TYPE.EXCEPTION',
					description: 'EDITOR CONNOT BE UNDEFINED OR NULL',
					editor: editor,
					editorToString: '' + editor,
					editorType: typeof(editor)
				});
			}
			if (true !== (editor.type != 'SubEditorPanel' || editor.type != 'SubEditorWindow')) {
				throw({
					e: 'EDITOR.TYPE.EXCEPTION',
					description: 'MUST BE SubEditorPanel or SubEditorWindow',
					editor: editor,
					editorToString: '' + editor,
					editorType: typeof(editor)
				});
			}
			
			this.editor = editor;
			
			if (this.editor.type == 'SubEditorWindow') {
				this.editor.on('beforeClose',function() {
					
					if (true === this.hasChanges()) {
						Ext.Msg.confirm(
							VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
				    		VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES,
				    		function(response) {
				    			if ('yes' === response) {
									this.reset();
									this.editor.close();
								}
							}, 
						this);
						
						return false;
					}
					
				},this);
			}
			
			// show roles-assorter
			this.rolesEditor = new Pulse.AssorterPanel({
				height: editor.getInnerHeight() + 21,
				header: false,
				collapsible: false,
				border: false,
				collapsed: false,
				renderTo: this.price.clazz + '.' + this.price.id + '.roles',
				loadURL: this.url + '?id=' + this.price.id,
				editURL: this.editURL,
				editHandler: function(node) {
					RoleOverviewEditor.editRole(this.editURL, node.attributes.id, node.attributes.clazz);
				},
				uiProviders: {
	                'AccessControlTreeNodeUI': PULSE.AccessControlTreeNodeUI
	            }
			});
			this.rolesEditor.on('MSG',function(msgString,_editor) {
				THROW({args:arguments},this,'MSG');
				if (msgString == 'change') {
					if (false === _editor.hasChanges()) {
						this.editor.toggleHasChangesIcon(false);
					} else {
						this.editor.toggleHasChangesIcon(true);
					}
				} else {
					PulseError.Throw({e:'HANDLE',p:[{n:'handle',o:'panel'},{n:'id',o:this.tab.id},{n:'msg',o:msgString}]});
				}
				this.fireEvent('MSG',msgString,this,_editor);
			},this);
			this.rolesEditor.on('reset',function(eObj){
				if (true === eObj.success && false === eObj.assorter.hasChanges()) {
					this.editor.toggleHasChangesIcon(false);
				}
				this.fireEvent('MSG','reset',this,_editor);
			},this);
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'init');
			}
		}
		
	},
	
	/**
	 * overrides Pulse.Editor without superclass.call
	 */
	hasChanges: function() {
		if (this.rolesEditor) {
			return this.rolesEditor.hasChanges();
		}
		return false;
	},
	
	/**
	 * overrides Pulse.Editor without superclass.call
	 */
	getChanges: function(v) {
		
		if (this.rolesEditor && this.rolesEditor.hasChanges()) {
			
			if (typeof(v) == 'undefined') {
				v = {id: this.price.id, contentid: this.content.id};
			}
			
			chgs = this.rolesEditor.getChanges();

			if (typeof(chgs.asoc) != 'undefined') {
				v.addroles = chgs.asoc;
			}
			if (typeof(chgs.unasoc) != 'undefined') {
				v.remroles = chgs.unasoc;
			}
				
		}
		return v;
	},
	
	/**
	 * overrides Pulse.Editor without superclass.call
	 */
	commit: function() {
		if (this.rolesEditor) {
			return this.rolesEditor.commit();
		}
		return false;
	},
	
	/**
	 * overrides Pulse.Editor without superclass.call
	 */
	reset: function() {
		if (this.rolesEditor) {
			return this.rolesEditor.reset();
		}
		return false;
	},
	
	/**
	 * 
	 */
	getButtons: function() {
		saveButtonConfig = {
			scope: this,
			disabled: true,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
			handler: this.savePriceRoles,
			iconCls: 'saveIconCls'
		};
		closeButtonConfig = {
			scope: this,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CANCEL,
			handler: function() {
				
				this.editor.close();
				
			},
			iconCls: 'deleteIconCls'
		};
		if (typeof(this.saveURL) == 'string' && this.saveURL !== '') {
			saveButtonConfig.disabled = false;
		}
		return [
			new Ext.Toolbar.Button(saveButtonConfig),new Ext.Toolbar.Separator(),
			new Ext.Toolbar.Button(closeButtonConfig),new Ext.Toolbar.Separator()
		];
	},
	
	/**
	 * 
	 */
	savePriceRoles: function() {
		
		if (typeof(this.saveURL) != 'string' || this.saveURL === '') {
			return;
		}
		
		if (false === this.hasChanges()) {
			return;
		}
		
		params = this.getChanges();
		
		Ext.Ajax.request({
			url: this.saveURL,
			method: 'POST',
			scope: this,
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					
					// commit changes
					this.commit();
					
					if (this.editor) {
						this.editor.toggleHasChangesIcon(false);
					}
					
					this.price = decodedResponse.price;
					
					this.fireEvent('MSG','savesuccess',this);
            		
        		} else {
					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.savePriceRoles');
				}
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.savePriceRoles');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.savePriceRoles');
		        }
			},
			params: params
		});
		
	}
	
	
};
Pulse.ShopPriceRoleEditor = Ext.extend(Pulse.Editor,ShopPriceRoleEditor); // END :: Pulse.ShopPriceRoleEditor


/**
 * 
 */
Pulse.TaxGroupColumn = function(config){
	
    Ext.apply(this, config);
    
    if(!this.id){
        this.id = Ext.id();
    }
    
    this.renderer = this.renderer.createDelegate(this);
    
};
/**
 * 
 */
Pulse.TaxGroupColumn.prototype = {
	
	DBG: false,
	
	type: 'CheckColumn',
	
    init: function(grid){
//    	THROW({args:arguments},this,'init');
        this.grid = grid;
    },

    renderer: function(v, p, record, rowIdx, colIdx, store) {    	
    	taxGroup = this.pEditor.getTaxGroup(v);    	
    	return '<span ext:qtip="' + taxGroup.clazz + '&#160;(' + taxGroup.id + ')">' + 
				taxGroup.percentage + '&#160;%&#160;(' + taxGroup.name + ')' + 
			'</span>';
    }
};

/**
 * 
 */
Pulse.CheckColumn = function(config){
	
    Ext.apply(this, config);
    
    if(!this.id){
        this.id = Ext.id();
    }
    
    this.renderer = this.renderer.createDelegate(this);
    
};
/**
 * 
 */
Pulse.CheckColumn.prototype = {
	
	DBG: false,
	
	type: 'CheckColumn',
	
    init: function(grid){
    	
//    	THROW({args:arguments},this,'init');
    	
        this.grid = grid;
        
        this.grid.on('render', function() {
        	
            var view = this.grid.getView();
            view.mainBody.on('mousedown', this.onMouseDown, this);
            
        }, this);
    },

    onMouseDown: function(e, t){
    	this.grid.stopEditing(true);
        if (t.className && t.className.indexOf('x-grid3-cc-' + this.id) !== -1) {
            e.stopEvent();
            var index = this.grid.getView().findRowIndex(t);
            var record = this.grid.store.getAt(index);
            record.set(this.dataIndex, !record.get(this.dataIndex));
            this.grid.fireEvent('afterEdit',{
            	grid: this.grid,
            	record: record,
            	field: this.dataIndex,
            	value: record.get(this.dataIndex),
            	originalValue: !record.get(this.dataIndex),
            	row: index
            });
        }
        
    },

    renderer: function(v, p, record, rowIdx, colIdx, store){
    	
//    	THROW({args:arguments},this,'renderer');
//    	FATAL(record.getChanges(),this,'renderer');
    	
//    	FATAL(p,this,'renderer');
        p.css += ' x-grid3-check-col-td'; 
        return '<div class="x-grid3-check-col' + ( (true === v) ? '-on' : '' ) + ' x-grid3-cc-' + this.id + '">&#160;</div>';
        
    }
    
};


/**
 * 
 */
DBG.ShopContentEditor = DBG.apply(DBG.StoreContentEditor,{
	// initComponent: { ShopContentEditor: false },
	initPricesEditorPanel: false
});
/**
 * 
 */
ShopContentEditor = {
	
	type: 'ShopContentEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ShopContentEditor*/,
	
	/**
	 *
	 */
	initPricesEditorPanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['content.id','content.clazz','content.bundle','initPricesEditorURL']},this,'initPricesEditorPanel');
		}
		
		try {
			
			if (typeof(this.initPricesEditorURL) != 'string' || this.initPricesEditorURL === '') {
				// DBG >>
				if (this.DBG) {
					throw('URL UNDEFINED this.initPricesEditorURL: ' + this.initPricesEditorURL);
				}
				return;
			}
			
			var params = { id: this.getContent().id };
			var subEditorPanel = new Pulse.SubEditorPanel({
				iconCls: 'priceIconCls',
				title: '' + VIEWPORT_PROPERTIES.PRICES,
				id: this.getContent().clazz + '.' + this.getContent().id + '.prices.editor',
				masterEditor: this,
				url: this.initPricesEditorURL,
				params: params,
				renderTo: this.getContent().clazz + '.' + this.getContent().id + '.prices',
				style: 'margin-bottom:5px;',
				height: 350
//				,DBG: ['addSubEditor.SubEditorPanel']
			});
			
			subEditorPanel.on('expand',function(){
				
				// DBG >>
				if (this.DBG) {
					THROW({props:['id','url','initializePanel','loadPanel']},this,'expand');
				}
				
				this.initializePanel();
			});
			
			this.addSubEditor(subEditorPanel);
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'initPricesEditorPanel');
			}
		}
		
	},
	
	/**
	 * 
	 */
	editorMSG: function(msgString, editor, masterEditor) {
		
		
		msg = msgString.toUpperCase();
		if (msg == 'DELETESUCCESS') {
			if (editor.type == 'ShopVariantEditor') {
				if (true === editor.wasLastVariant) {
                    this.removeSubEditor(editor.masterEditor,true);
                    this.loadVariantsEanContainer();
                } else {
                    this.removeSubEditor(editor.masterEditor,true);
                }
//				this.removeSubEditor(editor,true);
			}
		}
		
		// call super
		Pulse.ShopContentEditor.superclass.editorMSG.call(this, msgString, editor, masterEditor);

	},
	
	hasChanges: function() {
		superBool = Pulse.ShopContentEditor.superclass.hasChanges.call(this);
		if (this.statusBox) {
			return this.statusBox.changed || superBool;
		}
		return superBool;
	},
	
	getChanges: function(v) {
		v = Pulse.ShopContentEditor.superclass.getChanges.call(this,v);
		if (this.statusBox && true === this.statusBox.changed) {
			v[this.statusBox.valuePrefix + 'status'] = this.statusBox.getValue();
		}
		return v;
	},
	
	commit: function() {
		if (this.statusBox && true === this.statusBox.changed) {
			this.statusBox.commit();
		}
		Pulse.ShopContentEditor.superclass.commit.call(this);
	},
	
	reset: function() {
		if (this.statusBox && true === this.statusBox.changed) {
			this.statusBox.reset();
		}
		Pulse.ShopContentEditor.superclass.reset.call(this);
	},
	
	initStatusBox: function() {
		this.statusBox = Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.statusSelector');
		if (this.statusBox) {
			this.statusBox.changed = false;
			this.statusBox.initialValue = this.statusBox.getValue();
			this.statusBox.valuePrefix = '';
			this.statusBox.pEditor = this;
	        this.statusBox.on('change',function() {
	        	if (this.statusBox.initialValue == arguments[1].value) { 
		        	this.statusBox.changed = false;
		        	if(false === this.hasChanges()) {
		        		this.statusBox.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
			        	this.reset();
			        }
		        	return;
		        }
		        this.statusBox.changed = true;
		        this.statusBox.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
		        this.fireEvent('MSG','change',this);
	        },this);
	        
	        this.statusBox.commit = function() {
				if (true === this.changed) {
					this.changed = false;
					this.initialValue = this.getValue();
	        		this.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				}
	        };
	        
	        this.statusBox.reset = function() {
	        	if (true === this.changed) {
	        		this.changed = false;
	        		this.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
	        		options = document[this.pEditor.getContent().clazz + '.' + this.pEditor.getContent().id + '.statusSelector.form']['status'];
	        		for (i=0;i<options.length;i++) {
	        			if (this.initialValue == options[i].value) {
	        				options[i].selected = true;
	        			}	        			
	        		}
	        	}
	        };
	          
		}
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function(boolInitTab) {
		
			
		// call super
		Pulse.ShopContentEditor.superclass.initComponent.call(this, boolInitTab);
		
		try {
			
			// initializes monitoring of status dd-box
			this.initStatusBox();
		
			// call inits
			this.initPricesEditorPanel(); // builds prices-editor
		
		} catch(e) {
			FATAL(e, this, 'initComponent.ShopContentEditor');
		}
				
	}
	
};
Pulse.ShopContentEditor = Ext.extend(Pulse.StoreContentEditor,ShopContentEditor); // END :: Pulse.ShopContentEditor



/**
 * 
 */
ShopOrderViewer = {
	
	type: 'ShopOrderViewer',
	
	defaultOverviewPageSize: 20,
	
	/**
	 * 
	 */
	buildGrid: function() {
        
        // retrieve store
        this.store = this.getStore();
        
        // buld paging-tool with combobox to set page-size        
        this.pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),	    
		    displayField: 'size',
		    valueField: 'size',
		    selectOnFocus: true,
		    mode: 'local',
		    triggerAction: 'all',
		    width: 60,
		    blankText: '' + this.defaultOverviewPageSize,
		    emptyText: '' + this.defaultOverviewPageSize
		});
        
        // the actual paging-toolbar
        this.pagingToolBar = new Ext.PagingToolbar({
       		// id: 'toolbar',
            displayInfo: true,
            pageSize: this.defaultOverviewPageSize,
            store: this.store,
            items: ['-', this.pageSizeBox]
        });
        
        // add gridStore-listener for paging-toolbar
        this.store.on('beforeLoad', function(store, options) {
        	if (this.pageSizeBox.getRawValue() !== '') {
        		try {
        			limit = parseInt(this.pageSizeBox.getRawValue().trim(), 10);
        			this.pagingToolBar.pageSize = limit;
        			options.params.limit = limit;
        		} catch(e) { /* ignore */ }
        	} else {
        		this.pagingToolBar.pageSize = this.defaultOverviewPageSize;
    			options.params.limit = this.defaultOverviewPageSize;
        	}
        },this);
		
		// define column-model
		columns = [
        	{
                header: 'id',
                dataIndex: 'id',
                sortable: true,
                width: 50,
                hidden: true
            },{
            	header: VIEWPORT_PROPERTIES.EMAIL,
                dataIndex: 'emailAddress',
                sortable: true,
                hideable: false
            },{
            	header: VIEWPORT_PROPERTIES.CURRENCY,
                dataIndex: 'currency',
                sortable: true,
                renderer: this.currencyFieldRenderer,
                width: 75,
                fixed: true,
                hideable: false
            },{
            	header: VIEWPORT_PROPERTIES.NETAMOUNT,
                dataIndex: 'netTotal',
                sortable: true,
                hideable: false
            },{
            	header: VIEWPORT_PROPERTIES.GROSSAMOUNT,
                dataIndex: 'grossTotal',
                sortable: true,
                hideable: false
            },{
            	header: VIEWPORT_PROPERTIES.SHIPMENT_METHOD,
                dataIndex: 'shipmentMethod',
                sortable: true,
                renderer: this.idCodeFieldRenderer,
                hideable: false
            },{
            	header: VIEWPORT_PROPERTIES.PAYMENT_METHOD,
                dataIndex: 'paymentMethod',
                sortable: true,
                renderer: this.idCodeFieldRenderer,
                hideable: false
            },{
            	header: VIEWPORT_PROPERTIES.ORDER_START_DATE,
                dataIndex: 'startDate',
                sortable: true,
                hidden: true
            },{
            	header: VIEWPORT_PROPERTIES.ORDER_END_DATE,
                dataIndex: 'endDate',
                sortable: true,
                hideable: false
            },{
                header: 'locale',
                dataIndex: 'locale',
                sortable: true,
                hidden: true
            },{
                header: 'bundle',
                dataIndex: 'bundle',
                sortable: true,
                renderer: this.bundleFieldRenderer,
                hidden: true
            }
        ];
		
		// add details-expander if loadOrderURL
		if (typeof(this.loadOrderURL) == 'string' && this.loadOrderURL !== '') {
			gridExpander = new Ext.grid.AjaxRowExpander({
		        spanRows: '8',
		        enableCaching: true,
		        url: this.loadOrderURL
		    });
		    columns = [gridExpander].concat(columns);
		}
		
		// build column-model
		this.cm = new Ext.grid.ColumnModel(columns);
		
		gridCFG = {
        	disabled: true,
            store: this.store,
            cm: this.cm,
            renderTo: this.gridId,
        	height: this.tab.getInnerHeight(),
        	width: this.tab.getInnerWidth(),
            loadMask: true,
            viewConfig: { forceFit: true },
            border: false,
            frame: false,
            tbar: this.buildToolbar(),
            bbar: this.pagingToolBar
        };
        if (typeof(this.loadOrderURL) == 'string' && this.loadOrderURL !== '') {
        	gridCFG.plugins = gridExpander;
        }       
        this.grid = new Ext.grid.GridPanel(gridCFG);
        
        if (typeof(this.loadURL) == 'string' && this.loadURL !== '') {
			this.loadStore({
				start: 0,
            	bundleName: this.bundleName
            });
        	this.grid.enable();
        }
        
        this.tab.on('resize',function(){
        	this.grid.setHeight(this.tab.getInnerHeight());
        	this.grid.setWidth(this.tab.getInnerWidth());
        },this);
        
	},
	
	/**
	 * 
	 */
	buildToolbar: function() {
		
		try {
			
			buttons = [];
			
			this.emailField = new Ext.form.TextField({
				blankText: 'search email'
			});
			this.startDateField = new Ext.form.DateField({
				editable: false,
				blankText: 'start date'
			});
			this.endDateField = new Ext.form.DateField({
				editable: false,
				blankText: 'end date'
			});
			
			buttons.push(VIEWPORT_PROPERTIES.EMAIL + ': ');
			buttons.push(this.emailField);
			buttons.push(' ');
			buttons.push(VIEWPORT_PROPERTIES.FROM + ': ');
			buttons.push(this.startDateField);
			buttons.push(' ');
			buttons.push(VIEWPORT_PROPERTIES.TO_TEMP + ': ');
			buttons.push(this.endDateField);
			
			searchButtonCFG = {
				scope: this,
				handler: function() {
					params = {
						start: 0,
						sEmail: this.emailField.getValue()
					};
					sDate = this.startDateField.getValue();
					if (typeof(sDate) == 'object' 
						&& sDate !== null) {
						params.sStart = sDate.getTime();
					}
					sDate = this.endDateField.getValue();
					if (typeof(sDate) == 'object' 
						&& sDate !== null) {
						params.sEnd = sDate.getTime();
					}
					this.loadStore(params);
				},
				iconCls: 'findIconCls'
			};
			
			buttons.push(' ');
			buttons.push(searchButtonCFG);
			buttons.push(new Ext.Toolbar.Separator());
			
			// return Toolbar
			return new Ext.Toolbar({items: buttons});
		
		} catch(e) {
			FATAL(e, this, 'buildToolbar');
		}
		
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		return false;
	},
	
	/**
	 * 
	 */
	bundleFieldRenderer: function(o) {
		return '<div ext:qtip="id:&#160;' + o.id + '">' + o.name + '</div>';
	},
	
	/**
	 * 
	 */
	currencyFieldRenderer: function(o) {
		return '<div ext:qtip="code:&#160;' + o.currencyCode + '">' + o.symbol + '</div>';
	},
	
	/**
	 * 
	 */
	idCodeFieldRenderer: function(o) {
		return '<div ext:qtip="id:&#160;' + o.id + '">' + o.idCode + '</div>';
	},
	
	/**
	 * 
	 */
	loadStore: function(params) {
		this.store.load({
    		url: this.loadURL,
    		params: params
    	});
	},
	
	/**
	 * @return {Object} Ext.data.JsonStore for grid
	 */
	getStore: function() {
		storeCFG = {
        	pEditor: this,
            pruneModifiedRecords : true,
            fields: this.getRecord(),
            root: 'data',
            totalProperty: 'total',
//            baseParams: {
//            	bundleName: this.bundleName
//            },
            url: this.loadURL,
            remoteSort: true,                    
            sortInfo: {
                field: 'id',
                direction: 'ASC'
            }
        };        
        return new Ext.data.JsonStore(storeCFG);
	},
	
	/**
	 * 
	 */
	getRecord: function() {
		return new Pulse.Record.create([
			{ name: 'id' }, // contains the order.id
			{ name: 'clazz' }, // fq-className
			{ name: 'bundle' },
			{ name: 'locale' },
			{ name: 'currency' },
			{ name: 'userId' },
			{ name: 'emailAddress' },
			{ name: 'shipmentMethod' },
			{ name: 'paymentMethod' },
			{ name: 'noOfPositions' },
			{ name: 'netTotal' },
			{ name: 'grossTotal' },
			{ name: 'startDate' },
			{ name: 'endDate' }
        ]);
	},
	
	/**
	 * 
	 */
	initComponent: function(boolInitTab) {
		Pulse.ShopOrderViewer.superclass.initComponent.call(this,boolInitTab);
		this.buildGrid();
//		if (false !== boolInitTab) {
//			this.initTab(); // adds buttons to tab-tool-bar
//		}
	}
	
};
Pulse.ShopOrderViewer = Ext.extend(Ext.grid.GridPanel,ShopOrderViewer);

/**
 * 
 */
DBG.ShopSettingsEditor = DBG.apply(DBG.Editor,{
	initComponent: { ShopSettingsEditor: false },
	tbar: { save: true },
	initTab: true,
	initTaxgroupsEditorPanel: true,
	initCurrencyMonitor: true,
	initNetBasedMonitor: true
});

/**
 * 
 */
ShopSettingsEditor = {
	
	type: 'ShopSettingsEditor',
	
	DBG: false/*DBG.ShopSettingsEditor*/,
	
	// save-button
	getSaveButtonConfig: function() {
		return {
		text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE,
		disabled: true,
		scope: this,
		handler: function() {
			
			if (false === this.hasChanges()) {
				this.reset();
				return;
			}
			
			if (false === this.currencyMonitor.validate()) {
				return;
			}
			
			vals = {id:this.shopSettings.id};
			saveValues = this.getChanges(vals);
			
			if (typeof(saveValues) == 'undefined' || saveValues === null) {
				if (this.DBG) {
					THROW({
						e:'NO VALUES TO SAVE THOUGH THERE ARE CHANGES',
						args:[this.hasChanges(),saveValues]
					},this,'tbar.save');
				}
				return;
			}
			
			this.tab.disable();
			
			Ext.Ajax.request({
				url: this.saveURL,
				method: 'POST',
				scope: this,
				success: function(response, options) {
					this.tab.enable();
					decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {							
						if (true === this.currencyMonitor.hasChanges()) {
							this.currencyMonitor.setValue(decodedResponse.shopSettings.currency.currencyCode);
						}
						this.commit();
						(function(){ this.fireEvent('MSG','savesuccess',this); }).defer(250,this);
					} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this.type,'tbar.save');
					}
				},
				failure: function(response, options) {
					this.tab.enable();
					if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},this.type,'tbar.save');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this.type,'tbar.save');
			        }
				},
				params: saveValues
			});
		},
		iconCls: 'saveIconCls'
	};
	},
	
	/**
	 * 
	 */
	initTab: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['tab','tab.id']},this,'initTab');
		}
		
		try {
			
			if (typeof(this.tab) != 'object' || this.tab === null) {
				THROW({e:'TAB UNDEFINED OR NULL: "[' + this.tab + ']"'},this,'initTab');
				return;
			}
			
			
			if (true !== this.tab.isInitialized) {
				
				// enables save-content-button if URL
				saveButtonConfig = this.getSaveButtonConfig();
				if (typeof(this.saveURL) == 'string' && this.saveURL !== '') {
					saveButtonConfig.disabled = false;
					saveButtonConfig.scope = this;
				}			
				
				// insert buttons
				this.tab.getTopToolbar().insertButton(0, [
					saveButtonConfig,
					new Ext.Toolbar.Separator()
				]);

				this.tab.isInitialized = true;
			
			}
		
		} catch(e) {
			FATAL(e, this, 'initTab');
		}
		
	},
	
	/**
	 *
	 */
	initTaxgroupsEditorPanel: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['content.id','content.clazz','content.bundle','initPricesEditorURL']},this,'initTaxgroupsEditorPanel');
		}
		
		try {
			
			if (typeof(this.initTaxgroupsEditorURL) != 'string' || this.initTaxgroupsEditorURL === '') {
				// DBG >>
				if (this.DBG) {
					throw('URL UNDEFINED this.initTaxgroupsEditorURL: ' + this.initTaxgroupsEditorURL);
				}
				return;
			}
			
			var params = { id: this.shopSettings.id };
			var subEditorPanel = new Pulse.SubEditorPanel({
				iconCls: 'percentageIconCls',
				title: '' + VIEWPORT_PROPERTIES.TAX,
				id: this.shopSettings.clazz + '.' + this.shopSettings.id + '.taxGroups.editor',
				masterEditor: this,
				url: this.initTaxgroupsEditorURL,
				params: params,
				renderTo: this.shopSettings.clazz + '.' + this.shopSettings.id + '.taxGroups',
				style: 'margin-bottom:5px;',
				height: 350
//				,DBG: ['addSubEditor.SubEditorPanel']
			});
			
			subEditorPanel.on('expand',function(){
				
				// DBG >>
				if (this.DBG) {
					THROW({props:['id','url','initializePanel','loadPanel']},this,'expand');
				}
				
				this.initializePanel();
			});
			
			this.addSubEditor(subEditorPanel);
			
		} catch(e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'initTaxgroupsEditorPanel');
			}
		}
		
	},
	
	/**
	 * @param {Object} el, the element
	 */
	initCurrencyMonitor: function(el) {
		
		try {
			
			// retrieve required fields
			this.currencyEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.shopSettings.clazz + '.' + this.shopSettings.id + '.currency');
			
			if (typeof(this.currencyEl) == 'undefined' 
				&& this.currencyEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initCurrencyMonitor');
				}
				return;
			}
			
			// builds monitor
			currencyMonitorCFG = {
				id: this.id + '.currencyEditor',
				el: this.currencyEl,
				allowBlank: false
			};
			
			this.currencyMonitor = new Pulse.FieldMonitor(currencyMonitorCFG);

			// initial validation
			this.currencyMonitor.validate();
			
			this.addSubEditor(this.currencyMonitor);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initCurrencyMonitor');
			}
		}
	},
	
	/**
	 * @param {Object} el, the element
	 */
	initNetBasedMonitor: function(el) {
		
		try {
			
			// retrieve required fields
			this.netBasedEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.shopSettings.clazz + '.' + this.shopSettings.id + '.netBased');
			
			if (typeof(this.netBasedEl) == 'undefined' 
				&& this.netBasedEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initNetBasedMonitor');
				}
				return;
			}
			
			// builds monitor
			netBasedMonitorCFG = {
				id: this.id + '.netBasedEditor',
				el: this.netBasedEl,
				fieldType: 'checkbox'
			};
			
			netBasedMonitor = new Pulse.FieldMonitor(netBasedMonitorCFG);
			
			this.addSubEditor(netBasedMonitor);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initNetBasedMonitor');
			}
		}
	},
	
	/**
	 * 
	 */
	initComponent: function(boolInitTab) {
		
		// call super
		Pulse.ShopSettingsEditor.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {
			props = ['type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.ShopSettingsEditor');
		}
		
		try {
			
			this.initCurrencyMonitor();
			this.initNetBasedMonitor();
			this.initTaxgroupsEditorPanel();
			if (false !== boolInitTab) {
				this.initTab(); // adds buttons to tab-tool-bar
			}
		
		} catch(e) {
			FATAL(e, this, 'initComponent.ShopSettingsEditor');
		}
		
	}

};
Pulse.ShopSettingsEditor = Ext.extend(Pulse.Editor, ShopSettingsEditor); // END :: Pulse.ShopSettingsEditor


/**
 * Static Object to get a ShopSettings-tree from.
 */
Pulse.ShopSettingsTree = {
	
	type: 'ShopSettingsTree',
	
	DBG: {
		addTreeListeners: false
	},

	/**
	 * Static tree-builder for a ShopSettings-tree t with t.treeEditor<ShopSettingsTreeEditor>.
	 * 
	 * 	@param {Object} config
	 * 		config.el: the id of the element to render the t to
	 * 		config.dataURL: the data-Url for the t.loader
	 * 		config.createURL: the create-Url for the t.treeEditor<ShopSettingsTreeEditor>
	 * 		config.editURL: the edit-Url for the t.treeEditor<ShopSettingsTreeEditor>
	 * 
	 */
	getTree: function(config) {
		
		treeCfg = {
            
            xtype: 'treepanel',
            el: config.el,
            autoScroll: true,
            autoHeight: true,
            animate: true,                
            enableDD: false,
            containerScroll: true,
            rootVisible: false,        
            border: false,
            
            loader: new Ext.tree.TreeLoader({
                dataUrl: config.dataURL,
                uiProviders: {
                    'ShopSettingsTreeNodeUI': PULSE.ShopSettingsTreeNodeUI
                }
            }),
            
            treeEditor: new Pulse.ShopSettingsTreeEditor(config)
        
        };
        
        if (typeof(config.viewOrdersURL) == 'string' && config.viewOrdersURL !== '') {
        	viewOrdersCFG = {
        		text: VIEWPORT_PROPERTIES.ORDERS,
        		scope: config,
        		handler: function() {
        			PULSE_VIEWPORT_CONTROLLER.openTab({
			            id: this.bundleName + '.orders',
			            title: this.bundleName + ': ' + VIEWPORT_PROPERTIES.ORDERS,
			            // iconCls: 'orderIconCls',
			            loadParams: {
			                url: this.viewOrdersURL,
			                params: {
			                    bundleName: this.bundleName
			                }
			            }
			        });
        		}
        	};
        	treeCfg.tbar = [viewOrdersCFG];
        }
        
        tree = new Ext.tree.TreePanel(treeCfg);
        
        tree.setRootNode(new Ext.tree.AsyncTreeNode({
            text: config.el + '.root',
            draggable: false,
            id: config.el + '.root.id'
        }));
        
        this.addTreeListeners(tree);
        
        return tree;
		
	},
	
	/**
	 * Adds the listeners for the tree t to execute the methods 
	 * of the t.treeEditor<ShopSettingsTreeEditor>.
	 * 
	 * @param {Object} tree
	 */
	addTreeListeners: function(tree) {
		// click-listener
	    tree.on('click', function(node, evt) {
	    	if (typeof(evt.handle) != 'undefined') {
		    	
		    	// DBG
		    	THROW({
		    		args:arguments,
		    		propsObj:node,
		    		props:['text','id'],
		    		p:[{n:'evt.handle',o:evt.handle}]
				},Pulse.ShopSettingsTree,'addTreeListeners');
				
				switch(evt.handle) {
					
					case 'edit':
						evt.handle = null;
						delete evt.handle;
						if (typeof(this.treeEditor.editHandler) == 'function') {
							this.treeEditor.editHandler(node);
						}
						break;
						
					default: 
						THROW({e:'ERROR',args:arguments,p:[
				    		{n:'node',o:node.text},
				    		{n:'id',o:node.id},
				    		{n:'UNKNOWN HANDLE:',o:evt.handle}
			    		]},Pulse.ShopSettingsTree,'addTreeListeners');	
						evt.handle = null;
						delete evt.handle;
					
				}
				
	    	}
	    	
	    },tree);
	}
	
}; // END :: Pulse.ShopSettingsTree

/**
 * Constructor tree.treeEditor for the ShopSettings-tree.
 */
Pulse.ShopSettingsTreeEditor = function(config) {
	
	// store initial config
	this.initialConfig = config;
	
	// apply config-values
	Ext.apply(this, config);
	
	// set id
	if (typeof(this.id) == 'undefined') {
		this.id = Ext.id();
	} else {
		this.id += '.editor';
	}
};
/**
 * Implementation tree.treeEditor for the ShopSettings-tree.
 */
Pulse.ShopSettingsTreeEditor.prototype = {
	
	type: 'ShopSettingsTreeEditor',
	
	DBG: false/*{
		editSettings: false,
		createNewSettings: false
	}*/,
	
	/**
	 * Switch: 
	 * 		if the given node does have ShopSettings the editor will be started,
	 * 		otherwise the create new ShopSettings-editor will be started.
	 * 
	 * @param {Object} node
	 */
	editHandler: function(node) {
		if (typeof(node.attributes.shopSettings) != 'undefined') {
			// start editor
			this.editSettings(node);
		} else {
			// show create new settings dialog
			this.createNewSettings(node);
		}
	},
	
	/**
	 * Starts the ShopSettings-editor for the given node.
	 * 
	 * @param {Object} node
	 */
	editSettings: function(node) {
		if (this.DBG) {
			THROW({propsObj:node,props:['attributes.bundle.name','attributes.locale','attributes.shopSettings']},this,'editSettings');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: node.attributes.shopSettings.clazz + '.' + node.attributes.shopSettings.id + '.editor',
            title: node.attributes.bundle.name + '.' + node.attributes.locale,
            tabTip: node.attributes.bundle.name + '.' + node.attributes.locale + 
            	' (id:' + node.attributes.shopSettings.id + ')',
            iconCls: node.attributes.shopSettings.clazz.replace(/\./g,''),
            loadParams: {
                url: this.editURL,
                params: {
                    id: node.attributes.shopSettings.id
                }
            }
        });
		
	},
	
	/**
	 * Starts the create new ShopSettings-editor for the given node.
	 * 
	 * @param {Object} node
	 */
	createNewSettings: function(node) {
		if (this.DBG) {
			THROW({propsObj:node,props:['attributes.bundle.name','attributes.locale']},this,'createNewSettings');
		}
		
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
			VIEWPORT_PROPERTIES.TEXT_CREATE_SHOPSETTINGS,
			function(yesNo){
				if (yesNo == 'yes') {
					this.scope[this.execute](this.node);
				}
			},
			{node:node,execute:'createAjax',scope:this}
		);
		
	},
	
	/**
	 * Performs the create new ShopSettings-AJAX-request for the given node.
	 * 
	 * @param {Object} node
	 */
	createAjax: function(node) {
		
		try {
			
			Ext.Ajax.request({
				url: this.createURL,
				scope: this,
	    		method: 'POST',
	    		success: function(response, options) {
	    			decodedResponse = Ext.decode(response.responseText);				
					if (true === decodedResponse.status) {
	    				node = options.node;
	    				node.attributes.shopSettings = decodedResponse.shopSettings;
	    				node.ui.reBuildQTip();
	    				this.editSettings(node);
	    			} else {
	    				PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'createAjax');
	    			}    			
	    		},
	    		failure: function(response, options) {
	    			if (typeof(response.responseText) == 'undefined') {
						PulseError.Throw({e:'REQUEST.FAILED'},this,'createAjax');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'createAjax');
			        }
	    		},
	    		node: node,
				params: {
					bundle: node.attributes.bundle.name,
					locale: node.attributes.locale
				}
			});
			
		} catch(e) {
			FATAL(e, this, 'createAjax');
		}
		
	}
	
	
	
}; // END :: Pulse.ShopSettingsTreeEditor


// Create namespace (PULSE)
// Ext.namespace('PULSE');
 
/**
 * definition of the user-interface for an access-control-tree-node
 */
PULSE.ShopSettingsTreeNodeUI = function() {
	
    // call parent constructor    
    PULSE.ShopSettingsTreeNodeUI.superclass.constructor.apply(this, arguments);
};
 
// extend
Ext.extend(PULSE.ShopSettingsTreeNodeUI, Ext.tree.TreeNodeUI, {

	type: 'ShopSettingsTreeNodeUI',
	
	DBG: false/*{
		setChanged: false,
		handleClick: true
	}*/,
	
	functionsIconSize: 14,
	
	/**
	 * @Override
	 */
	renderElements : function(n, a, targetNode, bulkRender) {
	
		// add some indent caching, this helps performance when rendering a large tree
        this.indentMarkup = n.parentNode ? n.parentNode.ui.getChildIndent() : '';

		
		styleString = 'margin-bottom: 2px; padding: 0px; border: 0px; vertical-align: middle;';
		id = Ext.id();
		
		// edit-btn
		editBtn = '';
		editHandler = false;
		if (typeof(n.getOwnerTree().treeEditor) != 'undefined' 
			&& typeof(n.getOwnerTree().treeEditor.editHandler) == 'function') {
			editHandler = true;
			editBtn = '&#160;<a href="#" style="font-weight: bold" id="edtEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="editIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT + '" />' + 
			'</a>&#160;';
		}
		
		// delete-btn
		deleteBtn = '';
		deleteHandler = false;
		if (typeof(n.getOwnerTree().treeEditor) != 'undefined' 
			&& typeof(n.getOwnerTree().treeEditor.deleteHandler) == 'function') {
			deleteHandler = true;
			deleteBtn = '&#160;<a href="#" style="font-weight: bold" id="delEl_' + n.id + '.' + id + '">' + 
				'<img src="' + Ext.BLANK_IMAGE_URL + '" ' + 
				'width="' + this.functionsIconSize + '" ' + 
				'height="' + this.functionsIconSize + '" ' + 
				'style="' + styleString + '" ' + 
				'class="deleteIconCls_' + this.functionsIconSize + '" ' + 
				'ext:qtip="' + VIEWPORT_PROPERTIES.BUTTON_TEXT_REMOVE + '" />' + 
			'</a>&#160;';
		}
		
        href = a.href ? a.href : Ext.isGecko ? "" : "#";
        buf = [
        	'<li class="x-tree-node">',
        	'<div ext:tree-node-id="', n.id, '" class="x-tree-node-el x-tree-node-leaf ', a.cls, '">',
        		'<span class="tabHasChangesIconHidden">*</span>',
            	'<img src="', a.icon || this.emptyIcon, 
            		'" class="x-tree-node-icon',(a.icon ? " x-tree-node-inline-icon" : ""),
            		(a.iconCls ? " "+a.iconCls : ""),'" unselectable="on" style="width:18px"/>',
            	'<a hidefocus="on" class="x-tree-node-anchor" href="',href,'" tabIndex="1" ',
             	a.hrefTarget ? ' target="'+a.hrefTarget+'"' : '', ' dir="LTR">',
             	'<span unselectable="on" ext:qtip="id: ' + n.id + '">',n.text,'</span></a>',
             	editBtn,deleteBtn,
             "</div>",
            '<ul class="x-tree-node-ct" style="display:none;"></ul>',
            "</li>"
        ].join('');

        if (bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()) {
            this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
                                n.nextSibling.ui.getEl(), buf);
        } else {
            this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
        }
        
        this.elNode = this.wrap.childNodes[0];
        this.ctNode = this.wrap.childNodes[1];
        cs = this.elNode.childNodes;
        
        this.hasChangesNode = cs[0];
        this.iconNode = cs[1];
        this.anchor = cs[2];
        this.textNode = cs[2].firstChild;
        
        // edit
		if (true === editHandler) {
	        var editEl = Ext.get('edtEl_' + n.id + '.' + id);
	        if (typeof(editEl) != 'undefined' && editEl !== null) {
	        	editEl.on('click', this.handleClick, this, 'edit');
	        }
		}
		
		// delete
		if (true === deleteHandler) {
	        var deleteEl = Ext.get('delEl_' + n.id + '.' + id);
	        if (typeof(deleteEl) != 'undefined' && deleteEl !== null) {
	        	deleteEl.on('click', this.handleClick, this, 'delete');
	        }
		}
		
		// build quicktip
		this.buildQTip(this, a);
		        
    },
    
    /**
     * 
     */
    handleClick: function(event, elClicked, handle) {
    	THROW({
    		args: arguments, 
    		props:['id','type','node','node.id','node.text']
		}, this, 'handleClick');
    	event.handle = handle;
    },
    
    /**
     * @Override
     */
    updateExpandIcon : function(){
    	/* does nothing */
    },
    
    /**
     * @Override
     */
    getChildIndent : function(){
    	/* does nothing */
    },
    
    /**
     * @Override
     */
    renderIndent : function(){
    	/* does nothing */
    },
    
   	/**
     * builds ext-qtip for node from passed {attributes}
     * 
     * @param ui : PULSE.ShopSettingsTreeNodeUI
     * @param a : node.attributes
     * 		{
     * 			node.id
     * 			node.description
     * 		} 
     */
    buildQTip: function(ui, a) {
    	if (typeof(ui) == 'undefined' || typeof(a) == 'undefined' || ui === null) {
    		return;
    	}
    	
    	text = (typeof(a.shopSettings) == 'undefined') 
    		? 'ShopSettings: ' + a.shopSettings : 'ShopSettings:<br /><hr />id: ' + a.shopSettings.id;
    	
    	qtipCFG = {
        	target: ui.textNode,
//        	title: '' + a.text,
        	text: text
        };
        Ext.QuickTips.register(qtipCFG);
    },
    
    /**
     * 
     */
    reBuildQTip: function() {
    	Ext.QuickTips.unregister(this.textNode);
    	this.buildQTip(this, this.node.attributes);
    },
    
    /**
     * 
     */
    setChanged: function(bool) {
    	THROW({o:bool},this,'setChanged');
    	if (true === bool) {
    		Ext.fly(this.hasChangesNode).removeClass("tabHasChangesIconHidden");
    		return;
    	}
    	Ext.fly(this.hasChangesNode).replaceClass("","tabHasChangesIconHidden");
    }
    	    	
}); // end of extend


/**
 * @Override
 */ 
PULSE.ShopSettingsRootTreeNodeUI = function(){
    PULSE.ShopSettingsRootTreeNodeUI.superclass.constructor.apply(this, arguments);
};
Ext.extend(PULSE.ShopSettingsRootTreeNodeUI, PULSE.ShopSettingsTreeNodeUI, {
    render : function(){
        if(!this.rendered){
            /*var */targetNode = this.node.ownerTree.innerCt.dom;
            this.node.expanded = true;
            targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
            this.wrap = this.ctNode = targetNode.firstChild;
        }
    },
    collapse : function(){
    },
    expand : function(){
    }
}); 
// end of file

/**
 * 
 */
DBG.ShopVariantEditor = DBG.apply(DBG.ShopContentEditor,{
//	initComponent: { ShopVariantEditor: false },
	getButtons: false,
	initNameMonitor: false,
	removeVariant: { click: false, call: false }
});
/**
 * 
 */
ShopVariantEditor = {
	
	type: 'ShopVariantEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ShopVariantEditor*/,
	
	/**
     * 
     */
    getRemoveButtonConfig: function(boolDisabled) {
		
		removeButtonConfig = {
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE,
	        scope: this,
	        disabled: (typeof(this.removeURL) == 'string' && this.removeURL !== '') ? false : true,
	        handler: function() {
	        	
	        	// DBG >>
	        	if (this.DBG) {
	        		THROW({args:arguments},this,'removeVariant.click');
	        	}
	        	
	        	this.removeVariant();
	        },
	        iconCls: 'deleteIconCls'
		};
		
		return removeButtonConfig;
    },
	
	/**
	 * 
	 */
	getButtons: function() {
		
		// DBG >>
		THROW({props:['saveNewImageGroupURL']},this,'getButtons');
		
		try {
				
			// enables new-image-button if URL	
			createImageButtonConfig = this.getCreateImageButtonConfig();
			if (typeof(this.saveNewImageGroupURL) == 'string' && this.saveNewImageGroupURL !== '') {
				createImageButtonConfig.disabled = false;
				createImageButtonConfig.scope = this;
			}
			
			// enables create-variant-button if URL
			createVariantButtonConfig = this.getCreateVariantButtonConfig();
			createVariantButtonConfig.disabled = false;
			createVariantButtonConfig.scope = this;
			
			return [
				new Ext.Toolbar.Button(createImageButtonConfig),
				new Ext.Toolbar.Separator(),
				new Ext.Toolbar.Button(this.getRemoveButtonConfig()),
				new Ext.Toolbar.Separator(),
				new Ext.Toolbar.Button(createVariantButtonConfig),
				new Ext.Toolbar.Separator()
			];
			
		
		} catch(e) {
			FATAL(e, this, 'getButtons');
		}
		
	},
	
	/**
	 * 
	 */
	 removeVariant: function() {
	 	
	 	// DBG >>
    	if (this.DBG) {
    		THROW({args:arguments,props:['variant','variant.id','variant.clazz','variant.name']},this,'removeVariant.call');
    	}
    	
    	// confirm delete
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' 
			/*+ this.getContent().name*/ + '(id: ' + this.getContent().id + ')"',
			VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
    				params = { id: this.getContent().id };
                    if (typeof(this.getContent().parentVariantId) == 'number') {
						params.variantId = this.getContent().parentVariantId;
					}
                    Ext.Ajax.request({
                    	url: (typeof(this.getContent().parentVariantId) == 'number') ? this.removeSubVariantURL : this.removeURL,
                    	scope: this,
                    	method: 'POST',
                    	success: function(response, options) {
                    		decodedResponse = Ext.decode(response.responseText);
							if (true === decodedResponse.status) {
								
								/*
								// destroy container-editor
								this.masterEditor.destroyEditor(this,true);
								*/
								
								if (0 === decodedResponse.noOfVariantsLeft) {
									this.wasLastVariant = true;
								}
								
								this.fireEvent('MSG','deletesuccess',this);
							} else {
								PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'removeVariant');
							}
                    	},
                    	failure: function(response, options) {
                    		if (typeof(response.responseText) == 'undefined') {
		   						PulseError.Throw({e:'REQUEST.FAILED'},this,'removeVariant');
					        } else {
					        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'removeVariant');
					        }
                    	},
                    	params: params
                    });

    			}
			},
		this);
    	
    },
	
	/**
	 * @param {Object} el, the element
	 */
	initOrderCodeMonitor: function(el) {
		
		try {
			
			// retrieve required fields
			this.orderCodeEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.orderCode');
			
			if (typeof(this.orderCodeEl) == 'undefined' 
				&& this.orderCodeEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initOrderCodeMonitor');
				}
				return;
			}
			
			// builds monitor
			this.orderCodeMonitorCFG = {
				valuePrefix: 'variant_' + this.getContent().id + '_',
				id: this.id + '.orderCodeEditor',
				el: this.orderCodeEl,
				// OrderCode-Code-validation
				invalidText: '' + VIEWPORT_PROPERTIES.TEXT_NOT_EANCODE,
            	regex: /(\b([0-9]{8})\b)|(\b([0-9]{13})\b)/,
            	handler: function(v) {
            		return (v.trim().length === 8 || v.trim().length === 13);
            		if (v.trim().length === 8 || v.trim().length === 13) {
            			return true;
            		}
            		return false;
            	},
            	allowSave: true
			};
			
			this.orderCodeMonitor = new Pulse.FieldMonitor(this.orderCodeMonitorCFG);			

			// initial validation
			this.orderCodeMonitor.validate();
			
			this.addSubEditor(this.orderCodeMonitor);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initOrderCodeMonitor');
			}
		}
	},
	
	/**
	 * @param {Object} el, the element
	 */
	initNameMonitor: function(el) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'initNameMonitor');
		}
		
		try {
			
			// retrieve required fields
			this.nameEl = (typeof(el) != 'undefined' && el !== null) 
				? el : Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.name');
			
			if (typeof(this.nameEl) == 'undefined' 
				&& this.nameEl === null) {
				// DBG >>
				if (this.DBG) {
					FATAL('ELEMENT UNDEFINED',this,'initNameMonitor');
				}
				return;
			}
			
			// builds monitor
			this.nameMonitorCFG = {
				valuePrefix: 'variant_' + this.getContent().id + '_',
				id: this.id + '.nameEditor',
				el: this.nameEl,
				allowBlank: false 
			};
			
			this.nameMonitor = new Pulse.FieldMonitor(this.nameMonitorCFG);

			// initial validation
			this.nameMonitor.validate();
			
			this.addSubEditor(this.nameMonitor);
			
		} catch(e) {
			if (this.DBG) {
				FATAL(e,this,'initNameMonitor');
			}
		}
	},
	
	/**
	 * @param {String} title
	 */
	setTitle: function(title) {
		if (typeof(this.masterEditor) != 'undefined' && this.masterEditor !== null) {
			// set new tab title
			this.masterEditor.setTitle(title + ' (id: ' + this.getContent().id + ')');		
		}		
	},
	
	/**
	 * @return {Object} this.variant
	 */
	getContent: function() {
		return this.variant;
	},
	
	initStatusBox: function() {
		this.statusBox = Ext.get(this.getContent().clazz + '.' + this.getContent().id + '.statusSelector');
		if (this.statusBox) {
			this.statusBox.changed = false;
			this.statusBox.initialValue = this.statusBox.getValue();
			this.statusBox.valuePrefix = 'variant_' + this.getContent().id + '_';
			this.statusBox.pEditor = this;
	        this.statusBox.on('change',function() {
	        	if (this.statusBox.initialValue == arguments[1].value) { 
		        	this.statusBox.changed = false;
		        	if(false === this.hasChanges()) {
		        		this.statusBox.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
			        	this.reset();
			        }
		        	return;
		        }
		        this.statusBox.changed = true;
		        this.statusBox.replaceClass(Pulse.fieldCls, Pulse.fieldCls + 'Yellow');
		        this.fireEvent('MSG','change',this);
	        },this);
	        
	        this.statusBox.commit = function() {
				if (true === this.changed) {
					this.changed = false;
					this.initialValue = this.getValue();
	        		this.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
				}
	        };
	        
	        this.statusBox.reset = function() {
	        	if (true === this.changed) {
	        		this.changed = false;
	        		this.replaceClass(Pulse.fieldCls + 'Yellow', Pulse.fieldCls);
	        		options = document[this.pEditor.getContent().clazz + '.' + this.pEditor.getContent().id + '.statusSelector.form']['status'];
	        		for (i=0;i<options.length;i++) {
	        			if (this.initialValue == options[i].value) {
	        				options[i].selected = true;
	        			}	        			
	        		}
	        	}
	        };
	          
		}
	},
	
	/**
	 * initializes this component.
	 */
	initComponent: function() {
			
		// call super : with false -> super.initTab() will not be called
		// TODO: refactor super.initTab() for super.getButtons
		Pulse.ShopVariantEditor.superclass.initComponent.call(this,false);
		
		// DBG >>
//		if (this.DBG) {	
//			props = ['id','type'];
//			props = props.concat(DBG.getPropertyArray(this.initialConfig));
//			THROW({args:arguments,props:props},this,'initComponent.ShopVariantEditor');
//		}
	
		try {

			// TODO
		
		} catch(e) {
			FATAL(e, this, 'initComponent.ShopVariantEditor');
		}
				
	}
	
};

Pulse.ShopVariantEditor = Ext.extend(Pulse.ShopContentEditor,ShopVariantEditor); // END :: Pulse.ShopVariantEditor


/**
 * 
 */
DBG.ShopTaxGroupsEditor = DBG.apply(DBG.Editor,{
//	initComponent: { Editor: false }
	getButtons: true,
	removeSelectedTaxgroups: true,
	createTaxgroup: true,
	addTaxGroup: true,
	onRender: true,
	buildGrid: true,
	hasChanges: { ShopTaxGroupsEditor: true }
});
/**
 * 
 */
ShopTaxGroupsEditor = {
	
	type: 'ShopTaxGroupsEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: false/*DBG.ShopTaxGroupsEditor*/,
	
	/**
	 * 
	 */
	getButtons: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'getButtons');
		}		
		/*deleteButtonConfig = {
			scope: this,
			disabled: false,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_REMOVE,
			handler: this.removeSelectedTaxgroups,
			iconCls: 'deleteIconCls',
			disabled: true
		};*/
		createButtonConfig = {
			scope: this,
			disabled: false,
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE,
			handler: this.createTaxgroup,
			iconCls: 'addIconCls'
		};
		return [
			/*new Ext.Toolbar.Button(deleteButtonConfig),new Ext.Toolbar.Separator(),*/
			new Ext.Toolbar.Button(createButtonConfig),new Ext.Toolbar.Separator()
		];
	},
	
	/**
	 * unused since deletion of multiple grid-rows is not possible.
	 */
	/*removeSelectedTaxgroups: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['grid','store']},this,'removeSelectedTaxgroups');
		}
		
		try {
			
			arr = this.grid.getSelectionModel().getSelections();
			for (i = 0; i < arr.length; i++) {
				this.store.remove(arr[i]);
			}
			
			if (arr.length > 0) {
				this.fireEvent('MSG','change',this);
			}
			delete arr;
			if (false === this.hasChanges()) {
				this.reset();
			}
			
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'removeSelectedTaxgroups');
			}
		}
		
	},*/
	
	/**
	 * 
	 */
	createTaxgroup: function() {
				
		this.grid.stopEditing(true);
		
		// DBG
		if (this.DBG) {
			THROW({args:arguments},this,'createTaxgroup');	
		}
		
		try {
			
			// show create-form-window    			    	
	    	this.showCreateFormWindow({
	    		fields: [{
	    			fieldLabel: VIEWPORT_PROPERTIES.NAME,
	    			name: 'name',
	    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_NAME
	    		},{
	    			fieldLabel: VIEWPORT_PROPERTIES.TAX,
	    			name: 'percentage',
	    			emptyText: VIEWPORT_PROPERTIES.TEXT_ENTER_VALUE,
//	    			pEditor: this,
	                validator: function(v) {
//				    	THROW({args:arguments,props:['pEditor']},this.pEditor,'validate.click');
				    	this.validates = /^(100|100.0|100.00|100.000|([0-9]?[0-9]?(\.[0-9][0-9]?[0-9]?)?))$/.test(v);
				    	return this.validates;
				    }
	    		}],
	    		handler: 'addTaxGroup'
	    	});
					
		} catch (e) {
			// DBG >>
			if (this.DBG) {
				FATAL(e,this,'createTaxgroup');
			}
		}
		
	},
	
	/**
	 * 
	 */
	addTaxGroup: function() {
		
		if (this.DBG) {
			THROW({args:arguments},this,'addTaxGroup');
		}
		
		Record = this.getRecord();
        
        id = Ext.id();
		
		params = this.getCreateFormParams();
		
		newRec = {
			id: id,
			clazz: '',
			name: params.name,
			percentage: params.percentage
		};

		this.store.addSorted(new Record(newRec));
		this.store.addIds.push(id);
		
		this.closeCreateFormWindow();
		
		this.fireEvent('MSG','change',this);
		
	},
	
	/**
	 * 
	 */
	deleteTaxGroupDLG: function(id) {
		Ext.Msg.confirm(
			VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + '(id: ' + id + ')"',
			VIEWPORT_PROPERTIES.MSG_REALLYDELETE,
    		function(response) {
    			if ('yes' === response) {
    				this.scope.deleteTaxGroup(this.id);
    			}
			},
			{ scope: this, id: id }
		);
	},
	
	/**
	 * @param {String/Number} id
	 */
	deleteTaxGroup: function(id) {
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments},this,'removeTaxGroup');
		}
		
		rec = this.store.getAt(this.store.find('id',id));
		
		if (isNaN(id)) {
			// deletion of non-persistent tax-group
			this.store.remove(rec);
			if (false === this.hasChanges()) {
				this.reset();
			}
		} else {
			// deletion of persistent tax-group
			ajaxCFG = {
            	url: this.deleteURL,
            	scope: this,
            	method: 'POST',
            	success: function(response, options) {
            		decodedResponse = Ext.decode(response.responseText);
					if (true === decodedResponse.status) {
						
						this.store.remove(options.rec);
						/*if (false === this.hasChanges()) {
							this.reset();
						}*/						
						this.fireEvent('MSG','deletesuccess',this);
					
					} else {
						PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'deleteTaxGroup');
					}
            	},
            	failure: function(response, options) {
            		if (typeof(response.responseText) == 'undefined') {
   						PulseError.Throw({e:'REQUEST.FAILED'},this,'deleteTaxGroup');
			        } else {
			        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'deleteTaxGroup');
			        }
            	},
            	rec: rec,
            	params: { id: id }
            };
            Ext.Ajax.request(ajaxCFG);
		}
		
	},
	
	/**
	 * 
	 */
	onRender: function() {
		// DBG
		THROW({props:['renderTo'],args:arguments},this,'onRender');
		
		try {
		
			if (typeof(this.renderTo) == 'object' && this.renderTo !== null 
				&& this.renderTo.type == 'SubEditorPanel') {				
				
				this.gridId = this.id + '.gridDiv';
				el = this.renderTo.body.createChild({
			        tag: 'div',
			        id: this.gridId
			    });				
				this.buildGrid();
				
			} else {		
				THROW({e:'TODO',props:['renderTo'],args:arguments},this,'onRender');
			}
		
		} catch(e) {
			FATAL(e, this, 'onRender');
		}
	},
	
	/**
	 * 
	 */
	buildGrid: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['gridId','url']},this,'buildGrid');
		}
		
		try {
			
			// retrieve store
			this.store = this.getStore();
			this.addStoreListeners(this.store);
			
			// selection-model
	    	/*this.sm = new Ext.grid.CheckboxSelectionModel();*/
	    	
	    	// build-up columns
	        /*columns = [this.sm];
	        columns = columns.concat(*/
	        
	        columns = [
	        	{
	                header: 'id',
	                dataIndex: 'id',
	                sortable: true,
	                width: 50,
	                fixed: true,
	                renderer: this.getRenderer('id')
	            },{
	                header: VIEWPORT_PROPERTIES.NAME,
	                dataIndex: 'name',
	                sortable: true,
	                editor: new Ext.form.TextField({
	                	allowBlank: false
	                })
	            },{
	                header: VIEWPORT_PROPERTIES.TAX,
	                dataIndex: 'percentage',
	                sortable: true,
	                editor: new Ext.form.TextField({
	                	allowBlank: false,
	                	validator: function(v) {
	                		this.validates = /^(100|100.0|100.00|100.000|([0-9]?[0-9]?(\.[0-9][0-9]?[0-9]?)?))$/.test(v);
					    	return this.validates;
					    }
	                })
	            }
	        ];
	        
	        /*);*/
	        
	        // add delete button to rows
	        if (typeof(this.deleteURL) != 'undefined' && this.deleteURL !== '') {
	        	
	        	delColCFG = {
	            	header: '',
	            	dataIndex: 'id',
	                width: 25,
	                fixed: true,
	                sortable: false,
	                renderer: function(id, meta, rec, colIndex, rowIndex, store) {
						try {
				        	delFieldCFG = {
				        		functionString: 'Ext.getCmp(\'' + store.pEditor.id + '\').deleteTaxGroupDLG(\'' + id + '\')',
				        		iconCls: 'deleteIconCls_14',
				        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELETE
				        	};
				        	return FilterEditor.getGridImageField(delFieldCFG);
			        	} catch (renderError) {
							return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
								'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
								'try to reload (' + renderError + ')"/>';
						}
			        }
	            };
	            columns.push(delColCFG);
	        }
		        
	        this.cm = new Ext.grid.ColumnModel(columns);
	        
	        height = this.getHeight();
	        
	        plugins = [];
	        
	        this.grid = new Ext.grid.EditorGridPanel({
	        	pEditor: this,
	        	plugins: plugins,
	        	disabled: true,
	            store: this.store,
	            cm: this.cm,
	            /*sm: this.sm,*/
	            renderTo: this.gridId,
	        	height: height,
	            autoExpandColumn: 'id',
	            loadMask: true,
	            viewConfig: { forceFit: true },
	            border: false,
	            frame: false,
            	clicksToEdit: 1
	        });
	        
	        this.grid.on('afteredit',function(evt){
	        	if (evt.value == evt.originalValue ) {
	        		return;
	        	}	        	
	        	this.fireEvent('MSG','change',this);	        	
	        },this);
			
			if (typeof(this.url) == 'string' && this.url !== '') {
				this.loadStore();
	        	this.grid.enable();
	        }			
			
		} catch(e) {
			FATAL(e, this,'buildGrid');			
		}
	},
	
	/**
	 * 
	 */
	loadStore: function(params) {
		this.store.load({
    		url: this.url,
    		params: params
    	});
	},
	
	/**
	 * @return {Object} Ext.data.JsonStore for grid
	 */
	getStore: function() {
		storeCFG = {
        	pEditor: this,
            pruneModifiedRecords : true,
            fields: this.getRecord(),
            root: 'data',
            totalProperty: 'total',
            baseParams: {
            	id: this.shopSettings.id
            },
            url: '',
            removeIds: [],
            addIds: []
        };
        
        if (typeof(this.url) == 'string' && this.url !== '') {
        	storeCFG.url = this.url;
        } else {
        	storeCFG.data = {data:[]};
        }
        
        return new Ext.data.JsonStore(storeCFG);
	},
	
	/**
	 * 
	 */
	addStoreListeners: function(store) {
        
        store.on('remove',function(_store, record, index){
        	// only add loaded recs for deletion
        	/*if (typeof(record.get('id')) == 'number') {
        		_store.removeIds.push(record.get('id'));
        	} else*/ 
        	
        	if (isNaN(record.get('id'))) {
				
				for (i = 0; i < this.addIds.length; i++) {
					
					if (this.addIds[i] == record.get('id')) {
						this.addIds.splice(i,1);
						break;
					}
					
				}

			}

        	if (false === this.pEditor.hasChanges()) {
        		this.fireEvent('MSG','reset',this);
        	}
        	
        });
		
	},
	
	/**
	 * 
	 */
	getRecord: function() {
		return new Pulse.Record.create([
			{ name: 'id' }, // contains the price.id
			{ name: 'clazz' }, // fq-className
			{ name: 'name' },
			{ name: 'percentage' }
        ]);
	},
	
	/**
	 * 
	 */
	getRenderer: function(field) {
		
		try {
			
			fieldUP = field.toUpperCase();
			
			switch(fieldUP) {
				
				case 'ID':
					renderer = function(v, leftNeighBourCell, rec, rowIdx, colIdx, store) {
						try {
							if (typeof(v) == 'number') {
								return v;
							} else {
								return '*';
							}
						} catch (re) {
							return v + ' : ' + re;
						}
					};
					break;
					
				default:
					FATAL(field,this,'getRenderer','NO MATCHING RENDERER');
					return;
					
			}
			
			return renderer;
		
		} catch(e) {
			FATAL(field,this,'getRenderer','CANNOT PROCESS FIELD');
			return;
		}
	},
	
	/**
	 * 
	 */
	getHeight: function() {
		if (typeof(this.initialConfig.height) == 'number') {
			return this.initialConfig.height;
		}
		if (typeof(this.renderTo) == 'object' && this.renderTo !== null 
				&& this.renderTo.type == 'SubEditorPanel') {
			return this.renderTo.getInnerHeight()-1;
		}
		if (typeof(this.grid) == 'undefined') {
			return;
		}
		return this.grid.getSize().height;
	},
	
	/**
	 * 
	 */
	getChanges: function(v) {
		
		if (typeof(this.valPrefix) == 'undefined') {
			this.valPrefix = '';
		}
		
		v = Pulse.ShopTaxGroupsEditor.superclass.getChanges.call(this, v);
		
		if (true === this.hasChanges()) {
			if (typeof(v) == 'undefined' || v === null) {
				v = {};
			}
			try {
				
				// added records
				if (this.store.addIds.length > 0) {
					for (i = 0; i < this.store.addIds.length; i++) {						
						/*FATAL(addRecs[i].data,this,'getChanges');*/
						rec = this.store.getAt(this.store.find('id',this.store.addIds[i]));
						prefix = this.valPrefix + 'taxGroup_' + rec.get('id') + '_';
						for (o in rec.data) {
							valString = prefix + o;
							v[valString] = rec.data[o];
						}						
					}
					
				}
				
				// modified records
				modRecs = this.store.getModifiedRecords();
				if (modRecs.length > 0) {
					
					for (i = 0; i < modRecs.length; i++) {
						
						rec = modRecs[i];						
						prefix = this.valPrefix + 'taxGroup_' + rec.get('id') + '_';
						
						if (typeof(rec.get('id')) == 'string') {
							continue;
						} else {
							chg = rec.getChanges();
							for (o in chg) {
								valString = prefix + o;
								v[valString] = chg[o];
							}		
						}
								
					}
					
				}
				
				// removed records
				/*if (this.store.removeIds.length > 0) {
					v[this.valPrefix + 'removeTaxGroupIds'] = this.store.removeIds;
				}*/
				
			} catch (e) {
				// DBG >>
				if (this.DBG) {
					FATAL(e,this,'getChanges');
				}
			}
		}
		
		return v;
	},
	
	/**
	 * 
	 */
	hasChanges: function() {
		
		superBool = Pulse.ShopTaxGroupsEditor.superclass.hasChanges.call(this);
		
		bool = ((this.store.getModifiedRecords().length > 0) 
			/*|| (this.store.removeIds.length > 0)*/
			|| (this.store.addIds.length > 0));
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,p:[{n:'superBool',o:superBool},{n:'bool',o:bool}]},this,'hasChanges.ShopTaxGroupsEditor');
		}
		
		return superBool || bool;
	},
	
	/**
	 * 
	 */
	commit: function(v) {
		
		Pulse.ShopTaxGroupsEditor.superclass.commit.call(this);
		
		this.store.commitChanges();
		/*this.store.removeIds = [];*/
		this.store.addIds = [];
		
		this.fireEvent('MSG','commit',this);
	},
	
	/**
	 * 
	 */
	reset: function() {
		
		Pulse.ShopTaxGroupsEditor.superclass.reset.call(this);
		
		this.store.rejectChanges();
		/*this.store.removeIds = [];*/
		this.store.addIds = [];
		
		this.fireEvent('MSG','reset',this);
	}
	
};
Pulse.ShopTaxGroupsEditor = Ext.extend(Pulse.Editor,ShopTaxGroupsEditor); // END :: Pulse.ShopTaxGroupsEditor


/**
 * definition of the user-interface for a Statistics-tree-node
 */
PULSE.GroupAnalysisTreeNodeUI = function() {
	// call parent constructor
	PULSE.GroupAnalysisTreeNodeUI.superclass.constructor.apply(this, arguments);
};

// extend
Ext.extend(PULSE.GroupAnalysisTreeNodeUI, Ext.tree.TreeNodeUI, {

	cellwidth : '75px',
	cellbordercolor : '#99BBE8',

	/**
	 * @Override
	 */
	renderElements : function(n, a, targetNode, bulkRender) {

		// add some indent caching, this helps performance when
		// rendering a large tree
		this.indentMarkup = n.parentNode
				? n.parentNode.ui.getChildIndent()
				: '';

		var href = a.href ? a.href : Ext.isGecko ? "" : "#";
		var buf = [
				'<li class="x-tree-node">',

				'<div ext:tree-node-id="',
				n.id,
				'" class="x-tree-node-el x-tree-node-leaf ',
				a.cls,
				'" style="border-bottom:1px dotted '
						+ this.cellbordercolor + ';',
				(n.parentNode === null) ? 'border-top:1px dotted '
						+ this.cellbordercolor + ';">' : '">',

				'<span class="x-tree-node-indent">',
				this.indentMarkup,
				'</span>',

				'<img src="',
				this.emptyIcon,
				'" class="x-tree-ec-icon x-tree-elbow" />',

				'<a hidefocus="on" class="x-tree-node-anchor" href="',
				href,
				'" tabIndex="1" ',
				a.hrefTarget ? ' target="' + a.hrefTarget + '"' : '',
				' dir="LTR"><span unselectable="on">',
				n.text,
				'</span></a>',

				'<div style="float:right;margin:0;padding:0;',
				(true === Ext.isGecko || true === Ext.isIE7)
						? 'position:relative;top:-18px;margin:0 0 -18px 0;">'
						: '">',
				this.createField(a.leaves),
				this.createField(a.entries),
				this.createField(a.childBounces),
				this.createField(a.bounces),
				this.createField(a.childHits),
				this.createField(a.hits),
				this.createField(parseInt(a.hits, 10)
						+ parseInt(a.childHits, 10)), '</div>',

				'</div>',

				'<ul class="x-tree-node-ct" style="display:none;"></ul>',
				'</li>'].join('');

		if (bulkRender !== true && n.nextSibling && n.nextSibling.ui.getEl()) {
			this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
					n.nextSibling.ui.getEl(), buf);
		} else {
			this.wrap = Ext.DomHelper.insertHtml("beforeEnd", targetNode, buf);
		}

		this.elNode = this.wrap.childNodes[0];
		this.ctNode = this.wrap.childNodes[1];
		var cs = this.elNode.childNodes;
		this.indentNode = cs[0];
		this.ecNode = cs[1];
		this.anchor = cs[2];
		this.textNode = cs[2].firstChild;

	},

	// private
	createField : function(string) {
		return '<div style="border-left:1px dotted ' + this.cellbordercolor
				+ ';padding:0 4px 0 4px;width:' + this.cellwidth
				+ ';float:right;margin:0;">' + string + '</div>';
	},

	// private
	beforeLoad : function() {
		if (this.textNode) {
			Ext.fly(this.textNode).setStyle('font-style', 'italic');
		}
	},

	// private
	afterLoad : function() {
		if (this.textNode) {
			Ext.fly(this.textNode).setStyle('font-style', 'normal');
		}
	},

	/**
	 * @Override
	 */
	updateExpandIcon : function() {
		if (this.rendered) {
			var n = this.node, c1, c2;
			var cls = n.isLast() ? "x-tree-elbow-end" : "x-tree-elbow";
			var hasChild = n.hasChildNodes();
			if ((hasChild || n.attributes.expandable)
					&& n.attributes.expandable !== 'false') {
				if (n.expanded) {
					cls += "-minus";
					c1 = "x-tree-node-collapsed";
					c2 = "x-tree-node-expanded";
				} else {
					cls += "-plus";
					c1 = "x-tree-node-expanded";
					c2 = "x-tree-node-collapsed";
				}
				if (this.wasLeaf) {
					this.removeClass("x-tree-node-leaf");
					this.wasLeaf = false;
				}
				if (this.c1 != c1 || this.c2 != c2) {
					Ext.fly(this.elNode).replaceClass(c1, c2);
					this.c1 = c1;
					this.c2 = c2;
				}
			} else {
				if (!this.wasLeaf) {
					Ext.fly(this.elNode).replaceClass("x-tree-node-expanded",
							"x-tree-node-leaf");
					delete this.c1;
					delete this.c2;
					this.wasLeaf = true;
				}
			}
			var ecc = "x-tree-ec-icon " + cls;
			if (this.ecc != ecc) {
				this.ecNode.className = ecc;
				this.ecc = ecc;
			}
		}
	}

}); // end of extend

/**
 * @Override
 */
PULSE.GroupAnalysisRootTreeNodeUI = function() {
	PULSE.GroupAnalysisRootTreeNodeUI.superclass.constructor.apply(this,
			arguments);
};
Ext.extend(PULSE.GroupAnalysisRootTreeNodeUI, PULSE.GroupAnalysisTreeNodeUI, {
			render : function() {
				if (!this.rendered) {
					/* var */targetNode = this.node.ownerTree.innerCt.dom;
					this.node.expanded = true;
					targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
					this.wrap = this.ctNode = targetNode.firstChild;
				}
			},
			collapse : function() {
			},
			expand : function() {
			}
		});
// end of file

/**
 * definition of the user-interface for a Statistics-tree-node
 */
PULSE.RefererAnalysisTreeNodeUI = function() {
	// call parent constructor
	PULSE.RefererAnalysisTreeNodeUI.superclass.constructor.apply(this,
			arguments);
};

// extend
Ext.extend(PULSE.RefererAnalysisTreeNodeUI, Ext.tree.TreeNodeUI, {

			cellbordercolor : '#99BBE8',

			/**
			 * @Override
			 */
			renderElements : function(n, a, targetNode, bulkRender) {

				// add some indent caching, this helps performance when
				// rendering a large tree
				this.indentMarkup = n.parentNode ? n.parentNode.ui
						.getChildIndent() : '';

				var href = a.href ? a.href : Ext.isGecko ? "" : "#";
				var buf = [
						'<li class="x-tree-node">',

						'<div ext:tree-node-id="',
						n.id,
						'" class="x-tree-node-el x-tree-node-leaf ',
						a.cls,
						'" style="border-bottom:1px dotted '
								+ this.cellbordercolor + ';',
						(n.parentNode === null) ? 'border-top:1px dotted '
								+ this.cellbordercolor + ';">' : '">',

						'<span class="x-tree-node-indent">',
						this.indentMarkup,
						'</span>',

						'<img src="',
						this.emptyIcon,
						'" class="x-tree-ec-icon x-tree-elbow" />',

						'<a hidefocus="on" class="x-tree-node-anchor" href="',
						href,
						'" tabIndex="1" ',
						a.hrefTarget ? ' target="' + a.hrefTarget + '"' : '',
						' dir="LTR"><span unselectable="on">',
						n.text,
						'</span></a>',

						'<div style="float:right;width:60%;margin:0;padding:0;',
						(true === Ext.isGecko || true === Ext.isIE7)
								? 'position:relative;top:-18px;margin:0 0 -18px 0;">'
								: '">',
						this.createField(a.hits),
						'</div>',

						"</div>",
						'<ul class="x-tree-node-ct" style="display:none;"></ul>',
						"</li>"].join('');

				if (bulkRender !== true && n.nextSibling
						&& n.nextSibling.ui.getEl()) {
					this.wrap = Ext.DomHelper.insertHtml("beforeBegin",
							n.nextSibling.ui.getEl(), buf);
				} else {
					this.wrap = Ext.DomHelper.insertHtml("beforeEnd",
							targetNode, buf);
				}

				this.elNode = this.wrap.childNodes[0];
				this.ctNode = this.wrap.childNodes[1];
				var cs = this.elNode.childNodes;
				this.indentNode = cs[0];
				this.ecNode = cs[1];
				this.anchor = cs[2];
				this.textNode = cs[2].firstChild;
			},

			// private
			createField : function(string) {
				return '<div style="border-left:1px dotted '
						+ this.cellbordercolor
						+ ';padding:0 4px 0 4px;float:left;">' + string
						+ '</div>';
			},

			// private
			beforeLoad : function() {
				if (this.textNode) {
					Ext.fly(this.textNode).setStyle('font-style', 'italic');
				}
			},

			// private
			afterLoad : function() {
				if (this.textNode) {
					Ext.fly(this.textNode).setStyle('font-style', 'normal');
				}
			},

			/**
			 * @Override
			 */
			updateExpandIcon : function() {
				if (this.rendered) {
					var n = this.node, c1, c2;
					var cls = n.isLast() ? "x-tree-elbow-end" : "x-tree-elbow";
					var hasChild = n.hasChildNodes();
					if ((hasChild || n.attributes.expandable)
							&& n.attributes.expandable !== 'false') {
						if (n.expanded) {
							cls += "-minus";
							c1 = "x-tree-node-collapsed";
							c2 = "x-tree-node-expanded";
						} else {
							cls += "-plus";
							c1 = "x-tree-node-expanded";
							c2 = "x-tree-node-collapsed";
						}
						if (this.wasLeaf) {
							this.removeClass("x-tree-node-leaf");
							this.wasLeaf = false;
						}
						if (this.c1 != c1 || this.c2 != c2) {
							Ext.fly(this.elNode).replaceClass(c1, c2);
							this.c1 = c1;
							this.c2 = c2;
						}
					} else {
						if (!this.wasLeaf) {
							Ext.fly(this.elNode).replaceClass(
									"x-tree-node-expanded", "x-tree-node-leaf");
							delete this.c1;
							delete this.c2;
							this.wasLeaf = true;
						}
					}
					var ecc = "x-tree-ec-icon " + cls;
					if (this.ecc != ecc) {
						this.ecNode.className = ecc;
						this.ecc = ecc;
					}
				}
			}

		}); // end of extend

/**
 * @Override
 */
PULSE.RefererAnalysisRootTreeNodeUI = function() {
	PULSE.RefererAnalysisRootTreeNodeUI.superclass.constructor.apply(this,
			arguments);
};
Ext.extend(PULSE.RefererAnalysisRootTreeNodeUI,
		PULSE.RefererAnalysisTreeNodeUI, {
			render : function() {
				if (!this.rendered) {
					/* var */targetNode = this.node.ownerTree.innerCt.dom;
					this.node.expanded = true;
					targetNode.innerHTML = '<div class="x-tree-root-node"></div>';
					this.wrap = this.ctNode = targetNode.firstChild;
				}
			},
			collapse : function() {
			},
			expand : function() {
			}
		});
// end of file

/**
 * 
 */
Pulse.UserStatistics = {

	/**
	 * 
	 */
	open : function(url, title) {
		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'Pulse.UserStatistics',
					title : title,
					iconCls : 'statisticsIconCls',
					loadParams : {
						url : url
					}
				});
	},

	/**
	 * 
	 */
	insertPDFExportButton : function(url, text) {
		Pulse.Statistics.insertExportButton(url, text, 'Pulse.UserStatistics',
				'PDF');
	}

};
/**
 * 
 */
Pulse.Statistics = {

	/**
	 * 
	 */
	open : function(url, title) {
		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'Pulse.Statistics',
					title : title,
					iconCls : 'statisticsIconCls',
					loadParams : {
						url : url
					}
				});
	},

	/**
	 * 
	 */
	getBaseParams : function() {
		return {
			serverId : Pulse.Statistics.serverSelector.getValue()
		};
	},

	/**
	 * 
	 */
	initStatisticsOverView : function(url, title) {
		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'Pulse.Statistics.OverView.'
							+ Pulse.Statistics.serverSelector.getValue(),
					title : '<span style="color:blue;float:left;">'
							+ Pulse.Statistics.serverSelector
									.getTextFieldValue() + '</span> - ' + title,
					iconCls : 'statisticsIconCls',
					loadParams : {
						url : url,
						params : Pulse.Statistics.getBaseParams()
					}
				});
	},

	/**
	 * 
	 */
	initStatisticsGroupAnalysisView : function(url, title) {
		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'Pulse.Statistics.GroupAnalysisView.'
							+ Pulse.Statistics.serverSelector.getValue(),
					title : '<span style="color:blue;float:left;">'
							+ Pulse.Statistics.serverSelector
									.getTextFieldValue() + '</span> - ' + title,
					iconCls : 'statisticsIconCls',
					loadParams : {
						url : url,
						params : Pulse.Statistics.getBaseParams()
					}
				});
	},

	/**
	 * 
	 */
	initStatisticsTimeAnalysisView : function(url, title) {
		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'Pulse.Statistics.TimeAnalysisView.'
							+ Pulse.Statistics.serverSelector.getValue(),
					title : '<span style="color:blue;float:left;">'
							+ Pulse.Statistics.serverSelector
									.getTextFieldValue() + '</span> - ' + title,
					iconCls : 'statisticsIconCls',
					loadParams : {
						url : url,
						params : Pulse.Statistics.getBaseParams()
					}
				});
	},

	/**
	 * 
	 */
	initStatisticsTechnicalInformationView : function(url, title) {
		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'Pulse.Statistics.TechnicalInformationView.'
							+ Pulse.Statistics.serverSelector.getValue(),
					title : '<span style="color:blue;float:left;">'
							+ Pulse.Statistics.serverSelector
									.getTextFieldValue() + '</span> - ' + title,
					iconCls : 'statisticsIconCls',
					loadParams : {
						url : url,
						params : Pulse.Statistics.getBaseParams()
					}
				});
	},

	/**
	 * 
	 */
	initStatisticsRefererAnalysisView : function(url, title) {
		PULSE_VIEWPORT_CONTROLLER.openTab({
					id : 'Pulse.Statistics.RefererAnalysisView.'
							+ Pulse.Statistics.serverSelector.getValue(),
					title : '<span style="color:blue;float:left;">'
							+ Pulse.Statistics.serverSelector
									.getTextFieldValue() + '</span> - ' + title,
					iconCls : 'statisticsIconCls',
					loadParams : {
						url : url,
						params : Pulse.Statistics.getBaseParams()
					}
				});
	},

	/**
	 * 
	 */
	initServerSelector : function(options) {

		if (typeof(Pulse.Statistics.serverSelector) != 'undefined'
				&& Pulse.Statistics.serverSelector instanceof Ext.form.ComboBox) {
			return;
		}

		// create spacer
		spacer = Ext.getCmp(options.westPanelId).getTopToolbar().insertButton(
				0, new Ext.Toolbar.Spacer());

		// insert div for combo-box
		el = Ext.get(spacer.getEl()).insertHtml('beforeBegin', '<div> </div>',
				true);

		// retrieve combo-box-data
		data = Pulse.Statistics.buildServerSelectorData(options.servers);

		// build server-select-box
		Pulse.Statistics.serverSelector = new Ext.form.ComboBox({
					renderTo : el,
					store : new Ext.data.SimpleStore({
								fields : ['id', 'hostName'],
								sortInfo : {
									field : 'hostName',
									direction : "ASC"
								},
								data : data
							}),
					displayField : 'hostName',
					valueField : 'id',
					mode : 'local',
					triggerAction : 'all',
					editable : false,
					allowBlank : false,
					forceSelection : true,
					listWidth : 200
				});

		Pulse.Statistics.serverSelector.getTextFieldValue = function() {
			return this.el.getValue();
		};

		// select first
		if (data.length > 0) {
			Pulse.Statistics.serverSelector.setValue(data[0][0]);
		}

	},

	/**
	 * 
	 */
	buildServerSelectorData : function(servers) {
		serversData = [];
		for (var i = 0; i < servers.length; i++) {
			serversData.push([servers[i].id.toString(), servers[i].hostName]);
		}
		return serversData;
	},

	/**
	 * 
	 */
	insertExportButton : function(url, text, tabId, type) {
		tab = Ext.getCmp(tabId);
		scope = {
			url : url,
			tabId : tabId
		};
		buttonCfg = {
			id : tabId + '.export.' + type,
			text : (typeof(text) == 'string' && text !== '') ? text : type,
			scope : scope,
			handler : function() {
				tab = Ext.getCmp(this.tabId);
				if (typeof(tab) == 'undefined'
						|| typeof(tab.statisticsToolbar) == 'undefined') {
					document.location.href = this.url;
					return;
				}
				document.location.href = tab.statisticsToolbar
						.appendDuration(this.url);
			},
			iconCls : 'file' + type + 'IconCls',
			disabled : true
		};
		if (typeof(url) == 'string' && url !== '') {
			buttonCfg.disabled = false;
		}
		tab.getTopToolbar().insertButton(0, new Ext.Toolbar.Separator());
		tab.getTopToolbar().insertButton(0, buttonCfg);
	},

	/**
	 * 
	 */
	initStatisticsToolbar : function(options) {

		// load-button configuration
		loadButtonCfg = {
			scope : options.tab,
			handler : function() {
				if (typeof(this.pulseLoadConfig.loadParams.params) == 'object') {
					this.pulseLoadConfig.loadParams.params.duration = this.statisticsToolbar
							.getDuration();
					if (typeof(this.statisticsToolbar.getResolution) == 'function') {
						this.pulseLoadConfig.loadParams.params.resolution = this.statisticsToolbar
								.getResolution();
					}
				} else {
					params = {
						duration : this.statisticsToolbar.getDuration
					};
					if (typeof(this.statisticsToolbar.getResolution()) == 'function') {
						params.resolution = this.statisticsToolbar
								.getResolution();
					}
					this.pulseLoadConfig.loadParams.params = params;
				}
				PULSE_VIEWPORT_CONTROLLER.reloadTab(this);
			},
			iconCls : 'arrowForwardIconCls'
		};

		loadPeriodButtonCfg = {
			iconCls : 'arrowForwardIconCls',
			handler : function() {
				this.showMenu();
			},
			menu : {
				items : [{
					scope : options.tab,
					text : 'DAY',
					// iconCls: 'arrowForwardIconCls',
					handler : function() {
						if (typeof(this.pulseLoadConfig.loadParams.params) == 'object') {
							this.pulseLoadConfig.loadParams.params.duration = 'DAY';
							if (typeof(this.statisticsToolbar.getResolution) == 'function') {
								this.pulseLoadConfig.loadParams.params.resolution = this.statisticsToolbar
										.getResolution();
							}
						} else {
							params = {
								duration : 'DAY'
							};
							if (typeof(this.statisticsToolbar.getResolution()) == 'function') {
								params.resolution = this.statisticsToolbar
										.getResolution();
							}
							this.pulseLoadConfig.loadParams.params = params;
						}
						PULSE_VIEWPORT_CONTROLLER.reloadTab(this);
					}
				}, {
					scope : options.tab,
					text : 'WEEK',
					// iconCls: 'arrowForwardIconCls',
					handler : function() {
						if (typeof(this.pulseLoadConfig.loadParams.params) == 'object') {
							this.pulseLoadConfig.loadParams.params.duration = 'WEEK';
							if (typeof(this.statisticsToolbar.getResolution) == 'function') {
								this.pulseLoadConfig.loadParams.params.resolution = this.statisticsToolbar
										.getResolution();
							}
						} else {
							params = {
								duration : 'WEEK'
							};
							if (typeof(this.statisticsToolbar.getResolution()) == 'function') {
								params.resolution = this.statisticsToolbar
										.getResolution();
							}
							this.pulseLoadConfig.loadParams.params = params;
						}
						PULSE_VIEWPORT_CONTROLLER.reloadTab(this);
					}
				}, {
					scope : options.tab,
					text : 'MONTH',
					// iconCls: 'arrowForwardIconCls',
					handler : function() {
						if (typeof(this.pulseLoadConfig.loadParams.params) == 'object') {
							this.pulseLoadConfig.loadParams.params.duration = 'MONTH';
							if (typeof(this.statisticsToolbar.getResolution) == 'function') {
								this.pulseLoadConfig.loadParams.params.resolution = this.statisticsToolbar
										.getResolution();
							}
						} else {
							params = {
								duration : 'MONTH'
							};
							if (typeof(this.statisticsToolbar.getResolution()) == 'function') {
								params.resolution = this.statisticsToolbar
										.getResolution();
							}
							this.pulseLoadConfig.loadParams.params = params;
						}
						PULSE_VIEWPORT_CONTROLLER.reloadTab(this);
					}
				}, {
					scope : options.tab,
					text : 'YEAR',
					// iconCls: 'arrowForwardIconCls',
					handler : function() {
						if (typeof(this.pulseLoadConfig.loadParams.params) == 'object') {
							this.pulseLoadConfig.loadParams.params.duration = 'YEAR';
							if (typeof(this.statisticsToolbar.getResolution) == 'function') {
								this.pulseLoadConfig.loadParams.params.resolution = this.statisticsToolbar
										.getResolution();
							}
						} else {
							params = {
								duration : 'YEAR'
							};
							if (typeof(this.statisticsToolbar.getResolution()) == 'function') {
								params.resolution = this.statisticsToolbar
										.getResolution();
							}
							this.pulseLoadConfig.loadParams.params = params;
						}
						PULSE_VIEWPORT_CONTROLLER.reloadTab(this);
					}
				}]
			}

		};
		// 
		statisticsToolbar = {
			getDuration : function() {
				return this.dateFromField.getValue(true).getTime() + '-'
						+ this.dateToField.getValue(true).getTime();
			},
			appendDuration : function(url) {
				if (typeof(url) != 'string' || url === '') {
					throw (this + '.appendDuration(url): Invalid url given');
				}
				if (url.indexOf('?') === -1) {
					return url + '?duration=' + this.getDuration();
				} else {
					return url + '&duration=' + this.getDuration();
				}
			}
		};

		// add load-button to toolbar
		options.tab.getTopToolbar()
				.insertButton(0, new Ext.Toolbar.Separator());
		options.tab.getTopToolbar().insertButton(0,
				new Ext.Toolbar.SplitButton(loadPeriodButtonCfg));
		options.tab.getTopToolbar()
				.insertButton(0, new Ext.Toolbar.Separator());
		options.tab.getTopToolbar().insertButton(0,
				new Ext.Toolbar.Button(loadButtonCfg));
		options.tab.getTopToolbar().insertButton(0,
				new Ext.Toolbar.TextItem('&#160;'));

		// create spacer
		spacer_To = options.tab.getTopToolbar().insertButton(0,
				new Ext.Toolbar.Spacer());

		// TO: insert div for data-picker
		el_To = Ext.get(spacer_To.getEl()).insertHtml('beforeBegin',
				'<div> </div>', true);

		// TO: build date-picker
		statisticsToolbar.dateToField = new Pulse.Statistics.DateField({
					renderTo : el_To,
					allowBlank : false,
					readOnly : true,
					width : 175,
					setValueModeEnd : true
				});

		// separator
		options.tab.getTopToolbar().insertButton(0,
				new Ext.Toolbar.TextItem('&#160;-&#160;'));

		// create spacer
		spacer_From = options.tab.getTopToolbar().insertButton(0,
				new Ext.Toolbar.Spacer());

		// FROM: insert div for data-picker
		el_From = Ext.get(spacer_From.getEl()).insertHtml('beforeBegin',
				'<div> </div>', true);

		// FROM: build date-picker
		statisticsToolbar.dateFromField = new Pulse.Statistics.DateField({
					renderTo : el_From,
					allowBlank : false,
					readOnly : true,
					width : 175
				});

		// FROM
		fDate = new Date(options.from);
		fDate.isFromServer = true;
		statisticsToolbar.dateFromField.setValue(fDate);

		// TO
		tDate = new Date(options.to);
		tDate.isFromServer = true;
		statisticsToolbar.dateToField.setValue(tDate);

		// RESOLUTIONS
		if (true === Ext.isArray(options.resolutions)) {

			// create spacer
			options.tab.getTopToolbar().insertButton(0,
					new Ext.Toolbar.TextItem('&#160;'));
			spacer_Resolutions = options.tab.getTopToolbar().insertButton(0,
					new Ext.Toolbar.Spacer());

			// RESOLUTIONS: insert div for combo
			el_Resolutions = Ext.get(spacer_Resolutions.getEl()).insertHtml(
					'beforeBegin', '<div> </div>', true);

			statisticsToolbar.resolutionsField = new Ext.form.ComboBox({
						renderTo : el_Resolutions,
						store : new Ext.data.SimpleStore({
									fields : ['resolution'],
									sortInfo : {
										field : 'resolution',
										direction : "ASC"
									},
									data : options.resolutions
								}),
						displayField : 'resolution',
						valueField : 'resolution',
						mode : 'local',
						triggerAction : 'all',
						allowBlank : false,
						readOnly : true,
						forceSelection : true,
						width : 70
					});

			statisticsToolbar.getResolution = function() {
				return this.resolutionsField.getValue();
			};

			if (typeof(options.resolution) == 'string'
					&& options.resolution !== '') {
				statisticsToolbar.resolutionsField.setValue(options.resolution);
			}

			options.tab.getTopToolbar().insertButton(0,
					new Ext.Toolbar.TextItem('res:&#160;'));
		}

		// add export-buttons
		if (Ext.isArray(options.exports) && options.exports.length > 0) {
			for (var i = 0; i < options.exports.length; i++) {
				Pulse.Statistics.insertExportButton(options.exports[i].url,
						options.exports[i].text, options.tab.id,
						options.exports[i].type);
			}
		}

		// set toolbar for tab
		options.tab.statisticsToolbar = statisticsToolbar;

		// init clearSessionDataURL listener
		if (typeof(options.clearSessionDataURL) == 'string'
				&& options.clearSessionDataURL !== '') {
			options.tab.on('destroy', function() {
						Ext.Ajax.request({
									url : this.clearSessionDataURL,
									method : 'POST',
									params : {
										serverId : this.serverId
									}
								});
					}, options);
		}
	},

	/**
	 * 
	 */
	initGFXel : function(options) {
		if (typeof(options) != 'object' || options === null) {
			return;
		}
		if (typeof(options.url) != 'string' || options.url === '') {
			return;
		}
		// pnl = new Ext.Panel({
		// header:false,
		// border: false,
		// bodyBorder: false,
		// renderTo: options.id,
		// html: ''
		// });
		// options.tab.add(pnl);
		div = Ext.get(options.id);
		strParams = 'serverId=' + options.serverId;
		strParams += '&duration=' + options.tab.statisticsToolbar.getDuration();

		src = options.url;
		if (src.indexOf('?') === -1) {
			src += '?' + strParams;
		} else {
			src += '&' + strParams;
		}

		src += '&' + new Date().getTime();

		div.elLoadOptions = {
			// el: div,
			src : src,
			xy : (typeof(options.xy) != 'number') ? 1 / 2 : options.xy,
			widthOffset : options.widthOffset
		};

		options.tab.on('resize', function() {
					Pulse.Statistics.loadGFXel(this);
				}, div);

		Pulse.Statistics.loadGFXel(div);

	},

	/**
	 * 
	 */
	loadGFXel : function(el, additionalOptions) {
		if (typeof(el.elLoadOptions) != 'object' || el.elLoadOptions === null) {
			throw ({
				e : el + '.elLoadOptions UNDEFINED',
				description : 'Given el.elLoadOptions must not be undefined or null!'
			});
		}
		options = el.elLoadOptions;
		width = el.getSize().width - 25;
		if (typeof(options.widthOffset) == 'number') {
			width -= options.widthOffset;
		}

		src = options.src + '&width=' + Math.ceil(width) + '&height='
				+ Math.ceil(width * options.xy);

		if (typeof(additionalOptions) == 'object' && additionalOptions !== null) {
			for (var option in additionalOptions) {
				if (Pulse.Statistics
						.isValidAdditionalOption(additionalOptions[option])) {
					src += '&' + option + '=' + additionalOptions[option];
				}
			}
		}

		(function() {
			this.el.update('<img src="' + this.src + '" width="' + this.width
					+ '" ' + 'height="' + this.height
					+ '" style="border:0;padding:0;margin:0;"/>');
		}).defer(500, {
					el : el,
					src : src,
					width : Math.ceil(width),
					height : Math.ceil(width * options.xy)
				});
	},

	isValidAdditionalOption : function(value) {
		if (typeof(value) == 'string') {
			return true;
		}
		if (typeof(value) == 'number') {
			return true;
		}
		if (typeof(value) == 'boolean') {
			return true;
		}
		return false;
	}

};

Pulse.Statistics.DateField = Ext.extend(Ext.form.DateField, {

			setValue : function(date) {
				// dbg = 0 + ' date: ' + date + ', GMT: ' + date.toGMTString();
				if (true === date.isFromServer) {
					this.date = date;
				} else {
					this.date = new Date(date.getFullYear(), date.getMonth(),
							date.getDate(), 0, 0, 0, 0);

					// apply current timezone offset
					this.date.setTime(this.date.getTime()
							- (this.date.getTimezoneOffset() * 60000));

					// dbg += '\n' + 1 + ' this.date: ' + this.date + ', GMT: '
					// + this.date.toGMTString();

					// reset milliseconds
					if (this.setValueModeEnd === true) {
						this.date.setUTCMilliseconds(999);
						this.date.setUTCSeconds(59);
						this.date.setUTCMinutes(59);
						this.date.setUTCHours(23);
					} else {
						this.date.setUTCMilliseconds(0);
						this.date.setUTCSeconds(0);
						this.date.setUTCMinutes(0);
						this.date.setUTCHours(0);
					}

					// dbg += '\n' + 2 + ' this.date: ' + this.date + ', GMT: '
					// + this.date.toGMTString();

				}
				// alert(dbg);
				this.setRawValue(this.date.toUTCString());
			},
			validateValue : function() {
				return true;
			},
			getValue : function(bool) {
				if (true === bool) {
					return this.date;
				}
				if (this.date instanceof Date) {
					return new Date(this.date.getUTCFullYear(), this.date
									.getUTCMonth(), this.date.getUTCDate());
				}
			}
		});
/**
 * 
 */
Pulse.StatisticsTrees = {

	// 5 minutes in milliseconds
	FIVE_MINUTES : 1000 * 60 * 5,

	/**
	 * 
	 */
	initGroupAnalysisView : function(options) {

		// alert("called");

		loaderConf = {
			dataUrl : options.dataURL,
			uiProviders : {
				'GroupAnalysisTreeNodeUI' : PULSE.GroupAnalysisTreeNodeUI
			},
			baseParams : {
				serverId : options.server.id,
				duration : options.duration
			}
		};

		// alert(1);

		loader = new Pulse.StatisticsTrees.Loader(loaderConf);
		loader.on('beforeload', function(loader, node, callback) {
					this.tab.disable();
				}, options);
		loader.on('load', function(loader, node, response) {
					if (true === loader.baseParams.loadMaximumNumberOfNodes) {
						delete loader.baseParams.loadMaximumNumberOfNodes;
					}
					this.tab.enable();
				}, options);
		loader.on('loadexception', function(loader, node, response) {
			if (true === loader.baseParams.loadMaximumNumberOfNodes) {
				delete loader.baseParams.loadMaximumNumberOfNodes;
			}
			// this.tab.enable();
			// if (typeof(response) != 'object') {
			// alert(loader + '\n' + node + '\n' + response);
			// } else {
			// responseContent = '\nresponse:';
			// for (var o in response) {
			// responseContent += '\n' + o + ': ' + response[o];
			// }
			// alert(loader + '\n' + node + responseContent);
			// }
			try {
				var res = eval("(" + response.responseText + ")");
				// resContent = '\nres:';
				// for (var o in res) {
				// resContent += '\n' + o + ': ' + res[o];
				// }
				// alert(resContent);
				if (typeof(res.error) == 'object' && res.error !== null) {
					if (res.error['@type'] == 'EXCEEDS_MAX_NODES_TO_BE_DISPLAYED') {
						this.node = node;
						Ext.Msg
								.confirm(
										res.error['@type'],
										'This node has <b>'
												+ res.error.message
												+ '</b> children, but the display limit is: <b>'
												+ res.configuration['max-nodes-to-be-displayed']
												+ '</b>.<br/><br/>If you continue <b>'
												+ res.configuration['max-nodes-to-be-displayed']
												+ '</b> nodes will be loaded.'
												+ '<br/><br/>Do you want to continue?',
										function(text) {
											// args = '\nargs: ' + arguments;
											// var i = 0;
											// while (i < arguments.length) {
											// args += '\n' + i + ': '
											// + arguments[i];
											// i++;
											// }
											// alert(args);
											if (text === 'yes') {
												this.node.getOwnerTree()
														.getLoader().baseParams.loadMaximumNumberOfNodes = true;
												this.node.reload();
											} else {
												this.node.collapse();
												this.node.loaded = false;
												this.tab.enable();
											}
										}, this);
						return;
					} else {
						throw ({
							name : res.error['@type'],
							description : res.error.message
						});
					}
				} else {
					throw ({
						description : 'An undefined loader exception has occurred.\n'
					});
				}
			} catch (e) {
				descr = '';
				if (typeof(e.description) != 'undefined') {
					descr += e.description;
				}
				if (typeof(e.message) != 'undefined') {
					if (descr !== '') {
						descr += '; ';
					}
					descr += e.message;
				}
				if (typeof(e) == 'object' && typeof(e.name) == 'string'
						&& e.name !== '') {
					Ext.Msg.alert('error', e.name + ': ' + descr, function() {
								this.tab.enable();
							}, this);
				} else {
					eString = '';
					if (typeof(e) == 'object' && e !== null) {
						for (var o in e) {
							if (typeof(e[o]) != 'function') {
								eString += '<br/>{' + o + '}: ' + e[o];
							}
						}
					} else {
						eString += '<br/>' + e;
					}
					Ext.Msg.alert('error', 'An error has occured: ' + descr
									+ eString, function() {
								this.tab.enable();
							}, this);
				}
			}
		}, options);

		// alert(2);

		root = new Ext.tree.AsyncTreeNode({
					text : ''/* options.server.hostName */,
					draggable : false,
					allowDrop : false,
					id : 'root.' + options.server.id
				});

		// alert(3);

		tree = new Ext.tree.TreePanel({
					id : options.renderTo + '.tree',
					renderTo : options.renderTo,
					autoScroll : true,
					autoHeight : true,
					animate : true,
					enableDD : false,
					containerScroll : true,
					rootVisible : false,
					border : false,
					bodyStyle : 'margin:0px;padding:0px;',
					loader : loader,
					root : root
				});

		// alert(Pulse.StatisticsTrees.isURL(options.contextMenu.deleteNodeURL)
		// + ':\n'
		// + options.contextMenu.deleteNodeURL
		// + '\n\n'
		// + Pulse.StatisticsTrees
		// .isURL(options.contextMenu.degunkNodeURL) + ':\n'
		// + options.contextMenu.degunkNodeURL);

		if (Pulse.StatisticsTrees.isURL(options.contextMenu.deleteNodeURL)
				|| Pulse.StatisticsTrees
						.isURL(options.contextMenu.degunkNodeURL)) {
			tree.menu = new Ext.menu.Menu({
				items : [{
					text : options.contextMenu.deleteNodeText,
					disabled : !Pulse.StatisticsTrees
							.isURL(options.contextMenu.deleteNodeURL),
					scope : {
						tree : tree,
						options : options
					},
					handler : function() {
						this.node = this.tree.selectedNode;
						Ext.Msg
								.confirm(
										this.tree.selectedNode.text,
										'Do you really want to delete: <b>'
												+ this.tree.selectedNode.text
												+ '</b>?<br/><br/>This change <b>cannot</b> be reverted.',
										function(text) {
											if ('yes' === text) {
												Pulse.StatisticsTrees
														.deleteNodeGroupAnalysisView(this);
											}
										}, this);
					}
				}, {
					text : options.contextMenu.degunkNodeText,
					disabled : !Pulse.StatisticsTrees
							.isURL(options.contextMenu.degunkNodeURL),
					scope : {
						tree : tree,
						options : options
					},
					handler : function() {
						this.node = this.tree.selectedNode;
						Pulse.StatisticsTrees
								.showNodeGroupAnalysisViewDialog(this);
					}
				}]
			});

			tree.menu.on('hide', function() {
						delete this.selectedNode;
					}, tree);

			tree.on('contextmenu', function(node, evt) {
						// alert('' + node.text);
						this.tree.selectedNode = node;
						this.tree.menu.show(node.ui.getTextEl());
					}, {
						tree : tree,
						options : options
					});
		}
		// alert(4);

		root.expand();

		// alert('called2');

	},

	/**
	 * 
	 * @param {}
	 *            context : { tree: 'the current tree', node: 'the node to be
	 *            deleted', options: 'the options, e.g. contains the url' }
	 */
	deleteNodeGroupAnalysisView : function(context) {

		context.options.tab.disable();
		Ext.Ajax.request({
			url : context.options.contextMenu.deleteNodeURL,
			method : 'POST',
			scope : context,
			success : function(response, options) {
				this.options.tab.enable();
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {

					// refresh ui
					Pulse.StatisticsTrees.statisticsExpandContext = {
						node : this.node.parentNode.parentNode,
						id : this.node.parentNode.id
					};
					this.node.parentNode.parentNode.reload(function() {
						node = Pulse.StatisticsTrees.statisticsExpandContext.node
								.findChild(
										'id',
										Pulse.StatisticsTrees.statisticsExpandContext.id);
						if (typeof(node) == 'object' && node !== null) {
							node.expand();
							node.select();
						}
						delete Pulse.StatisticsTrees.statisticsExpandContext;
					});

				} else {
					PulseError.Throw({
								e : 'SERVER.ERROR',
								o : decodedResponse.error
							}, this.type,
							'statistics.deleteNodeGroupAnalysisView');
				}
			},
			failure : function(response, options) {
				this.options.tab.enable();
				if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({
								e : 'REQUEST.FAILED'
							}, this.type,
							'statistics.deleteNodeGroupAnalysisView');
				} else {
					PulseError.Throw({
								e : 'REQUEST.ERROR',
								o : {
									e : response.responseText
								}
							}, this.type,
							'statistics.deleteNodeGroupAnalysisView');
				}
			},
			params : {
				id : context.node.id
			}
		});

	},

	/**
	 * 
	 * @param {}
	 *            context, the scope of the dialogue
	 */
	showNodeGroupAnalysisViewDialog : function(context) {
		Ext.Msg
				.prompt(
						context.node.text,
						'Do you really want to degunk: <b>'
								+ context.node.text
								+ '</b>?<br/><br/>This change <b>cannot</b> be reverted.'
								+ '<br/><br/>This operation may take a while - '
								+ '<br/>depending on the number of child leaf nodes...'
								+ '<br/><br/>Number of leafs to keep:',
						function(text, value) {
							if ('ok' === text) {
								Pulse.StatisticsTrees
										.degunkNodeGroupAnalysisView(this,
												value);
							}
						}, context, false, '0');
	},

	/**
	 * 
	 * @param {}
	 *            context : { tree: 'the current tree', node: 'the node, the
	 *            children of which are to be degunked', options: 'the options,
	 *            e.g. contains the url' }
	 */
	degunkNodeGroupAnalysisView : function(context, value) {

		if (isNaN(value) || value < 0) {
			Ext.Msg.alert('error', 'Only numeric values &gt;= 0 are allowed!',
					function() {
						Pulse.StatisticsTrees
								.showNodeGroupAnalysisViewDialog(this);
					}, context);
			return;
		}

		context.options.tab.disable();
		Ext.Ajax.request({
			url : context.options.contextMenu.degunkNodeURL,
			method : 'POST',
			scope : context,
			timeout : 2 * Pulse.StatisticsTrees.FIVE_MINUTES,
			success : function(response, options) {
				this.options.tab.enable();
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
					// refresh ui
					Pulse.StatisticsTrees.statisticsExpandContext = {
						node : this.node.parentNode,
						id : this.node.id
					};
					this.node.parentNode.reload(function() {
						node = Pulse.StatisticsTrees.statisticsExpandContext.node
								.findChild(
										'id',
										Pulse.StatisticsTrees.statisticsExpandContext.id);
						if (typeof(node) == 'object' && node !== null) {
							node.expand();
							node.select();
						}
						delete Pulse.StatisticsTrees.statisticsExpandContext;
					});
				} else {
					PulseError.Throw({
								e : 'SERVER.ERROR',
								o : decodedResponse.error
							}, this.type,
							'statistics.degunkNodeGroupAnalysisView');
				}
			},
			failure : function(response, options) {
				this.options.tab.enable();
				if (typeof(response.responseText) == 'undefined') {
					PulseError.Throw({
								e : 'REQUEST.FAILED'
							}, this.type,
							'statistics.degunkNodeGroupAnalysisView');
				} else {
					PulseError.Throw({
								e : 'REQUEST.ERROR',
								o : {
									e : response.responseText
								}
							}, this.type,
							'statistics.degunkNodeGroupAnalysisView');
				}
			},
			params : {
				id : context.node.id,
				keep : value
			}
		});

	},

	/**
	 * 
	 */
	initRefererAnalysisView : function(options) {

		// alert("called");

		loaderConf = {
			dataUrl : options.dataURL,
			uiProviders : {
				'RefererAnalysisTreeNodeUI' : PULSE.RefererAnalysisTreeNodeUI
			},
			baseParams : {
				serverId : options.server.id,
				duration : options.duration
			}
		};

		// alert(1);

		loader = new Pulse.StatisticsTrees.Loader(loaderConf);
		loader.on('beforeload', function(loader, node, callback) {
					this.tab.disable();
				}, options);
		loader.on('load', function(loader, node, response) {
					this.tab.enable();
				}, options);
		loader.on('loadexception', function(loader, node, response) {
			try {
				var res = eval("(" + response.responseText + ")");
				if (typeof(res.error) == 'object' && res.error !== null) {
					throw ({
						name : res.error['@type'],
						description : res.error.message
					});
				} else {
					throw ({
						description : 'An undefined loader exception has occurred.\n'
					});
				}
			} catch (e) {
				descr = '';
				if (typeof(e.description) != 'undefined') {
					descr += e.description;
				}
				if (typeof(e.message) != 'undefined') {
					if (descr !== '') {
						descr += '; ';
					}
					descr += e.message;
				}
				if (typeof(e) == 'object' && typeof(e.name) == 'string'
						&& e.name !== '') {
					Ext.Msg.alert('error', e.name + ': ' + descr, function() {
								this.tab.enable();
							}, this);
				} else {
					eString = '';
					if (typeof(e) == 'object' && e !== null) {
						for (var o in e) {
							if (typeof(e[o]) != 'function') {
								eString += '<br/>{' + o + '}: ' + e[o];
							}
						}
					} else {
						eString += '<br/>' + e;
					}
					Ext.Msg.alert('error', 'An error has occured: ' + descr
									+ eString, function() {
								this.tab.enable();
							}, this);
				}
			}
		}, options);

		// alert(2);

		root = new Ext.tree.AsyncTreeNode({
					text : ''/* options.server.hostName */,
					draggable : false,
					allowDrop : false,
					id : 'root.' + options.server.id
				});

		// alert(3);

		tree = new Ext.tree.TreePanel({
					id : options.renderTo + '.tree',
					renderTo : options.renderTo,
					autoScroll : true,
					autoHeight : true,
					animate : true,
					enableDD : false,
					containerScroll : true,
					rootVisible : false,
					border : false,
					bodyStyle : 'margin:0px;padding:0px;',
					loader : loader,
					root : root
				});

		// alert(4);

		root.expand();

		// alert('called2');

	},

	/**
	 * 
	 * @param {}
	 *            string
	 */
	isURL : function(string) {
		if (typeof(string) != 'string' || string === '') {
			return false;
		}
		if (string.indexOf('http') !== 0 && string.indexOf('/') !== 0) {
			return false;
		}
		return true;
	}

};

Pulse.StatisticsTrees.Loader = Ext.extend(Ext.tree.TreeLoader, {

			/**
			 * @Override
			 */
			processResponse : function(response, node, callback) {
				var json = response.responseText;
				try {
					// alert(json);
					var res = eval("(" + json + ")");
					// alert('res: ' + res);
					// alert('res.data: ' + res.data);
					// alert('res[\'data\']: ' + res['data']);
					// alert('res.data.nodes: ' + res.data.nodes);
					// alert('res[\'data\'][\'nodes\']: ' +
					// res['data']['nodes']);
					// alert('res.data.nodes.node: ' + res.data.nodes.node);
					// alert('res[\'data\'][\'nodes\'][\'node\']: ' +
					// res['data']['nodes']['node']);
					o = [];
					if (null !== res.data.nodes) {
						o = (Ext.isArray(res.data.nodes.node))
								? res.data.nodes.node
								: [res.data.nodes.node];
					}
					// alert(Ext.isArray(res.data.nodes.node) + " - " + o);
					node.beginUpdate();
					for (var i = 0, len = o.length; i < len; i++) {
						var n = this.createNode(o[i]);
						if (n) {
							node.appendChild(n);
						}
					}
					node.endUpdate();

					if (typeof(callback) == "function") {
						callback(this, node);
					}

				} catch (e) {

					// eString = '';
					// if (typeof(e) == 'object' && e !== null) {
					// for (var o in e) {
					// if (typeof(e[o]) != 'function') {
					// eString += '<br/>{' + o + '}: ' + e[o];
					// }
					// }
					// } else {
					// eString += '<br/>' + e;
					// }
					// alert(eString);

					this.handleFailure(response);
				}
			},

			requestData : function(node, callback) {
				if (this.fireEvent("beforeload", this, node, callback) !== false) {
					this.transId = Ext.Ajax.request({
								method : this.requestMethod,
								url : this.dataUrl || this.url,
								success : this.handleResponse,
								failure : this.handleFailure,
								scope : this,
								argument : {
									callback : callback,
									node : node
								},
								params : this.getParams(node),
								timeout : Pulse.StatisticsTrees.FIVE_MINUTES
							});
				} else {
					// if the load is cancelled, make sure we notify
					// the node that we are done
					if (typeof callback == "function") {
						callback();
					}
				}
			}

		});

/**
 * STATIC
 */
Pulse.util = {
	
	type: 'Pulse.util',
	
	DBG: {
		openRetailerOverview: false,
		openRepresentativeOverview: false
	},
	
	/**
	 * 
	 */
	openRetailerOverview: function(url) {
		
		if (this.DBG) {
			THROW({
				args:arguments
			},this,'openRetailerOverview');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: 'Pulse.util.retailers.overview',
            title: '...loading',
            // iconCls: 'vfsPermissionIconCls',
            loadParams: {
                url: url
            }
        });
	},
	
	/**
	 * 
	 */
	openRepresentativeOverview: function(url) {
		
		if (this.DBG) {
			THROW({
				args:arguments
			},this,'openRepresentativeOverview');
		}
		
		PULSE_VIEWPORT_CONTROLLER.openTab({
            id: 'Pulse.util.representatives.overview',
            title: '...loading',
            // iconCls: 'vfsPermissionIconCls',
            loadParams: {
                url: url
            }
        });
	}
	
};
/**
 * 
 * Static factory-class for fields used in util
 * 
 */
Pulse.util.FieldBuilder = {
	
	component: 'util',
	
	type: 'FieldBuilder',
	
	DBG: false,
	
	/**
	 * Builds a select-box from given config and renders it into the passed el.
	 * 
	 * Also a {Pulse.SelectBoxEditorWrapper} is being build and added to the editor if given.
	 * 
	 * TODO: explain config-options
	 * 
	 * @param {Ext.Element} el,
	 * 		the element to render the field into
	 * @param {Object} config,
	 * 		the configuration
	 * 
	 * @return {Pulse.SelectBoxEditorWrapper}
	 */
	buildSelectBoxMonitor: function(el, config) {
		
		try {
		
			// set default width 95% if not given
			width = config.width;
			if (typeof(width) != 'number' && typeof(width) != 'string') {
				width = '95%';
			} else if (typeof(width) == 'number') {
				width += 'px';
			}
			
			// builds the select
			field = [
				'<select size="1" class="editorInputField" name="' + config.name + '"',
				'style="padding:1px 1px 1px 1px;width:' + width + ';">'
			];			
			if (typeof(config.object) != 'undefined') {
				objectValue = config.object[config.name];
			}
			
			// adds options
			for (var i = 0; i < config.options.length; i++) {

				if (typeof(config.options[i]) == 'undefined' 
					|| typeof(config.options[i].value) == 'undefined') {
					throw({e: 'CONFIGURATION.EXECPTION', description: 'buildSelectBoxMonitor', o: this});
				}
				
				// build option
				option = '<option value="' + config.options[i].value + '" ';
				if (typeof(objectValue) != 'undefined' && objectValue == config.options[i].value) {
					option += 'selected="selected">';
				} else {
					option += '>';
				}
				
				// display-text
				if (typeof(config.options[i].name) == 'string') {
					option += config.options[i].name;
				} else {
					option += config.options[i].value;
				}
				
				option += '</option>';
				
				field.push(option);
			}
			
			
			field.push('</select>');
			
			// add select to given element
			fieldEl = el.insertHtml('afterBegin', field.join(''), true);
			
			// build monitor
			monitorCFG = {
				id: Ext.id() + '.' + config.name,
				el: fieldEl,
				getChangesAlways: (typeof(config.getChangesAlways) == 'boolean') ? config.getChangesAlways : false
			};
			monitor = new Pulse.SelectBoxEditorWrapper(monitorCFG);
			
			// check for editor
			if (typeof(config.editor) != 'object') {
				return monitor;
			}
			
			// add monitor as sub-editor
			config.editor.addSubEditor(monitor);
			
			return monitor;
		
		} catch(e) {
			FATAL(e,this,'buildSelectBoxMonitor');
		}
		
	},
	
	/**
	 * Builds a input-field from given config and renders it into the passed el.
	 * 
	 * Also a {Pulse.FieldMonitor} is being build and added to the editor if given.
	 * 
	 * TODO: explain config-options
	 * 
	 * @param {Ext.Element} el,
	 * 		the element to render the field into
	 * @param {Object} config,
	 * 		the configuration
	 * 
	 * @return {Pulse.FieldMonitor}
	 */
	buildTextFieldMonitor: function(el, config) {
		
		try {
			
			// set default width 95% if not given
			width = config.width;
			if (typeof(width) != 'number' && typeof(width) != 'string') {
				width = '95%';
			} else if (typeof(width) == 'number') {
				width += 'px';
			}
			
			// build field
			field = '<input type="text" class="editorInputField" ' + 
				'name="' + config.name + '" style="padding:1px 1px 1px 1px;width:' + width + ';" value="'
			
			if (typeof(config.object) != 'undefined'
				&& (typeof(config.object[config.name]) == 'string' 
					|| typeof(config.object[config.name]) == 'number')) {
				field += config.object[config.name];
			}
			
			field += '"/>';
			
			// adds field to given el
			fieldEl = el.insertHtml('afterBegin', field, true);
			
			// builds monitor
			monitorCFG = {
				id: Ext.id() + '.' + config.name,
				el: fieldEl,
				showMsgFlag: (typeof(config.showMsgFlag) == 'boolean') ? config.showMsgFlag : false,
				allowBlank: (typeof(config.allowBlank) != 'boolean') ? false : config.allowBlank,
				getChangesAlways: (typeof(config.getChangesAlways) == 'boolean') ? config.getChangesAlways : false
			};
			
			monitor = new Pulse.FieldMonitor(monitorCFG);
	
			// initial validation
			monitor.validate();
			
			// check for editor
			if (typeof(config.editor) != 'object') {
				return monitor;
			}
			
			// add monitor as sub-editor
			config.editor.addSubEditor(monitor);
			
			return monitor;

		} catch(e) {
			FATAL(e,this,'buildTextFieldMonitor');
		}

	},
	
	/**
	 * Builds a checkbox from given config and renders it into the passed el.
	 * 
	 * Also a {Pulse.FieldMonitor} is being build and added to the editor if given.
	 * 
	 * TODO: explain config-options
	 * 
	 * @param {Ext.Element} el,
	 * 		the element to render the field into
	 * @param {Object} config,
	 * 		the configuration
	 * 
	 * @return {Pulse.FieldMonitor}
	 */
	buildCheckboxMonitor: function(el, config) {
		
		try {
		
			// build field
			field = '<input type="checkbox" name="' + config.name + '" class="editorInputField"';
			if (true === config.checked) {
				field += ' checked="checked"';
			}			
			field += '/>';
			
			// add to given el
			fieldEl = el.insertHtml('afterBegin',field,true);
			
			// builds monitor
			monitorCFG = {
				id: Ext.id() + '.' + name,
				el: fieldEl,
				fieldType: 'checkbox',
				getChangesAlways: (typeof(config.getChangesAlways) == 'boolean') ? config.getChangesAlways : false
			};
			
			monitor = new Pulse.FieldMonitor(monitorCFG);
	
			// check for editor
			if (typeof(config.editor) != 'object') {
				return monitor;
			}
			
			// add monitor as sub-editor
			config.editor.addSubEditor(monitor);
			
			return monitor;

		} catch(e) {
			FATAL(e,this,'buildCheckboxMonitor');
		}

	}	
	
}
/**
 * 
 */
DBG.RepresentativeEditor = DBG.apply(DBG.Editor,{
	initComponent: { RepresentativeEditor: false },
	onRender: false,
	buildEditor: false,
	showDBGButton: false
});

/**
 * 
 */
RepresentativeEditor = {
	
	component: 'util',
	
	type: 'RepresentativeEditor',
	
	implementsConfigurable: true,
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: DBG.RepresentativeEditor,
	
	/**
	 * override this in Configuration in admin-viewport.JS-editor-configurations.xsl globally
	 */
	//
	// [Pulse.Configuration] 
	// 
	// configuration: {
	//	 	representsRegion: [{ value: {String}, name: {String} },...]
	// },
	
	/**
	 * 
	 */
	saveRepresentative: function() {
		
		if (false === this.hasChanges()) {
			return;
		}
		
		if (typeof(this.requiredFieldMonitors) != 'undefined') {
			for(var i = 0; i < this.requiredFieldMonitors.length; i++) {
				if (false === this.requiredFieldMonitors[i].validate()) {
					return;
				}
			}
		}
		
		if (typeof(this.representative) != 'undefined') {
			params = this.getChanges({
				id: this.representative.id
			});
		} else {
			params = this.getChanges({});
		}
		
		requestCFG = {
			url: this.saveURL,
			scope: this,
			method: 'POST',
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
                    this.commit();
                    if (typeof(this.masterEditor) != 'undefined') {
                    	if (typeof(this.masterEditor.params) != 'undefined') {
                    		this.masterEditor.params.id = decodedResponse.data.id;
                    	} else {
                    		this.masterEditor.params = { id: decodedResponse.data.id };
                    	}
                    }
                    this.masterEditor.loadPanel();
                    this.fireEvent('MSG','savesuccess',this);
				} else {
					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'create');
				}
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
		   			PulseError.Throw({e:'REQUEST.FAILED'},this,'create');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'create');
		        }
			},
			params: params
		};
		
		Ext.Ajax.request(requestCFG);
		
	},
	
	/**
	 * Is being called by Pulse.SubEditorPanel to initialise the panel with buttons 
	 * if the RepresentativeEditor is being added to a Pulse.SubEditorPanel via 
	 * Pulse.SubEditorPanel.addSubEditor(editor).
	 * 
	 * @return {Object} an Array of Ext.Toolbar.Button
	 */
	getButtons: function() {
	
		buttons = [];
		
		saveButtonCFG = {
			scope: this,
			disabled: true,
			handler: this.saveRepresentative,
			iconCls: 'saveIconCls',
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE
		};
		
		if (typeof(this.saveURL) == 'string' && this.saveURL !== '') {
			saveButtonCFG.disabled = false;
		}
		
		buttons.push(new Ext.Toolbar.Button(saveButtonCFG));
		buttons.push(new Ext.Toolbar.Separator());
		
		if (typeof(this.masterEditor) == 'object' 
			&& this.masterEditor.type == 'SubEditorWindow') {
			closeButtonCFG = {
				scope: this,
				disabled: false,
				handler: function() {
					this.masterEditor.close();
				},
				iconCls: 'deleteIconCls',
				text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CLOSE
			};
			buttons.push(new Ext.Toolbar.Button(closeButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
		}
		
		if (this.DBG && true === this.DBG.showDBGButton) {
			
			// editor
			DBGButtonCFG = {
				scope: this,
				disabled: false,
				handler: function() { FATAL(this,this,'DBG','DBG'); },
				text: 'DBG'
			}
			buttons.push(new Ext.Toolbar.Button(DBGButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
			
		}
		
		return buttons;
		
	},
	
//	/**
//	 * Returns whether the RepresentativeEditor has changes.
//	 * 
//	 * @return {Boolean} true, if the editor has changes, false otherwise
//	 */
//	hasChanges: function() {
//		
//		
//		// TODO		
//		
//		return false;
//	},
//	
//	/**
//	 * Returns an Object with the changes of the RepresentativeEditor.
//	 * 
//	 * NOTE: 	Does not check if any changes with the same parameter-name 
//	 * 			are already applied to the changes-object.
//	 * 
//	 * @param {Object} v, the object to apply the chenges to
//	 * 
//	 * @return {Object} the changes, either applied to given v, or a newly created object
//	 */
//	getChanges: function(v) {
//		
//		// call super
//		v = Pulse.util.RepresentativeEditor.superclass.getChanges.call(this, v);		
//		
//		if (false === this.hasChanges()) {
//			return v;
//		}
//		
//		if (typeof(v) == 'undefined') {
//			v = {};
//		}
//		
//		// TODO
//		
//		return v;
//		
//	},
//	
//	/**
//	 * Commits the changes of the RepresentativeEditor.
//	 */
//	commit: function() {
//		
//		if (false === this.fireEvent('MSG','beforecommit',this)) {			
//			// TODO			
//			return false;			
//		}
//		
//		// TODO
//		
//		this.fireEvent('MSG','commit',this);
//
//	},
//	
//	/**
//	 * Resets the changes of the RepresentativeEditor.
//	 */
//	reset: function() {
//		
//		if (false === this.fireEvent('MSG','beforereset',this)) {			
//			// TODO			
//			return false;
//		}
//		
//		// TODO
//
//		this.fireEvent('MSG','reset',this);
//		
//	},
	
	/**
	 * 
	 */
	buildEditor: function(el) {
		
		if (this.DBG) {
			THROW({args:arguments,props:['renderTo']},this,'buildEditor');
		}
		
		try {
		
			// ids of editor-tds
			ids = { 
				representsRegion: Ext.id(),
				representsCountry: Ext.id(),
				representsState: Ext.id(),
				name: Ext.id(),
				nameAffix: Ext.id(),
				contactPerson: Ext.id(),
				street: Ext.id(),
				postalCode: Ext.id(),
				city: Ext.id(),
				state: Ext.id(),
				country: Ext.id(),
				addressAffix: Ext.id(),
				phoneNumber: Ext.id(),
				mobilePhoneNumber: Ext.id(),
				faxNumber: Ext.id(),
				email: Ext.id(),
				url: Ext.id()
			};
		
			// build table
			table = [
				'<table border="0" cellpadding="0" cellspacing="5" style="width:100">',
				// header
				'<tr>',
				'<td colspan="2" style="font-weight:bold;">' + VIEWPORT_PROPERTIES.UTIL_REPRESENTATIVE + '</td>',
				'</tr>',
				// representsRegion
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_REPRESENTSREGION + ':</td>',
				'<td width="75%" id="' + ids.representsRegion + '"> </td>',
				'</tr>',
				// representsCountry
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_REPRESENTSCOUNTRY + ':</td>',
				'<td width="75%" id="' + ids.representsCountry + '"> </td>',
				'</tr>',
				// representsState
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_REPRESENTSSTATE + ':</td>',
				'<td width="75%" id="' + ids.representsState + '"> </td>',
				'</tr>',
				// name
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_NAME + ':</td>',
				'<td width="75%" id="' + ids.name + '"> </td>',
				'</tr>',
				// nameAffix
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_NAMEAFFIX + ':</td>',
				'<td width="75%" id="' + ids.nameAffix + '"> </td>',
				'</tr>',
				// contactPerson
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_CONTACTPERSON + ':</td>',
				'<td width="75%" id="' + ids.contactPerson + '"> </td>',
				'</tr>',
				// street
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_STREET + ':</td>',
				'<td width="75%" id="' + ids.street + '"> </td>',
				'</tr>',
				// postalCode
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_POSTALCODE + ':</td>',
				'<td width="75%" id="' + ids.postalCode + '"> </td>',
				'</tr>',
				// city
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_CITY + ':</td>',
				'<td width="75%" id="' + ids.city + '"> </td>',
				'</tr>',
				// state
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_STATE + ':</td>',
				'<td width="75%" id="' + ids.state + '"> </td>',
				'</tr>',
				// country
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_COUNTRY + ':</td>',
				'<td width="75%" id="' + ids.country + '"> </td>',
				'</tr>',
				// addressAffix
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_ADDRESSAFFIX + ':</td>',
				'<td width="75%" id="' + ids.addressAffix + '"> </td>',
				'</tr>',
				// phoneNumber
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_PHONE + ':</td>',
				'<td width="75%" id="' + ids.phoneNumber + '"> </td>',
				'</tr>',
				// mobilePhoneNumber
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_MOBILEPHONE + ':</td>',
				'<td width="75%" id="' + ids.mobilePhoneNumber + '"> </td>',
				'</tr>',
				// faxNumber
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_FAX + ':</td>',
				'<td width="75%" id="' + ids.faxNumber + '"> </td>',
				'</tr>',
				// email
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_EMAIL + ':</td>',
				'<td width="75%" id="' + ids.email + '"> </td>',
				'</tr>',
				// website
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_WEBSITEURL + ':</td>',
				'<td width="75%" id="' + ids.url + '"> </td>',
				'</tr>',
				'</table>'
			].join('');
			
			// add table to window
			el.insertHtml('afterBegin',table);
			
			// build editors
			
			// representsRegion
			Pulse.util.FieldBuilder.buildSelectBoxMonitor(Ext.get(ids.representsRegion),
				{name:'representsRegion',getChangesAlways:true,object:this.representative,
					options:this.configuration.get('representsRegion'),editor:this});
			
			// representsCountry
			representsCountryMonitor = Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.representsCountry),
				{name:'representsCountry',width:50,showMsgFlag:false,object:this.representative,editor:this});
			this.requiredFieldMonitors.push(representsCountryMonitor);
			
			// representsState
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.representsState),
				{name:'representsState',width:50,allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// name
			nameMonitor = Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.name),
				{name:'name',showMsgFlag:false,object:this.representative,editor:this});
			this.requiredFieldMonitors.push(nameMonitor);	
				
			// nameAffix
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.nameAffix),
				{name:'nameAffix',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// contactPerson
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.contactPerson),
				{name:'contactPerson',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// street
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.street),
				{name:'street',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// postalCode
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.postalCode),
				{name:'postalCode',allowBlank:true,width:50,showMsgFlag:false,object:this.representative,editor:this});
			
			// city
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.city),
				{name:'city',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
				
			// state
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.state),
				{name:'state',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// country
			countryMonitor = Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.country),
				{name:'country',width:50,showMsgFlag:false,object:this.representative,editor:this});
			this.requiredFieldMonitors.push(countryMonitor);
			
			// addressAffix	
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.addressAffix),
				{name:'addressAffix',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// phoneNumber
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.phoneNumber),
				{name:'phoneNumber',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
				
			// mobilePhoneNumber
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.mobilePhoneNumber),
				{name:'mobilePhoneNumber',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// faxNumber
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.faxNumber),
				{name:'faxNumber',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// email
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.email),
				{name:'email',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
			
			// url
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.url),
				{name:'url',allowBlank:true,showMsgFlag:false,object:this.representative,editor:this});
					
		} catch(e) {
			FATAL(e,this,'buildEditor');
		}
	},
	
	/**
	 * Is being called during creation if 
	 * RepresentativeEditor.initialConfig.renderTo is being specified.
	 */
	onRender: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['renderTo','renderTo.body','masterEditor'],args:arguments},this,'onRender');
		}
		
		try {
			
			if (this.renderTo.type == 'SubEditorWindow' 
				|| this.renderTo.type == 'SubEditorPanel') {
			
				this.buildEditor(this.renderTo.body);
			
			} else {
				FATAL('TODO',this,'onRender');
			}
		
		} catch(e) {			
 			FATAL(e,this,'onRender');
		}
	},
	
	/**
	 * Is being called during creation and initialises the editor.
	 */
	initComponent: function() {
		
		// call super
		Pulse.util.RepresentativeEditor.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.RepresentativeEditor');
		}
		
		try {
			
			// initialise array for required field-monitors
			if (typeof(this.requiredFieldMonitors) == 'undefined') {
				this.requiredFieldMonitors = [];
			}
					
		} catch(e) {
			FATAL(e, this, 'initComponent.RepresentativeEditor');
		}
	}
		
};
Pulse.util.RepresentativeEditor = Ext.extend(Pulse.Editor, RepresentativeEditor); // END :: Pulse.util.RepresentativeEditor

/**
 * 
 */
DBG.RepresentativesEditor = DBG.apply(DBG.Editor,{
	initComponent: { RepresentativesEditor: false },
	initTab: false,
	onRender: false,
	
	editRepresentative: false,
	deleteRepresentative: false,
	
	showDBGButton: false
	
});

/**
 * 
 */
RepresentativesEditor = {
	
	component: 'util',
	
	type: 'RepresentativesEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: DBG.RepresentativesEditor,
	
	/**
	 * 
	 */
	 initTab: function() {
	 	
	 	if (this.DBG) {
	 		THROW({args:arguments},this,'initTab');
	 	}
	 	try {

		 	if (true !== this.tab.isInitialized) {
		 		this.tab.getTopToolbar().insertButton(0, this.getButtons());
		 		this.tab.isInitialized = true;
		 	}
	 	
	 	} catch(e) {
			FATAL(e, this, 'initTab');
		}
		
	 },
	
	/**
	 * Is being called by Pulse.SubEditorPanel to initialise the panel with buttons 
	 * if the RepresentativesEditor is being added to a Pulse.SubEditorPanel via 
	 * Pulse.SubEditorPanel.addSubEditor(editor).
	 * 
	 * @return {Object} an Array of Ext.Toolbar.Button
	 */
	getButtons: function() {
	
		buttons = [];
		
		editButtonCFG = {
			scope: this,
			disabled: true,
			handler: function() { this.showRepresentativeEditorWindow(null); },
			iconCls: 'addIconCls',
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE
		};
		
		if (typeof(this.editURL) == 'string' && this.editURL !== '' && 
			typeof(this.saveURL) == 'string' && this.saveURL !== '') {
			editButtonCFG.disabled = false;			
		}
		this.editButton = new Ext.Toolbar.Button(editButtonCFG);
		buttons.push(this.editButton);
		buttons.push(new Ext.Toolbar.Separator());
		
		if (this.DBG && true === this.DBG.showDBGButton) {
			DBGButtonCFG = {
				scope: this,
				disabled: false,
				handler: function() { FATAL(this,this,'DBG','DBG'); },
				text: 'DBG'
			}
			buttons.push(new Ext.Toolbar.Button(DBGButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
		}
		
		
		
		return buttons;
		
	},
	
//	/**
//	 * Returns whether the RepresentativesEditor has changes.
//	 * 
//	 * @return {Boolean} true, if the editor has changes, false otherwise
//	 */
//	hasChanges: function() {
//		
//		
//		// TODO		
//		
//		return false;
//	},
//	
//	/**
//	 * Returns an Object with the changes of the RepresentativesEditor.
//	 * 
//	 * NOTE: 	Does not check if any changes with the same parameter-name 
//	 * 			are already applied to the changes-object.
//	 * 
//	 * @param {Object} v, the object to apply the chenges to
//	 * 
//	 * @return {Object} the changes, either applied to given v, or a newly created object
//	 */
//	getChanges: function(v) {
//		
//		if (false === this.hasChanges()) {
//			return v;
//		}
//		
//		if (typeof(v) == 'undefined') {
//			v = {};
//		}
//		
//		// TODO
//		
//		return v;
//		
//	},
//	
//	/**
//	 * Commits the changes of the RepresentativesEditor.
//	 */
//	commit: function() {
//		
//		if (false === this.fireEvent('MSG','beforecommit',this)) {			
//			// TODO			
//			return false;			
//		}
//		
//		// TODO
//		
//		this.fireEvent('MSG','commit',this);
//
//	},
//	
//	/**
//	 * Resets the changes of the RepresentativesEditor.
//	 */
//	reset: function() {
//		
//		if (false === this.fireEvent('MSG','beforereset',this)) {			
//			// TODO			
//			return false;
//		}
//		
//		// TODO
//
//		this.fireEvent('MSG','reset',this);
//		
//	},
	
	/**
	 * 
	 */
	 showRepresentativeEditorWindow: function(id) {
	 	
	 	try {
	 	
		 	if (typeof(this.windowElement) == 'undefined' || this.windowElement === null) {
	        	this.windowElement = VIEWPORT.getEl().createChild({
			        tag: 'div', 
			        id: this.id + '.createFormWindow.el'
			    });
	        }
	
			representativeEditorWindowCFG = {
	        	html: '...',
	        	title: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT,
	            modal: true,
//	            layout: 'border',
	            autoScroll: true,
	            renderTo: this.windowElement,
	            height: 400,
	            width: 500,
	            resizable: true,
				id: this.id + '.representativeEditorWindow',
				masterEditor: this,
				url: this.editURL,
				params: { id: id }
	        };

	        this.representativeEditorWindow = new Pulse.SubEditorWindow(representativeEditorWindowCFG);
	        
    		this.representativeEditorWindow.on('show',function(){
				this.initializePanel();
			});
			
			this.representativeEditorWindow.on('beforeclose',function() {
				if (true === this.representativeEditorWindow.hasChanges()) {
					Ext.Msg.confirm(
						VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
						VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
						VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
			        	function(response) {
			        		// close or reload tab
				        	if('yes' === response) {
				        		// reset changes			        		
				        		this.representativeEditorWindow.reset();
				        		// close window
				        		this.representativeEditorWindow.close();				        		
				        	}
			        	}, 
			        	this
		        	);
		        	return false;
				}
			},this);
			
			this.representativeEditorWindow.on('MSG',function(msgString,editor){
				if (msgString.toUpperCase() == 'SAVESUCCESS') {
					this.gridStore.reload();
				}
			},this);
	        
	        this.representativeEditorWindow.show(this.representativeEditorWindow);

    		this.representativeEditorWindow.setPosition(this.grid.getPosition());
        
	 	} catch(e) {
	 		FATAL(e,this,'showRepresentativeEditorWindow');
	 	}
	 	
	 },
	
	/**
	 * Is being called during creation if 
	 * RepresentativesEditor.initialConfig.renderTo is being specified.
	 */
	onRender: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['renderTo'],args:arguments},this,'onRender');
		}
		
		try {		
			this.buildGrid(this.renderTo);        
		} catch(e) {
 			FATAL(e,this,'onRender');
		}
	},
	
	/**
	 * 
	 */
	getRecord: function() {
		return new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'representsRegion' },
			{ name: 'representsCountry' },
			{ name: 'representsState' },
			{ name: 'name' },
			{ name: 'nameAffix' },
			{ name: 'contactPerson' },
			{ name: 'addressAffix' },
			{ name: 'street' },
			{ name: 'postalCode' },
			{ name: 'city' },
			{ name: 'state' },
			{ name: 'country' },
			{ name: 'phoneNumber' },
			{ name: 'faxNumber' },
			{ name: 'url' }
        ]);
	},	
	
	/**
	 * @param {Object} record the record
	 */
	getStore: function(record) {
		return new Ext.data.JsonStore({
//            id: 'id',
            pruneModifiedRecords : true,
            fields: record,
            root: 'data',
            remoteSort: true,                    
            sortInfo: {
                field: this.defaultSortField,
                direction: this.defaultSortDirection
            },
            totalProperty: 'total',
            url: this.loadURL
        });
	},
	
	/**
	 * 
	 */
	getPagingToolbar: function() {
		
		// buld paging-tool with combobox to set page-size        
        this.pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),	    
		    displayField: 'size',
		    valueField: 'size',
		    selectOnFocus: true,
		    mode: 'local',
		    triggerAction: 'all',
//			editable: false,
		    width: 60,
		    blankText: '' + this.defaultPageSize,
		    emptyText: '' + this.defaultPageSize,
		    enableKeyEvents: true
		});
		
		this.pageSizeBox.on('keydown',function(box,evt){			
			if (evt.getKey() == Ext.EventObject.ENTER) {
				this.gridStore.reload();
			}			
		},this);
        
        return new Ext.PagingToolbar({
       		// id: 'toolbar',
            displayInfo: true,
            pageSize: this.defaultPageSize,
            store: this.gridStore,
            items: ['-', this.pageSizeBox]
        });
	},
	
	/**
	 * 
	 */
	 editRepresentative: function(representativeId) {
	 	if (this.DBG) {
	 		THROW({args:arguments},this,'editRepresentative');
	 	}
	 	if (typeof(representativeId) != 'number') {
			return;
		}
		try {
			this.showRepresentativeEditorWindow(representativeId);
		} catch(e) {
			FATAL(e,this,'editRepresentative');
		}
	 },
	
	/**
	 * 
	 */
	 deleteRepresentative: function(representativeId) {
	 	if (this.DBG) {
	 		THROW({args:arguments},this,'deleteRepresentative');
	 	}
	 	
	 	if (typeof(representativeId) != 'number') {
			return;
		}
		
		try {
			
			rec = null;
			if (typeof(this.gridStore) != 'undefined' && this.gridStore !== null) {
				this.gridStore.each(function(r) {
		    		if (r.get('id') == representativeId) {
		    			rec = r;
		    			return false;
		    		}
		    	});
			}
			if (rec === null) {
				return;
			}
	
			
			// proceed with confirm
			Ext.Msg.confirm(
				VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + representativeId + '"',
	    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE + '<br/>"' + rec.get('name') + '"',
	    		function(response) {
	    			if ('yes' === response) {
			
						requestCFG = {
							url: this.deleteURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
				        		if (true === decodedResponse.status) {      				
									
									this.gridStore.remove(options.rec);	
											
									this.fireEvent('MSG','deletesuccess',this);
				      				
				        		} else {
				        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'deleteRepresentative');
				        		}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({e:'REQUEST.FAILED'},this,'deleteRepresentative');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'deleteRepresentative');
						        }
							},
							rec: rec,
							params: { id: representativeId }
						};
						
						Ext.Ajax.request(requestCFG);
			
	    			}    			
	    		},
    		this);
    		
    	} catch(e) {
			FATAL(e,this,'deleteRepresentative');
		}	 	
	 },
	
	/**
	 * 
	 */
	getColumnModel: function(gridSm) {
		// build column-model                
        columns = [
//            gridSm,
            {
                dataIndex: 'representsRegion',
                header: VIEWPORT_PROPERTIES.UTIL_REPRESENTSREGION,
                width: 75,
                sortable: true
            },{
                dataIndex: 'representsCountry',
                header: VIEWPORT_PROPERTIES.UTIL_REPRESENTSCOUNTRY,
                width: 75,
                sortable: true
            },{
                dataIndex: 'representsState',
                header: VIEWPORT_PROPERTIES.UTIL_REPRESENTSSTATE,
                width: 75,
                sortable: true
            },{
                dataIndex: 'name',
                header: VIEWPORT_PROPERTIES.UTIL_NAME,
                id: 'name',
                width: 90,
                sortable: true
            },{
                dataIndex: 'nameAffix',
                header: VIEWPORT_PROPERTIES.UTIL_NAMEAFFIX,
                width: 90,
                sortable: true
            },{
                dataIndex: 'contactPerson',
                header: VIEWPORT_PROPERTIES.UTIL_CONTACTPERSON,
                width: 90,
                sortable: true
            },{
                dataIndex: 'street',
                header: VIEWPORT_PROPERTIES.UTIL_STREET,
                width: 90,
                sortable: true
            },{
                dataIndex: 'postalCode',
                header: VIEWPORT_PROPERTIES.UTIL_POSTALCODE,
                width: 50,
                sortable: true
            },{
                dataIndex: 'city',
                header: VIEWPORT_PROPERTIES.UTIL_CITY,
                width: 90,
                sortable: true
            /*},{
                dataIndex: 'state',
                header: VIEWPORT_PROPERTIES.UTIL_STATE,
                width: 90,
                sortable: true*/
            },{
                dataIndex: 'country',
                header: VIEWPORT_PROPERTIES.UTIL_COUNTRY,
                width: 45,
                sortable: true
            }
        ];
        
        // add edit button to rows
        if (typeof(this.editURL) != 'undefined' && this.editURL !== '') {
        	
        	_id = this.id;
        	
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'Ext.getCmp(\'' + _id + '\').editRepresentative(' + id + ')',
			        		iconCls: 'editIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
			        	});
					} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
        
        // add delete button to rows
        if (typeof(this.deleteURL) != 'undefined' && this.deleteURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'Ext.getCmp(\'' + _id + '\').deleteRepresentative(' + id + ')',
			        		iconCls: 'deleteIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELET
			        	});
					} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
		
		return new Ext.grid.ColumnModel(columns);
	},
	
	/**
	 * @param {String} elId 
	 * 		the id of the element to render the grid to
	 */
	buildGrid: function(elId) {
		
		if (typeof(elId) != 'string' || elId === '') {
			FATAL({args:arguments},this,'buildGrid','element.id undefined');
		}
		
		gridStoreRecord = this.getRecord();
        
        this.gridStore = this.getStore(gridStoreRecord);
        
        this.pagingToolBar = this.getPagingToolbar();
        
        // add gridStore-listener for paging-toolbar
        this.gridStore.on('beforeLoad', function(store, options) {
        	
        	store.isLoading = true;
        	if (this.pageSizeBox.getRawValue() !== '') {
        		try {
        			limit = parseInt(this.pageSizeBox.getRawValue().trim(), 10);
        			this.pagingToolBar.pageSize = limit;
        			options.params.limit = limit;
        		} catch(e) { /* ignore */ }
        	} else {
        		this.pagingToolBar.pageSize = this.defaultPageSize;
    			options.params.limit = this.defaultPageSize;
        	}

			if (typeof(this.filterIds) != 'undefined') {
	        	for (i = 0; i < this.filterIds.length; i++) {
	        		filterEl = Ext.get(config.filterIds[i]);
	 				if (typeof(filterEl) != 'undefined') {
	        			try {        			
	        				pname = filterEl.dom.name;
	        				pvalue = filterEl.getValue().trim();
	        				options.params[pname] = pvalue;
	        			
	        			} catch (e) { /* ignore */ }
	 				}
				}
        	}
        },this);
        this.gridStore.on('load', function(store, recs, options) {
        	(function(){this.isLoading = false;}).defer(500,this);
        },this.gridStore);
        this.gridStore.on('loadexception', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },this.gridStore);
        
        // initialize filters for reload of grid onChange
        if (typeof(this.filterIds) != 'undefined') {
	        for (i = 0; i < this.filterIds.length; i++) {
	    		filterEl = Ext.get(this.filterIds[i]);
	    		if (typeof(filterEl) != 'undefined') {
	    			
	    			filterEl.on({
	    				'keyup': {
	    					scope: this.gridStore,
	    					fn: function(evt, el, opts) {
	//    						if (evt.getKey() != Ext.EventObject.ENTER) {
	//								return;
	//							}
	//    						alert(el.id + ', ' + el.value + ', ' + el.name);							
								
								// delay by 500ms
	    						(function(){ 
	    							if (true === this.isLoading) {
		                                return;
		                            }
	    							this.reload();
								}).defer(500,this);
	    					}
	    				}
	    			},this.gridStore);
	    			
	//    			pname = filterEl.dom.name;
	//    			pvalue = filterEl.getValue();
	//    			options.params[pname] = pvalue;
	    		}
	    	}
        }
        
//        gridSm = new Ext.grid.CheckboxSelectionModel();		
		
		gridCm = this.getColumnModel();
        
        gridCFG = {
            store: this.gridStore,
            cm: gridCm,
//            sm: gridSm,
            renderTo: elId,
            autoExpandColumn: 'id',
            loadMask: true,
            viewConfig: { forceFit: true },
            frame: false,
            bbar: this.pagingToolBar
        };
        this.grid = new Ext.grid.GridPanel(gridCFG);
        
        // grid: resize
        if (typeof(this.tab) != 'undefined') {
        	// w
	        this.grid.setWidth(this.tab.getInnerWidth());
	        // h
	        tabMsgPanel = Ext.getCmp(this.tab.id + '.msgPanel');
	        msgPanelHeight = 0;
	        if (tabMsgPanel.isVisible()) {
	        	msgPanelHeight = tabMsgPanel.getSize().height;
	        }
	        this.grid.setHeight(this.tab.getInnerHeight() - msgPanelHeight);
	        
	        
	        // config.tab: listeners for grid: resize              
	        this.tab.on({
	            'resize': {
	            	scope: this,
	                fn: function(tab, adjWidth, adjHeight, rawWidth, rawHeight) {
	                    // w
				        tabContentPanel = Ext.getCmp(this.tab.id + '.contentPanel'); 
				        this.grid.setWidth(this.tab.getInnerWidth());
				        // h
				        tabMsgPanel = Ext.getCmp(this.tab.id + '.msgPanel');
				        msgPanelHeight = 0;
				        if (tabMsgPanel.isVisible()) {
				        	msgPanelHeight = tabMsgPanel.getSize().height;
				        }
				        this.grid.setHeight(this.tab.getInnerHeight() - msgPanelHeight);       
	                }
	            }
	        },this);
        
        }
        
        // init grid
        this.gridStore.load({
            params:{
                start: this.defaultPageStart, 
                limit: this.defaultPageSize
            }
        });
		
		return this.grid;
		
	},
	
	/**
	 * applies defaults, for fields which are not set by initialCconfig
	 */
	setDefaults: function() {
			
		// set defaults
		if (typeof(this.defaultPageStart) != 'number') {
			this.defaultPageStart = 0;
		}
		if (typeof(this.defaultPageSize) != 'number') {
        	this.defaultPageSize = 25;
		}
		if (typeof(this.defaultSortField) != 'string') {
        	this.defaultSortField = 'name';
		}
		if (typeof(this.defaultSortDirection) != 'string') { 
        	this.defaultSortDirection = 'ASC';
		}
		
		return;
		
	},
	
	/**
	 * Is being called during creation and initialises the editor.
	 */
	initComponent: function(boolInitTab) {
		
		// call super
		Pulse.util.RepresentativesEditor.superclass.initComponent.call(this, boolInitTab);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type','subEditors'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.RepresentativesEditor');
		}
		
		try {			
			this.setDefaults();			
			if (typeof(this.tab) != 'undefined' && false !== boolInitTab) {
				this.initTab();
			}
		} catch(e) {
			FATAL(e, this, 'initComponent.RepresentativesEditor');
		}
	}
		
};
Pulse.util.RepresentativesEditor = Ext.extend(Pulse.Editor, RepresentativesEditor); // END :: Pulse.util.RepresentativesEditor

/**
 * 
 */
DBG.RetailerEditor = DBG.apply(DBG.Editor,{
	initComponent: { RetailerEditor: false },
	initTab: true,
	onRender: false,

	buildEditor: false,
	showDBGButton: false,
	
	initialize: { Editor: false }
	
});

/**
 * 
 */
RetailerEditor = {
	
	component: 'util',
	
	type: 'RetailerEditor',
	
	implementsConfigurable: true,
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: DBG.RetailerEditor,
	
	/**
	 * override this in Configuration in admin-viewport.JS-editor-configurations.xsl globally
	 */
	//
	// [Pulse.Configuration] 
	// 
	// configuration: {
	// 		type: [{ value: {String}, name: {String} },...],
	//      
	//      /* remove to disable editor */
	//		retailStoreFilter: {
	//			0: 'catergorie0',
	//			1: 'catergorie1',
	//			... 
	//		},
	//
	//		/* remove to disable editor */
	// 		webShopFilter: {
	//			0: 'catergorie0',
	//			1: 'catergorie1',
	//			... 
	//		},
	//
	//		/* remove or set false to disable editor */
	// 		logo: {Boolean}
 	// },
	
	/**
	 * 
	 */
	saveRetailer: function() {
		
		if (false === this.hasChanges()) {
			return;
		}
		
		if (typeof(this.requiredFieldMonitors) != 'undefined') {
			for(var i = 0; i < this.requiredFieldMonitors.length; i++) {
				if (false === this.requiredFieldMonitors[i].validate()) {
					return;
				}
			}
		}
		
		params = this.getChanges({
			country: this.country
		});
		if (typeof(this.retailer) != 'undefined') {
			// a loaded retailer is being edited
			params.id = this.retailer.id;
		}
		
		requestCFG = {
			url: this.saveURL,
			scope: this,
			method: 'POST',
			success: function(response, options) {
				decodedResponse = Ext.decode(response.responseText);
				if (true === decodedResponse.status) {
                    this.commit();
                    if (typeof(this.masterEditor) != 'undefined') {
                    	if (typeof(this.masterEditor.params) != 'undefined') {
                    		this.masterEditor.params.id = decodedResponse.data.id;
                    	} else {
                    		this.masterEditor.params = { id: decodedResponse.data.id };
                    	}
                    	this.masterEditor.loadPanel();
                    }
                    this.fireEvent('MSG','savesuccess',this);
				} else {
					PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'create');
				}
			},
			failure: function(response, options) {
				if (typeof(response.responseText) == 'undefined') {
		   			PulseError.Throw({e:'REQUEST.FAILED'},this,'create');
		        } else {
		        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'create');
		        }
			},
			params: params
		};
		
		Ext.Ajax.request(requestCFG);
		
	},
	
	/**
	 * Is being called by Pulse.SubEditorPanel to initialise the panel with buttons 
	 * if the RetailerEditor is being added to a Pulse.SubEditorPanel via 
	 * Pulse.SubEditorPanel.addSubEditor(editor).
	 * 
	 * @return {Object} an Array of Ext.Toolbar.Button
	 */
	getButtons: function() {
	
		buttons = [];
		
		saveButtonCFG = {
			scope: this,
			disabled: true,
			handler: this.saveRetailer,
			iconCls: 'saveIconCls',
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_SAVE
		};
		
		if (typeof(this.saveURL) == 'string' && this.saveURL !== '') {
			saveButtonCFG.disabled = false;
		}
		
		buttons.push(new Ext.Toolbar.Button(saveButtonCFG));
		buttons.push(new Ext.Toolbar.Separator());
		
		if (typeof(this.masterEditor) == 'object' 
			&& this.masterEditor.type == 'SubEditorWindow') {
			closeButtonCFG = {
				scope: this,
				disabled: false,
				handler: function() {
					this.masterEditor.close();
				},
				iconCls: 'deleteIconCls',
				text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CLOSE
			};
			buttons.push(new Ext.Toolbar.Button(closeButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
		}
		
		if (this.DBG && true === this.DBG.showDBGButton) {
			
			// editor
			DBGButtonCFG = {
				scope: this,
				disabled: false,
				handler: function() { FATAL(this,this,'DBG','DBG'); },
				text: 'DBG'
			}
			buttons.push(new Ext.Toolbar.Button(DBGButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
			
			// configuration
			DBGConfigurationButtonCFG = {
				scope: this,
				disabled: false,
				handler: function() {
					FATAL(this.configuration.getConfiguration(),this,'DBGC','DBGC');
				},
				text: 'DBGC'
			}
			buttons.push(new Ext.Toolbar.Button(DBGConfigurationButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
			
		}
		
		return buttons;
		
	},
	
//	/**
//	 * Returns whether the RetailerEditor has changes.
//	 * 
//	 * @return {Boolean} true, if the editor has changes, false otherwise
//	 */
//	hasChanges: function() {
//		
//		
//		// TODO		
//		
//		return false;
//	},
//	
//	/**
//	 * Returns an Object with the changes of the RetailerEditor.
//	 * 
//	 * NOTE: 	Does not check if any changes with the same parameter-name 
//	 * 			are already applied to the changes-object.
//	 * 
//	 * @param {Object} v, the object to apply the chenges to
//	 * 
//	 * @return {Object} the changes, either applied to given v, or a newly created object
//	 */
//	getChanges: function(v) {
//		
//		// call super
//		v = Pulse.util.RetailerEditor.superclass.getChanges.call(this, v);		
//		
//		if (false === this.hasChanges()) {
//			return v;
//		}
//		
//		if (typeof(v) == 'undefined') {
//			v = {};
//		}
//		
//		// TODO
//		
//		return v;
//		
//	},
//	
//	/**
//	 * Commits the changes of the RetailerEditor.
//	 */
//	commit: function() {
//		
//		if (false === this.fireEvent('MSG','beforecommit',this)) {			
//			// TODO			
//			return false;			
//		}
//		
//		// TODO
//		
//		this.fireEvent('MSG','commit',this);
//
//	},
//	
//	/**
//	 * Resets the changes of the RetailerEditor.
//	 */
//	reset: function() {
//		
//		if (false === this.fireEvent('MSG','beforereset',this)) {			
//			// TODO			
//			return false;
//		}
//		
//		// TODO
//
//		this.fireEvent('MSG','reset',this);
//		
//	},

	/**
	 * 
	 */
	buildRetailerPropertiesEditor: function(el) {
		
		// DBG >>
		if (this.DBG) {
			THROW({args:arguments,props:['renderTo']},this,'buildRetailerPropertiesEditor');
		}
		
		try {
			
			if (this.country === null) {
				throw({e:'EXCEPTION',args:arguments,description:'COUNTRY.UNDEFINED'});
			}
			
			// ids of editor-tds
			ids = {
				customerNumber: Ext.id(),
				type: Ext.id(),
				name: Ext.id(),
				contactPerson: Ext.id(),
				street: Ext.id(),
				postalCode: Ext.id(),
				city: Ext.id(),
				state: Ext.id(),
				country: Ext.id(),
				phoneNumber: Ext.id(),
				mobilePhoneNumber: Ext.id(),
				faxNumber: Ext.id(),
				email: Ext.id(),
				url: Ext.id()
			};
			
			// build table & hidden country-imput
			table = [
				'<input type="hidden" name="country" value="' + country + '"/>',
				'<table border="0" cellpadding="0" cellspacing="5" style="width:100%;">',
				// header
				'<tr>',
				'<td colspan="2" style="font-weight:bold;">' + VIEWPORT_PROPERTIES.UTIL_RETAILER + '</td>',
				'</tr>',
				// customerNumber
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_CUSTOMERNUMBER + ':</td>',
				'<td width="75%" id="' + ids.customerNumber + '"> </td>',
				'</tr>',
				// type
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_TYPE + ':</td>',
				'<td width="75%" id="' + ids.type + '"> </td>',
				'</tr>',
				// name
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_NAME + ':</td>',
				'<td width="75%" id="' + ids.name + '"> </td>',
				'</tr>',
				// contactPerson
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_CONTACTPERSON + ':</td>',
				'<td width="75%" id="' + ids.contactPerson + '"> </td>',
				'</tr>',
				// street
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_STREET + ':</td>',
				'<td width="75%" id="' + ids.street + '"> </td>',
				'</tr>',
				// postalCode
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_POSTALCODE + ':</td>',
				'<td width="75%" id="' + ids.postalCode + '"> </td>',
				'</tr>',
				// city
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_CITY + ':</td>',
				'<td width="75%" id="' + ids.city + '"> </td>',
				'</tr>',
				// state
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_STATE + ':</td>',
				'<td width="75%" id="' + ids.state + '"> </td>',
				'</tr>',
				// phoneNumber
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_PHONE + ':</td>',
				'<td width="75%" id="' + ids.phoneNumber + '"> </td>',
				'</tr>',
				// mobilePhoneNumber
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_MOBILEPHONE + ':</td>',
				'<td width="75%" id="' + ids.mobilePhoneNumber + '"> </td>',
				'</tr>',
				// faxNumber
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_FAX + ':</td>',
				'<td width="75%" id="' + ids.faxNumber + '"> </td>',
				'</tr>',
				// email
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_EMAIL + ':</td>',
				'<td width="75%" id="' + ids.email + '"> </td>',
				'</tr>',
				// website
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_WEBSITEURL + ':</td>',
				'<td width="75%" id="' + ids.url + '"> </td>',
				'</tr>',
				'</table>'
			].join('');
			
			// add table to window
			el.insertHtml('beforeEnd',table);
			
			// build editors
			
			// customerNumber
			customerNumberMonitor = Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.customerNumber),
				{name:'customerNumber',showMsgFlag:false,object:this.retailer,editor:this,
					allowBlank:(true === this.mandatoryCustomerNumber[country]) ? false : true});
			if (true === this.mandatoryCustomerNumber[country]) {
				this.requiredFieldMonitors.push(customerNumberMonitor);
			}
			
			// type
			Pulse.util.FieldBuilder.buildSelectBoxMonitor(Ext.get(ids.type),
				{name:'type',getChangesAlways:true,object:this.retailer,
					options:this.configuration.get('type'),editor:this});
			
			// name
			nameMonitor = Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.name),
				{name:'name',showMsgFlag:false,object:this.retailer,editor:this});
			this.requiredFieldMonitors.push(nameMonitor);
				
			// contactPerson
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.contactPerson),
				{name:'contactPerson',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
			// street
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.street),
				{name:'street',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
			// postalCode
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.postalCode),
				{name:'postalCode',allowBlank:true,width:'50%',showMsgFlag:false,object:this.retailer,editor:this});
			
			// city
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.city),
				{name:'city',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
			// state
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.state),
				{name:'state',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
			// phoneNumber
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.mobilePhoneNumber),
				{name:'mobilePhoneNumber',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
				
			// mobilePhoneNumber
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.phoneNumber),
				{name:'phoneNumber',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
			// faxNumber
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.faxNumber),
				{name:'faxNumber',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
			// email
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.email),
				{name:'email',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
			// url
			Pulse.util.FieldBuilder.buildTextFieldMonitor(Ext.get(ids.url),
				{name:'url',allowBlank:true,showMsgFlag:false,object:this.retailer,editor:this});
			
		} catch(e) {
			FATAL(e,this,'buildRetailerPropertiesEditor');
		}
	},
	
	/**
	 * 
	 */
	buildRetailerLogoEditor: function(el) {
		try {
			
			checked = false;
			if (typeof(this.retailer) != 'undefined' && typeof(this.retailer.logo) != 'undefined') {
				checked = true;
			}
			
			// build the table
			logoId = Ext.id();
			table = [
				'<table border="0" cellpadding="0" cellspacing="5" style="width:100%;">',
				// header
				'<tr>',
				'<td colspan="2" style="font-weight:bold;">' + VIEWPORT_PROPERTIES.UTIL_LOGO + '</td>',
				'</tr>',
				'<tr>',
				'<td width="25%">' + VIEWPORT_PROPERTIES.UTIL_LINKLOGO + ':</td>',
				'<td width="75%" id="' + logoId + '"> </td>',
				'</tr>',
				'</table>'
			].join('');
			
			// add to el
			el.insertHtml('beforeEnd',table);
			
			// build editor			
			Pulse.util.FieldBuilder.buildCheckboxMonitor(Ext.get(logoId),{name:'logo',checked:checked,editor:this});
					
		} catch(e) {
			FATAL(e,this,'buildRetailerLogoEditor');
		}
	},
	
	/**
	 * 
	 */
	buildFilterEditor: function(el, prefix) {
		try {
			
			// retrieve settings
			header = null;
			size = null;
			filterLabels = null;
			bitset = null;
			switch(prefix) {
				
				case 'rsfCat':
					header = VIEWPORT_PROPERTIES.UTIL_RETAILSTORE;
					size = this.retailStoreFilterSize;
					if (typeof(this.retailStoreFilterCategories) == 'undefined') {
						filterLabels = this.configuration.get('retailStoreFilter');
					} else {
						filterLabels = this.retailStoreFilterCategories;
					}
					if (typeof(this.retailer) != 'undefined') {
						bitset = this.retailer.retailStoreFilter;
					}
					break;
					
				case 'wsfCat':
					header = VIEWPORT_PROPERTIES.UTIL_WEBSHOP;
					size = this.webShopFilterSize;
					if (typeof(this.webShopFilterCategories) == 'undefined') {
						filterLabels = this.configuration.get('webShopFilter');
					} else {
						filterLabels = this.webShopFilterCategories;
					}
					if (typeof(this.retailer) != 'undefined') {
						bitset = this.retailer.webShopFilter;
					}
					break;
					
				default:
					throw({e:'EXCEPTION',args:arguments,description:'FILTER.UNDEFINED'});
					
			}
			
			// ids
			filterIds = {};
			
			// build table
			table = ['<table border="0" cellpadding="0" cellspacing="5" style="width:100%;">',
				// header
				'<tr>',
				'<td colspan="4" style="font-weight:bold;">' + header + '</td>',
				'</tr>'
			];
			
			even = false;
			for (var i = 0; i < size; i++) {
				c = i;
				if (false !== even) {
					even = false;
					continue;
				} else {
					filterIds[c] = Ext.id();
					table.push('<tr>');
					table.push('<td width="25%">' + filterLabels[c] + '</td>');
					table.push('<td width="25%" id="' + filterIds[c] + '"> </td>');
					if (c + 1 >= size) {
						table.push('<td colspan="2" width="50%"> </td>');
					} else {
						filterIds[c + 1] = Ext.id();
						table.push('<td width="25%">' + filterLabels[c + 1] + '</td>');
						table.push('<td width="25%" id="' + filterIds[c + 1] + '"> </td>');
					}					
					table.push('</tr>');
					even = true;
				}			
			}
			
			table.push('</table>');
			
			// add table top el
			el.insertHtml('beforeEnd',table.join(''));
			
			// build editors
			for (var i = 0; i < size; i++) {
				checked = false;
				if (typeof(bitset) != 'undefined' && bitset !== null && true === bitset[i]) {
					checked = true;
				}
				Pulse.util.FieldBuilder.buildCheckboxMonitor(Ext.get(filterIds[i]),
					{name:prefix + i,checked:checked,editor:this});
			}
			
		} catch(e) {
			FATAL(e,this,'buildFilterEditor');
		}
	},
	
	/**
	 * 
	 */
	addEditorSpacer: function(el) {
		try {		
			el.insertHtml('beforeEnd','<div style="padding:5px 5px 5px 5px;"><hr class="adminHr"/></div>');		
		} catch(e) {
			FATAL(e,this,'addEditorSpacer');
		}
	},
	
	/**
	 * 
	 */
	buildEditor: function(el) {
		
		if (this.DBG) {
			THROW({args:arguments,props:['renderTo']},this,'buildEditor');
		}
		
		try {
		
			// customerNumber, type, name, street, postalCode, city, state,
			// contactPerson, phoneNumber, faxNumber, email, url
			// country (hidden field)
			this.buildRetailerPropertiesEditor(el);
			
			// logo
			if (null !== this.configuration.get('logo')) {			
				// adminHr
				this.addEditorSpacer(el);				
				this.buildRetailerLogoEditor(el);			
			}
			
			// retailStoreFilter
			if (null !== this.configuration.get('retailStoreFilter')) {
				if (typeof(this.retailStoreFilterSize) == 'number' 
					|| this.retailStoreFilterSize !== 0) {
					// adminHr			
					this.addEditorSpacer(el);				
					this.buildFilterEditor(el, 'rsfCat');				
				}
			}
			
			// webShopFilter			
			if (null !== this.configuration.get('webShopFilter')) {
				if (typeof(this.webShopFilterSize) == 'number' 
					|| this.webShopFilterSize !== 0) {
					// adminHr				
					this.addEditorSpacer(el);
					this.buildFilterEditor(el, 'wsfCat');			
				}
			}
		
		} catch(e) {
			FATAL(e,this,'buildEditor');
		}
	},
	
	/**
	 * Is being called during creation if 
	 * RetailerEditor.initialConfig.renderTo is being specified.
	 */
	onRender: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['renderTo','renderTo.body','masterEditor'],args:arguments},this,'onRender');
		}
		
		try {
			
			if (this.renderTo.type == 'SubEditorWindow' 
				|| this.renderTo.type == 'SubEditorPanel') {
			
				this.buildEditor(this.renderTo.body);
			
			} else {
				FATAL('TODO',this,'onRender');
			}
		
		} catch(e) {			
 			FATAL(e,this,'onRender');
		}
	},
	
	/**
	 * Is being called during creation and initialises the editor.
	 */
	initComponent: function() {
		
		// call super
		Pulse.util.RetailerEditor.superclass.initComponent.call(this);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.RetailerEditor');
		}
		
		try {			
			// retrieve country from
			// either:	this.retailer (on edit existing retailer)
			// or:		this.masterEditor (on create new)
			this.country = null;
			if (typeof(this.retailer) != 'undefined' 
				&& typeof(this.retailer.country) == 'string'
				&& this.retailer.country !== '') {
				this.country = this.retailer.country;
			} /*else if (typeof(this.renderTo.retailerCountry) == 'string'
				&& this.renderTo.retailerCountry !== '') {
				this.country = this.renderTo.retailerCountry;
			}*/ else if (typeof(this.renderTo.params.country) == 'string'
				&& this.renderTo.params.country !== '') {
				this.country = this.renderTo.params.country;
			}
			// initialise array for required field-monitors
			if (typeof(this.requiredFieldMonitors) == 'undefined') {
				this.requiredFieldMonitors = [];
			}	
		} catch(e) {
			FATAL(e, this, 'initComponent.RetailerEditor');
		}
	}
		
};
Pulse.util.RetailerEditor = Ext.extend(Pulse.Editor, RetailerEditor); // END :: Pulse.util.RetailerEditor

/**
 * 
 */
DBG.RetailersEditor = DBG.apply(DBG.Editor,{
	initComponent: { RetailersEditor: false },
	initTab: false,
	onRender: false,
	
	editRetailer: false,
	deleteRetailer: false,
	
	showDBGButton: false
	
});

/**
 * 
 */
RetailersEditor = {
	
	component: 'util',
	
	type: 'RetailersEditor',
	
	/**
	 * uncomment below for global DBG
	 */
	DBG: DBG.RetailersEditor,
	
	/**
	 * 
	 */
	 initTab: function() {
	 	
	 	if (this.DBG) {
	 		THROW({args:arguments},this,'initTab');
	 	}
	 	try {

		 	if (true !== this.tab.isInitialized) {
		 		this.tab.getTopToolbar().insertButton(0, this.getButtons());
		 		this.tab.isInitialized = true;
		 	}
	 	
	 	} catch(e) {
			FATAL(e, this, 'initTab');
		}
		
	 },
	
	/**
	 * Is being called by Pulse.SubEditorPanel to initialise the panel with buttons 
	 * if the RetailersEditor is being added to a Pulse.SubEditorPanel via 
	 * Pulse.SubEditorPanel.addSubEditor(editor).
	 * 
	 * @return {Object} an Array of Ext.Toolbar.Button
	 */
	getButtons: function() {
	
		buttons = [];
		
		editButtonCFG = {
			scope: this,
			disabled: true,
			handler: function() { this.showRetailerEditorWindow(null); },
			iconCls: 'addIconCls',
			text: VIEWPORT_PROPERTIES.BUTTON_TEXT_CREATE
		};
		
		if (typeof(this.editURL) == 'string' && this.editURL !== '' && 
			typeof(this.saveURL) == 'string' && this.saveURL !== '') {
			editButtonCFG.disabled = false;			
		}
		this.editButton = new Ext.Toolbar.Button(editButtonCFG);
		buttons.push(this.editButton);
		buttons.push(new Ext.Toolbar.Separator());
		
		for (var i = 0; i < this.exportButtons.length ;i++) {
			buttonCFG = {
				scope: this,
				disabled: true,
				exportNo: i,
				handler: function(_button, evt) {
					this.exportRetailer(_button.exportNo);
				},
				iconCls: 'file' + this.exportButtons[i].type + 'IconCls',
				text: VIEWPORT_PROPERTIES.BUTTON_TEXT_EXPORT + ' (' + this.exportButtons[i].type + ')'
			};
			if (typeof(this.exportButtons[i].url) == 'string' && this.exportButtons[i].url !== '') {
				buttonCFG.disabled = false;
			}
			this.exportButtons[i].button = new Ext.Toolbar.Button(buttonCFG);
			buttons.push(this.exportButtons[i].button);
			buttons.push(new Ext.Toolbar.Separator());
		}
		
		if (this.DBG && true === this.DBG.showDBGButton) {
			DBGButtonCFG = {
				scope: this,
				disabled: false,
				handler: function() { FATAL(this,this,'DBG','DBG'); },
				text: 'DBG'
			}
			buttons.push(new Ext.Toolbar.Button(DBGButtonCFG));
			buttons.push(new Ext.Toolbar.Separator());
		}
		
		
		
		return buttons;
		
	},
	
	/**
	 * 
	 */
	exportRetailer: function(exportNo) {
		document.location.href = this.exportButtons[exportNo].url + '?country=' + this.countrySelector.getCountry();
	},
	
//	/**
//	 * Returns whether the RetailersEditor has changes.
//	 * 
//	 * @return {Boolean} true, if the editor has changes, false otherwise
//	 */
//	hasChanges: function() {
//		
//		
//		// TODO		
//		
//		return false;
//	},
//	
//	/**
//	 * Returns an Object with the changes of the RetailersEditor.
//	 * 
//	 * NOTE: 	Does not check if any changes with the same parameter-name 
//	 * 			are already applied to the changes-object.
//	 * 
//	 * @param {Object} v, the object to apply the chenges to
//	 * 
//	 * @return {Object} the changes, either applied to given v, or a newly created object
//	 */
//	getChanges: function(v) {
//		
//		if (false === this.hasChanges()) {
//			return v;
//		}
//		
//		if (typeof(v) == 'undefined') {
//			v = {};
//		}
//		
//		// TODO
//		
//		return v;
//		
//	},
//	
//	/**
//	 * Commits the changes of the RetailersEditor.
//	 */
//	commit: function() {
//		
//		if (false === this.fireEvent('MSG','beforecommit',this)) {			
//			// TODO			
//			return false;			
//		}
//		
//		// TODO
//		
//		this.fireEvent('MSG','commit',this);
//
//	},
//	
//	/**
//	 * Resets the changes of the RetailersEditor.
//	 */
//	reset: function() {
//		
//		if (false === this.fireEvent('MSG','beforereset',this)) {			
//			// TODO			
//			return false;
//		}
//		
//		// TODO
//
//		this.fireEvent('MSG','reset',this);
//		
//	},
	
	/**
	 * 
	 */
	 showRetailerEditorWindow: function(id) {
	 	
	 	try {
	 	
		 	if (typeof(this.windowElement) == 'undefined' || this.windowElement === null) {
	        	this.windowElement = VIEWPORT.getEl().createChild({
			        tag: 'div', 
			        id: this.id + '.createFormWindow.el'
			    });
	        }
	
			retailerEditorWindowCFG = {
	        	html: '...',
	        	title: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT,
	            modal: true,
//	            layout: 'border',
	            autoScroll: true,
	            renderTo: this.windowElement,
	            height: 400,
	            width: 500,
	            resizable: true,
				id: this.id + '.retailerEditorWindow',
				masterEditor: this,
				url: this.editURL
	        };
	        if (typeof(id) != 'undefined' && id !== null) {
	        	retailerEditorWindowCFG.params = { id: id, country: this.countrySelector.getCountry() };
	        } else {
	        	retailerEditorWindowCFG.params = { country: this.countrySelector.getCountry() };
	        	// retailerEditorWindowCFG.retailerCountry = this.countrySelector.getCountry();
	        }
	        this.retailerEditorWindow = new Pulse.SubEditorWindow(retailerEditorWindowCFG);
	        
    		this.retailerEditorWindow.on('show',function(){
				this.initializePanel();
			});
			
			this.retailerEditorWindow.on('beforeclose',function() {
				if (true === this.retailerEditorWindow.hasChanges()) {
					Ext.Msg.confirm(
						VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE,
						VIEWPORT_PROPERTIES.TEXT_UNSAVEDCHANGES + '<br />' +
						VIEWPORT_PROPERTIES.TEXT_REALLYCONTINUE, 
			        	function(response) {
			        		// close or reload tab
				        	if('yes' === response) {
				        		// reset changes			        		
				        		this.retailerEditorWindow.reset();
				        		// close window
				        		this.retailerEditorWindow.close();				        		
				        	}
			        	}, 
			        	this
		        	);
		        	return false;
				}
			},this);
			
			this.retailerEditorWindow.on('MSG',function(msgString,editor){
				if (msgString.toUpperCase() == 'SAVESUCCESS') {
					this.gridStore.reload();
				}
			},this);
	        
	        this.retailerEditorWindow.show(this.retailerEditorWindow);

    		this.retailerEditorWindow.setPosition(this.grid.getPosition());
        
	 	} catch(e) {
	 		FATAL(e,this,'showRetailerEditorWindow');
	 	}
	 	
	 },
	
	/**
	 * Is being called during creation if 
	 * RetailersEditor.initialConfig.renderTo is being specified.
	 */
	onRender: function() {
		
		// DBG >>
		if (this.DBG) {
			THROW({props:['renderTo'],args:arguments},this,'onRender');
		}
		
		try {		
			this.buildGrid(this.renderTo);        
        	this.countrySelectorHandler(this.countrySelector);
		} catch(e) {
 			FATAL(e,this,'onRender');
		}
	},
	
	/**
	 * 
	 */
	getRecord: function() {
		return new Ext.data.Record.create([
			{ name: 'id' },
			{ name: 'country' },
			{ name: 'customerNumber' },
			{ name: 'type' },
			{ name: 'name' },
			{ name: 'contactPerson' },
			{ name: 'street' },
			{ name: 'postalCode' },
			{ name: 'city' },
			{ name: 'phoneNumber' },
			{ name: 'faxNumber' },
			{ name: 'url' }
        ]);
	},	
	
	/**
	 * @param {Object} record the record
	 */
	getStore: function(record) {
		return new Ext.data.JsonStore({
//            id: 'id',
            pruneModifiedRecords : true,
            fields: record,
            root: 'data',
            remoteSort: true,                    
            sortInfo: {
                field: this.defaultSortField,
                direction: this.defaultSortDirection
            },
            totalProperty: 'total',
            url: this.loadURL
        });
	},
	
	/**
	 * 
	 */
	getPagingToolbar: function() {
		
		// buld paging-tool with combobox to set page-size        
        this.pageSizeBox = new Ext.form.ComboBox({
		    store: new Ext.data.SimpleStore({
		        fields: ['size'],
		        sortInfo: {field: 'size', direction: "ASC"},
		        data : [[10], [20], [50], [100]]
		    }),	    
		    displayField: 'size',
		    valueField: 'size',
		    selectOnFocus: true,
		    mode: 'local',
		    triggerAction: 'all',
//			editable: false,
		    width: 60,
		    blankText: '' + this.defaultPageSize,
		    emptyText: '' + this.defaultPageSize,
		    enableKeyEvents: true
		});
		
		this.pageSizeBox.on('keydown',function(box,evt){			
			if (evt.getKey() == Ext.EventObject.ENTER) {
				this.gridStore.reload();
			}			
		},this);
        
        return new Ext.PagingToolbar({
       		// id: 'toolbar',
            displayInfo: true,
            pageSize: this.defaultPageSize,
            store: this.gridStore,
            items: ['-', this.pageSizeBox]
        });
	},
	
	/**
	 * 
	 */
	 editRetailer: function(retailerId) {
	 	if (this.DBG) {
	 		THROW({args:arguments},this,'editRetailer');
	 	}
	 	if (typeof(retailerId) != 'number') {
			return;
		}
		try {
			this.showRetailerEditorWindow(retailerId);
		} catch(e) {
			FATAL(e,this,'editRetailer');
		}
	 },
	
	/**
	 * 
	 */
	 deleteRetailer: function(retailerId) {
	 	if (this.DBG) {
	 		THROW({args:arguments},this,'deleteRetailer');
	 	}
	 	
	 	if (typeof(retailerId) != 'number') {
			return;
		}
		
		try {
			
			rec = null;
			if (typeof(this.gridStore) != 'undefined' && this.gridStore !== null) {
				this.gridStore.each(function(r) {
		    		if (r.get('id') == retailerId) {
		    			rec = r;
		    			return false;
		    		}
		    	});
			}
			if (rec === null) {
				return;
			}
	
			
			// proceed with confirm
			Ext.Msg.confirm(
				VIEWPORT_PROPERTIES.MSG_CONFIRMTITLE + ':&#160;"' + retailerId + '"',
	    		VIEWPORT_PROPERTIES.MSG_REALLYDELETE + '<br/>"' + rec.get('name') + '"',
	    		function(response) {
	    			if ('yes' === response) {
			
						requestCFG = {
							url: this.deleteURL,
							method: 'POST',
							scope: this,
							success: function(response, options) {
								decodedResponse = Ext.decode(response.responseText);
				        		if (true === decodedResponse.status) {      				
									
									this.gridStore.remove(options.rec);	
											
									this.fireEvent('MSG','deletesuccess',this);
				      				
				        		} else {
				        			PulseError.Throw({e:'SERVER.ERROR',o:decodedResponse.error},this,'deleteRetailer');
				        		}
							},
							failure: function(response, options) {
								if (typeof(response.responseText) == 'undefined') {
									PulseError.Throw({e:'REQUEST.FAILED'},this,'deleteRetailer');
						        } else {
						        	PulseError.Throw({e:'REQUEST.ERROR',o:{e:response.responseText}},this,'deleteRetailer');
						        }
							},
							rec: rec,
							params: { id: retailerId }
						};
						
						Ext.Ajax.request(requestCFG);
			
	    			}    			
	    		},
    		this);
    		
    	} catch(e) {
			FATAL(e,this,'deleteRetailer');
		}	 	
	 },
	
	/**
	 * 
	 */
	getColumnModel: function(gridSm) {
		// build column-model                
        columns = [
//            gridSm,
            {
                dataIndex: 'country',
                header: VIEWPORT_PROPERTIES.UTIL_COUNTRY,
                width: 45,
                sortable: true
            },{
                dataIndex: 'customerNumber',
                header: VIEWPORT_PROPERTIES.UTIL_CUSTOMERNUMBER,
                width: 75,
                sortable: true
            },{
                dataIndex: 'type',
                header: VIEWPORT_PROPERTIES.UTIL_TYPE,
                width: 45,
                sortable: true
            },{
                dataIndex: 'name',
                header: VIEWPORT_PROPERTIES.UTIL_NAME,
                id: 'name',
                width: 90,
                sortable: true
            },{
                dataIndex: 'contactPerson',
                header: VIEWPORT_PROPERTIES.UTIL_CONTACTPERSON,
                width: 90,
                sortable: true
            },{
                dataIndex: 'street',
                header: VIEWPORT_PROPERTIES.UTIL_STREET,
                width: 90,
                sortable: true
            },{
                dataIndex: 'postalCode',
                header: VIEWPORT_PROPERTIES.UTIL_POSTALCODE,
                width: 50,
                sortable: true
            },{
                dataIndex: 'city',
                header: VIEWPORT_PROPERTIES.UTIL_CITY,
                width: 90,
                sortable: true
            }
        ];
        
        // add edit button to rows
        if (typeof(this.editURL) != 'undefined' && this.editURL !== '') {
        	
        	_id = this.id;
        	
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'Ext.getCmp(\'' + _id + '\').editRetailer(' + id + ')',
			        		iconCls: 'editIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_EDIT
			        	});
					} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
        
        // add delete button to rows
        if (typeof(this.deleteURL) != 'undefined' && this.deleteURL !== '') {
        	columns.push({
            	header: '',
            	dataIndex: 'id',
                width: 25,
                fixed: true,
                sortable: false,
                renderer: function(id) {
					try {
			        	return FilterEditor.getGridImageField({
			        		functionString: 'Ext.getCmp(\'' + _id + '\').deleteRetailer(' + id + ')',
			        		iconCls: 'deleteIconCls_14',
			        		qtip: VIEWPORT_PROPERTIES.BUTTON_TEXT_DELET
			        	});
					} catch (renderError) {
						return '<img src="' + Ext.BLANK_IMAGE_URL + '" width="14" height="14" ' + 
							'border="0" class="errorIconCls_14" ext:qtip="render-error: ' + 
							'try to reload (' + renderError + ')"/>';
					}
		        }
            });
        }
		
		return new Ext.grid.ColumnModel(columns);
	},
	
	/**
	 * 
	 */
	countrySelectorHandler: function(countrySel) {
		if (countrySel.getCountry() === '') {
			this.editButton.disable();
			for (var i = 0; i < this.exportButtons.length ;i++) {
				this.exportButtons[i].button.disable();
			}
		} else {
			this.gridStore.reload();
			this.editButton.enable();
			for (var i = 0; i < this.exportButtons.length ;i++) {
				if (typeof(this.exportButtons[i].url == 'string') 
					&& this.exportButtons[i].url !== '') {
					this.exportButtons[i].button.enable();
				}
			}
		}
	},
	
	/**
	 * 
	 */
	getGridToolbar: function(store) {

        countrySelectorCFG = {
        	store: store, 
        	listener: false,
        	scope: this,
        	handler: 'countrySelectorHandler'
    	};
    	if (typeof(this.countries != 'undefined')) {
    		countrySelectorCFG.data = this.countries;
    	}    	
    	this.countrySelector = new Pulse.CountrySelector(countrySelectorCFG);
		
		tbArray = [VIEWPORT_PROPERTIES.TEXT_SELECTED_COUNTRY + ':&#160;'];
		
		tbArray = tbArray.concat(this.countrySelector.items);
		
		tbArray.push(new Ext.Toolbar.Separator());
		
		return tbArray;
		
	},
	
	/**
	 * @param {String} elId 
	 * 		the id of the element to render the grid to
	 */
	buildGrid: function(elId) {
		
		if (typeof(elId) != 'string' || elId === '') {
			FATAL({args:arguments},this,'buildGrid','element.id undefined');
		}
		
		gridStoreRecord = this.getRecord();
        
        this.gridStore = this.getStore(gridStoreRecord);
        
        this.pagingToolBar = this.getPagingToolbar();
        
        // add gridStore-listener for paging-toolbar
        this.gridStore.on('beforeLoad', function(store, options) {
        	
        	store.isLoading = true;
        	if (this.pageSizeBox.getRawValue() !== '') {
        		try {
        			limit = parseInt(this.pageSizeBox.getRawValue().trim(), 10);
        			this.pagingToolBar.pageSize = limit;
        			options.params.limit = limit;
        		} catch(e) { /* ignore */ }
        	} else {
        		this.pagingToolBar.pageSize = this.defaultPageSize;
    			options.params.limit = this.defaultPageSize;
        	}
        	
        	options.params.country = this.countrySelector.getCountry();


			if (typeof(this.filterIds) != 'undefined') {
	        	for (i = 0; i < this.filterIds.length; i++) {
	        		filterEl = Ext.get(config.filterIds[i]);
	 				if (typeof(filterEl) != 'undefined') {
	        			try {        			
	        				pname = filterEl.dom.name;
	        				pvalue = filterEl.getValue().trim();
	        				options.params[pname] = pvalue;
	        			
	        			} catch (e) { /* ignore */ }
	 				}
				}
        	}
        },this);
        this.gridStore.on('load', function(store, recs, options) {
        	(function(){this.isLoading = false;}).defer(500,this);
        },this.gridStore);
        this.gridStore.on('loadexception', function() {
        	(function(){this.isLoading = false;}).defer(500,this);
        },this.gridStore);
        
        // initialize filters for reload of grid onChange
        if (typeof(this.filterIds) != 'undefined') {
	        for (i = 0; i < this.filterIds.length; i++) {
	    		filterEl = Ext.get(this.filterIds[i]);
	    		if (typeof(filterEl) != 'undefined') {
	    			
	    			filterEl.on({
	    				'keyup': {
	    					scope: this.gridStore,
	    					fn: function(evt, el, opts) {
	//    						if (evt.getKey() != Ext.EventObject.ENTER) {
	//								return;
	//							}
	//    						alert(el.id + ', ' + el.value + ', ' + el.name);							
								
								// delay by 500ms
	    						(function(){ 
	    							if (true === this.isLoading) {
		                                return;
		                            }
	    							this.reload();
								}).defer(500,this);
	    					}
	    				}
	    			},this.gridStore);
	    			
	//    			pname = filterEl.dom.name;
	//    			pvalue = filterEl.getValue();
	//    			options.params[pname] = pvalue;
	    		}
	    	}
        }
        
//        gridSm = new Ext.grid.CheckboxSelectionModel();		
		
		gridCm = this.getColumnModel();
        
        gridCFG = {
            store: this.gridStore,
            cm: gridCm,
//            sm: gridSm,
            renderTo: elId,
            autoExpandColumn: 'id',
            loadMask: true,
            viewConfig: { forceFit: true },
            frame: false,
            tbar: this.getGridToolbar(this.gridStore),
            bbar: this.pagingToolBar
        };
        this.grid = new Ext.grid.GridPanel(gridCFG);
        
        // grid: resize
        if (typeof(this.tab) != 'undefined') {
        	// w
	        this.grid.setWidth(this.tab.getInnerWidth());
	        // h
	        tabMsgPanel = Ext.getCmp(this.tab.id + '.msgPanel');
	        msgPanelHeight = 0;
	        if (tabMsgPanel.isVisible()) {
	        	msgPanelHeight = tabMsgPanel.getSize().height;
	        }
	        this.grid.setHeight(this.tab.getInnerHeight() - msgPanelHeight);
	        
	        
	        // config.tab: listeners for grid: resize              
	        this.tab.on({
	            'resize': {
	            	scope: this,
	                fn: function(tab, adjWidth, adjHeight, rawWidth, rawHeight) {
	                    // w
				        tabContentPanel = Ext.getCmp(this.tab.id + '.contentPanel'); 
				        this.grid.setWidth(this.tab.getInnerWidth());
				        // h
				        tabMsgPanel = Ext.getCmp(this.tab.id + '.msgPanel');
				        msgPanelHeight = 0;
				        if (tabMsgPanel.isVisible()) {
				        	msgPanelHeight = tabMsgPanel.getSize().height;
				        }
				        this.grid.setHeight(this.tab.getInnerHeight() - msgPanelHeight);       
	                }
	            }
	        },this);
        
        }
        
        // init grid
        this.gridStore.load({
            params:{
                start: this.defaultPageStart, 
                limit: this.defaultPageSize
            }
        });
		
		return this.grid;
		
	},
	
	/**
	 * applies defaults, for fields which are not set by initialCconfig
	 */
	setDefaults: function() {
			
		// set defaults
		if (typeof(this.defaultPageStart) != 'number') {
			this.defaultPageStart = 0;
		}
		if (typeof(this.defaultPageSize) != 'number') {
        	this.defaultPageSize = 25;
		}
		if (typeof(this.defaultSortField) != 'string') {
        	this.defaultSortField = 'name';
		}
		if (typeof(this.defaultSortDirection) != 'string') { 
        	this.defaultSortDirection = 'ASC';
		}
		
		return;
		
	},
	
	/**
	 * Is being called during creation and initialises the editor.
	 */
	initComponent: function(boolInitTab) {
		
		// call super
		Pulse.util.RetailersEditor.superclass.initComponent.call(this, boolInitTab);
		
		// DBG >>
		if (this.DBG) {	
			props = ['id','type','subEditors'];
			props = props.concat(DBG.getPropertyArray(this.initialConfig));
			THROW({args:arguments,props:props},this,'initComponent.RetailersEditor');
		}
		
		try {			
			this.setDefaults();			
			if (typeof(this.tab) != 'undefined' && false !== boolInitTab) {
				this.initTab();
			}
		} catch(e) {
			FATAL(e, this, 'initComponent.RetailersEditor');
		}
	}
		
};
Pulse.util.RetailersEditor = Ext.extend(Pulse.Editor, RetailersEditor); // END :: Pulse.util.RetailersEditor

